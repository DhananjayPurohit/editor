{"version":3,"sources":["webpack:///./node_modules/vega-lite/build/src/compile/projection/component.js","webpack:///./node_modules/vega-lite/build/src/compile/data/debug.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/component.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/properties.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/line.js","webpack:///./node_modules/vega-lite/build/src/encoding.js","webpack:///./node_modules/vega-lite/build/src/aggregate.js","webpack:///./node_modules/vega-lite/build/src/sort.js","webpack:///./node_modules/vega-lite/build/src/compile/compile.js","webpack:///./node_modules/vega-lite/build/src/transformextract.js","webpack:///./node_modules/vega-lite/build/src/channeldef.js","webpack:///./node_modules/vega-lite/build/src/compositemark/index.js","webpack:///./node_modules/vega-lite/build/src/log/message.js","webpack:///./node_modules/vega-lite/build/src/normalize/core.js","webpack:///./node_modules/vega-lite/build/src/normalize/pathoverlay.js","webpack:///./node_modules/vega-lite/build/src/normalize/rangestep.js","webpack:///./node_modules/vega-lite/build/src/normalize/ruleforrangedline.js","webpack:///./node_modules/vega-lite/build/src/compile/concat.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/clear.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/translate.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/zoom.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/single.js","webpack:///./node_modules/vega-lite/build/src/compile/projection/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/projection/parse.js","webpack:///./node_modules/vega-lite/build/src/projection.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/range.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/type.js","webpack:///./node_modules/vega-lite/build/src/compile/data/index.js","webpack:///./node_modules/vega-lite/build/src/compile/data/joinaggregatefacet.js","webpack:///./node_modules/vega-lite/build/src/compile/header/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/layer.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/encode.js","webpack:///./node_modules/vega-lite/build/src/compile/layoutsize/init.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/init.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/mark.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/area.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/bar.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/geoshape.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/image.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/rule.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/text.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/tick.js","webpack:///./node_modules/vega-lite/build/src/compile/repeat.js","webpack:///./node_modules/vega-lite/build/src/transform.js","webpack:///./node_modules/vega-lite/build/src/channel.js","webpack:///./node_modules/vega-lite/build/src/config.js","webpack:///./node_modules/vega-lite/build/src/spec/base.js","webpack:///./node_modules/vega-lite/build/src/log/index.js","webpack:///./node_modules/vega-lite/build/src/spec/index.js","webpack:///./node_modules/vega-lite/build/src/spec/facet.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/assemble.js","webpack:///./node_modules/vega-lite/build/src/spec/unit.js","webpack:///./node_modules/vega-lite/build/src/timeunit.js","webpack:///./node_modules/vega-lite/build/src/compile/header/common.js","webpack:///./node_modules/vega-lite/build/src/compile/data/calculate.js","webpack:///./node_modules/vega-lite/build/src/compile/data/bin.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/scales.js","webpack:///./node_modules/vega-lite/build/src/compositemark/common.js","webpack:///./node_modules/vega-lite/build/src/compile/data/formatparse.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/properties.js","webpack:///./node_modules/vega-lite/build/src/compile/data/optimizer.js","webpack:///./node_modules/vega-lite/build/src/compile/scale/domain.js","webpack:///./node_modules/vega-lite/build/src/compile/data/source.js","webpack:///./node_modules/vega-lite/build/src/predicate.js","webpack:///./node_modules/vega-lite/build/src/compile/signal.js","webpack:///./node_modules/vega-lite/build/src/compile/data/optimizers.js","webpack:///./node_modules/vega-lite/build/src/datetime.js","webpack:///./node_modules/vega-lite/build/src/spec/concat.js","webpack:///./node_modules/vega-lite/build/src/compile/data/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/layoutsize/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/data/timeunit.js","webpack:///./node_modules/vega-lite/build/src/compile/header/component.js","webpack:///./node_modules/vega-lite/build/src/axis.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/properties.js","webpack:///./node_modules/vega-lite/build/src/compile/data/joinaggregate.js","webpack:///./node_modules/vega-lite/build/src/compile/data/aggregate.js","webpack:///./node_modules/vega-lite/build/src/compile/data/facet.js","webpack:///./node_modules/vega-lite/build/src/compositemark/base.js","webpack:///./node_modules/vega-lite/build/src/compile/buildmodel.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/project.js","webpack:///./node_modules/vega-lite/build/src/compile/layoutsize/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/resolve.js","webpack:///./node_modules/vega-lite/build/src/logical.js","webpack:///./node_modules/vega-lite/build/src/compositemark/errorbar.js","webpack:///./node_modules/vega-lite/build/src/compile/data/stack.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/rect.js","webpack:///./node_modules/vega-lite/build/src/mark.js","webpack:///./node_modules/vega-lite/build/src/index.js","webpack:///./node_modules/vega-lite/build/src/selection.js","webpack:///./node_modules/vega-lite/build/src/compile/data/optimize.js","webpack:///./node_modules/vega-lite/build/src/compile/data/window.js","webpack:///./node_modules/vega-lite/build/src/spec/toplevel.js","webpack:///./node_modules/vega-lite/build/src/compile/header/assemble.js","webpack:///./node_modules/vega-lite/build/src/scale.js","webpack:///./node_modules/vega-lite/build/src/compile/model.js","webpack:///./node_modules/vega-lite/build/src/util.js","webpack:///./node_modules/vega-lite/build/src/spec/repeat.js","webpack:///./node_modules/vega-lite/build/src/spec/layer.js","webpack:///./node_modules/vega-lite/build/src/compile/data/dataflow.js","webpack:///./node_modules/vega-lite/build/src/compile/predicate.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/interval.js","webpack:///./node_modules/vega-lite/build/src/compile/data/graticule.js","webpack:///./node_modules/vega-lite/build/src/compile/data/sequence.js","webpack:///./node_modules/vega-lite/build/src/compile/data/filter.js","webpack:///./node_modules/vega-lite/build/src/compositemark/boxplot.js","webpack:///./node_modules/vega-lite/build/src/compositemark/errorband.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/transforms.js","webpack:///./node_modules/vega-lite/build/src/compile/data/identifier.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/toggle.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/encode.js","webpack:///./node_modules/vega-lite/build/src/compile/data/impute.js","webpack:///./node_modules/vega-lite/build/src/bin.js","webpack:///./node_modules/vega-lite/build/src/header.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/mixins.js","webpack:///./node_modules/vega-lite/build/src/compile/common.js","webpack:///./node_modules/vega-lite/build/src/compile/split.js","webpack:///./node_modules/vega-lite/build/src/normalize/index.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/index.js","webpack:///./node_modules/vega-lite/build/src/data.js","webpack:///./node_modules/vega-lite/build/src/legend.js","webpack:///./node_modules/vega-lite/build/src/title.js","webpack:///./node_modules/vega-lite/build/src/spec/map.js","webpack:///./node_modules/vega-lite/build/src/stack.js","webpack:///./node_modules/vega-lite/build/src/compile/baseconcat.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/inputs.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/transforms/nearest.js","webpack:///./node_modules/vega-lite/build/src/compile/selection/multi.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/config.js","webpack:///./node_modules/vega-lite/build/src/compile/data/expressions.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/guide.js","webpack:///./node_modules/vega-lite/build/src/compile/data/density.js","webpack:///./node_modules/vega-lite/build/src/compile/data/filterinvalid.js","webpack:///./node_modules/vega-lite/build/src/compile/data/flatten.js","webpack:///./node_modules/vega-lite/build/src/compile/data/fold.js","webpack:///./node_modules/vega-lite/build/src/compile/data/geojson.js","webpack:///./node_modules/vega-lite/build/src/compile/data/geopoint.js","webpack:///./node_modules/vega-lite/build/src/compile/facet.js","webpack:///./node_modules/vega-lite/build/src/compile/data/assemble.js","webpack:///./node_modules/vega-lite/build/src/compile/data/loess.js","webpack:///./node_modules/vega-lite/build/src/compile/data/lookup.js","webpack:///./node_modules/vega-lite/build/src/compile/data/regression.js","webpack:///./node_modules/vega-lite/build/src/compile/data/pivot.js","webpack:///./node_modules/vega-lite/build/src/compile/data/sample.js","webpack:///./node_modules/vega-lite/build/src/compile/repeater.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/parse.js","webpack:///./node_modules/vega-lite/build/src/compile/unit.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/valueref.js","webpack:///./node_modules/vega-lite/build/src/guide.js","webpack:///./node_modules/vega-lite/build/src/compile/legend/component.js","webpack:///./node_modules/vega-lite/build/src/compile/axis/component.js","webpack:///./node_modules/vega-lite/build/src/compile/mark/point.js","webpack:///./node_modules/vega-lite/build/src/vega.schema.js","webpack:///./node_modules/vega-lite/build/src/type.js"],"names":["ProjectionComponent","name","specifiedProjection","size","data","super","Object","assign","this","merged","checkLinks","nodes","node","child","children","parent","console","error","ScaleComponent","typeWithExplicit","setWithExplicit","get","d","length","parseScaleProperty","model","property","localScaleComponents","component","scales","forEach","channel","specifiedScale","specifiedScales","localScaleCmpt","mergedScaleCmpt","getScaleComponent","fieldDef","config","specifiedValue","sType","supportedByScaleType","channelIncompatability","undefined","scalePropertyNotWorkWithScaleType","copyKeyFromObject","value","scaleType","scalePadding","scalePaddingInner","specifiedDomain","markDef","scaleConfig","scale","type","sort","bin","binSignal","field","getSignalName","step","bins","interpolate","TIME","UTC","nice","barConfig","continuousPadding","orient","timeUnit","continuousBandSize","POINT","pointPadding","padding","bar","paddingValue","mark","bandPaddingInner","barBandPaddingInner","rectBandPaddingInner","paddingInner","paddingInnerValue","BAND","bandPaddingOuter","paddingOuter","reverse","first","last","zero","getDefaultValue","domain","set","parseUnitScaleProperty","parseNonUnitScaleProperty","parseScaleRange","valueWithExplicit","childComponent","childValueWithExplicit","getWithExplicit","v1","v2","line","vgMark","encodeEntry","width","height","align","baseline","color","vgChannel","trail","channelHasField","encoding","channelDef","isAggregate","aggregate","extractTransformsFromEncoding","oldEncoding","groupby","timeUnits","aggOp","remaining","guide","isTitleDefined","title","newField","forAs","newFieldDef","allowDisabling","isPositionChannel","op","argmax","argmin","aggregateEntry","as","push","binSuffix","secondaryChannel","format","axis","shortTimeLabels","join","formatType","normalizeEncoding","reduce","normalizedEncoding","invalidEncodingChannel","markSupported","primaryFieldDef","markChannelCompatible","incompatibleChannel","LINE_WITH_VARYING_SIZE","filled","droppingColor","fill","stroke","defs","emptyFieldDef","fieldDefs","arr","channelDefArray","def","condition","mapping","f","thisArg","el","call","init","r","map","r1","pathGroupingFields","details","AGGREGATE_OP_INDEX","average","count","distinct","max","mean","median","min","missing","q1","q3","ci0","ci1","stderr","stdev","stdevp","sum","valid","values","variance","variancep","MULTIDOMAIN_SORT_OP_INDEX","isArgminDef","a","isArgmaxDef","isAggregateOp","COUNTING_OPS","isCountingAggregateOp","isMinMaxOp","SUM_OPS","SHARED_DOMAIN_OP_INDEX","DEFAULT_SORT_OP","SORT_BY_CHANNEL_INDEX","x","y","strokeWidth","shape","fillOpacity","strokeOpacity","opacity","text","isSortByChannel","c","isSortByEncoding","isSortField","isSortArray","compile","inputSpec","opt","logger","fieldTitle","spec","autosize","parse","topLevelProperties","datasets","usermeta","vgConfig","concat","assembleSelectionData","projections","assembleProjections","assembleTitle","style","assembleGroupStyle","assembleGroupEncodeEntry","layoutSignals","assembleLayoutSignals","filter","signal","$schema","description","encode","update","assembleGroup","assembleSelectionTopLevelSignals","assembleTopLevelModel","topLevelSpec","layoutSize","droppingFit","sizeType","inverseSizeType","getTopLevelProperties","extractor","transform","oldTransforms","extractTransforms","isConditionalSelection","isRepeatRef","toFieldDefBase","isSortableFieldDef","isTypedFieldDef","getBand","fieldDef2","isMidPoint","isPositionFieldDef","band","hasBand","isConditionalDef","hasConditionalFieldDef","isFieldDef","hasConditionalValueDef","isValueDef","isStringFieldDef","isScaleFieldDef","isTextFieldDef","vgField","prefix","suffix","argAccessor","isCount","fn","nofn","isOpFieldDef","String","expr","isDiscrete","Error","invalidFieldType","isContinuous","defaultTitleFormatter","toUpperCase","functionalTitleFormatter","countTitle","verbalTitleFormatter","titleFormatter","setTitleFormatter","formatter","resetTitleFormatter","includeDefault","guideTitle","getGuide","defaultTitle","legend","header","getFieldDef","getTypedFieldDef","normalize","primitiveType","primitiveChannelDef","normalizeFieldDef","fd","invalidAggregate","normalizeBin","fullType","invalidFieldTypeForCountAggregate","newType","defaultType","missingFieldType","compatible","warning","facetChannelShouldBeDiscrete","COMPATIBLE","channelCompatibility","sub","substr","charAt","order","maxbins","binned","isTimeFormatFieldDef","isTimeFieldDef","valueExpr","v","time","undefinedIfExprNotRequired","JSON","stringify","valueArray","binRequiresRange","warn","compositeMarkRegistry","add","run","parts","normalizer","getAllCompositeMarks","invalidSpec","FIT_NON_SINGLE","cannotProjectOnChannelWithoutField","nearestNotSupportForContinuous","selectionNotSupported","selectionNotFound","SCALE_BINDINGS_CONTINUOUS","noSuchRepeatedValue","columnsNotSupportByRowCol","CONCAT_CANNOT_SHARE_AXIS","REPEAT_CANNOT_SHARE_AXIS","unrecognizedParse","p","differentParse","local","ancestor","invalidTransformIgnored","NO_FIELDS_NEEDS_AS","encodingOverridden","channels","projectionOverridden","parentProjection","projection","nonZeroScaleUsedWithLengthMark","zeroFalse","latLongDeprecated","newChannel","markOrFacet","when","facetChannelDropped","discreteChannelCannotEncode","lineWithRange","hasX2","hasY2","orientOverridden","original","actual","CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN","RANGE_STEP_DEPRECATED","cannotUseScalePropertyWithNonColor","prop","unaggregateDomainHasNoEffectForRawField","unaggregateDomainWithNonSharedDomainOp","unaggregatedDomainWithLogScale","cannotApplySizeToNonOrientedMark","scaleTypeNotWorkWithChannel","defaultScaleType","scaleTypeNotWorkWithFieldDef","propName","scaleTypeNotWorkWithMark","stepDropped","mergeConflictingProperty","propertyOf","toString","mergeConflictingDomainProperty","independentScaleMeansIndependentGuide","domainSortDropped","UNABLE_TO_MERGE_DOMAINS","MORE_THAN_ONE_SORT","INVALID_CHANNEL_FOR_AXIS","cannotStackRangedMark","cannotStackNonLinearScale","stackNonSummativeAggregate","invalidTimeUnit","unitName","dayReplacedWithDate","fullTimeUnit","replace","droppedDay","errorBarCenterAndExtentAreNotNeeded","center","extent","errorBarCenterIsUsedWithWrongExtent","errorBarContinuousAxisHasCustomizedAggregate","compositeMark","errorBarCenterIsNotNeeded","errorBand1DNotSupport","channelRequiredForBinned","domainRequiredForThresholdScale","CoreNormalizer","arguments","nonFacetUnitNormalizers","params","hasRow","hasColumn","hasFacet","mapFacetedUnit","parentEncoding","mapUnitWithParentEncodingOrProjection","normalizeLayerOrUnit","mapLayerOrUnit","bind","unitNormalizer","hasMatchingType","repeat","columns","facet","mapFacet","mergedProjection","mergeProjection","mergedEncoding","mergeEncoding","mapUnit","_a","row","column","selection","_","outerSpec","facetMapping","layout","getFacetMappingAndLayout","facets","spacing","defWithoutLayout","otherParams","rest","mapLayer","overriden","o","key","dropLineAndPoint","point","_point","_line","dropLineAndPointFromConfig","getPointOverlay","markConfig","getLineOverlay","PathOverlayNormalizer","pointOverlay","lineOverlay","layer","stackProps","overlayEncoding","fieldChannel","stackFieldChannel","offset","stack","RangeStepNormalizer","sizeMixins","defWithoutScale","rangeStep","scaleWithoutRangeStep","RuleForRangedLineNormalizer","mainChannelDef","x2","y2","ConcatModel","parentGivenName","repeater","resolve","concatType","getChildren","i","getName","vconcat","hconcat","bounds","clear","has","selCmpt","selDef","topLevelSignals","signals","project","items","proj","idx","findIndex","n","on","events","addClear","vIdx","visual","tIdx","ANCHOR","DELTA","translate","hasScales","anchor","e","between","markname","onDelta","delta","s","sizeSg","getSizeSignalRef","scaleCmpt","sign","zoom","sx","scaleName","sy","force","base","single","modifyExpr","assembleProjectionForModel","assembleProjectionsForModelAndChildren","combine","ref","fit","sources","source","lookupDataSource","parseProjection","hasProjection","posssiblePair","requestDataName","gatherFitData","projectionName","parseUnitProjection","nonUnitProjection","mergable","merge","second","allPropertiesShared","explicit","mergeIfNoConflict","modelProjection","isFit","renameProjection","parseNonUnitProjections","PROJECTION_PROPERTIES","assembleScales","assembleScalesForModel","scaleComponent","domainRaw","domains","_d","_dr","range","_r","otherScaleProps","scaleRange","assembleScaleRange","parseScales","ignoreRange","parseScaleCore","scaleComponents","parseUnitScaleCore","scaleTypeWithExplicitIndex","explicitScaleType","childScaleType","scaleTypeTieBreaker","childScale","renameScale","parseNonUnitScaleCore","st1","st2","RANGE_PROPERTIES","getSizeType","parseUnitScaleRange","rangeWithExplicit","parseScheme","sizeChannel","sizeValue","h","view","w","sizeSignal","fromName","rangeMin","minBandSize","minStrokeWidth","minFontSize","minSize","sizeRangeMin","rangeMax","xyStepSignals","getBinStepSignal","maxBandSize","minXYStep","maxStrokeWidth","maxFontSize","maxSize","pointStep","Math","pow","MAX_SIZE_RANGE_STEP_RATIO","sizeRangeMax","cardinality","interpolateRange","quantileCount","quantizeCount","defaultContinuousToDiscreteCount","minOpacity","maxOpacity","defaultRange","parseRangeForChannel","updatedName","binCount","scheme","viewConfig","widthStep","heightStep","AncestorParse","implicit","parseNothing","clone","makeJoinAggregateFromFacet","newParent","joinaggregate","parseFacetHeaders","parseFacetHeader","mergeChildAxis","titleConfig","layoutHeaders","labelOrient","labels","headerType","facetFieldDef","makeHeaderComponent","axes","headerChannel","layoutHeader","axisComponent","mainAxis","mainExtracted","LayerModel","parentGivenSize","parseData","parseSelections","parseMarkGroup","sg","assembleSignals","db","flatMap","assembleMarks","legends","assembleLegends","specifiedLabelsSpec","labelsSpec","isUTCScale","initLayoutSize","normalizeMarkDef","graticule","specifiedOrient","xIsContinuous","yIsContinuous","xDef","yDef","xIsTemporal","yIsTemporal","filledConfig","cursor","href","markCompiler","area","circle","geoshape","image","rect","rule","square","tick","parseMarkGroups","pathMarks","getMarkGroups","fromPrefix","FACETED_PATH_PREFIX","from","group","marks","parsePathMark","clip","xScale","yScale","scaleClip","projectionClip","dimensionChannel","dimensionChannelDef","fieldDefToSort","impute","getSort","postEncodingTransform","defaultRef","defaultRef2","shapeDef","latitude","longitude","vgSizeChannel","vgThicknessChannel","defaultValue","defaultSize","thickness","markPropOrConfig","bandSize","RepeatModel","repeatValues","_initChildren","repeatValue","rowValue","columnValue","childRepeat","isFilter","t","isImputeSequence","isPivot","isDensity","isRegression","isLoess","isLookup","isSample","isWindow","isJoinAggregate","isFlatten","isCalculate","isBin","isImpute","isTimeUnit","isStack","isFold","normalizeTransform","ROW","COLUMN","FACET","X","Y","X2","Y2","LATITUDE","LONGITUDE","LATITUDE2","LONGITUDE2","COLOR","FILL","STROKE","SHAPE","SIZE","OPACITY","FILLOPACITY","STROKEOPACITY","STROKEWIDTH","TEXT","ORDER","DETAIL","KEY","TOOLTIP","HREF","URL","POSITION_CHANNEL_INDEX","getPositionChannelFromLatLong","GEOPOSITION_CHANNEL_INDEX","longitude2","latitude2","isGeoPositionChannel","GEOPOSITION_CHANNELS","UNIT_CHANNEL_INDEX","detail","tooltip","url","isColorChannel","FACET_CHANNEL_INDEX","FACET_CHANNELS","CHANNEL_INDEX","CHANNELS","_o","_tt1","SINGLE_DEF_CHANNEL_INDEX","_c","_f","SINGLE_DEF_UNIT_CHANNEL_INDEX","isSingleDefUnitChannel","str","isChannel","SECONDARY_RANGE_CHANNEL","isSecondaryRangeChannel","getMainRangeChannel","getSecondaryRangeChannel","_x","_y","_x2","_y2","_latitude","_longitude","_latitude2","_longitude2","NONPOSITION_CHANNEL_INDEX","NONPOSITION_CHANNELS","POSITION_SCALE_CHANNEL_INDEX","POSITION_SCALE_CHANNELS","getPositionScaleChannel","_t","_tt","_hr","_u","_dd","_k","_oo","NONPOSITION_SCALE_CHANNEL_INDEX","NONPOSITION_SCALE_CHANNELS","isNonPositionScaleChannel","supportLegend","SCALE_CHANNEL_INDEX","SCALE_CHANNELS","isScaleChannel","supportMark","ALL_MARKS","ALL_MARKS_EXCEPT_GEOSHAPE","getSupportedMark","_g","rangeType","getViewConfigContinuousSize","getViewConfigDiscreteStep","getViewConfigDiscreteSize","DEFAULT_STEP","defaultConfig","timeFormat","continuousWidth","continuousHeight","boxplot","box","outliers","ticks","errorbar","errorband","borders","axisX","axisY","axisLeft","axisRight","axisTop","axisBottom","axisBand","titlePadding","labelPadding","headerColumn","headerRow","headerFacet","initConfig","MARK_STYLES","VL_ONLY_CONFIG_PROPERTIES","VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","stripAndRedirectConfig","markType","vlOnlyMarkSpecificConfigs","redirectConfig","m","toProp","compositeMarkPart","propConfig","isStep","DEFAULT_SPACING","COMPOSITION_LAYOUT_PROPERTIES","extractCompositionLayout","specType","compositionConfig","spacingConfig","message","main","current","newLogger","reset","args","debug","isFacetMapping","isFacetFieldDef","isFacetSpec","assembleInit","isExpr","wrap","assembled","assembleUnitSelectionSignals","selCompiler","txCompiler","cleanupEmptyOnArray","assembleFacetSignals","unshift","assembleTopLevelSignals","hasSelections","store","assembleUnitSelectionData","fields","insert","unit","escape","assembleUnitSelectionMarks","assembleLayerSelectionMarks","assembleSelectionScaleDomain","selDomain","getSelectionComponent","encodings","isUnitSpec","TimeUnit","YEAR","MONTH","DAY","DATE","HOURS","MINUTES","SECONDS","MILLISECONDS","YEARMONTH","YEARMONTHDATE","YEARMONTHDATEHOURS","YEARMONTHDATEHOURSMINUTES","YEARMONTHDATEHOURSMINUTESSECONDS","MONTHDATE","MONTHDATEHOURS","HOURSMINUTES","HOURSMINUTESSECONDS","MINUTESSECONDS","SECONDSMILLISECONDS","QUARTER","YEARQUARTER","QUARTERMONTH","YEARQUARTERMONTH","UTCYEAR","UTCMONTH","UTCDAY","UTCDATE","UTCHOURS","UTCMINUTES","UTCSECONDS","UTCMILLISECONDS","UTCYEARMONTH","UTCYEARMONTHDATE","UTCYEARMONTHDATEHOURS","UTCYEARMONTHDATEHOURSMINUTES","UTCYEARMONTHDATEHOURSMINUTESSECONDS","UTCMONTHDATE","UTCMONTHDATEHOURS","UTCHOURSMINUTES","UTCHOURSMINUTESSECONDS","UTCMINUTESSECONDS","UTCSECONDSMILLISECONDS","UTCQUARTER","UTCYEARQUARTER","UTCQUARTERMONTH","UTCYEARQUARTERMONTH","LOCAL_SINGLE_TIMEUNIT_INDEX","year","quarter","month","day","date","hours","minutes","seconds","milliseconds","TIMEUNIT_PARTS","isLocalSingleTimeUnit","UTC_SINGLE_TIMEUNIT_INDEX","utcyear","utcquarter","utcmonth","utcday","utcdate","utchours","utcminutes","utcseconds","utcmilliseconds","isUtcSingleTimeUnit","UTC_MULTI_TIMEUNIT_INDEX","utcyearquarter","utcyearquartermonth","utcyearmonth","utcyearmonthdate","utcyearmonthdatehours","utcyearmonthdatehoursminutes","utcyearmonthdatehoursminutesseconds","utcquartermonth","utcmonthdate","utcmonthdatehours","utchoursminutes","utchoursminutesseconds","utcminutesseconds","utcsecondsmilliseconds","UTC_TIMEUNIT_INDEX","isUTCTimeUnit","getLocalTimeUnit","TIMEUNIT_INDEX","yearquarter","yearquartermonth","yearmonth","yearmonthdate","yearmonthdatehours","yearmonthdatehoursminutes","yearmonthdatehoursminutesseconds","quartermonth","monthdate","monthdatehours","hoursminutes","hoursminutesseconds","minutesseconds","secondsmilliseconds","getTimeUnitParts","part","containsTimeUnit","index","indexOf","fieldExpr","end","fieldRef","utc","lastTimeUnit","dateExpr","tu","func","getDateTimeComponents","dateComponents","hasYear","timeComponents","dateTimeComponents","formatExpression","expression","normalizeTimeUnit","getHeaderChannel","getHeaderProperty","headerSpecificConfig","getHeaderProperties","properties","props","CalculateNode","_dependentFields","calculate","forEachFieldDef","sortValue","equal","sortArrayIndexField","Set","binKey","getBinSignalName","createBinComponent","isBinTransform","normalizedBin","extentSignal","getSignalsFromModel","binComponent","BinNode","reduceFieldDef","binComponentIndex","startField","endField","formulaAs","formula","rangeFormula","other","renameSignal","removeChild","remove","flat","binAs","remainingAs","binTrans","scaleBindings","bound","isTopLevelLayer","namedSg","substring","filterTooltipWithAggregatedField","filteredEncoding","customTooltipWithAggregatedField","customTooltipWithoutAggregatedField","getCompositeMarkTooltip","tooltipSummary","continuousAxisChannelDef","encodingWithoutContinuousAxis","withFieldName","fieldPrefix","titlePrefix","makeCompositeAggregatePartFactory","compositeMarkDef","continuousAxis","sharedEncoding","compositeMarkConfig","partName","positionPrefix","endPositionPrefix","extraEncoding","partLayerMixins","partBaseSpec","compositeMarkContinuousAxis","continuousAxisChannelDef2","continuousAxisChannelDefError","continuousAxisChannelDefError2","filterAggregateFromChannelDef","continuousAxisWithoutAggregate","compositeMarkOrient","unquote","pattern","slice","ParseNode","_parse","ancestorParse","makeWithAncestors","val","oneOf","mainChannel","mainFieldDef","parsedAs","copyAll","formatParse","onlyNested","parseExpression","defaultGrid","gridScale","gridChannel","labelAngle","specifiedAxis","angle","defaultLabelBaseline","axisOrient","defaultLabelAlign","defaultLabelFlush","defaultLabelOverlap","defaultTickCount","vals","defaultZindex","isDataSourceNode","OptimizerBase","_mutated","BottomUpOptimizer","_continue","continueFlag","mutatedFlag","setContinue","setMutated","next","optimizeNextFromLeaves","TopDownOptimizer","parseScaleDomain","reason","canUseUnaggregatedDomain","useUnaggregatedDomain","normalizeUnaggregatedDomain","scaleDomain","parseSingleChannelDomain","domainsTieBreaker","parseDomainForChannel","isFaceted","facetParent","parseUnitScaleDomain","dr","parseNonUnitScaleDomain","mapDomainToDataSignal","isStacked","normalizeSortField","fieldDefToSortBy","domainSort","getFieldFromDomain","nonUnionDomain","assembleDomain","uniqueDomains","_s","sorts","unionDomainSorts","allData","mergeDomains","SourceNode","_data","defaultExtension","exec","_generator","_name","isSelectionPredicate","predicate","isFieldEqualPredicate","isFieldLTPredicate","lt","isFieldLTEPredicate","lte","isFieldGTPredicate","gt","isFieldGTEPredicate","gte","isFieldRangePredicate","isFieldOneOfPredicate","in","isFieldPredicate","predicateValueExpr","fieldFilterExpression","useInRange","predicateValuesExpr","isFieldValidPredicate","lower","upper","exprs","normalizePredicate","SignalRefWrapper","exprGenerator","defineProperty","enumerable","rename","signalName","MoveParseUp","flags","numChildren","producedFields","dependentFields","swapWithParent","MergeIdenticalNodes","mergedNode","shift","hashes","hash","buckets","k","mergeNodes","RemoveUnusedSubtrees","RemoveDuplicateTimeUnits","pfields","MergeTimeUnits","timeUnitChildren","combination","pop","moveFacetDown","facetMain","moveMainDownToFacet","cloner","copy","newName","getSource","setSource","outputNodes","addDimensions","RemoveUnnecessaryNodes","isRequired","MergeParse","originalChildren","parseChildren","commonParse","conflictingParse","parseNode","mergedParseNode","childNode","MergeAggregates","aggChildren","groupedAggregates","agg","groupBys","groupBy","mergeableAggs","mergedAggs","MergeBins","moveBinsUp","promotableBins","remainingBins","promotedBin","remainingBin","MergeOutputs","otherChildren","mainOutput","lastOutput","theChild","SUNDAY_YEAR","isDateTime","MONTHS","SHORT_MONTHS","DAYS","SHORT_DAYS","dateTimeExpr","toJSON","units","lowerM","toLowerCase","monthIndex","shortM","shortMonthIndex","normalizeMonth","q","normalizeQuarter","lowerD","dayIndex","shortD","shortDayIndex","normalizeDay","unitsString","Function","isAnyConcatSpec","isVConcatSpec","isHConcatSpec","isConcatSpec","findSource","otherData","hasName","dataName","mesh","feature","head","facetRoot","existingSource","parseRoot","outputNodeRefCounts","sequence","makeExplicit","parentIsLayer","makeFromEncoding","transforms","lookupCounter","transformNode","derivedType","makeImplicitFromFilterTransform","makeFromTransform","make","parseTransformArray","makeImplicitFromEncoding","parseAll","parseAllForSortIndex","rawName","raw","mainName","facetName","parseLayerLayoutSize","parseChildrenLayoutSize","layoutSizeCmpt","parseNonUnitLayoutSizeForChannel","parseRepeatLayoutSize","SIZE_TYPE_TO_MERGE","parseConcatLayoutSize","sizeTypeToMerge","parseLayoutSize","mergedSize","childSize","scaleResolve","parseUnitLayoutSize","specifiedSize","defaultUnitSize","TimeUnitNode","timeUnitComponent","channelDef2","HEADER_CHANNELS","HEADER_TYPES","CONDITIONAL_AXIS_PROP_INDEX","labelAlign","vgProp","labelBaseline","labelColor","labelFont","labelFontSize","labelFontStyle","labelFontWeight","labelOpacity","gridColor","gridDash","gridDashOffset","gridOpacity","gridWidth","tickColor","tickDash","tickDashOffset","tickOpacity","tickWidth","isConditionalAxisValue","AXIS_PARTS","AXIS_PROPERTY_TYPE","grid","bandPosition","domainColor","domainOpacity","domainWidth","labelBound","labelFlush","labelFlushOffset","labelLimit","labelOverlap","maxExtent","minExtent","position","tickExtra","tickOffset","tickRound","tickSize","titleAlign","titleAngle","titleBaseline","titleColor","titleFont","titleFontSize","titleFontWeight","titleLimit","titleOpacity","titleX","titleY","tickCount","zindex","COMMON_AXIS_PROPERTIES_INDEX","domainDash","domainDashOffset","labelSeparation","tickMinStep","titleAnchor","titleFontStyle","AXIS_PROPERTIES_INDEX","labelExpr","isAxisProperty","defaultSymbolType","shapeChannelDef","markShape","alwaysReturn","direction","legendConfig","legendType","defaultDirection","defaultGradientLength","gradientHorizontalMaxLength","gradientHorizontalMinLength","gradientVerticalMaxLength","gradientVerticalMinLength","gradientLengthSignal","JoinAggregateTransformNode","out","getDefaultName","joinAggregateFieldDef","ops","AggregateNode","dimensions","measures","meas","dims","argField","posChannel","addDimension","parentMeasures","childMeasures","mergeMeasures","alias","FacetNode","sortField","sortIndexField","childModel","depFields","childIndependentFieldsWithStep","childScaleComponent","crossedDataName","childChannel","hasSharedAxis","headers","stop","start","assembleRowColumnHeaderData","getChildIndependentFieldsWithStep","facetData","assembleFacetHeaderData","CompositeMarkNormalizer","buildModel","unitSize","setAxisEncode","vgRef","assembleAxis","axisCmpt","kind","propType","propValue","test","hasAxisPart","titleString","assembleAxisSignals","assembleAxes","axisComponents","TUPLE_FIELDS","SelectionProjectionComponent","parsed","counter","cfg","parseInit","allSignals","sizeSignals","stepSignal","sizeExpr","defaultScaleResolve","parseGuideResolve","channelScaleResolve","isLogicalOr","or","isLogicalAnd","and","isLogicalNot","not","forEachLeaf","subop","normalizeLogicalOperand","ERRORBAR","ERRORBAR_PARTS","errorBarNormalizer","normalizeErrorBar","ticksOrient","tooltipEncoding","errorBarParams","makeErrorBarPart","errorBarOrientAndInputType","xError","xError2","yError","yError2","errorBarIsInputTypeRaw","inputType","isTypeAggregatedUpperLower","errorBarIsInputTypeAggregatedUpperLower","isTypeAggregatedError","errorBarIsInputTypeAggregatedError","_p","errorBarSpecificAggregate","postAggregateCalculates","tooltipTitleWithFieldName","continuousFieldName","getTitlePrefix","centerOp","lowerExtentOp","upperExtentOp","postAggregateCalculate","RegExp","errorBarAggregationAndCalculation","_b","oldEncodingWithoutContinuousAxis","oldAggregate","oldGroupBy","operation","StackNode","_stack","stackTransform","sortFields","sortOrder","normalizedAs","every","isValidAsArray","stackField","facetby","stackProperties","dimensionFieldDef","groupbyChannel","cDef","stackby","stackBy","by","_field","getStackByFields","orderDef","getGroupbyFields","method","rectPosition","channel2","hasSizeDef","isBarBand","binSpacing","defaultSizeRef","discreteBandSize","AREA","BAR","IMAGE","LINE","RECT","RULE","TICK","TRAIL","CIRCLE","SQUARE","GEOSHAPE","MARK_INDEX","isPathMark","isRectBasedMark","PRIMITIVE_MARKS","isMarkDef","FILL_STROKE_CONFIG","VL_ONLY_MARK_CONFIG_PROPERTIES","VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX","defaultMarkConfig","invalid","timeUnitBand","defaultBarConfig","timeUnitBandPosition","defaultRectConfig","defaultTickConfig","getMarkType","version","SELECTION_ID","empty","multi","toggle","interval","FACET_SCALE_PREFIX","MAX_OPTIMIZATION_RUNS","getLeaves","roots","leaves","append","isTrue","runOptimizer","optimizer","runFlags","some","optimizationDataflowHelper","dataComponent","mutatedFlags","optimizeDataflow","firstPassCounter","secondPassCounter","WindowTransformNode","window","windowFieldDef","param","frame","ignorePeers","isFitType","autoSizeType","getFitType","_normalizeAutoSize","normalizeAutoSize","TOP_LEVEL_PROPERTIES","extractTopLevelProperties","assembleTitleGroup","titleOrient","role","defaultHeaderGuideBaseline","defaultHeaderGuideAlign","assembleHeaderProperties","assembleHeaderGroups","groups","headerCmpt","assembleHeaderGroup","assembleLabelTitle","labelAnchor","titleTextExpr","isFacetWithoutRowCol","hasAxes","LAYOUT_TITLE_BAND","getLayoutTitleBand","assembleLayoutTitleBand","headerComponentIndex","titleBand","headerComponent","propertiesMap","ScaleType","LINEAR","LOG","POW","SQRT","SYMLOG","QUANTILE","QUANTIZE","THRESHOLD","BIN_ORDINAL","ORDINAL","SCALE_CATEGORY_INDEX","linear","log","sqrt","symlog","ordinal","quantile","quantize","threshold","SCALE_TYPES","scaleCompatible","scaleType1","scaleType2","scaleCategory1","scaleCategory2","SCALE_PRECEDENCE_INDEX","scaleTypePrecedence","CONTINUOUS_TO_CONTINUOUS_SCALES","CONTINUOUS_TO_CONTINUOUS_INDEX","CONTINUOUS_TO_DISCRETE_INDEX","CONTINUOUS_DOMAIN_SCALES","CONTINUOUS_DOMAIN_INDEX","DISCRETE_DOMAIN_INDEX","hasDiscreteDomain","hasContinuousDomain","isContinuousToContinuous","isContinuousToDiscrete","defaultScaleConfig","isExtendedScheme","isSelectionDomain","SCALE_PROPERTY_INDEX","round","clamp","exponent","constant","NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX","NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES","fieldDefType","generateScaleTypeIndexKey","channelSupportScaleType","scaleTypeSupportDataType","generateScaleTypeIndex","scaleTypeSupportProperty","channelScalePropertyIncompatability","specifiedType","NameMap","nameMap","oldName","isUnitModel","isFacetModel","isRepeatModel","isConcatModel","isLayerModel","Model","correctDataNames","scaleNameMap","projectionNameMap","signalNameMap","parseScale","renameTopLevelLayoutSizeSignal","parseAxesAndHeaders","parseLegends","baseView","isTopLevel","assembleEncodeFromView","assembleDefaultLayout","headerMarks","titleNoEncoding","nonMark","assembleLayout","assembleHeaderMarks","hasDescendantWithFieldOnChannel","fullName","refCounts","oldSignalName","originalScaleName","localScaleComponent","variableName","origName","sel","ModelWithField","getMapping","acc","cd","deepEqual","duplicate","pick","obj","omit","prototype","charCodeAt","isNullOrFalse","contains","array","item","entries","mergeDeep","dest","src","deepMerge_","constructor","unique","results","u","setEqual","b","hasIntersection","prefixGenerator","prefixes","wrappedWithAccessors","fieldIntersection","keys","_vals","_entries","isBoolean","varName","alphanumericS","match","logicalExpr","cb","deleteNestedProperty","orderedProps","titlecase","accessPathWithDatum","path","datum","pieces","flatAccessWithDatum","replacePathInField","removePathFromField","accessPathDepth","getFirstDefined","arg","idCounter","uniqueId","id","internalField","isInternalField","normalizeAngle","isRepeatSpec","isLayerSpec","DataFlowNode","debugName","_children","_parent","addChild","loc","splice","oldChild","OutputNode","_source","cloneObj","_hash","filterOp","parseUnitSelection","selDefs","selCmpts","selectionConfig","parseSelectionPredicate","selections","dfnode","stores","predicateStr","vname","tunode","insertAsParentOf","BRUSH","SCALE_TRIGGER","fieldsSg","dataSignals","scaleTriggers","filterExpr","evt","filters","cs","dname","scaled","coord","channelSignals","toNum","xvname","yvname","vgStroke","enter","GraticuleNode","SequenceNode","FilterNode","BOXPLOT","BOXPLOT_PARTS","boxPlotNormalizer","normalizeBoxPlot","getBoxPlotType","_encoding","boxPlotType","boxOrient","boxplotSpecificAggregate","boxParamsQuartiles","boxParams","encodingWithoutSizeColorAndContinuousAxis","makeBoxPlotPart","makeBoxPlotExtent","makeBoxPlotBox","makeBoxPlotMidTick","fiveSummaryTooltipEncoding","endTick","whiskerTooltipEncoding","whiskerLayers","boxLayers","filteredLayersMixins","lowerBoxExpr","upperBoxExpr","iqrExpr","lowerWhiskerExpr","upperWhiskerExpr","joinaggregateTransform","filteredWhiskerSpec","encodingWithoutSizeColorContinuousAxisAndTooltip","outlierLayersMixins","continousAxisField","ERRORBAND","ERRORBAND_PARTS","errorBandNormalizer","normalizeErrorBand","errorBandDef","makeErrorBandPart","is2D","bandMark","bordersMark","tension","compilers","forEachTransform","IdentifierNode","TOGGLE","tpl","legendCmp","symbols","symbolsSpec","getMaxValue","symbolBaseFillColor","getFirstConditionValue","gradient","gradientSpec","getConditionValue","conditionalDef","reducer","ImputeNode","keyvals","imputeTransform","imputedChannel","keyChannel","groupbyFields","initialImpute","processSequence","setImputedField","binToString","isBinning","isBinParams","isBinned","autoMaxBins","HEADER_TITLE_PROPERTIES_MAP","HEADER_LABEL_PROPERTIES_MAP","HEADER_TITLE_PROPERTIES","HEADER_LABEL_PROPERTIES","configValue","transparentIfNeeded","defaultFill","defaultStroke","colorVgChannel","fillStrokeMarkDefAndConfig","nonPosition","baseEncodeEntry","ignore","markDefProperties","wrapAllFieldsInvalid","valueRef","allFieldsInvalidPredicate","valueIfDefined","filterIndex","aggregator","defined","wrapCondition","refFn","conditionValueRef","tooltipRefFromChannelDef","reactiveGeom","markTooltip","content","centeredBandPositionMixins","centeredPointPositionWithSize","defaultPosRef","centerChannel","pointPosition","binPosition","channel2Def","checkBarAreaWithoutZero","ALIGNED_X_CHANNEL","left","right","BASELINED_Y_CHANNEL","top","middle","bottom","pointOrRangePosition","rangePosition","pos2Mixins","baseChannel","position2orSize","pointPosition2","alignChannel","alignedChannel","applyMarkConfig","propsList","getMarkConfig","getStyles","getMarkPropOrConfig","getStyleConfig","styleConfigIndex","styles","styleConfig","formatSignalRef","specifiedFormat","timeFormatExpression","numberFormat","binFormatExpression","formatExpr","numberFormatExpr","rawTimeFormat","sortParams","fieldRefOption","orderChannelDef","mergeTitleFieldDefs","f1","f2","fdToMerge","fieldDef1","mergeTitle","title1","title2","mergeTitleComponent","Split","makeImplicit","tieBreakByComparing","compare","diff","defaultTieBreaker","mergeValuesWithExplicit","tieBreaker","normalizeGenericSpec","STORE","TUPLE","MODIFY","SELECTION_DOMAIN","VL_SELECTION_RESOLVE","forEachSelection","facetModel","getFacetModel","requiresSelectionId","identifier","isRawSelectionDomain","isUrlData","isInlineData","isNamedData","isGenerator","isSequenceGenerator","isSphereGenerator","isGraticuleGenerator","MAIN","RAW","defaultLegendConfig","COMMON_LEGEND_PROPERTY_INDEX","clipHeight","columnPadding","cornerRadius","fillColor","gradientLength","gradientOpacity","gradientStrokeColor","gradientStrokeWidth","gradientThickness","gridAlign","labelOffset","legendX","legendY","rowPadding","strokeColor","symbolDash","symbolDashOffset","symbolFillColor","symbolOffset","symbolOpacity","symbolSize","symbolStrokeColor","symbolStrokeWidth","symbolType","extractTitleConfig","titleMarkConfig","SpecMapper","mapRepeat","mapHConcat","mapVConcat","mapConcat","subspec","STACK_OFFSET_INDEX","STACKABLE_MARKS","STACK_BY_DEFAULT_MARKS","potentialStackedChannel","stackedFieldDef","stackedField","dimensionDef","dimensionField","sc","disallowNonLinearStack","BaseConcatModel","inputBindings","origDef","sgname","nearest","cellDef","isVoronoi","exists","singleOrMultiSignals","getAxisConfig","configTypes","configType","getDependentFields","ast","dependents","visit","startsWithDatum","object","legendComponentIndex","legendByDomain","domainHash","mergedLegendComponent","legendCmpt","setLegendEncode","parseLegend","legendComponent","getLegendDefWithScale","getProperty","isExplicit","legendEncoding","legendEncode","legendEncodingPart","parseLegendForChannel","parseUnitLegend","mergeLegendComponent","parseNonUnitLegend","mergedLegend","childLegend","mergedOrient","childOrient","typeMerged","mergedValueWithExplicit","mergeSymbolType","guideEncodeEntry","valueDef","DensityTransformNode","specifiedAs","density","FilterInvalidNode","vegaFilters","FlattenTransformNode","flatten","FoldTransformNode","fold","GeoJSONNode","geojson","geoJsonCounter","coordinates","pair","GeoPointNode","facetSortFieldName","FacetModel","initFacet","normalizedFacet","layoutMixins","layoutHeaderComponent","bandType","columnDistinctSignal","getHeaderLayoutMixins","getCardinalityAggregateForChild","outputName","cross","ORTHOGONAL_ORIENT","assembleFacet","facetSortFields","facetSortOrder","makeWalkTree","datasetIndex","walkTree","dataSource","assembleFormatParse","assembleTransforms","assemble","assembleFacetData","root","assembleRootData","sourceIndex","newData","whereTo","LoessTransformNode","loess","LookupNode","secondary","fromSource","fromOutputName","fromOutputNode","lookup","foreign","asName","default","RegressionTransformNode","regression","PivotTransformNode","pivot","limit","SampleTransformNode","sample","replaceRepeaterInFacet","replaceRepeater","replaceRepeaterInFieldDef","replaceRepeaterInEncoding","replaceRepeat","replaceRepeaterInChannelDef","parseUnitAxes","parseAxis","OPPOSITE_ORIENT","parseLayerAxes","axisCount","mergeAxisComponents","oppositeOrient","mergedAxisCmpts","childAxisCmpts","mergeAxisComponent","getFieldDefTitle","axisEncoding","axisEncode","axisEncodingPart","UnitModel","specifiedAxes","specifiedLegends","encodingWithRepeaterReplaced","initScales","initAxes","initLegend","isGeoShapeMark","hasGeoPosition","_axis","axisSpec","_legend","midPointWithPositionInvalidTest","midPoint","wrapPositionInvalidTest","fieldInvalidTestValueRef","fieldInvalidPredicate","zeroValueRef","interpolatedPositionSignal","startSuffix","position2","getOffset","markDefOffsetValue","mixins","bandRef","offsetMixins","vgValueRef","tooltipForEncoding","keyValues","usedKey","toSkip","tooltipTuples","fDef","mid","sizeRef","mult","positionDefault","checkBarAreaWithZero","definedValueOrConfig","domainDefinitelyIncludesZero","VL_ONLY_GUIDE_CONFIG","VL_ONLY_LEGEND_CONFIG","LEGEND_COMPONENT_PROPERTY_INDEX","strokeDash","LEGEND_COMPONENT_PROPERTIES","LegendComponent","AXIS_COMPONENT_PROPERTIES_INDEX","AXIS_COMPONENT_PROPERTIES","AxisComponent","fixedShape","shapeMixins","isSignalRef","isVgRangeStep","isDataRefUnionedDomain","isFieldRefUnionDomain","isDataRefDomain","VG_MARK_CONFIGS","strokeCap","strokeDashOffset","strokeJoin","strokeMiterLimit","dir","dx","dy","ellipsis","radius","theta","font","fontSize","fontWeight","fontStyle","aspect","TYPE_INDEX","quantitative","temporal","nominal","QUANTITATIVE","TEMPORAL","NOMINAL","GEOJSON","getFullName"],"mappings":"2FAAA,8CACO,MAAMA,UAA4B,IACrC,YAAYC,EAAMC,EAAqBC,EAAMC,GACzCC,MAAMC,OAAOC,OAAO,GAAIL,GACxB,CAAED,SAEFO,KAAKN,oBAAsBA,EAC3BM,KAAKL,KAAOA,EACZK,KAAKJ,KAAOA,EACZI,KAAKC,QAAS,EAKlB,YACI,QAASD,KAAKJ,Q,kCCftB,8CAmFO,SAASM,EAAWC,GACvB,IAAK,MAAMC,KAAQD,EAAO,CACtB,IAAK,MAAME,KAASD,EAAKE,SACrB,GAAID,EAAME,SAAWH,EAEjB,OADAI,QAAQC,MAAM,kCAAmCL,EAAMC,IAChD,EAGf,IAAKH,EAAWE,EAAKE,UACjB,OAAO,EAGf,OAAO,I,kCC/FX,4DAGO,MAAMI,UAAuB,IAChC,YAAYjB,EAAMkB,GACdd,MAAM,GACN,CAAEJ,SAEFO,KAAKC,QAAS,EACdD,KAAKY,gBAAgB,OAAQD,GAKjC,+BACI,OAAyB,IAArBX,KAAKa,IAAI,SAGN,YAAKb,KAAKa,IAAI,WAAYC,GAAK,YAAQA,IAAmB,IAAbA,EAAEC,QAAgBD,EAAE,IAAM,GAAKA,EAAE,IAAM,M,kCClBnG,kKAYO,SAASE,EAAmBC,EAAOC,GAClC,YAAYD,GAOpB,SAAgCA,EAAOC,GACnC,MAAMC,EAAuBF,EAAMG,UAAUC,OAC7C,YAAKF,GAAsBG,QAASC,IAChC,MAAMC,EAAiBP,EAAMQ,gBAAgBF,GACvCG,EAAiBP,EAAqBI,GACtCI,EAAkBV,EAAMW,kBAAkBL,GAC1CM,EAAWZ,EAAMY,SAASN,GAC1BO,EAASb,EAAMa,OACfC,EAAiBP,EAAeN,GAChCc,EAAQL,EAAgBd,IAAI,QAC5BoB,EAAuB,YAAyBD,EAAOd,GACvDgB,EAAyB,YAAoCX,EAASL,GAW5E,QAVuBiB,IAAnBJ,IAEKE,EAGIC,GAEL,IAASA,GAJT,IAAS,IAAYE,kCAAkCJ,EAAOd,EAAUK,KAO5EU,QAAmDE,IAA3BD,EACxB,QAAuBC,IAAnBJ,EAEAL,EAAeW,kBAAkBnB,EAAUM,OAE1C,CACD,MAAMc,EASf,SAAyBpB,EAAUD,EAAOM,EAASM,EAAUU,EAAWC,EAAcC,EAAmBC,EAAiBC,EAASb,GACtI,MAAMc,EAAcd,EAAOe,OACrB,KAAEC,EAAI,KAAEC,GAASlB,EAEvB,OAAQX,GACJ,IAAK,OACD,OA6DL,SAAcD,EAAOY,GACxB,MAAMmB,EAAMnB,EAASmB,IACrB,GAAI,YAAUA,GAAM,CAChB,MAAMC,EAAY,YAAiBhC,EAAOY,EAASqB,MAAOF,GAC1D,OAAO,IAAI,IAAiB,IACjB/B,EAAMkC,cAAcF,IAG9B,GAAI,YAASD,IAAQ,YAAYA,SAAqBb,IAAba,EAAII,KAE9C,MAAO,CACHA,KAAMJ,EAAII,MAGlB,OA3EeC,CAAKpC,EAAOY,GACvB,IAAK,cACD,OA2EL,SAAqBN,EAASuB,GACjC,GAAI,YAAS,CAAC,IAAO,IAAM,KAASvB,IAAqB,YAATuB,EAC5C,MAAO,MAEX,OA/EeQ,CAAY/B,EAASuB,GAChC,IAAK,OACD,OA+EL,SAAcP,EAAWhB,EAASM,GACrC,GAAIA,EAASmB,KAAO,IAAc,CAAC,IAAUO,KAAM,IAAUC,KAAMjB,GAC/D,OAEJ,QAAO,IAAc,CAAC,IAAG,KAAIhB,SAAkBY,EAnFhCsB,CAAKlB,EAAWhB,EAASM,GACpC,IAAK,UACD,OAmFL,SAAiBN,EAASgB,EAAWK,EAAaf,EAAUc,EAASe,GACxE,GAAI,IAAc,CAAC,IAAG,KAAInC,GAAU,CAChC,GAAI,YAAyBgB,GAAY,CACrC,QAAsCJ,IAAlCS,EAAYe,kBACZ,OAAOf,EAAYe,kBAEvB,MAAM,KAAEb,EAAI,OAAEc,GAAWjB,EACzB,GAAa,QAATG,IAAmBjB,EAASmB,MAAQnB,EAASgC,WAC7B,aAAXD,GAAqC,MAAZrC,GAAgC,eAAXqC,GAAuC,MAAZrC,GAC1E,OAAOmC,EAAUI,mBAI7B,GAAIvB,IAAc,IAAUwB,MACxB,OAAOnB,EAAYoB,aAG3B,OApGeC,CAAQ1C,EAASgB,EAAWK,EAAaf,EAAUc,EAASb,EAAOoC,KAC9E,IAAK,eACD,OAoGL,SAAsBC,EAAc5C,EAAS6C,EAAMxB,GACtD,QAAqBT,IAAjBgC,EAEA,OAEJ,GAAI,IAAc,CAAC,IAAG,KAAI5C,GAAU,CAIhC,MAAM,iBAAE8C,EAAgB,oBAAEC,EAAmB,qBAAEC,GAAyB3B,EACxE,OAAO,YAAgByB,EAA2B,QAATD,EAAiBE,EAAsBC,GAEpF,OAhHeC,CAAahC,EAAcjB,EAASoB,EAAQG,KAAMF,GAC7D,IAAK,eACD,OAgHL,SAAsBuB,EAAc5C,EAASgB,EAAW6B,EAAMK,EAAmB7B,GACpF,QAAqBT,IAAjBgC,EAEA,OAEJ,GAAI,IAAc,CAAC,IAAG,KAAI5C,IAGlBgB,IAAc,IAAUmC,KAAM,CAC9B,MAAM,iBAAEC,GAAqB/B,EAC7B,OAAO,YAAgB+B,EAKvBF,EAAoB,GAG5B,OAlIeG,CAAapC,EAAcjB,EAASgB,EAAWI,EAAQG,KAAML,EAAmBG,GAC3F,IAAK,UACD,OAkIL,SAAiBL,EAAWQ,GAC/B,GAAI,YAAoBR,IAAuB,eAATQ,EAGlC,OAAO,EAEX,OAxIe8B,CAAQtC,EAAWQ,GAC9B,IAAK,OACD,OAwIL,SAAcxB,EAASM,EAAUa,EAAiBC,EAASJ,GAG9D,GAD0BG,GAAuC,iBAApBA,GAErC,YAAoBH,GAAY,CAChC,GAAI,YAAQG,GAAkB,CAC1B,MAAMoC,EAAQpC,EAAgB,GACxBqC,EAAOrC,EAAgBA,EAAgB3B,OAAS,GACtD,GAAI+D,GAAS,GAAKC,GAAQ,EAEtB,OAAO,EAGf,OAAO,EAQf,GAAgB,SAAZxD,GAAwC,iBAAlBM,EAASiB,OAA4B,YAAuBP,GAClF,OAAO,EAIX,IAAKV,EAASmB,KAAO,IAAc,CAAC,IAAG,KAAIzB,GAAU,CACjD,MAAM,OAAEqC,EAAM,KAAEd,GAASH,EACzB,OAAI,YAAS,CAAC,MAAO,OAAQ,OAAQ,SAAUG,MAC3B,eAAXc,GAAuC,MAAZrC,GAAgC,aAAXqC,GAAqC,MAAZrC,GAMtF,OAAO,EA3KQyD,CAAKzD,EAASM,EAAUa,EAAiBC,EAASJ,GAGjE,OAAOK,EAAY1B,GAhCO+D,CAAgB/D,EAAUD,EAAOM,EAASM,EAAUF,EAAgBd,IAAI,QAASc,EAAgBd,IAAI,WAAYc,EAAgBd,IAAI,gBAAiBW,EAAe0D,OAAQjE,EAAM0B,QAASb,QAC5LK,IAAVG,GACAZ,EAAeyD,IAAIjE,EAAUoB,GAAO,MApChD8C,CAAuBnE,EAAOC,GAG9BmE,EAA0BpE,EAAOC,GAkElC,SAASoE,EAAgBrE,GACxB,YAAYA,GACZ,YAAoBA,GAGpBoE,EAA0BpE,EAAO,SAGlC,SAASoE,EAA0BpE,EAAOC,GAC7C,MAAMC,EAAuBF,EAAMG,UAAUC,OAC7C,IAAK,MAAMhB,KAASY,EAAMX,SACL,UAAbY,EACAoE,EAAgBjF,GAGhBW,EAAmBX,EAAOa,GAGlC,YAAKC,GAAsBG,QAASC,IAChC,IAAIgE,EACJ,IAAK,MAAMlF,KAASY,EAAMX,SAAU,CAChC,MAAMkF,EAAiBnF,EAAMe,UAAUC,OAAOE,GAC9C,GAAIiE,EAAgB,CAChB,MAAMC,EAAyBD,EAAeE,gBAAgBxE,GAC9DqE,EAAoB,YAAwBA,EAAmBE,EAAwBvE,EAAU,QAAS,YAAoB,CAACyE,EAAIC,KAC/H,OAAQ1E,GACJ,IAAK,QAED,OAAIyE,EAAGvC,MAAQwC,EAAGxC,KACPuC,EAAGvC,KAAOwC,EAAGxC,KAEjB,EAGf,OAAO,MAInBjC,EAAqBI,GAASX,gBAAgBM,EAAUqE,O,kCCzHhE,wFAEO,MAAMM,EAAO,CAChBC,OAAQ,OACRC,YAAc9E,IACV,MAAM,MAAE+E,EAAK,OAAEC,GAAWhF,EAC1B,OAAOnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC3GiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPzG,KAAM,SACNiE,OAAQ,YACP,IAAqB,IAAK3C,EAAO,IAAQ+E,KAAU,IAAqB,IAAK/E,EAAO,IAAQgF,KAAW,IAAmB,OAAQhF,EAAO,CAC1IoF,UAAW,iBACV,IAAepF,MAGfqF,EAAQ,CACjBR,OAAQ,QACRC,YAAc9E,IACV,MAAM,MAAE+E,EAAK,OAAEC,GAAWhF,EAC1B,OAAOnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC3GiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPzG,KAAM,UACNiE,OAAQ,YACP,IAAqB,IAAK3C,EAAO,IAAQ+E,KAAU,IAAqB,IAAK/E,EAAO,IAAQgF,KAAW,IAAmB,OAAQhF,IAAS,IAAeA,O,iCC3BvK,oWAUO,SAASsF,EAAgBC,EAAUjF,GACtC,MAAMkF,EAAaD,GAAYA,EAASjF,GACxC,QAAIkF,IACI,YAAQA,GACD,YAAKA,EAAY5E,KAAcA,EAASqB,OAGxC,YAAWuD,IAAe,YAAuBA,IAK7D,SAASC,EAAYF,GACxB,OAAO,YAAK,IAAUjF,IAClB,GAAIgF,EAAgBC,EAAUjF,GAAU,CACpC,MAAMkF,EAAaD,EAASjF,GAC5B,GAAI,YAAQkF,GACR,OAAO,YAAKA,EAAY5E,KAAcA,EAAS8E,WAE9C,CACD,MAAM9E,EAAW,YAAY4E,GAC7B,OAAO5E,KAAcA,EAAS8E,WAGtC,OAAO,IAGR,SAASC,EAA8BC,EAAa/E,GACvD,MAAMgF,EAAU,GACVzD,EAAO,GACP0D,EAAY,GACZJ,EAAY,GACZH,EAAW,GA4FjB,OA3FAlF,EAAQuF,EAAa,CAACJ,EAAYlF,KAE9B,GAAI,YAAWkF,GAAa,CACxB,MAAM,MAAEvD,EAAOyD,UAAWK,EAAK,SAAEnD,EAAQ,IAAEb,GAAQyD,EAAYQ,EAAY,YAAOR,EAAY,CAAC,QAAS,YAAa,WAAY,QACjI,GAAIO,GAASnD,GAAYb,EAAK,CAC1B,MAAMkE,EAAQ,YAAST,GACjBU,EAAiBD,GAASA,EAAME,MACtC,IAAIC,EAAW,YAAQZ,EAAY,CAAEa,OAAO,IAC5C,MAAMC,EAAczH,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAKoH,EAAiB,GAAK,CAAEC,MAAO,YAAMX,EAAY3E,EAAQ,CAAE0F,gBAAgB,MAAaP,GAAY,CAEnK/D,MAAOmE,IACLI,EAAgC,MAAZlG,GAA+B,MAAZA,EAC7C,GAAIyF,EAAO,CACP,IAAIU,EAcJ,GAbI,YAAYV,IACZU,EAAK,SACLL,EAAW,YAAQ,CAAEK,GAAI,SAAUxE,MAAO8D,EAAMW,QAAU,CAAEL,OAAO,IACnEC,EAAYrE,SAAWmE,KAAYnE,KAE9B,YAAY8D,IACjBU,EAAK,SACLL,EAAW,YAAQ,CAAEK,GAAI,SAAUxE,MAAO8D,EAAMY,QAAU,CAAEN,OAAO,IACnEC,EAAYrE,SAAWmE,KAAYnE,KAEpB,YAAV8D,GAAiC,aAAVA,GAAkC,cAAVA,IACpDU,EAAKV,GAELU,EAAI,CACJ,MAAMG,EAAiB,CACnBH,KACAI,GAAIT,GAEJnE,IACA2E,EAAe3E,MAAQA,GAE3ByD,EAAUoB,KAAKF,SAKnB,GADAf,EAAQiB,KAAKV,GACT,YAAgBZ,IAAe,YAAUzD,GAAM,CAQ/C,GAPAK,EAAK0E,KAAK,CAAE/E,MAAKE,QAAO4E,GAAIT,IAE5BP,EAAQiB,KAAK,YAAQtB,EAAY,CAAEuB,UAAW,SAC1C,YAAiBvB,EAAYlF,IAC7BuF,EAAQiB,KAAK,YAAQtB,EAAY,CAAEuB,UAAW,WAG9CP,EAAmB,CACnB,MAAMQ,EAAmB,CACrB/E,MAAOmE,EAAW,QAEtBb,EAASjF,EAAU,KAAO0G,EAE9BV,EAAYvE,IAAM,SACb,YAAwBzB,KACzBgG,EAAkB,KAAI,qBAGzB,GAAI1D,EAAU,CACfkD,EAAUgB,KAAK,CAAElE,WAAUX,QAAO4E,GAAIT,IAEtC,MAAMa,EAAS,YAAsBrE,EAAU/B,EAAOqG,KAAKC,iBAAiBC,KAAK,KAC3EC,EAAa,YAAgB7B,IAAeA,EAAW3D,OAAS,KAAY,OAClE,SAAZvB,GAAkC,YAAZA,GACtBgG,EAAoB,OAAIA,EAAoB,QAAKW,EAC7CI,IACAf,EAAwB,WAAIe,IAG3B,YAA0B/G,GAC/BgG,EAAoB,OAAIzH,OAAOC,OAAOD,OAAOC,OAAO,CAAEmI,UAAWI,EAAa,CAAEA,cAAe,IAAMf,EAAoB,QAEpHE,IACLF,EAAkB,KAAIzH,OAAOC,OAAOD,OAAOC,OAAO,CAAEmI,UAAWI,EAAa,CAAEA,cAAe,IAAMf,EAAkB,OAKjIf,EAASjF,GAAWgG,OAGpBT,EAAQiB,KAAK7E,GACbsD,EAASjF,GAAWsF,EAAYtF,QAKpCiF,EAASjF,GAAWsF,EAAYtF,KAGjC,CACH8B,OACA0D,YACAJ,YACAG,UACAN,YAqBD,SAAS+B,EAAkB/B,EAAU7D,GACxC,MAAMyB,EAAOzB,EAAQG,KACrB,OAAO,YAAK0D,GAAUgC,OAAO,CAACC,EAAoBlH,KAC9C,IAAK,YAAUA,GAGX,OADA,IAAS,IAAYmH,uBAAuBnH,IACrCkH,EAEX,IA1BD,SAA+BjC,EAAUjF,EAAS6C,GACrD,MAAMuE,EAAgB,YAAYpH,EAAS6C,GAC3C,IAAKuE,EACD,OAAO,EAEN,GAAsB,WAAlBA,EAA4B,CACjC,MAAMC,EAAkBpC,EAAqB,OAAZjF,EAAmB,IAAM,KAG1D,SAAI,YAAWqH,IAAoB,YAAWpC,EAASjF,KAAa,YAASqH,EAAgB5F,MAOjG,OAAO,EAUE6F,CAAsBrC,EAAUjF,EAAS6C,GAG1C,OADA,IAAS,IAAY0E,oBAAoBvH,EAAS6C,IAC3CqE,EAGX,GAAgB,SAAZlH,GAA+B,SAAT6C,EAAiB,CACvC,MAAMvC,EAAW,YAAiB2E,EAASjF,IAC3C,GAAIM,GAAYA,EAAS8E,UAErB,OADA,IAAS,IAAYoC,wBACdN,EAIf,GAAgB,UAAZlH,IAAwBoB,EAAQqG,OAAS,SAAUxC,EAAW,WAAYA,GAE1E,OADA,IAAS,IAAYyC,cAAc,WAAY,CAAEC,KAAM,SAAU1C,EAAU2C,OAAQ,WAAY3C,KACxFiC,EAEX,MAAMhC,EAAaD,EAASjF,GAC5B,GAAgB,WAAZA,GACa,UAAZA,IAAwB,YAAQkF,KAAgB,YAAWA,IAC/C,YAAZlF,GAAyB,YAAQkF,GAC9BA,IAEAgC,EAAmBlH,IAAY,YAAQkF,GAAcA,EAAa,CAACA,IAAa+B,OAAO,CAACY,EAAMvH,KACrF,YAAWA,GAIZuH,EAAKrB,KAAK,YAAkBlG,EAAUN,IAHtC,IAAS,IAAY8H,cAAcxH,EAAUN,IAK1C6H,GACR,SAGN,CACD,GAAgB,YAAZ7H,GAAwC,OAAfkF,EAEzBgC,EAAmBlH,GAAW,UAE7B,IAAK,YAAWkF,KAAgB,YAAWA,KAAgB,YAAiBA,GAE7E,OADA,IAAS,IAAY4C,cAAc5C,EAAYlF,IACxCkH,EAEXA,EAAmBlH,GAAW,YAAUkF,EAAYlF,GAExD,OAAOkH,GACR,IAEA,SAASa,EAAU9C,GACtB,MAAM+C,EAAM,GACZ,IAAK,MAAMhI,KAAW,YAAKiF,GACvB,GAAID,EAAgBC,EAAUjF,GAAU,CACpC,MAAMkF,EAAaD,EAASjF,GACtBiI,EAAkB,YAAQ/C,GAAcA,EAAa,CAACA,GAC5D,IAAK,MAAMgD,KAAOD,EACV,YAAWC,GACXF,EAAIxB,KAAK0B,GAEJ,YAAuBA,IAC5BF,EAAIxB,KAAK0B,EAAIC,WAK7B,OAAOH,EAEJ,SAASjI,EAAQqI,EAASC,EAAGC,GAChC,GAAKF,EAGL,IAAK,MAAMpI,KAAW,YAAKoI,GAAU,CACjC,MAAMG,EAAKH,EAAQpI,GACf,YAAQuI,GACRA,EAAGxI,QAASmF,IACRmD,EAAEG,KAAKF,EAASpD,EAAYlF,KAIhCqI,EAAEG,KAAKF,EAASC,EAAIvI,IAIzB,SAASiH,EAAOmB,EAASC,EAAGI,EAAMH,GACrC,OAAKF,EAGE,YAAKA,GAASnB,OAAO,CAACyB,EAAG1I,KAC5B,MAAM2I,EAAMP,EAAQpI,GACpB,OAAI,YAAQ2I,GACDA,EAAI1B,OAAO,CAAC2B,EAAI1D,IACZmD,EAAEG,KAAKF,EAASM,EAAI1D,EAAYlF,GACxC0I,GAGIL,EAAEG,KAAKF,EAASI,EAAGC,EAAK3I,IAEpCyI,GAZQA,EAiBR,SAASI,EAAmBhG,EAAMoC,GACrC,OAAO,YAAKA,GAAUgC,OAAO,CAAC6B,EAAS9I,KACnC,OAAQA,GAEJ,IAAK,IACL,IAAK,IACL,IAAK,OACL,IAAK,MACL,IAAK,KACL,IAAK,KAEL,IAAK,WACL,IAAK,YACL,IAAK,YACL,IAAK,aAGL,IAAK,OACL,IAAK,QAGL,IAAK,UACD,OAAO8I,EACX,IAAK,QAED,GAAa,SAATjG,GAA4B,UAATA,EACnB,OAAOiG,EAGf,IAAK,SACL,IAAK,MAAO,CACR,MAAM5D,EAAaD,EAASjF,GAQ5B,OAPI,YAAQkF,IAAe,YAAWA,MACjC,YAAQA,GAAcA,EAAa,CAACA,IAAanF,QAAQO,IACjDA,EAAS8E,WACV0D,EAAQtC,KAAK,YAAQlG,EAAU,OAIpCwI,EAEX,IAAK,OACD,GAAa,UAATjG,EAEA,OAAOiG,EAIf,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,UACL,IAAK,cACL,IAAK,gBACL,IAAK,cAAe,CAGhB,MAAMxI,EAAW,YAAiB2E,EAASjF,IAI3C,OAHIM,IAAaA,EAAS8E,WACtB0D,EAAQtC,KAAK,YAAQlG,EAAU,KAE5BwI,KAGhB,M,iCC9UP,kSAEA,MAAMC,EAAqB,CACvB3C,OAAQ,EACRC,OAAQ,EACR2C,QAAS,EACTC,MAAO,EACPC,SAAU,EACVC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,IAAK,EACLC,QAAS,EACTC,GAAI,EACJC,GAAI,EACJC,IAAK,EACLC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,OAAQ,EACRC,IAAK,EACLC,MAAO,EACPC,OAAQ,EACRC,SAAU,EACVC,UAAW,GAEFC,EAA4B,CACrCnB,MAAO,EACPK,IAAK,EACLH,IAAK,GAEF,SAASkB,EAAYC,GACxB,QAASA,KAAOA,EAAU,OAEvB,SAASC,EAAYD,GACxB,QAASA,KAAOA,EAAU,OAED,YAAKvB,GAC3B,SAASyB,EAAcF,GAC1B,OAAO,YAASA,MAAQvB,EAAmBuB,GAExC,MAAMG,EAAe,CAAC,QAAS,QAAS,UAAW,YACnD,SAASC,EAAsBtF,GAClC,OAAOA,GAAa,YAASA,IAAc,YAASqF,EAAcrF,GAE/D,SAASuF,EAAWvF,GACvB,OAAOA,GAAa,YAASA,IAAc,YAAS,CAAC,MAAO,OAAQA,GAGjE,MAAMwF,EAAU,CAAC,QAAS,MAAO,WAAY,QAAS,WAKhDC,EAAyB,aADL,CAAC,OAAQ,UAAW,SAAU,KAAM,KAAM,MAAO,S,iCCrDlF,qLACO,MAAMC,EAAkB,OACzBC,EAAwB,CAC1BC,EAAG,EACHC,EAAG,EACHpG,MAAO,EACP8C,KAAM,EACNC,OAAQ,EACRsD,YAAa,EACb9M,KAAM,EACN+M,MAAO,EACPC,YAAa,EACbC,cAAe,EACfC,QAAS,EACTC,KAAM,GAEH,SAASC,EAAgBC,GAC5B,QAASV,EAAsBU,GAE5B,SAASC,EAAiBlK,GAC7B,QAASA,KAAUA,EAAe,SAE/B,SAASmK,EAAYnK,GACxB,SAASA,GAAwB,UAAfA,EAAS,KAAmBA,EAAY,OAEvD,SAASoK,EAAYpK,GACxB,QAASA,GAAQ,YAAQA,K,kCC1B7B,2HAuCO,SAASqK,EAAQC,EAAWC,EAAM,IAEjCA,EAAIC,QAEJ,IAAQD,EAAIC,QAEZD,EAAIE,YAEJ,IAA6BF,EAAIE,YAErC,IAEI,MAAM1L,EAAS,YAAW,YAAU,GAAIwL,EAAIxL,OAAQuL,EAAUvL,SAGxD2L,EAAO,YAAUJ,EAAWvL,GAE5B4L,EAAW,YAAkBL,EAAWvL,GAIxCb,EAAQ,YAAWwM,EAAM,KAAM,QAAItL,OAAWA,EAAWL,GAgB/D,OALAb,EAAM0M,QAGN,YAAiB1M,EAAMG,UAAUxB,KAAMqB,GA0C/C,SAA+BA,EAAO2M,EAAoBC,EAAW,GAAIC,GAErE,MAAMC,EAAW9M,EAAMa,OAAS,YAAuBb,EAAMa,aAAUK,EACjEvC,EAAO,GAAGoO,OAAO/M,EAAMgN,sBAAsB,IAEnD,YAAiBhN,EAAMG,UAAUxB,KAAMiO,IACjCK,EAAcjN,EAAMkN,sBACpB/G,EAAQnG,EAAMmN,gBACdC,EAAQpN,EAAMqN,qBACdvI,EAAc9E,EAAMsN,0BAAyB,GACnD,IAAIC,EAAgBvN,EAAMwN,wBAU1B,OARAD,EAAgBA,EAAcE,OAAOC,GACZ,UAAhBA,EAAOlP,MAAoC,WAAhBkP,EAAOlP,WAAuC0C,IAAjBwM,EAAOrM,QAChEsL,EAAmBe,EAAOlP,OAASkP,EAAOrM,OACnC,IAKR,CACHmL,KAFW3N,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE6O,QAAS,8CAAiD3N,EAAM4N,YAAc,CAAEA,YAAa5N,EAAM4N,aAAgB,IAAMjB,GAAsBxG,EAAQ,CAAEA,SAAU,IAAOiH,EAAQ,CAAEA,SAAU,IAAOtI,EAAc,CAAE+I,OAAQ,CAAEC,OAAQhJ,IAAkB,IAAM,CAAEnG,SAAUsO,EAAYnN,OAAS,EAAI,CAAEmN,YAAaA,GAAgB,IAAMjN,EAAM+N,cAAc,IAAIR,KAAkBvN,EAAMgO,iCAAiC,OAASlB,EAAW,CAAEjM,OAAQiM,GAAa,IAAOD,EAAW,CAAEA,YAAa,KA3DxnBoB,CAAsBjO,EAarC,SAA+BkO,EAAcrN,EAAQ4L,EAAUzM,GAC3D,MAAM+E,EAAQ/E,EAAMG,UAAUgO,WAAWvO,IAAI,SACvCoF,EAAShF,EAAMG,UAAUgO,WAAWvO,IAAI,UAC9C,GAAImF,GAASC,GAAU,YAAUyH,EAAS5K,MACtC,GAAc,SAAVkD,GAA+B,SAAXC,EACpB,IAAS,IAAYoJ,eACrB3B,EAAS5K,KAAO,WAEf,GAAc,SAAVkD,GAA+B,SAAXC,EAAmB,CAG5C,MAAMqJ,EAAqB,SAAVtJ,EAAmB,QAAU,SAE9C,IAAS,IAAYqJ,YAAY,YAAwBC,KAEzD,MAAMC,EAA+B,UAAbD,EAAuB,SAAW,QAC1D5B,EAAS5K,KAAO,YAAWyM,GAGnC,OAAOzP,OAAOC,OAAOD,OAAOC,OAAO,CAAE2N,SAAoC,IAA1B,YAAKA,GAAU3M,QAAgB2M,EAAS5K,KAAO4K,EAAS5K,KAAO4K,GAAY,YAA0B5L,IAAU,YAA0BqN,IAhChJK,CAAsBnC,EAAWvL,EAAQ4L,EAAUzM,GAAQoM,EAAUQ,SAAUR,EAAUS,UAEjI,QAEQR,EAAIC,QACJ,MAGAD,EAAIE,YACJ,S,kCCrFZ,wDAoBA,MAAMiC,EAAY,IAlBlB,cAAqC,IACjC,QAAQhC,GAAM,OAAE3L,IACZ,GAAI2L,EAAKjH,SAAU,CACf,MAAQA,SAAUK,EAAa6I,UAAWC,GAAkBlC,GACtD,KAAEpK,EAAI,UAAE0D,EAAS,UAAEJ,EAAS,QAAEG,EAAO,SAAEN,GAAa,YAA8BK,EAAa/E,GAC/F4N,EAAY,IACVC,GAAgC,MACjCtM,KACA0D,KACEJ,EAAU5F,OAAc,CAAC,CAAE4F,YAAWG,YAAnB,IAE5B,OAAOhH,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAQiC,EAAU3O,OAAS,EAAI,CAAE2O,aAAc,IAAM,CAAElJ,aAG5G,OAAOiH,IAQZ,SAASmC,EAAkBnC,EAAM3L,GACpC,OAAO2N,EAAUvF,IAAIuD,EAAM,CAAE3L,a,08qkBCzBjC,itCAaO,SAAS+N,EAAuB7C,GACnC,OAAOA,EAAa,UAEjB,SAAS8C,EAAY5M,GACxB,OAAOA,IAAU,YAASA,IAAU,WAAYA,EAE7C,SAAS6M,EAAelO,GAC3B,MAAM,MAAEqB,EAAK,SAAEW,EAAQ,IAAEb,EAAG,UAAE2D,GAAc9E,EAC5C,OAAO/B,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAK8D,EAAW,CAAEA,YAAa,IAAOb,EAAM,CAAEA,OAAQ,IAAO2D,EAAY,CAAEA,aAAc,IAAM,CAAEzD,UAE7J,SAAS8M,EAAmBnO,GAC/B,OAAOoO,EAAgBpO,MAAeA,EAAe,KAElD,SAASqO,EAAQ3O,EAASM,EAAUsO,EAAW/L,EAAMtC,GAAQ,WAAEsO,GAAe,IACjF,MAAM,SAAEvM,EAAQ,IAAEb,GAAQnB,EAC1B,GAAI,YAAS,CAAC,IAAK,KAAMN,GAAU,CAC/B,GAAI8O,EAAmBxO,SAA+BM,IAAlBN,EAASyO,KACzC,OAAOzO,EAASyO,KAEf,GAAIzM,IAAasM,EAClB,OAAIC,EACO,YAAc,uBAAwBhM,EAAMtC,GAG5C,YAAgBsC,EAAKtB,MAAQ,YAAc,eAAgBsB,EAAMtC,GAAU,EAGrF,GAAI,YAAUkB,GACf,OAAO,YAAgBoB,EAAKtB,QAAUsN,EAAa,EAAI,IAK5D,SAASG,EAAQhP,EAASM,EAAUsO,EAAW/L,EAAMtC,GACxD,SAAI,YAAUD,EAASmB,MAASnB,EAASgC,UAAYoM,EAAgBpO,IAA+B,aAAlBA,EAASiB,SAC9EoN,EAAQ3O,EAASM,EAAUsO,EAAW/L,EAAMtC,GAItD,SAAS0O,EAAiB/J,GAC7B,QAASA,KAAgBA,EAAWiD,UAKjC,SAAS+G,EAAuBhK,GACnC,QAASA,KAAgBA,EAAWiD,YAAc,YAAQjD,EAAWiD,YAAcgH,EAAWjK,EAAWiD,WAEtG,SAASiH,EAAuBlK,GACnC,QAASA,KAAgBA,EAAWiD,YAAc,YAAQjD,EAAWiD,YAAckH,EAAWnK,EAAWiD,YAEtG,SAASgH,EAAWjK,GACvB,SAASA,IAAiBA,EAAkB,OAAiC,UAA5BA,EAAsB,WAEpE,SAASwJ,EAAgBxJ,GAC5B,QAASA,MAAkBA,EAAkB,SAAOA,EAAiB,MAAkC,UAA5BA,EAAsB,WAE9F,SAASoK,EAAiBpK,GAC7B,OAAOiK,EAAWjK,IAAe,YAASA,EAAWvD,OAElD,SAAS0N,EAAWnK,GACvB,OAAOA,GAAc,UAAWA,QAAsCtE,IAAxBsE,EAAkB,MAE7D,SAASqK,EAAgBrK,GAC5B,SAASA,IAAiBA,EAAkB,QAAOA,EAAiB,MAEjE,SAAS4J,EAAmB5J,GAC/B,SAAUA,IACHA,EAAiB,OAAOA,EAAkB,QAAOA,EAAmB,aAA4BtE,IAAvBsE,EAAiB,MAK9F,SAASsK,EAAetK,GAC3B,QAASA,KAAgBA,EAAmB,OAQzC,SAASuK,EAAQnP,EAAUyL,EAAM,IACpC,IAAIpK,EAAQrB,EAASqB,MACrB,MAAM+N,EAAS3D,EAAI2D,OACnB,IAAIC,EAAS5D,EAAI4D,OACbC,EAAc,GAClB,GAwEG,SAAiBtP,GACpB,MAA8B,UAAvBA,EAAS8E,UAzEZyK,CAAQvP,GACRqB,EAAQ,YAAc,aAErB,CACD,IAAImO,EACJ,IAAK/D,EAAIgE,KACL,GAjBZ,SAAsBzP,GAClB,QAASA,EAAa,GAgBV0P,CAAa1P,GACbwP,EAAKxP,EAAS6F,OAEb,CACD,MAAM,IAAE1E,EAAG,UAAE2D,EAAS,SAAE9C,GAAahC,EACjC,YAAUmB,IACVqO,EAAK,YAAYrO,GACjBkO,GAAU5D,EAAItF,WAAa,KAAOsF,EAAI4D,QAAU,KAE3CvK,EACD,YAAYA,IACZwK,MAAkBjO,IAClBA,YAAkByD,EAAUgB,UAEvB,YAAYhB,IACjBwK,MAAkBjO,IAClBA,YAAkByD,EAAUiB,UAG5ByJ,EAAKG,OAAO7K,GAGX9C,IACLwN,EAAKG,OAAO3N,GACZqN,IAAY,YAAS,CAAC,QAAS,OAAQ5D,EAAItF,YAAcsF,EAAItF,WAAc,KAAOsF,EAAI4D,QAAU,KAIxGG,IACAnO,EAAQA,KAAWmO,KAAMnO,IAAUmO,GAS3C,OANIH,IACAhO,KAAWA,KAASgO,KAEpBD,IACA/N,KAAW+N,KAAU/N,KAErBoK,EAAIhG,MACGpE,EAEFoK,EAAImE,KAEF,YAAoBvO,EAAOoK,EAAImE,MAAQN,EAIvC,YAAmBjO,GAASiO,EAGpC,SAASO,EAAW7P,GACvB,OAAQA,EAASiB,MACb,IAAK,UACL,IAAK,UACL,IAAK,UACD,OAAO,EACX,IAAK,eACD,QAASjB,EAASmB,IACtB,IAAK,WACD,OAAO,EAEf,MAAM,IAAI2O,MAAM,IAAYC,iBAAiB/P,EAASiB,OAEnD,SAAS+O,EAAahQ,GACzB,OAAQ6P,EAAW7P,GA8ChB,MAAMiQ,EAAwB,CAACjQ,EAAUC,KAC5C,OAAQA,EAAO0L,YACX,IAAK,QACD,OAAO3L,EAASqB,MACpB,IAAK,aACD,OArBL,SAAkCrB,GACrC,MAAM,UAAE8E,EAAS,IAAE3D,EAAG,SAAEa,EAAQ,MAAEX,GAAUrB,EAC5C,GAAI,YAAY8E,GACZ,SAAUzD,gBAAoByD,EAAUgB,UAEvC,GAAI,YAAYhB,GACjB,SAAUzD,gBAAoByD,EAAUiB,UAE5C,MAAMyJ,EAAK1K,GAAa9C,GAAa,YAAUb,IAAQ,MACvD,OAAIqO,EACOA,EAAGU,cAAgB,IAAM7O,EAAQ,IAGjCA,EAQI8O,CAAyBnQ,GACpC,QACI,OAhDL,SAA8BA,EAAUC,GAC3C,MAAM,MAAEoB,EAAK,IAAEF,EAAG,SAAEa,EAAQ,UAAE8C,GAAc9E,EAC5C,GAAkB,UAAd8E,EACA,OAAO7E,EAAOmQ,WAEb,GAAI,YAAUjP,GACf,SAAUE,aAET,GAAIW,EAAU,CAEf,SAAUX,MADI,YAAiBW,GAAUwE,KAAK,QAG7C,OAAI1B,EACD,YAAYA,MACFzD,aAAiByD,EAAUgB,SAEhC,YAAYhB,MACPzD,aAAiByD,EAAUiB,YAG3B,YAAUjB,SAAiBzD,IAGtCA,EAyBQgP,CAAqBrQ,EAAUC,KAGlD,IAAIqQ,EAAiBL,EACd,SAASM,EAAkBC,GAC9BF,EAAiBE,EAEd,SAASC,IACZF,EAAkBN,GAEf,SAAS1K,EAAMvF,EAAUC,GAAQ,eAAE0F,EAAc,eAAE+K,GAAiB,IACvE,MACMC,GADQC,EAAS5Q,IAAa,IACXuF,MACnBqC,EAAM8I,EAAiBG,EAAa7Q,EAAUC,QAAUK,EAC9D,OAAIqF,EACO,YAAgBgL,EAAY3Q,EAASuF,MAAOqC,GAG5C+I,GAAc3Q,EAASuF,OAASqC,EAGxC,SAASgJ,EAAS5Q,GACrB,OAAIwO,EAAmBxO,IAAaA,EAASsG,KAClCtG,EAASsG,MAnKW1B,EAqKH5E,IApKH4E,EAAmB,QAoKH5E,EAAS8Q,OACvC9Q,EAAS8Q,OAEX,YAAgB9Q,IAAaA,EAAS+Q,OACpC/Q,EAAS+Q,YADf,EAxKF,IAA4BnM,EA6K5B,SAASiM,EAAa7Q,EAAUC,GACnC,OAAOqQ,EAAetQ,EAAUC,GAE7B,SAASoG,EAAOrG,GACnB,GAAIkP,EAAelP,IAAaA,EAASqG,OACrC,OAAOrG,EAASqG,OAIhB,OADcuK,EAAS5Q,IAAa,IACvBqG,OAyBd,SAAS2K,EAAYpM,GACxB,OAAIiK,EAAWjK,GACJA,EAEFgK,EAAuBhK,GACrBA,EAAWiD,eADjB,EAKF,SAASoJ,EAAiBrM,GAC7B,OAAIiK,EAAWjK,GACJA,EAEFgK,EAAuBhK,GACrBA,EAAWiD,eADjB,EAQF,SAASqJ,EAAUtM,EAAYlF,GAClC,GAAI,YAASkF,IAAe,YAASA,IAAe,YAAUA,GAAa,CACvE,MAAMuM,EAAgB,YAASvM,GAAc,SAAW,YAASA,GAAc,SAAW,UAE1F,OADA,IAAS,IAAYwM,oBAAoB1R,EAASyR,EAAevM,IAC1D,CAAEnE,MAAOmE,GAGpB,OAAIiK,EAAWjK,GACJyM,EAAkBzM,EAAYlF,GAEhCkP,EAAuBhK,GACrB3G,OAAOC,OAAOD,OAAOC,OAAO,GAAI0G,GAAa,CAEhDiD,UAAWwJ,EAAkBzM,EAAWiD,UAAWnI,KAEpDkF,EAEJ,SAASyM,EAAkBC,EAAI5R,GAClC,MAAM,UAAEoF,EAAS,SAAE9C,EAAQ,IAAEb,EAAG,MAAEE,GAAUiQ,EACtCtR,EAAW/B,OAAOC,OAAO,GAAIoT,GAqBnC,IAnBIxM,GAAc,YAAcA,IAAe,YAAYA,IAAe,YAAYA,KAClF,IAAS,IAAYyM,iBAAiBzM,WAC/B9E,EAAS8E,WAGhB9C,IACAhC,EAASgC,SAAW,YAAkBA,IAEtCX,IACArB,EAASqB,SAAWA,KAGpB,YAAUF,KACVnB,EAASmB,IAAMqQ,EAAarQ,EAAKzB,IAEjC,YAASyB,KAAS,YAAS,IAAyBzB,IACpD,eAAoBA,0CAGpB0O,EAAgBpO,GAAW,CAC3B,MAAM,KAAEiB,GAASjB,EACXyR,EAAW,YAAYxQ,GACzBA,IAASwQ,IAETzR,EAASiB,KAAOwQ,GAEP,iBAATxQ,GACI,YAAsB6D,KACtB,IAAS,IAAY4M,kCAAkCzQ,EAAM6D,IAC7D9E,EAASiB,KAAO,qBAIvB,IAAK,YAAwBvB,GAAU,CAExC,MAAMiS,EAnGP,SAAqB3R,EAAUN,GAClC,GAAIM,EAASgC,SACT,MAAO,WAEX,GAAI,YAAUhC,EAASmB,KACnB,MAAO,eAEX,OAAQ,YAAUzB,IACd,IAAK,aACD,MAAO,eACX,IAAK,WAEL,IAAK,WACD,MAAO,UACX,QACI,MAAO,gBAoFKkS,CAAY5R,EAAUN,GACtC,IAAS,IAAYmS,iBAAiBnS,EAASiS,IAC/C3R,EAAe,KAAI2R,EAEvB,GAAIvD,EAAgBpO,GAAW,CAC3B,MAAM,WAAE8R,EAAU,QAAEC,GAkCrB,SAA8B/R,EAAUN,GAC3C,MAAMuB,EAAOjB,EAASiB,KACtB,GAAa,YAATA,GAAkC,UAAZvB,EACtB,MAAO,CACHoS,YAAY,EACZC,mBAAoBrS,6CAG5B,OAAQA,GACJ,IAAK,MACL,IAAK,SACL,IAAK,QACD,OAAIsQ,EAAahQ,GACN,CACH8R,YAAY,EACZC,QAAS,IAAYC,6BAA6BtS,IAGnDuS,EACX,IAAK,IACL,IAAK,IACL,IAAK,QACL,IAAK,OACL,IAAK,SACL,IAAK,OACL,IAAK,SACL,IAAK,MACL,IAAK,UACL,IAAK,OACL,IAAK,MACD,OAAOA,EACX,IAAK,YACL,IAAK,aACL,IAAK,WACL,IAAK,YACD,OAAIhR,IAAS,IACF,CACH6Q,YAAY,EACZC,mBAAoBrS,wDAA8DM,EAASiB,eAG5FgR,EACX,IAAK,UACL,IAAK,cACL,IAAK,gBACL,IAAK,cACL,IAAK,OACL,IAAK,KACL,IAAK,KACD,MAAa,YAAThR,GAAuBjB,EAAe,KAMnCiS,EALI,CACHH,YAAY,EACZC,mBAAoBrS,yDAIhC,IAAK,QACD,OAAK,YAAS,CAAC,UAAW,UAAW,WAAYM,EAASiB,MAMnDgR,EALI,CACHH,YAAY,EACZC,QAAS,2EAIrB,IAAK,QACD,MAAsB,YAAlB/R,EAASiB,MAAwB,SAAUjB,EAMxCiS,EALI,CACHH,YAAY,EACZC,QAAS,kFAKzB,MAAM,IAAIjC,MAAM,oDAAsDpQ,GA3GlCwS,CAAqBlS,EAAUN,GAC1DoS,GACD,IAASC,GAGjB,GAAI5D,EAAmBnO,IAAa,YAASA,EAASkB,MAAO,CACzD,MAAM,KAAEA,GAASlB,EACjB,GAAI,YAAgBkB,GAChB,OAAOjD,OAAOC,OAAOD,OAAOC,OAAO,GAAI8B,GAAW,CAAEkB,KAAM,CAAEyD,SAAUzD,KAE1E,MAAMiR,EAAMjR,EAAKkR,OAAO,GACxB,GAAuB,MAAnBlR,EAAKmR,OAAO,IAAc,YAAgBF,GAC1C,OAAOlU,OAAOC,OAAOD,OAAOC,OAAO,GAAI8B,GAAW,CAAEkB,KAAM,CAAEyD,SAAUwN,EAAKG,MAAO,gBAG1F,OAAOtS,EAEJ,SAASwR,EAAarQ,EAAKzB,GAC9B,OAAI,YAAUyB,GACH,CAAEoR,QAAS,YAAY7S,IAEjB,WAARyB,EACE,CACHqR,QAAQ,GAGNrR,EAAIoR,SAAYpR,EAAII,KAInBJ,EAHAlD,OAAOC,OAAOD,OAAOC,OAAO,GAAIiD,GAAM,CAAEoR,QAAS,YAAY7S,KAM5E,MAAMuS,EAAa,CAAEH,YAAY,GAgF1B,SAASW,EAAqBzS,GACjC,MAAMqF,EAAQuL,EAAS5Q,GACjByG,EAAcpB,GAASA,EAAMoB,YAAgByI,EAAelP,IAAaA,EAASyG,WACxF,MAAsB,SAAfA,IAA2BA,GAK/B,SAAwBzG,GAC3B,MAAyB,aAAlBA,EAASiB,QAAyBjB,EAASgC,SANF0Q,CAAe1S,GAY5D,SAAS2S,EAAUC,GAAG,SAAE5Q,EAAQ,KAAEf,EAAI,KAAE4R,EAAI,2BAAEC,IACjD,IAAIlD,EAmBJ,OAlBI,YAAWgD,GACXhD,EAAO,YAAagD,GAAG,IAElB,YAASA,IAAM,YAASA,MACzB5Q,GAAqB,aAATf,KAER2O,EADA,YAAsB5N,GACf,YAAa,CAAE,CAACA,GAAW4Q,IAAK,GAElC,YAAoB5Q,GAElB2Q,EAAUC,EAAG,CAAE5Q,SAAU,YAAiBA,iBAI9B+Q,KAAKC,UAAUJ,OAI1ChD,EACOiD,UAAejD,KAAUA,EAG7BkD,OAA6BxS,EAAYyS,KAAKC,UAAUJ,GAK5D,SAASK,EAAWjT,EAAU2J,GACjC,MAAM,SAAE3H,EAAQ,KAAEf,GAASjB,EAC3B,OAAO2J,EAAOtB,IAAIuK,IACd,MAAMhD,EAAO+C,EAAUC,EAAG,CAAE5Q,WAAUf,OAAM6R,4BAA4B,IAExE,YAAaxS,IAATsP,EACO,CAAE9C,OAAQ8C,GAGdgD,IAMR,SAASM,EAAiBlT,EAAUN,GACvC,OAAK,YAAUM,EAASmB,KAMjB,YAAezB,IAAY,YAAS,CAAC,UAAW,WAAYM,EAASiB,OALxEtC,QAAQwU,KAAK,gDACN,K,kqKCniBf,iFAQA,MAAMC,EAAwB,GACvB,SAASC,EAAI9Q,EAAM+Q,EAAKC,GAC3B,MAAMC,EAAa,IAAI,IAAwBjR,EAAM+Q,GACrDF,EAAsB7Q,GAAQ,CAAEiR,aAAYD,SAKzC,SAASE,IACZ,OAAO,YAAKL,GAEhBC,EAAI,IAAS,IAAkB,KAC/BA,EAAI,IAAU,IAAmB,KACjCA,EAAI,IAAW,IAAoB,M,kCCrBnC,gvHAKO,SAASK,EAAY9H,GACxB,+BAAgCmH,KAAKC,UAAUpH,6JAG5C,MAAM+H,EAAiB,gEACvB,SAASnG,EAAY9N,GACxB,OAAOA,mBACgBA,gCAAsC,YAAYA,MACnE,iDAGH,SAASkU,EAAmClU,GAC/C,yDAA0DA,0BAEvD,SAASmU,EAA+BtR,GAC3C,sDAAuDA,WAEpD,SAASuR,EAAsBvR,GAClC,qCAAsCA,SAEnC,SAASwR,EAAkBnW,GAC9B,wCAAyCA,MAEtC,MAAMoW,EAA4B,4FAElC,SAASC,EAAoB5S,GAChC,iCAAkCA,MAE/B,SAAS6S,EAA0BjT,GACtC,qDAAsDA,4BAGnD,MAAMkT,EAA2B,mGAE3BC,EAA2B,+FAEjC,SAASC,EAAkBC,GAC9B,6BAA8BA,MAE3B,SAASC,EAAelT,EAAOmT,EAAOC,GACzC,mCAAoCpT,SAAaoT,6CAAoDD,KAGlG,SAASE,EAAwB7G,GACpC,wCAAyC,YAAUA,MAEhD,MAAM8G,EAAqB,uIAE3B,SAASC,EAAmBC,GAC/B,wBAAyBA,EAASrO,KAAK,gBAAoC,IAApBqO,EAAS3V,OAAe,KAAO,mBAEnF,SAAS4V,EAAqBrJ,GACjC,MAAM,iBAAEsJ,EAAgB,WAAEC,GAAevJ,EACzC,mCAAoC,YAAUsJ,0CAAyD,YAAUC,MAE9G,SAAS5D,EAAoB1R,EAASuB,EAAMR,GAC/C,iBAAkBf,UAAgBuB,2BAA8B,YAAUR,OAEvE,SAASsP,EAAiB9O,GAC7B,6BAA8BA,MAE3B,SAASgU,EAA+B1S,EAAM7C,EAAS+L,GAM1D,WALkBA,EAAI/K,aACb+K,EAAI/K,kBACP+K,EAAIyJ,UACA,wBACA,mEACiC3S,OAAU7C,oCAAsD,MAAZA,EAAkB,QAAU,mBAAmB6C,wFAE3I,SAASmP,EAAkCzQ,EAAM6D,GACpD,6BAA8B7D,sBAAyB6D,oCAEpD,SAASyM,EAAiBzM,GAC7B,uCAAwCA,MAErC,SAAS+M,EAAiBnS,EAASiS,GACtC,mCAAoCjS,cAAoBiS,cAErD,SAASvK,EAAcnG,EAAMwK,GAChC,MAAM,KAAEpE,EAAI,OAAEC,GAAWmE,EACzB,wBAAyBxK,0BAA6BoG,GAAQC,EAAS,kBAAoBD,EAAO,OAAS,YAExG,SAASG,EAAcxH,EAAUN,GACpC,kBAAmB,YAAUM,oBAA2BN,oDAErD,SAASyV,EAAkBzV,EAASuB,EAAMmU,GAC7C,SAAU1V,wBAA8BuB,mCAAsCmU,cAE3E,MAAMlO,EAAyB,mGAC/B,SAASD,EAAoBvH,EAAS2V,EAAaC,GACtD,SAAU5V,yCAA+C2V,KAAeC,WAAgBA,IAAS,MAE9F,SAASzO,EAAuBnH,GACnC,SAAUA,4BAAkCA,qCAEzC,SAASsS,EAA6BtS,GACzC,SAAUA,8DAEP,SAAS6V,EAAoBV,GAChC,mCAAoCA,EAASrO,KAAK,YAAYqO,EAAS3V,OAAS,EAAI,MAAQ,uBAEzF,SAASsW,EAA4B9V,EAASuB,GACjD,iCAAkCvB,iBAAuBuB,oDAAgE,YAATA,EAAqB,QAAU,eAG5I,SAASwU,EAAcC,EAAOC,GAEjC,wEADiBD,GAASC,EAAQ,YAAcD,EAAQ,KAAO,2DAG5D,SAASE,EAAiBC,EAAUC,GACvC,2BAA4BD,uBAA8BC,MAGvD,MAAMC,EAA+C,yEAC/CC,EAAwB,oLAC9B,SAASC,EAAmCC,GAC/C,wCAAyCA,6BAEtC,SAASC,EAAwCnW,GACpD,iEAAkE,YAAUA,OAEzE,SAASoW,EAAuCtR,GACnD,iDAAkDA,4EAE/C,SAASuR,EAA+BrW,GAC3C,qEAAsE,YAAUA,OAE7E,SAASsW,EAAiC/T,GAC7C,iDAAkDA,MAE/C,SAASgU,EAA4B7W,EAASgB,EAAW8V,GAC5D,kBAAmB9W,0BAAgCgB,2BAAmC8V,oBAEnF,SAASC,EAA6B/V,EAAW8V,GACpD,sCAAuC9V,2BAAmC8V,oBAEvE,SAASjW,EAAkCG,EAAWgW,EAAUhX,GACnE,SAAUA,cAAoBgX,0CAAiDhW,WAE5E,SAASiW,EAAyBpU,EAAM7B,GAC3C,qBAAsBA,+BAAuC6B,MAE1D,SAASqU,EAAYlX,GACxB,uBAAwBA,6BAA+C,UAAZA,EAAsB,IAAM,qBAEpF,SAASmX,EAAyBxX,EAAUyX,EAAYhT,EAAIC,GAC/D,qBAAsB+S,EAAWC,wBAAwB1X,EAAS0X,gBAAgB,YAAUjT,UAAW,YAAUC,cAAe,YAAUD,MAEvI,SAASkT,EAA+B3X,EAAUyX,EAAYhT,EAAIC,GACrE,qBAAsB+S,EAAWC,wBAAwB1X,EAAS0X,gBAAgB,YAAUjT,UAAW,YAAUC,2CAE9G,SAASkT,GAAsCvX,GAClD,kDAAmDA,6EAEhD,SAASwX,GAAkBhW,GAC9B,gCAAiC,YAAUA,8EAExC,MAAMiW,GAA0B,2BAC1BC,GAAqB,4FAErBC,GAA2B,4BAEjC,SAASC,GAAsB5X,GAClC,uBAAwBA,2BAAiCA,OAEtD,SAAS6X,GAA0B7W,GACtC,wCAAyCA,MAEtC,SAAS8W,GAA2B1S,GACvC,mFAAoFA,OAGjF,SAAS2S,GAAgBC,EAAUjX,GACtC,iBAAkBiX,MAAa,YAAUjX,MAEtC,SAASkX,GAAoBC,GAChC,oBAAqBA,iDAA4DA,EAAaC,QAAQ,MAAO,WAE1G,SAASC,GAAW7Y,GACvB,oCAAqC,YAAUA,iDAE5C,SAAS8Y,GAAoCC,EAAQC,GACxD,SAAUA,EAAS,UAAY,KAAKA,GAAUD,EAAS,OAAS,KAAKA,EAAS,UAAY,KAAKC,GAAUD,EAAS,OAAS,4CAExH,SAASE,GAAoCF,EAAQC,EAAQ1V,GAChE,SAAUyV,8BAAmCC,SAAc1V,KAExD,SAAS4V,GAA6CrT,EAAWsT,GACpE,yEAA0EtT,MAAcsT,gCAErF,SAASC,GAA0BJ,EAAQ1V,GAC9C,iDAAkDA,oBAAuB0V,KAEtE,SAASK,GAAsBjZ,GAClC,wCAAyCA,KAGtC,SAASkZ,GAAyB7Y,GACrC,iBAAkBA,kCAEf,SAAS8Y,GAAgC9Y,GAC5C,oBAAqBA,uC,kCC9MzB,yKAeO,MAAM+Y,UAAuB,IAChC,cACIza,SAAS0a,WACTva,KAAKwa,wBAA0B,CAC3B,IACA,IACA,IACA,IAAI,IACJ,IAAI,IACJ,IAAI,KAGZ,IAAI/M,EAAMgN,GAEN,GAAI,YAAWhN,GAAO,CAClB,MAAMiN,EAAS,YAAgBjN,EAAKjH,SAAU,KACxCmU,EAAY,YAAgBlN,EAAKjH,SAAU,KAC3CoU,EAAW,YAAgBnN,EAAKjH,SAAU,KAChD,GAAIkU,GAAUC,GAAaC,EACvB,OAAO5a,KAAK6a,eAAepN,EAAMgN,GAGzC,OAAO5a,MAAMqK,IAAIuD,EAAMgN,GAG3B,QAAQhN,EAAMgN,GACV,MAAM,eAAEK,EAAc,iBAAElE,GAAqB6D,EAC7C,GAAIK,GAAkBlE,EAClB,OAAO5W,KAAK+a,sCAAsCtN,EAAMgN,GAE5D,MAAMO,EAAuBhb,KAAKib,eAAeC,KAAKlb,MACtD,IAAK,MAAMmb,KAAkBnb,KAAKwa,wBAC9B,GAAIW,EAAeC,gBAAgB3N,EAAMgN,EAAO3Y,QAC5C,OAAOqZ,EAAehG,IAAI1H,EAAMgN,EAAQO,GAGhD,OAAOvN,EAEX,UAAUA,EAAMgN,GACZ,MAAM,OAAEY,GAAW5N,EAMnB,OALK,YAAQ4N,IAAW5N,EAAK6N,UAEzB7N,EAAO,YAAKA,EAAM,CAAC,YACnB,IAAS,IAAYsI,0BAA0B,YAE5CjW,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAO,CAAEA,KAAMzN,KAAKkK,IAAIuD,EAAKA,KAAMgN,KAE9E,SAAShN,EAAMgN,GACX,MAAM,MAAEc,GAAU9N,EAMlB,OALI,YAAe8N,IAAU9N,EAAK6N,UAE9B7N,EAAO,YAAKA,EAAM,CAAC,YACnB,IAAS,IAAYsI,0BAA0B,WAE5ClW,MAAM2b,SAAS/N,EAAMgN,GAEhC,sCAAsChN,EAAMgN,GACxC,MAAM,SAAEjU,EAAQ,WAAEqQ,GAAepJ,GAC3B,eAAEqN,EAAc,iBAAElE,EAAgB,OAAE9U,GAAW2Y,EAC/CgB,EAAmBC,EAAgB,CAAE9E,mBAAkBC,eACvD8E,EAAiBC,EAAc,CAAEd,iBAAgBtU,aACvD,OAAOxG,KAAK6b,QAAQ/b,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAQgO,EAAmB,CAAE5E,WAAY4E,GAAqB,IAAOE,EAAiB,CAAEnV,SAAUmV,GAAmB,IAAM,CAAE7Z,WAEnM,eAAe2L,EAAMgN,GAGjB,MAAMqB,EAAKrO,EAAKjH,UAAU,IAAEuV,EAAG,OAAEC,EAAM,MAAET,GAAUO,EAAItV,EAAW,YAAOsV,EAAI,CAAC,MAAO,SAAU,WAEzF,KAAE1X,EAAI,MAAE4B,EAAK,WAAE6Q,EAAU,OAAE5Q,EAAM,UAAEgW,EAAWzV,SAAU0V,GAAMzO,EAAM0O,EAAY,YAAO1O,EAAM,CAAC,OAAQ,QAAS,aAAc,SAAU,YAAa,cACpJ,aAAE2O,EAAY,OAAEC,GAAWrc,KAAKsc,yBAAyB,CAAEP,MAAKC,SAAQT,UAC9E,OAAOvb,KAAKwb,SAAS1b,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIoc,GAAYE,GAAS,CAEpFd,MAAOa,EAAc3O,KAAM3N,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAK8W,EAAa,CAAEA,cAAe,IAAM,CAAEzS,SAAU4B,EAAQ,CAAEA,SAAU,IAAOC,EAAS,CAAEA,UAAW,IAAM,CAAEO,aAAcyV,EAAY,CAAEA,aAAc,MAASxB,GAExR,yBAAyB8B,GACrB,MAAM,IAAER,EAAG,OAAEC,EAAM,MAAET,GAAUgB,EAC/B,GAAIR,GAAOC,EAAQ,CACXT,GACA,IAAS,IAAYnE,oBAAoB,IAAK2E,EAAM,CAAC,KAAO,MAASC,EAAS,CAAC,KAAU,MAE7F,MAAMI,EAAe,GACfC,EAAS,GACf,IAAK,MAAM9a,IAAW,CAAC,IAAK,KAAS,CACjC,MAAMkI,EAAM8S,EAAOhb,GACnB,GAAIkI,EAAK,CACL,MAAM,MAAEvD,EAAK,OAAE2T,EAAM,QAAE2C,EAAO,QAAElB,GAAY7R,EAAKgT,EAAmB,YAAOhT,EAAK,CAAC,QAAS,SAAU,UAAW,YAC/G2S,EAAa7a,GAAWkb,EACxB,IAAK,MAAM1E,IAAQ,CAAC,QAAS,SAAU,gBACjB5V,IAAdsH,EAAIsO,KACJsE,EAAOtE,GAAQsE,EAAOtE,IAAS,GAC/BsE,EAAOtE,GAAMxW,GAAWkI,EAAIsO,KAK5C,MAAO,CAAEqE,eAAcC,UAEtB,CACD,MAAM,MAAEnW,EAAK,OAAE2T,EAAM,QAAE2C,EAAO,QAAElB,GAAYC,EAC5C,MAAO,CACHa,aAF8D,YAAOb,EAAO,CAAC,QAAS,SAAU,UAAW,YAG3Gc,OAAQvc,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAKmG,EAAQ,CAAEA,SAAU,IAAO2T,EAAS,CAAEA,UAAW,IAAO2C,EAAU,CAAEA,WAAY,IAAOlB,EAAU,CAAEA,WAAY,MAIhM,SAAS7N,EAAMqO,GAEX,IAAI,eAAEhB,EAAc,iBAAElE,GAAqBkF,EAAIY,EAAc,YAAOZ,EAAI,CAAC,iBAAkB,qBAC3F,MAAM,SAAEtV,EAAQ,WAAEqQ,GAAepJ,EAAMkP,EAAO,YAAOlP,EAAM,CAAC,WAAY,eAClEgN,EAAS3a,OAAOC,OAAOD,OAAOC,OAAO,GAAI2c,GAAc,CAAE5B,eAAgBc,EAAc,CAAEd,iBAAgBtU,aAAaoQ,iBAAkB8E,EAAgB,CAAE9E,mBAAkBC,iBAClL,OAAOhX,MAAM+c,SAASD,EAAMlC,IAGpC,SAASmB,EAActO,GACnB,MAAM,eAAEwN,EAAc,SAAEtU,GAAa8G,EACrC,GAAIwN,GAAkBtU,EAAU,CAC5B,MAAMqW,EAAY,YAAK/B,GAAgBtS,OAAO,CAACsU,EAAGC,KAC1CvW,EAASuW,IACTD,EAAE/U,KAAKgV,GAEJD,GACR,IACCD,EAAU9b,OAAS,GACnB,IAAS,IAAY0V,mBAAmBoG,IAGhD,MAAM5c,EAASH,OAAOC,OAAOD,OAAOC,OAAO,GAAK+a,GAAkB,IAAOtU,GAAY,IACrF,OAAO,YAAKvG,GAAQc,OAAS,EAAId,OAASkC,EAE9C,SAASuZ,EAAgBpO,GACrB,MAAM,iBAAEsJ,EAAgB,WAAEC,GAAevJ,EAIzC,OAHIsJ,GAAoBC,GACpB,IAAS,IAAYF,qBAAqB,CAAEC,mBAAkBC,gBAE3DA,GAAcD,I,kCCrJzB,sFAMA,SAASoG,EAAiBra,GACtB,MAAQsa,MAAOC,EAAQrX,KAAMsX,GAAUxa,EAASyB,EAAO,YAAOzB,EAAS,CAAC,QAAS,SACjF,OAAO,YAAKyB,GAAMrD,OAAS,EAAIqD,EAAOA,EAAKtB,KAE/C,SAASsa,EAA2Btb,GAChC,IAAK,MAAMsC,IAAQ,CAAC,OAAQ,OAAQ,OAAQ,SACpCtC,EAAOsC,KACPtC,EAAShC,OAAOC,OAAOD,OAAOC,OAAO,GAAI+B,GAAS,CAE9C,CAACsC,GAAO,YAAKtC,EAAOsC,GAAO,CAAC,QAAS,YAGjD,OAAOtC,EAEX,SAASub,EAAgB1a,EAAS2a,EAAa,GAAI9W,GAC/C,MAAsB,gBAAlB7D,EAAQsa,MACD,CAAEpQ,QAAS,GAEblK,EAAQsa,MAEN,YAASta,EAAQsa,OAASta,EAAQsa,MAAQ,QAE1B9a,IAAlBQ,EAAQsa,MAEN,KAIHK,EAAWL,OAASzW,EAASkG,MAEtB,YAAS4Q,EAAWL,OAASK,EAAWL,MAAQ,QAG3D,EAGR,SAASM,EAAe5a,EAAS2a,EAAa,IAC1C,OAAI3a,EAAQkD,MAEgB,IAAjBlD,EAAQkD,KAAgB,GAAKlD,EAAQkD,UAEtB1D,IAAjBQ,EAAQkD,KAEN,KAIHyX,EAAWzX,MAEgB,IAApByX,EAAWzX,KAAgB,GAAKyX,EAAWzX,UAGtD,EAGD,MAAM2X,EACT,cACIxd,KAAKP,KAAO,eAEhB,gBAAgBgO,EAAM3L,GAClB,GAAI,YAAW2L,GAAO,CAClB,MAAM,KAAErJ,EAAI,SAAEoC,GAAaiH,EACrB9K,EAAU,YAAUyB,GAAQA,EAAO,CAAEtB,KAAMsB,GACjD,OAAQzB,EAAQG,MACZ,IAAK,OACL,IAAK,OACL,IAAK,QACD,QAASua,EAAgB1a,EAASb,EAAOa,EAAQG,MAAO0D,GAC5D,IAAK,OACD,QAEE6W,EAAgB1a,EAASb,EAAOa,EAAQG,MAAO0D,MAC3C+W,EAAe5a,EAASb,EAAOa,EAAQG,QAGzD,OAAO,EAEX,IAAI2K,EAAMgN,EAAQ1H,GACd,MAAM,OAAEjR,GAAW2Y,GACb,UAAEwB,EAAS,WAAEpF,EAAU,SAAErQ,EAAQ,KAAEpC,GAASqJ,EAAM0O,EAAY,YAAO1O,EAAM,CAAC,YAAa,aAAc,WAAY,SACnH9K,EAAU,YAAUyB,GAAQA,EAAO,CAAEtB,KAAMsB,GAC3CqZ,EAAeJ,EAAgB1a,EAASb,EAAOa,EAAQG,MAAO0D,GAC9DkX,EAA+B,SAAjB/a,EAAQG,MAAmBya,EAAe5a,EAASb,EAAOa,EAAQG,OAChF6a,EAAQ,CACV7d,OAAOC,OAAOD,OAAOC,OAAO,GAAKkc,EAAY,CAAEA,aAAc,IAAM,CAE/D7X,KAAM4Y,EAAiBld,OAAOC,OAAOD,OAAOC,OAAO,GAAI4C,GAA4B,SAAjBA,EAAQG,KAAkB,CAAE+J,QAAS,IAAQ,KAE/GrG,SAAU,YAAKA,EAAU,CAAC,aAI5BoX,EAAa,YAAMjb,EAAS6D,GAClC,IAAIqX,EAAkBrX,EACtB,GAAIoX,EAAY,CACZ,MAAQE,aAAcC,EAAiB,OAAEC,GAAWJ,EACpDC,EAAkB/d,OAAOC,OAAOD,OAAOC,OAAO,GAAIyG,GAAW,CAAE,CAACuX,GAAoBje,OAAOC,OAAOD,OAAOC,OAAO,GAAIyG,EAASuX,IAAsBC,EAAS,CAAEC,MAAOD,GAAW,MAQpL,OANIN,GACAC,EAAM5V,KAAKjI,OAAOC,OAAOD,OAAOC,OAAO,GAAK8W,EAAa,CAAEA,cAAe,IAAM,CAAEzS,KAAMtE,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,QAAU,YAAKH,EAAS,CAAC,OAAQ,cAAe,UAAW,aAAc+a,GAAclX,SAAUqX,KAE7NJ,GACAE,EAAM5V,KAAKjI,OAAOC,OAAOD,OAAOC,OAAO,GAAK8W,EAAa,CAAEA,cAAe,IAAM,CAAEzS,KAAMtE,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,QAAS+J,QAAS,EAAG7D,QAAQ,GAAQ,YAAKrG,EAAS,CAAC,OAAQ,aAAc8a,GAAejX,SAAUqX,KAE5N9K,EAAUjT,OAAOC,OAAOD,OAAOC,OAAO,GAAIoc,GAAY,CAAEwB,UAAU7d,OAAOC,OAAOD,OAAOC,OAAO,GAAI0a,GAAS,CAAE3Y,OAAQsb,EAA2Btb,S,kCC9G/J,sFAMO,MAAMoc,EACT,cACIle,KAAKP,KAAO,YAEhB,gBAAgBgO,GACZ,GAAI,YAAWA,IAASA,EAAKjH,SACzB,IAAK,MAAMjF,KAAW,IAAyB,CAC3C,MAAMkI,EAAMgE,EAAKjH,SAASjF,GAC1B,GAAIkI,GAAO,YAAWA,IACdA,GAAOA,EAAI5G,OAAS4G,EAAI5G,MAAiB,UACzC,OAAO,EAKvB,OAAO,EAEX,IAAI4K,GACA,MAAM0Q,EAAa,GACnB,IAAI3X,EAAW1G,OAAOC,OAAO,GAAI0N,EAAKjH,UACtC,IAAK,MAAMjF,KAAW,IAAyB,CAC3C,MAAM+N,EAAW,YAAY/N,GACvBkI,EAAMjD,EAASjF,GACrB,GAAIkI,GAAO,YAAWA,IACdA,GAAOA,EAAI5G,OAAS4G,EAAI5G,MAAiB,UAAG,CAC5C,MAAM,MAAEA,GAAU4G,EAAK2U,EAAkB,YAAO3U,EAAK,CAAC,UAChDqS,EAAKjZ,GAAO,UAAEwb,GAAcvC,EAAIwC,EAAwB,YAAOxC,EAAI,CAAC,cAC1EqC,EAAW7O,GAAY,CAAElM,KAAMP,EAAiB,WAChD,IAAS,IAAYgV,uBACrBrR,EAAW1G,OAAOC,OAAOD,OAAOC,OAAO,GAAIyG,GAAW,CAAE,CAACjF,GAAUzB,OAAOC,OAAOD,OAAOC,OAAO,GAAIqe,GAAmB,YAAKE,GAAuBvd,OAAS,CAAE8B,MAAOyb,GAA0B,OAI1M,OAAOxe,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIoe,GAAa1Q,GAAO,CAAEjH,gB,kCCvCnF,+EAKO,MAAM+X,EACT,cACIve,KAAKP,KAAO,oBAEhB,gBAAgBgO,GACZ,GAAI,YAAWA,GAAO,CAClB,MAAM,SAAEjH,EAAQ,KAAEpC,GAASqJ,EAC3B,GAAa,SAATrJ,EACA,IAAK,MAAM7C,KAAW,IAAyB,CAC3C,MACMid,EAAiBhY,EADH,YAAoBjF,IAExC,GAAMiF,EAASjF,IAAY,YAAWid,KAAoB,YAASA,EAAexb,KAC9E,OAAO,GAKvB,OAAO,EAEX,IAAIyK,EAAMgN,EAAQ1H,GACd,MAAM,SAAEvM,GAAaiH,EAErB,OADA,IAAS,IAAY6J,gBAAgB9Q,EAASiY,KAAMjY,EAASkY,KACtD3L,EAAUjT,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAO,CAAErJ,KAAM,SAAWqW,M,kCC3BnF,kFAKO,MAAMkE,UAAoB,IAC7B,YAAYlR,EAAMlN,EAAQqe,EAAiBC,EAAU/c,GACjDjC,MAAM4N,EAAM,SAAUlN,EAAQqe,EAAiB9c,EAAQ+c,EAAUpR,EAAKqR,SAClErR,EAAKqR,SAAWrR,EAAKqR,QAAQ3W,OAAiC,WAAxBsF,EAAKqR,QAAQ3W,KAAKoE,GAA0C,WAAxBkB,EAAKqR,QAAQ3W,KAAKqE,IAC5F,IAAS,IAAYwJ,0BAEzBhW,KAAK+e,WAAa,YAActR,GAAQ,UAAY,YAAcA,GAAQ,UAAY,SACtFzN,KAAKM,SAAWN,KAAKgf,YAAYvR,GAAMvD,IAAI,CAAC7J,EAAO4e,IACxC,YAAW5e,EAAOL,KAAMA,KAAKkf,QAAQ,UAAYD,QAAI9c,EAAW0c,EAAU/c,IAGzF,YAAY2L,GACR,OAAI,YAAcA,GACPA,EAAK0R,QAEP,YAAc1R,GACZA,EAAK2R,QAET3R,EAAKO,OAEhB,kBACI,YAAsBhO,MAE1B,iBACI,OAAO,KAEX,wBACI,OAAOF,OAAOC,OAAOD,OAAOC,OAAO,GAAyB,YAApBC,KAAK+e,WAA2B,CAAEzD,QAAS,GAAM,IAAM,CAAE+D,OAAQ,OAErGnZ,MAAO,Y,kCClCnB,qDAMA,MAAMoZ,EAAQ,CACVC,IAAKC,QACwBrd,IAAlBqd,EAAQF,QAAyC,IAAlBE,EAAQF,MAElD3R,MAAO,CAAC1M,EAAOue,EAASC,KAChBA,EAAOH,QACPE,EAAQF,MAAQ,YAASG,EAAOH,OAAS,YAAcG,EAAOH,MAAO,SAAWG,EAAOH,QAG/FI,gBAAiB,CAACze,EAAOue,EAASG,KAC1B,IAAcJ,IAAIC,IAClBA,EAAQI,QAAQC,MAAMve,QAAQwe,IAC1B,MAAMC,EAAMJ,EAAQK,UAAUC,GAAKA,EAAExgB,OAAS,eAAW+f,EAAQ/f,QAAQqgB,EAAK5c,WACjE,IAAT6c,GACAJ,EAAQI,GAAKG,GAAGnY,KAAK,CAAEoY,OAAQX,EAAQF,MAAOvQ,OAAQ,WAI3D4Q,GAEXA,QAAS,CAAC1e,EAAOue,EAASG,KACtB,SAASS,EAASL,EAAKhR,IACN,IAATgR,GAAcJ,EAAQI,GAAKG,IAC3BP,EAAQI,GAAKG,GAAGnY,KAAK,CAAEoY,OAAQX,EAAQF,MAAOvQ,WAItD,GAAqB,aAAjByQ,EAAQ1c,KACR0c,EAAQI,QAAQC,MAAMve,QAAQwe,IAC1B,MAAMO,EAAOV,EAAQK,UAAUC,GAAKA,EAAExgB,OAASqgB,EAAKH,QAAQW,QAE5D,GADAF,EAASC,EAAM,WACD,IAAVA,EAAa,CAEbD,EADaT,EAAQK,UAAUC,GAAKA,EAAExgB,OAASqgB,EAAKH,QAAQ/f,MAC7C,eAItB,CACD,IAAI2gB,EAAOZ,EAAQK,UAAUC,GAAKA,EAAExgB,OAAS+f,EAAQ/f,KAAO,KAC5D2gB,EAASG,EAAM,QACX,IAAOhB,IAAIC,IAEXY,EADAG,EAAOZ,EAAQK,UAAUC,GAAKA,EAAExgB,OAAS+f,EAAQ/f,KAAO,KACzC,SAGvB,OAAOkgB,IAGA,O,kCCtDf,uCAIA,MAAMa,EAAS,oBACTC,EAAQ,mBACRC,EAAY,CACdnB,IAAKC,GACuB,aAAjBA,EAAQ1c,MAAuB0c,EAAQkB,UAElDf,QAAS,CAAC1e,EAAOue,EAASG,KACtB,MAAMlgB,EAAO+f,EAAQ/f,KACfkhB,EAAY,IAAepB,IAAIC,GAC/BoB,EAASnhB,EAAO+gB,GAChB,EAAEjU,EAAC,EAAEC,GAAMgT,EAAQI,QAAQL,IACjC,IAAIY,EAAS,YAAcX,EAAQkB,UAAW,SAgC9C,OA/BKC,IACDR,EAASA,EAAOjW,IAAI2W,IAAOA,EAAEC,QAAQ,GAAGC,SAAWthB,EAAO,IAAiBohB,KAE/ElB,EAAQ5X,KAAK,CACTtI,KAAMmhB,EACNte,MAAO,GACP4d,GAAI,CACA,CACIC,OAAQA,EAAOjW,IAAI2W,GAAKA,EAAEC,QAAQ,IAClC/R,OAAQ,gCACG5M,IAANoK,EAAkB,gBAAkBoU,EAAY,YAAO1f,EAAO,cAAcsL,EAAEoT,QAAQW,WAAa,UAC7Fne,IAANqK,EAAkB,gBAAkBmU,EAAY,YAAO1f,EAAO,cAAcuL,EAAEmT,QAAQW,WAAa,IACpG,OAGb,CACC7gB,KAAMA,EAAOghB,EACbne,MAAO,GACP4d,GAAI,CACA,CACIC,OAAQA,EACRpR,cAAe6R,qBAA0BA,0BAI3Cze,IAANoK,GACAyU,EAAQ/f,EAAOue,EAASjT,EAAG,QAASoT,QAE9Bxd,IAANqK,GACAwU,EAAQ/f,EAAOue,EAAShT,EAAG,SAAUmT,GAElCA,IAIf,SAASqB,EAAQ/f,EAAOue,EAASM,EAAMngB,EAAMggB,GACzC,MAAMlgB,EAAO+f,EAAQ/f,KACfmhB,EAASnhB,EAAO+gB,EAChBS,EAAQxhB,EAAOghB,EACflf,EAAUue,EAAKve,QACfof,EAAY,IAAepB,IAAIC,GAC/B7Q,EAASgR,EAAQjR,OAAOwS,GAAKA,EAAEzhB,OAASqgB,EAAKH,QAAQgB,EAAY,OAAS,WAAW,GACrFQ,EAASlgB,EAAMmgB,iBAAiBzhB,GAAMgP,OACtC0S,EAAYpgB,EAAMW,kBAAkBL,GACpCgB,EAAY8e,EAAUxgB,IAAI,QAC1BygB,EAAOX,GAAapf,IAAY,IAAI,IAAM,GAC1CuY,KAAY8G,YAAiBrf,IAS7BwN,KAPS4R,EAEK,QAAdpe,EACI,SACc,QAAdA,EACI,SACA,YALR,eAMqBuX,SARTwH,IAAOL,KAAS1f,QAAgBof,KAAeQ,YAAmBrH,SAS/E6G,GAA2B,QAAdpe,OAA2B8e,EAAUxgB,IAAI,aAAe,IAAM,IAC5E,IACJ8N,EAAOuR,GAAGnY,KAAK,CACXoY,OAAQ,CAAExR,OAAQsS,GAClBlS,OAAQ4R,EAAY5R,gBAAuBA,SAAcoS,OA1BlD,O,kCClDf,8CAKA,MAAMX,EAAS,eACTC,EAAQ,cACRc,EAAO,CACThC,IAAKC,GACuB,aAAjBA,EAAQ1c,MAAuB0c,EAAQ+B,KAElD5B,QAAS,CAAC1e,EAAOue,EAASG,KACtB,MAAMlgB,EAAO+f,EAAQ/f,KACfkhB,EAAY,IAAepB,IAAIC,GAC/ByB,EAAQxhB,EAAOghB,GACf,EAAElU,EAAC,EAAEC,GAAMgT,EAAQI,QAAQL,IAC3BiC,EAAK,YAAYvgB,EAAMwgB,UAAU,MACjCC,EAAK,YAAYzgB,EAAMwgB,UAAU,MACvC,IAAItB,EAAS,YAAcX,EAAQ+B,KAAM,SAkCzC,OAjCKZ,IACDR,EAASA,EAAOjW,IAAI2W,IAAOA,EAAEE,SAAWthB,EAAO,IAAiBohB,KAEpElB,EAAQ5X,KAAK,CACTtI,KAAMA,EAAO+gB,EACbN,GAAI,CACA,CACIC,OAAQA,EACRpR,OAAS4R,EAEH,IACE,CAACa,eAAkBA,cAAiB,GAAIE,eAAkBA,cAAiB,IACtEhT,OAAO+C,KAAUA,GACjBpJ,KAAK,MACV,IALF,8BAQf,CACC5I,KAAMwhB,EACNf,GAAI,CACA,CACIC,OAAQA,EACRwB,OAAO,EACP5S,OAAQ,+DAIV5M,IAANoK,GACAyU,EAAQ/f,EAAOue,EAASjT,EAAG,QAASoT,QAE9Bxd,IAANqK,GACAwU,EAAQ/f,EAAOue,EAAShT,EAAG,SAAUmT,GAElCA,IAIf,SAASqB,EAAQ/f,EAAOue,EAASM,EAAMngB,EAAMggB,GACzC,MAAMlgB,EAAO+f,EAAQ/f,KACf8B,EAAUue,EAAKve,QACfof,EAAY,IAAepB,IAAIC,GAC/B7Q,EAASgR,EAAQjR,OAAOwS,GAAKA,EAAEzhB,OAASqgB,EAAKH,QAAQgB,EAAY,OAAS,WAAW,GACrFQ,EAASlgB,EAAMmgB,iBAAiBzhB,GAAMgP,OACtC0S,EAAYpgB,EAAMW,kBAAkBL,GACpCgB,EAAY8e,EAAUxgB,IAAI,QAC1B+gB,EAAOjB,EAAY,YAAO1f,EAAOM,GAAWoN,EAAOlP,KACnDwhB,EAAQxhB,EAAOghB,EASf1R,KAPU4R,EAEI,QAAdpe,EACI,UACc,QAAdA,EACI,UACA,aALR,gBAMsBqf,SARVniB,IAAO+gB,KAAUjf,QAQa0f,KAC3CN,GAA2B,QAAdpe,OAA2B8e,EAAUxgB,IAAI,aAAe,IAAM,IAC5E,IACJ8N,EAAOuR,GAAGnY,KAAK,CACXoY,OAAQ,CAAExR,OAAQsS,GAClBlS,OAAQ4R,EAAY5R,gBAAuBA,SAAcoS,OAxBlD,O,kCCvDf,YAEA,MAAMU,EAAS,CACXlC,QAHJ,OAGa,EACTmC,WAAY,CAAC7gB,EAAOue,KAEhB,OADYA,EAAQ/f,KAAO,IACd,MAA4B,WAApB+f,EAAQV,QAAuB,iBAAmB,YAAS7d,SAGzE,O,kCCTf,qEAIO,SAASkN,EAAoBlN,GAChC,OAAI,YAAaA,IAAU,YAAcA,IAAU,YAAcA,GAO9D,SAAgDA,GACnD,OAAOA,EAAMX,SAASkI,OAAO,CAAC0F,EAAa7N,IAChC6N,EAAYF,OAAO3N,EAAM8N,uBACjC4T,EAA2B9gB,IATnB+gB,CAAuC/gB,GAGvC8gB,EAA2B9gB,GAQnC,SAAS8gB,EAA2B9gB,GACvC,MAAMG,EAAYH,EAAMG,UAAUyV,WAClC,IAAKzV,GAAaA,EAAUnB,OACxB,MAAO,GAEX,MAAM4W,EAAazV,EAAU6gB,WACvB,KAAExiB,GAASoX,EAAY8F,EAAO,YAAO9F,EAAY,CAAC,SACxD,GAAKzV,EAAUxB,KAMV,CAED,MAAMD,EAAO,CACTgP,WAAYvN,EAAUzB,KAAKuK,IAAIgY,GAAOA,EAAIvT,QAAQtG,KAAK,UAErD8Z,EAAM/gB,EAAUxB,KAAK4I,OAAO,CAAC4Z,EAASxiB,KACxC,MAAMyiB,EAAS,YAAYziB,GAAQA,EAAK+O,gBAAkB1N,EAAMqhB,iBAAiB1iB,OAKjF,OAJK,YAASwiB,EAASC,IAEnBD,EAAQra,KAAKsa,GAEVD,GACR,IACH,GAAID,EAAIphB,QAAU,EACd,MAAM,IAAI4Q,MAAM,iDAEpB,MAAO,CACH7R,OAAOC,OAAO,CAAEN,OACZE,OAAMwiB,IAAK,CACPxT,OAAQwT,EAAIphB,OAAS,MAAQohB,EAAI9Z,KAAK,SAAW8Z,EAAI,KACpDxF,IAxBb,MAAO,CACH7c,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,QAAQ,CAAEihB,UAAW,CAAE/R,OAAQ,6BAAgCgO,M,kCC3BzG,wGAQO,SAAS4F,EAAgBthB,GAC5BA,EAAMG,UAAUyV,WAAa,YAAY5V,GAE7C,SAA6BA,GACzB,GAAIA,EAAMuhB,cAAe,CACrB,MAAM1C,EAAO7e,EAAMvB,oBACbyiB,IAAQrC,IAAuB,MAAdA,EAAKjd,OAAmC,MAAlBid,EAAKY,YAC5C/gB,EAAOwiB,EAAM,CAAClhB,EAAMmgB,iBAAiB,SAAUngB,EAAMmgB,iBAAiB,gBAAajf,EACnFvC,EAAOuiB,EAKrB,SAAuBlhB,GACnB,MAAMrB,EAAO,GACb,CAAC,CAAC,IAAW,KAAW,CAAC,IAAY,MAAY0B,QAAQmhB,KACjDxhB,EAAMsF,gBAAgBkc,EAAc,KAAOxhB,EAAMsF,gBAAgBkc,EAAc,MAC/E7iB,EAAKmI,KAAK,CACN4G,OAAQ1N,EAAMie,mBAAmBtf,EAAKmB,cAI9CE,EAAMsF,gBAAgB,MAAUtF,EAAMY,SAAS,KAAOiB,OAAS,KAC/DlD,EAAKmI,KAAK,CACN4G,OAAQ1N,EAAMie,mBAAmBtf,EAAKmB,YAG1B,IAAhBnB,EAAKmB,QAELnB,EAAKmI,KAAK9G,EAAMyhB,gBAAgB,MAEpC,OAAO9iB,EAvBgB+iB,CAAc1hB,QAASkB,EAC1C,OAAO,IAAI,IAAoBlB,EAAM2hB,gBAAe,GAAO9iB,OAAOC,OAAOD,OAAOC,OAAO,GAAKkB,EAAMa,OAAO+U,YAAc,IAAOiJ,GAAQ,IAAMngB,EAAMC,GAEtJ,OAVkDijB,CAAoB5hB,GA8D1E,SAAiCA,GAC7B,GAA8B,IAA1BA,EAAMX,SAASS,OACf,OAEJ,IAAI+hB,EAEJ7hB,EAAMX,SAASgB,QAAQjB,GAASkiB,EAAgBliB,IAEhD,MAAM0iB,EAAW,YAAM9hB,EAAMX,SAAUD,IACnC,MAAMwW,EAAaxW,EAAMe,UAAUyV,WACnC,GAAKA,EAIA,IAAKiM,EAKL,CACD,MAAME,EAlDlB,SAA2Ble,EAAOme,GAC9B,MAAMC,EAAsB,YAAM,IAAuBnL,IAEhD,YAAejT,EAAMqe,SAAUpL,KAAU,YAAekL,EAAOE,SAAUpL,OAI1E,YAAejT,EAAMqe,SAAUpL,KAC/B,YAAekL,EAAOE,SAAUpL,IAEhC,YAAUjT,EAAMjE,IAAIkX,MAAW,YAAUkL,EAAOpiB,IAAIkX,MAM5D,GADa,YAAUjT,EAAMnF,QAAU,YAAUsjB,EAAOtjB,MAC9C,CACN,GAAIujB,EACA,OAAOpe,EAEN,GAAI,YAAUA,EAAMqe,YAAc,YAAU,IAC7C,OAAOF,EAEN,GAAI,YAAUA,EAAOE,YAAc,YAAU,IAC9C,OAAOre,EAIf,OAAO,KAsBese,CAAkBN,EAAmBjM,GAInD,OAHImM,IACAF,EAAoBE,KAEfA,EAPT,OADAF,EAAoBjM,GACb,EALP,OAAO,IAgBf,GAAIiM,GAAqBC,EAAU,CAE/B,MAAMtjB,EAAOwB,EAAM2hB,gBAAe,GAC5BS,EAAkB,IAAI,IAAoB5jB,EAAMqjB,EAAkBpjB,oBAAqBojB,EAAkBnjB,KAAM,YAAUmjB,EAAkBljB,OAYjJ,OAVAqB,EAAMX,SAASgB,QAAQjB,IACnB,MAAMwW,EAAaxW,EAAMe,UAAUyV,WAC/BA,IACIA,EAAWyM,OACXD,EAAgBzjB,KAAKmI,QAAQ1H,EAAMe,UAAUyV,WAAWjX,MAE5DS,EAAMkjB,iBAAiB1M,EAAWhW,IAAI,QAASpB,GAC/CoX,EAAW5W,QAAS,KAGrBojB,EAEX,OA3G+EG,CAAwBviB,K,kCCT3G,kCAAO,MAAMwiB,EAAwB,CACjC,OACA,YACA,aACA,SACA,SACA,YACA,WACA,WACA,cACA,WACA,WACA,QACA,WACA,SACA,QACA,UACA,S,kCCjBJ,+FAOO,SAASC,EAAeziB,GAC3B,OAAI,YAAaA,IAAU,YAAcA,IAAU,YAAcA,GAEtDA,EAAMX,SAASkI,OAAO,CAACnH,EAAQhB,IAC3BgB,EAAO2M,OAAO0V,EAAerjB,IACrCsjB,EAAuB1iB,IAKnB0iB,EAAuB1iB,GAG/B,SAAS0iB,EAAuB1iB,GACnC,OAAO,YAAKA,EAAMG,UAAUC,QAAQmH,OAAO,CAACnH,EAAQE,KAChD,MAAMqiB,EAAiB3iB,EAAMG,UAAUC,OAAOE,GAC9C,GAAIqiB,EAAe3jB,OAEf,OAAOoB,EAEX,MAAMwB,EAAQ+gB,EAAe3B,UAE7B,IAAI,UAAE4B,GAAchhB,EACpB,MAAM,KAAEpD,EAAI,KAAEqD,EAAMghB,QAASC,EAAIF,UAAWG,EAAKC,MAAOC,GAAOrhB,EAAOshB,EAAkB,YAAOthB,EAAO,CAAC,OAAQ,OAAQ,UAAW,YAAa,UACzIohB,EAcP,SAA4BG,EAAY3C,EAAWlgB,GAEtD,IAAgB,MAAZA,GAA+B,MAAZA,IACf,YAAc6iB,GAEd,MAAO,CACHhhB,KAAM,CAAEuL,OAAQ8S,EAAY,UAIxC,OAAO2C,EAxBWC,CAAmBxhB,EAAMohB,MAAOxkB,EAAM8B,GAKhDsiB,GAAa,YAAqBA,KAClCA,EAAY,YAA6B5iB,EAAO4iB,IAEpD,MAAM3e,EAAS,YAAejE,EAAOM,GAGrC,OAFAF,EAAO0G,KAAKjI,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,OAClEqD,QAASoC,EAAS,CAAEA,UAAW,IAAO2e,EAAY,CAAEA,aAAc,IAAM,CAAEI,MAAOA,IAAUE,IACxF9iB,GACR,M,kCC3CP,qJAaO,SAASijB,EAAYrjB,GAAO,YAAEsjB,GAAgB,IACjDC,EAAevjB,GACf,YAAiBA,GACjB,IAAK,MAAM8W,KAAQ,IACf,YAAmB9W,EAAO8W,GAEzBwM,GAED,YAAgBtjB,GAGjB,SAASujB,EAAevjB,GACvB,YAAYA,GACZA,EAAMG,UAAUC,OASxB,SAA4BJ,GACxB,MAAM,SAAEuF,EAAQ,KAAEpC,GAASnD,EAC3B,OAAO,IAAeuH,OAAO,CAACic,EAAiBljB,KAC3C,IAAIM,EACAL,EACJ,MAAMiF,EAAaD,EAASjF,GAE5B,GAAI,YAAWkF,IAAerC,IAAS,KAAY7C,IAAY,KAASkF,EAAW3D,OAAS,IACxF,OAAO2hB,EAWX,GATI,YAAWhe,IACX5E,EAAW4E,EACXjF,EAAiBiF,EAAW5D,OAEvB,YAAuB4D,KAE5B5E,EAAW4E,EAAWiD,UACtBlI,EAAiBiF,EAAWiD,UAAiB,OAE7C7H,GAA+B,OAAnBL,IAA8C,IAAnBA,EAA0B,CACjEA,EAAiBA,GAAkB,GACnC,MAAMQ,EAAQ,YAAUR,EAAgBD,EAASM,EAAUuC,GAC3DqgB,EAAgBljB,GAAW,IAAI,IAAeN,EAAMwgB,UAAUlgB,EAAU,IAAI,GAAO,CAC/Ee,MAAON,EACPmhB,SAAU3hB,EAAesB,OAASd,IAG1C,OAAOyiB,GACR,IArC0BC,CAAmBzjB,GAG5CA,EAAMG,UAAUC,OAqCxB,SAA+BJ,GAC3B,MAAMwjB,EAAmBxjB,EAAMG,UAAUC,OAAS,GAC5CsjB,EAA6B,GAC7B7F,EAAU7d,EAAMG,UAAU0d,QAEhC,IAAK,MAAMze,KAASY,EAAMX,SACtBkkB,EAAenkB,GAEf,YAAKA,EAAMe,UAAUC,QAAQC,QAASC,IAGlC,GADAud,EAAQjc,MAAMtB,GAAWud,EAAQjc,MAAMtB,IAAY,YAAoBA,EAASN,GACjD,WAA3B6d,EAAQjc,MAAMtB,GAAuB,CACrC,MAAMqjB,EAAoBD,EAA2BpjB,GAC/CsjB,EAAiBxkB,EAAMe,UAAUC,OAAOE,GAASmE,gBAAgB,QACnEkf,EACI,YAAgBA,EAAkBtiB,MAAOuiB,EAAeviB,OAExDqiB,EAA2BpjB,GAAW,YAAwBqjB,EAAmBC,EAAgB,OAAQ,QAASC,IAIlHhG,EAAQjc,MAAMtB,GAAW,qBAElBojB,EAA2BpjB,IAItCojB,EAA2BpjB,GAAWsjB,KAoBtD,OAdA,YAAKF,GAA4BrjB,QAASC,IAEtC,MAAM9B,EAAOwB,EAAMwgB,UAAUlgB,GAAS,GAChCZ,EAAmBgkB,EAA2BpjB,GACpDkjB,EAAgBljB,GAAW,IAAI,IAAe9B,EAAMkB,GAEpD,IAAK,MAAMN,KAASY,EAAMX,SAAU,CAChC,MAAMykB,EAAa1kB,EAAMe,UAAUC,OAAOE,GACtCwjB,IACA1kB,EAAM2kB,YAAYD,EAAWlkB,IAAI,QAASpB,GAC1CslB,EAAW9kB,QAAS,MAIzBwkB,EApFsBQ,CAAsBhkB,GAoCvD,MAAM6jB,EAAsB,YAAoB,CAACI,EAAKC,IAAQ,YAAoBD,GAAO,YAAoBC,K,kCCjE7G,wIAYO,MAAMC,EAAmB,CAAC,QAAS,UAC1C,SAASC,EAAY9jB,GACjB,MAAmB,MAAZA,EAAkB,QAAsB,MAAZA,EAAkB,cAAWY,EAE7D,SAASmjB,EAAoBrkB,GAChC,MAAME,EAAuBF,EAAMG,UAAUC,OAE7C,IAAeC,QAASC,IACpB,MAAMG,EAAiBP,EAAqBI,GAC5C,IAAKG,EACD,OAEJ,MAAM6jB,EAsBP,SAA8BhkB,EAASN,GAC1C,MAAMO,EAAiBP,EAAMQ,gBAAgBF,IACvC,KAAE5B,GAASsB,EAEXsB,EADkBtB,EAAMW,kBAAkBL,GACdV,IAAI,QAGtC,IAAK,MAAMK,KAAYkkB,EACnB,QAAiCjjB,IAA7BX,EAAeN,GAAyB,CACxC,MAAMe,EAAuB,YAAyBM,EAAWrB,GAC3DgB,EAAyB,YAAoCX,EAASL,GAC5E,GAAKe,EAGA,GAAIC,EAEL,IAASA,QAGT,OAAQhB,GACJ,IAAK,QACD,OAAO,YAAaM,EAAeN,IACvC,IAAK,SACD,OAAO,YAAaskB,EAAYhkB,EAAeN,UAXvD,IAAS,IAAYkB,kCAAkCG,EAAWrB,EAAUK,IAgBxF,GAAIA,IAAY,KAAKA,IAAY,IAAG,CAChC,MAAMkkB,EAAclkB,IAAY,IAAI,QAAU,SACxCmkB,EAAY/lB,EAAK8lB,GACvB,GAAI,YAAOC,GAAY,CACnB,GAAI,YAAkBnjB,GAClB,OAAO,YAAa,CAAEa,KAAMsiB,EAAUtiB,OAGtC,IAAS,IAAYqV,YAAYgN,KAI7C,OAAO,YAQX,SAAsBlkB,EAASN,GAC3B,MAAM,KAAEtB,EAAI,OAAEmC,EAAM,KAAEsC,GAASnD,EACzBkC,EAAgBlC,EAAMkC,cAAc+X,KAAKja,IACzC,KAAE6B,GAAS7B,EAAMY,SAASN,GAE1BgB,EADkBtB,EAAMW,kBAAkBL,GACdV,IAAI,SAChC,OAAEqE,GAAWjE,EAAMQ,gBAAgBF,GACzC,OAAQA,GACJ,KAAK,IACL,KAAK,IAAG,CAEJ,GAAI,IAAc,CAAC,QAAS,QAASgB,GACjC,GAAIhB,IAAY,KAAM5B,EAAKqG,OAMtB,GAAIzE,IAAY,MAAM5B,EAAKsG,OAAQ,CACpC,MAAM0f,EAAI,YAA0B7jB,EAAO8jB,KAAM,UACjD,GAAI,YAAOD,GACP,OAAOA,OATmB,CAC9B,MAAME,EAAI,YAA0B/jB,EAAO8jB,KAAM,SACjD,GAAI,YAAOC,GACP,OAAOA,EAgBnB,MAAMvW,EAAW+V,EAAY9jB,GACvBukB,EAAa7kB,EAAMie,QAAQ5P,GACjC,OAAI/N,IAAY,KAAK,YAAoBgB,GAE9B,CAAC,IAAiBwjB,SAAS5iB,EAAe2iB,GAAa,GAGvD,CAAC,EAAG,IAAiBC,SAAS5iB,EAAe2iB,IAG5D,KAAK,IAAM,CAEP,MAAM9gB,EAAO/D,EAAMG,UAAUC,OAAOE,GAASV,IAAI,QAC3CmlB,EAuElB,SAAsB5hB,EAAMY,EAAMlD,GAC9B,GAAIkD,EACA,OAAO,EAEX,OAAQZ,GACJ,IAAK,MACL,IAAK,OACD,OAAOtC,EAAOe,MAAMojB,YACxB,IAAK,OACL,IAAK,QACL,IAAK,OACD,OAAOnkB,EAAOe,MAAMqjB,eACxB,IAAK,OACD,OAAOpkB,EAAOe,MAAMsjB,YACxB,IAAK,QACL,IAAK,SACL,IAAK,SACD,OAAOrkB,EAAOe,MAAMujB,QAI5B,MAAM,IAAIzU,MAAM,IAAY7I,oBAAoB,OAAQ1E,IA5F/BiiB,CAAajiB,EAAMY,EAAMlD,GACpCwkB,EA8FlB,SAAsBliB,EAAMzE,EAAMsB,EAAOa,GACrC,MAAMykB,EAAgB,CAClBha,EAAGia,EAAiBvlB,EAAO,KAC3BuL,EAAGga,EAAiBvlB,EAAO,MAE/B,OAAQmD,GACJ,IAAK,MACL,IAAK,OAAQ,CACT,QAAiCjC,IAA7BL,EAAOe,MAAM4jB,YACb,OAAO3kB,EAAOe,MAAM4jB,YAExB,MAAM5b,EAAM6b,EAAU/mB,EAAM4mB,EAAezkB,EAAO8jB,MAClD,OAAI,YAAS/a,GACFA,EAAM,EAGN,IAAI,IAAiB,OAASA,EAAI8D,cAGjD,IAAK,OACL,IAAK,QACL,IAAK,OACD,OAAO7M,EAAOe,MAAM8jB,eACxB,IAAK,OACD,OAAO7kB,EAAOe,MAAM+jB,YACxB,IAAK,QACL,IAAK,SACL,IAAK,SAAU,CACX,GAAI9kB,EAAOe,MAAMgkB,QACb,OAAO/kB,EAAOe,MAAMgkB,QAExB,MAAMC,EAAYJ,EAAU/mB,EAAM4mB,EAAezkB,EAAO8jB,MACxD,OAAI,YAASkB,GACFC,KAAKC,IAAIC,EAA4BH,EAAW,GAGhD,IAAI,IAAiB,WAAaG,OAA+BH,EAAUnY,eAM9F,MAAM,IAAIgD,MAAM,IAAY7I,oBAAoB,OAAQ1E,IAxI/B8iB,CAAa9iB,EAAMzE,EAAMsB,EAAOa,GACjD,OAAI,YAAuBS,GAuDhC,SAA0ByjB,EAAUM,EAAUa,GAEjD,MAAMvd,EAAI,KACN,MACMxG,MADO,YAAYkjB,GAAYA,EAAS3X,OAAS2X,OAC5BN,SAAgBmB,SAC3C,kBAAmBnB,MAAaM,OAAcljB,MAASA,MAE3D,OAAI,YAAYkjB,GACL,IAAI,IAAiB1c,GAGrB,CAAE+E,OAAQ/E,KAjEFwd,CAAiBpB,EAAUM,EA8B3C,SAA0C/jB,EAAWT,EAAQoD,EAAQ3D,GACxE,OAAQgB,GACJ,IAAK,WACD,OAAOT,EAAOe,MAAMwkB,cACxB,IAAK,WACD,OAAOvlB,EAAOe,MAAMykB,cACxB,IAAK,YACD,YAAenlB,IAAX+C,GAAwB,YAAQA,GACzBA,EAAOnE,OAAS,GAGvB,IAAS,IAAYsZ,gCAAgC9Y,IAE9C,IA3CqCgmB,CAAiChlB,EAAWT,EAAQoD,EAAQ3D,IAGjG,CAACykB,EAAUM,GAG1B,KAAK,IAED,MAAO,CAACxkB,EAAOe,MAAMqjB,eAAgBpkB,EAAOe,MAAM8jB,gBACtD,KAAK,IACD,MAAO,SACX,KAAK,IACL,KAAK,IACL,KAAK,IACD,MAAkB,YAAdpkB,EAEgB,YAATO,EAAqB,WAAa,UAGzB,SAATsB,GAA4B,aAATA,EAAsB,UAAY,OAEpE,KAAK,IACL,KAAK,IACL,KAAK,IAED,MAAO,CAACtC,EAAOe,MAAM2kB,WAAY1lB,EAAOe,MAAM4kB,YAGtD,MAAM,IAAI9V,2CAA2CpQ,KAnFjCmmB,CAAanmB,EAASN,IA9DZ0mB,CAAqBpmB,EAASN,GACxDS,EAAed,gBAAgB,QAAS2kB,KAGhD,SAASiB,EAAiBvlB,EAAOM,GAC7B,MAAMM,EAAWZ,EAAMY,SAASN,GAChC,GAAIM,GAAYA,EAASmB,KAAO,YAAUnB,EAASmB,KAAM,CACrD,MAAMC,EAAY,YAAiBhC,EAAOY,EAASqB,MAAOrB,EAASmB,KAE7DsM,EAAW+V,EAAY9jB,GACvBukB,EAAa7kB,EAAMie,QAAQ5P,GACjC,OAAO,IAAI,IAAiB,KACxB,MAAMsY,EAAc3mB,EAAMkC,cAAcF,GAClC4kB,MAAeD,YAAsBA,cAAwBA,SACnE,SAAU3mB,EAAMkC,cAAc2iB,SAAkB+B,QAkD5D,SAASrC,EAAYsC,GACjB,OAAI,YAAiBA,GACVhoB,OAAOC,OAAO,CAAE+nB,OAAQA,EAAOroB,MAAQ,IAAUqoB,EAAQ,CAAC,UAE9D,CAAEA,OAAQA,GA4Id,MAAMb,EAA4B,IAgDzC,SAASP,EAAU/mB,EAAM4mB,EAAewB,GACpC,MAAMC,EAAY,YAAOroB,EAAKqG,OAASrG,EAAKqG,MAAM5C,KAAO,YAA0B2kB,EAAY,SACzFE,EAAa,YAAOtoB,EAAKsG,QAAUtG,EAAKsG,OAAO7C,KAAO,YAA0B2kB,EAAY,UAClG,OAAIxB,EAAcha,GAAKga,EAAc/Z,EAC1B,IAAI,IAAiB,KAKxB,aAJc,CACV+Z,EAAcha,EAAIga,EAAcha,EAAEoC,OAASqZ,EAC3CzB,EAAc/Z,EAAI+Z,EAAc/Z,EAAEmC,OAASsZ,GAE3B5f,KAAK,WAG1B0e,KAAKlc,IAAImd,EAAWC,K,kCCpS/B,6EAUO,SAAS1lB,EAAUf,EAAgBD,EAASM,EAAUuC,GACzD,MAAMiU,EAyBV,SAAqB9W,EAASM,EAAUuC,GACpC,OAAQvC,EAASiB,MACb,IAAK,UACL,IAAK,UACD,OAAI,YAAevB,IAAmC,aAAvB,YAAUA,IACrB,UAAZA,GAAyC,YAAlBM,EAASiB,MAChC,IAAS,IAAYuU,4BAA4B9V,EAAS,YAEvD,WAEP,IAAc,CAAC,IAAK,KAAMA,IACtB,IAAc,CAAC,OAAQ,MAAO,QAAS,QAAS6C,GAGzC,OAIR,QACX,IAAK,WACD,OAAI,YAAe7C,GACR,OAEqB,aAAvB,YAAUA,IACf,IAAS,IAAY8V,4BAA4B9V,EAAS,aAEnD,WAEJ,OACX,IAAK,eACD,OAAI,YAAeA,GACX,YAAUM,EAASmB,KACZ,cAEJ,SAEqB,aAAvB,YAAUzB,IACf,IAAS,IAAY8V,4BAA4B9V,EAAS,iBAEnD,WAEJ,SACX,IAAK,UACD,OAGR,MAAM,IAAIoQ,MAAM,IAAYC,iBAAiB/P,EAASiB,OAvE7B2Q,CAAYlS,EAASM,EAAUuC,IAClD,KAAEtB,GAAStB,EACjB,OAAK,YAAeD,QAIPY,IAATW,EAEK,YAAwBvB,EAASuB,GAKjC,YAAyBA,EAAMjB,EAASiB,MAItCA,GAHH,IAAS,IAAYwV,6BAA6BxV,EAAMuV,IACjDA,IANP,IAAS,IAAYD,4BAA4B7W,EAASuB,EAAMuV,IACzDA,GASRA,EAfI,O,kCCff,8CAMO,MAAM6P,UAAsB,IAC/B,YAAY/E,EAAW,GAAIgF,EAAW,GAAIC,GAAe,GACrDvoB,MAAMsjB,EAAUgF,GAChBnoB,KAAKmjB,SAAWA,EAChBnjB,KAAKmoB,SAAWA,EAChBnoB,KAAKooB,aAAeA,EAExB,QACI,MAAMC,EAAQxoB,MAAMwoB,QAEpB,OADAA,EAAMD,aAAepoB,KAAKooB,aACnBC,K,kCChBf,yEAIO,SAASC,EAA2B/nB,EAAQgb,GAC/C,MAAM,IAAEQ,EAAG,OAAEC,GAAWT,EACxB,GAAIQ,GAAOC,EAAQ,CACf,IAAIuM,EAAY,KAEhB,IAAK,MAAM1mB,IAAY,CAACka,EAAKC,GACzB,GAAI,YAAYna,EAASkB,MAAO,CAC5B,MAAM,MAAEG,EAAK,GAAEwE,EAAK,KAAoB7F,EAASkB,KACjDxC,EAASgoB,EAAY,IAAI,IAA2BhoB,EAAQ,CACxDioB,cAAe,CACX,CACI9gB,KACAxE,QACA4E,GAAI,YAAmBjG,EAAUA,EAASkB,KAAM,CAAEuE,OAAO,MAGjER,QAAS,CAAC,YAAQjF,MAI9B,OAAO0mB,EAEX,OAAO,O,kCC1BX,wFAYO,SAASE,EAAkBxnB,GAC9B,IAAK,MAAMM,KAAW,IAClBmnB,EAAiBznB,EAAOM,GAE5BonB,EAAe1nB,EAAO,KACtB0nB,EAAe1nB,EAAO,KAE1B,SAASynB,EAAiBznB,EAAOM,GAC7B,GAAIN,EAAMsF,gBAAgBhF,GAAU,CAChC,MAAMM,EAAWZ,EAAMsa,MAAMha,GACvBqnB,EAAc,YAAkB,QAAS,KAAM3nB,EAAMa,OAAQP,GACnE,IAAI6F,EAAQ,YAAcvF,EAAUZ,EAAMa,OAAQ,CAC9C0F,gBAAgB,EAChB+K,oBAAgCpQ,IAAhBymB,KAA+BA,IAE/C3nB,EAAMZ,MAAMe,UAAUynB,cAActnB,GAAS6F,QAE7CA,GAAS,MAAQnG,EAAMZ,MAAMe,UAAUynB,cAActnB,GAAS6F,MAC9DnG,EAAMZ,MAAMe,UAAUynB,cAActnB,GAAS6F,MAAQ,MAEzD,MAAM0hB,EAAc,YAAkB,cAAejnB,EAAUZ,EAAMa,OAAQP,GACvEqR,EAAS/Q,EAAS+Q,QAAU,GAC5BmW,EAAS,YAAgBnW,EAAOmW,QAAQ,GACxCC,EAAa,YAAS,CAAC,SAAU,SAAUF,GAAe,SAAW,SAC3E7nB,EAAMG,UAAUynB,cAActnB,GAAW,CACrC6F,QACA6hB,cAAepnB,EACf,CAACmnB,GAAyB,UAAZznB,EAAsB,GAAK,CAAC2nB,EAAoBjoB,EAAOM,EAASwnB,MAI1F,SAASG,EAAoBjoB,EAAOM,EAASwnB,GACzC,MAAMzZ,EAAuB,QAAZ/N,EAAoB,SAAW,QAChD,MAAO,CACHwnB,SACAjD,WAAY7kB,EAAMZ,MAAMe,UAAUgO,WAAWvO,IAAIyO,GAAYrO,EAAMZ,MAAM+gB,iBAAiB9R,QAAYnN,EACtGgnB,KAAM,IAGd,SAASR,EAAe1nB,EAAOM,GAC3B,MAAM,MAAElB,GAAUY,EAClB,GAAIZ,EAAMe,UAAU+nB,KAAK5nB,GAAU,CAC/B,MAAM,cAAEsnB,EAAa,QAAE/J,GAAY7d,EAAMG,UAEzC,GADA0d,EAAQ3W,KAAK5G,GAAW,YAAkBud,EAASvd,GACrB,WAA1Bud,EAAQ3W,KAAK5G,GAAuB,CAEpC,MAAM6nB,EAA4B,MAAZ7nB,EAAkB,SAAW,MAC7C8nB,EAAeR,EAAcO,GACnC,IAAK,MAAME,KAAiBjpB,EAAMe,UAAU+nB,KAAK5nB,GAAU,CACvD,MAAMynB,EAtDH,SADWplB,EAuDmB0lB,EAAczoB,IAAI,YAtD5B,SAAX+C,EACb,SAEJ,SAoDKylB,EAAaL,GAAcK,EAAaL,IAAe,CAACE,EAAoBjoB,EAAOmoB,GAAe,IAElG,MAAMG,EAAW,YAAaD,EAAe,OAAQroB,EAAMa,OAAQ,CAAE8Q,QAAQ,IAE7EyW,EAAaL,GAAY,GAAGG,KAAKphB,KAAKwhB,GACtCD,EAAcE,eAAgB,IA7DvC,IAAuB5lB,I,kCCN9B,8IAYO,MAAM6lB,UAAmB,IAC5B,YAAYhc,EAAMlN,EAAQqe,EAAiB8K,EAAiB7K,EAAU/c,GAClEjC,MAAM4N,EAAM,QAASlN,EAAQqe,EAAiB9c,EAAQ+c,EAAUpR,EAAKqR,QAASrR,EAAKmY,MACnF,MAAMxW,EAAatP,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI2pB,GAAmBjc,EAAKzH,MAAQ,CAAEA,MAAOyH,EAAKzH,OAAU,IAAOyH,EAAKxH,OAAS,CAAEA,OAAQwH,EAAKxH,QAAW,IACxKjG,KAAKM,SAAWmN,EAAKkQ,MAAMzT,IAAI,CAACyT,EAAOsB,KACnC,GAAI,YAAYtB,GACZ,OAAO,IAAI8L,EAAW9L,EAAO3d,KAAMA,KAAKkf,QAAQ,SAAWD,GAAI7P,EAAYyP,EAAU/c,GAEpF,GAAI,YAAW6b,GAChB,OAAO,IAAI,IAAUA,EAAO3d,KAAMA,KAAKkf,QAAQ,SAAWD,GAAI7P,EAAYyP,EAAU/c,GAExF,MAAM,IAAI6P,MAAM,IAAY4D,YAAYoI,MAGhD,YACI3d,KAAKoB,UAAUxB,KAAO,YAAUI,MAChC,IAAK,MAAMK,KAASL,KAAKM,SACrBD,EAAMspB,YAGd,kBACI,YAAqB3pB,MAEzB,kBAIIA,KAAKoB,UAAU6a,UAAY,GAC3B,IAAK,MAAM5b,KAASL,KAAKM,SACrBD,EAAMupB,kBACN,YAAKvpB,EAAMe,UAAU6a,WAAW3a,QAAQyb,IACpC/c,KAAKoB,UAAU6a,UAAUc,GAAO1c,EAAMe,UAAU6a,UAAUc,KAItE,iBACI,IAAK,MAAM1c,KAASL,KAAKM,SACrBD,EAAMwpB,iBAGd,sBACI,YAAe7pB,MAEnB,iCAAiC2f,GAC7B,OAAO3f,KAAKM,SAASkI,OAAO,CAACshB,EAAIzpB,IAAUA,EAAM4O,iCAAiC6a,GAAKnK,GAG3F,kBACI,OAAO3f,KAAKM,SAASkI,OAAO,CAACmX,EAAStf,IAC3Bsf,EAAQ3R,OAAO3N,EAAM0pB,mBAC7B,YAAoB/pB,OAE3B,wBACI,OAAOA,KAAKM,SAASkI,OAAO,CAACmX,EAAStf,IAC3Bsf,EAAQ3R,OAAO3N,EAAMoO,yBAC7B,YAAsBzO,OAE7B,sBAAsBJ,GAClB,OAAOI,KAAKM,SAASkI,OAAO,CAACwhB,EAAI3pB,IAAUA,EAAM4N,sBAAsB+b,GAAKpqB,GAEhF,gBACI,IAAIwH,EAAQvH,MAAMuO,gBAClB,GAAIhH,EACA,OAAOA,EAGX,IAAK,MAAM/G,KAASL,KAAKM,SAErB,GADA8G,EAAQ/G,EAAM+N,gBAEV,OAAOhH,EAKnB,iBACI,OAAO,KAEX,gBACI,OAAO,YAA4BpH,KAAMA,KAAKM,SAAS2pB,QAAQ5pB,GACpDA,EAAM6pB,kBAGrB,kBACI,OAAOlqB,KAAKM,SAASkI,OAAO,CAAC2hB,EAAS9pB,IAC3B8pB,EAAQnc,OAAO3N,EAAM+pB,mBAC7B,YAAgBpqB,U,kCCjG3B,qEAIO,SAAS+oB,EAAO9nB,EAAOM,EAAS8oB,GACnC,MAAMxoB,EAAWZ,EAAMY,SAASN,KACf,MAAZA,EAAkBN,EAAMY,SAAS,MAAoB,MAAZN,EAAkBN,EAAMY,SAAS,WAAQM,GACjFgG,EAAOlH,EAAMkH,KAAK5G,GAClBO,EAASb,EAAMa,OACrB,IAAIwoB,EAAa,GAEjB,GAAI,YAAqBzoB,GAAW,CAChC,MAAM0oB,EAAatpB,EAAMW,kBAAkBL,GAASV,IAAI,UAAY,IAAU2C,IACxEiO,EAAO,YAAqB,cAAe5P,EAASgC,SAAUsE,EAAKD,OAAQpG,EAAOqG,KAAKC,gBAAiB,KAAMmiB,GAChH9Y,IACA6Y,EAAWxd,KAAO,CAAE6B,OAAQ8C,IAIpC,OADA6Y,EAAaxqB,OAAOC,OAAOD,OAAOC,OAAO,GAAIuqB,GAAaD,GACvB,IAA5B,YAAKC,GAAYvpB,YAAeoB,EAAYmoB,I,kCCnBvD,uEAIO,SAASE,GAAe,SAAEhkB,EAAQ,KAAE7G,IACvC,IAAK,MAAM4B,KAAW,IAAyB,CAC3C,MAAM+N,EAAW,YAAY/N,GACvBM,EAAW,YAAY2E,EAASjF,IAClC,YAAO5B,EAAK2P,KACRzN,GACI,YAAaA,YACNlC,EAAK2P,GACZ,IAAS,IAAYmJ,YAAYnJ,KAKjD,OAAO3P,I,kCCjBX,sGAQO,SAAS8qB,EAAiBrmB,EAAMoC,EAAU1E,GAAQ,UAAE4oB,IACvD,MAAM/nB,EAAU,YAAUyB,GAAQtE,OAAOC,OAAO,GAAIqE,GAAQ,CAAEtB,KAAMsB,GAE9DumB,EAAkBhoB,EAAQiB,QAAU,YAAc,SAAUjB,EAASb,GAmB3E,OAlBAa,EAAQiB,OAwCZ,SAAgBQ,EAAMoC,EAAUmkB,GAC5B,OAAQvmB,GACJ,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAED,OAER,MAAM,EAAEmI,EAAC,EAAEC,EAAC,GAAEiS,EAAE,GAAEC,GAAOlY,EACzB,OAAQpC,GACJ,KAAK,IACD,GAAI,YAAWmI,KAAO,YAASA,EAAEvJ,MAAS,YAAWwJ,IAAMA,EAAE7F,YAAc4F,EAAE5F,WACzE,MAAO,WAEX,GAAI,YAAW6F,KAAO,YAASA,EAAExJ,MAAS,YAAWuJ,IAAMA,EAAE5F,YAAc6F,EAAE7F,WACzE,MAAO,aAEX,GAAI+X,GAAMD,EAAI,CAEV,GAAIkM,EACA,OAAOA,EAGX,IAAKlM,GAAM,YAAWlS,IAAMA,EAAEzJ,OAAS,MAAiB,YAAUyJ,EAAEvJ,KAChE,MAAO,aAGX,IAAK0b,GAAM,YAAWlS,IAAMA,EAAE1J,OAAS,MAAiB,YAAU0J,EAAExJ,KAChE,MAAO,WAInB,KAAK,IAED,GAAIyb,GAAMC,EACN,OAGR,KAAK,IAED,GAAIA,EACA,OAAI,YAAWlS,IAAM,YAASA,EAAExJ,KACrB,aAGA,WAGV,GAAIyb,EACL,OAAI,YAAWlS,IAAM,YAASA,EAAEvJ,KACrB,WAGA,aAGV,GAAIoB,IAAS,IAAM,CACpB,GAAImI,IAAMC,EACN,MAAO,WAEN,GAAIA,IAAMD,EACX,MAAO,aAInB,KAAK,IACL,KAAK,IAAM,CAEP,MAAMqe,EAAgB,YAAWre,IAAM,YAAaA,GAC9Cse,EAAgB,YAAWre,IAAM,YAAaA,GACpD,GAAIoe,IAAkBC,EAClB,MAAgB,SAATzmB,EAAkB,aAAe,WAEvC,IAAKwmB,GAAiBC,EACvB,MAAgB,SAATzmB,EAAkB,WAAa,aAErC,GAAIwmB,GAAiBC,EAAe,CACrC,MAAMC,EAAOve,EACPwe,EAAOve,EACPwe,EAAcF,EAAKhoB,OAAS,IAC5BmoB,EAAcF,EAAKjoB,OAAS,IAElC,OAAIkoB,IAAgBC,EACA,SAAT7mB,EAAkB,WAAa,cAEhC4mB,GAAeC,EACL,SAAT7mB,EAAkB,aAAe,YAEvC0mB,EAAKnkB,WAAaokB,EAAKpkB,UACR,SAATvC,EAAkB,WAAa,aAEjC0mB,EAAKnkB,YAAcokB,EAAKpkB,UACb,SAATvC,EAAkB,aAAe,WAExCumB,GAIG,WAIP,OAAIA,QAIJ,GAIZ,MAAO,WAzJU/mB,CAAOjB,EAAQG,KAAM0D,EAAUmkB,QACxBxoB,IAApBwoB,GAAiCA,IAAoBhoB,EAAQiB,QAC7D,IAAS,IAAY6T,iBAAiB9U,EAAQiB,OAAQ+mB,SAIjCxoB,IADA,YAAgBQ,EAAQkK,QAAS,YAAc,UAAWlK,EAASb,MAExFa,EAAQkK,QAmBhB,SAAiBzI,EAAMoC,GACnB,GAAI,YAAS,CAAC,IAAO,IAAM,IAAQ,KAASpC,KAEnC,YAAYoC,GACb,MAAO,GAGf,OA1BsBqG,CAAQlK,EAAQG,KAAM0D,SAGpBrE,IADAQ,EAAQqG,SAE5BrG,EAAQqG,QAAS0hB,GAwBzB,SAAgB/nB,EAASb,GACrB,MAAMopB,EAAe,YAAc,SAAUvoB,EAASb,GAChDsC,EAAOzB,EAAQG,KACrB,OAAO,YAAgBooB,EAAc9mB,IAAS,KAASA,IAAS,KAAQA,IAAS,KA3BxC4E,CAAOrG,EAASb,SAIjCK,KADAQ,EAAQwoB,QAAU,YAAc,SAAUxoB,EAASb,MAEvEa,EAAQwoB,OAIhB,SAAgBxoB,EAAS6D,EAAU1E,GAC/B,GAAI0E,EAAS4kB,MAAQzoB,EAAQyoB,MAAQ,YAAc,OAAQzoB,EAASb,GAChE,MAAO,UAEX,OAAOa,EAAQwoB,OARMA,CAAOxoB,EAAS6D,EAAU1E,IAExCa,I,kCC9BX,wMAkBA,MAAM0oB,EAAe,CACjBC,KAAA,IACApnB,IAAA,IACAqnB,OAAA,IACAC,SAAA,IACAC,MAAA,IACA5lB,KAAA,IACAoX,MAAA,IACAyO,KAAA,IACAC,KAAA,IACAC,OAAA,IACA9e,KAAA,IACA+e,KAAA,IACAvlB,MAAA,KAEG,SAASwlB,EAAgB7qB,GAC5B,OAAI,YAAS,CAAC,IAAM,IAAM,KAAQA,EAAMmD,MAQ5C,SAAuBnD,GACnB,MAAMoJ,EAAU,YAAmBpJ,EAAMmD,KAAMnD,EAAMuF,UAC/CulB,EAAYC,EAAc/qB,EAAO,CAEnCgrB,WAAY5hB,EAAQtJ,OAAS,EAAImrB,EAAsB,KAE3D,OAAI7hB,EAAQtJ,OAAS,EAGV,CACH,CACItB,KAAMwB,EAAMie,QAAQ,aACpBpc,KAAM,QACNqpB,KAAM,CACF5Q,MAAO,CACH9b,KAAMysB,EAAsBjrB,EAAMyhB,gBAAgB,KAClD9iB,KAAMqB,EAAMyhB,gBAAgB,KAC5B5b,QAASuD,IAGjByE,OAAQ,CACJC,OAAQ,CACJ/I,MAAO,CAAE9C,MAAO,CAAEkpB,MAAO,UACzBnmB,OAAQ,CAAE/C,MAAO,CAAEkpB,MAAO,aAGlCC,MAAON,IAKRA,EAtCAO,CAAcrrB,GAGd+qB,EAAc/qB,GAG7B,MAAMirB,EAAsB,gBAwF5B,SAASF,EAAc/qB,EAAOqM,EAAM,CAAE2e,WAAY,KAC9C,MAAM7nB,EAAOnD,EAAMmD,KACbmoB,EAAO,YAAgBtrB,EAAM0B,QAAQ4pB,KAsB/C,SAAmBtrB,GACf,MAAMurB,EAASvrB,EAAMW,kBAAkB,KACjC6qB,EAASxrB,EAAMW,kBAAkB,KACvC,SAAQ4qB,GAAUA,EAAO3rB,IAAI,cAAkB4rB,GAAUA,EAAO5rB,IAAI,oBAAuBsB,EAzB1CuqB,CAAUzrB,GA+B/D,SAAwBA,GACpB,MAAM4V,EAAa5V,EAAMG,UAAUyV,WACnC,SAAOA,GAAeA,EAAWyM,aAAenhB,EAjCmBwqB,CAAe1rB,IAC5EoN,EAAQ,YAAUpN,EAAM0B,SACxBoa,EAAM9b,EAAMuF,SAASuW,IACrBha,EA1DH,SAAiB9B,GACpB,MAAM,SAAEuF,EAAQ,MAAEyX,EAAK,KAAE7Z,EAAI,QAAEzB,EAAO,OAAEb,GAAWb,EAC7CkT,EAAQ3N,EAAS2N,MACvB,MAAM,YAAQA,IAAU,YAAWA,IAAU,YAAcA,EAAM7R,SAC1D6R,GAAS,YAAcxR,EAAQwR,QAAW,YAAc,YAAc,QAASxR,EAASb,KAD/F,CAIK,IAAK,YAAQqS,IAAU,YAAWA,MAAY8J,EAE/C,OAAO,YAAW9J,EAAO,CAAE1C,KAAM,UAEhC,GAAI,YAAWrN,GAAf,CAED,MAAMwoB,EAAsC,eAAnBjqB,EAAQiB,OAA0B,IAAM,IAC3DipB,EAAsBrmB,EAASomB,GACrC,GAAI,YAAWC,GAAsB,CACjC,MAAM3L,EAAI2L,EAAoB9pB,KAC9B,GAAI,YAAQme,GACR,MAAO,CACHhe,MAAO,YAAQ2pB,EAAqB,CAAE5b,OAAQ2b,EAAkB1b,OAAQ,aAAcO,KAAM,WAG/F,GAAI,YAAYyP,GACjB,MAAO,CACHhe,MAAO,YAAQ,CAGXyD,UAAW,YAAY1F,EAAMuF,UAAY0a,EAAExZ,QAAKvF,EAChDe,MAAOge,EAAEhe,OACV,CAAEuO,KAAM,WAGd,GAAI,YAAiByP,GAAI,CAC1B,MAAM4L,EAAiB7rB,EAAMY,SAASqf,EAAE1a,UACxC,MAAO,CACHtD,MAAO,YAAQ4pB,EAAgB,CAAErb,KAAM,UACvC0C,MAAO+M,EAAE/M,OAIb,MAAO,CACHjR,MAAO,YAAQ2pB,EAAqB,CAEhC7kB,UAAW/G,EAAMgd,OAAShd,EAAMgd,MAAM8O,OAAS,WAAQ5qB,EACvDsP,KAAM,mBAcbub,CAAQ/rB,GACfgsB,EAAwB5B,EAAajnB,GAAM6oB,sBAC3C5B,EAAajnB,GAAM6oB,sBAAsBhsB,GACzC,KACN,MAAO,CACHnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,KAAMwB,EAAMie,QAAQ,SAAUpc,KAAMuoB,EAAajnB,GAAM0B,QAAWymB,EAAO,CAAEA,MAAM,GAAS,IAAOle,EAAQ,CAAEA,SAAU,IAAO0O,EAAM,CAAEA,IAAKA,EAAI7Z,OAAU,IAAOH,EAAO,CAAEA,QAAS,IAAM,CAAEopB,KAAM,CAAEvsB,KAAM0N,EAAI2e,WAAahrB,EAAMyhB,gBAAgB,MAAS5T,OAAQ,CAC5UC,OAAQsc,EAAajnB,GAAM2B,YAAY9E,MACpCgsB,EACL,CACEvd,UAAWud,GAEb,O,kCCjJd,8CACO,MAAM3B,EAAO,CAChBxlB,OAAQ,OACRC,YAAc9E,GACHnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC7FiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPxC,OAAQ,UACRjE,KAAM,YACL,IAA4B,IAAKsB,EAAO,CACzCisB,WAAY,YACZC,YAAa,YACblJ,MAAgC,eAAzBhjB,EAAM0B,QAAQiB,UACpB,IAA4B,IAAK3C,EAAO,CACzCisB,WAAY,YACZC,YAAa,YACblJ,MAAgC,aAAzBhjB,EAAM0B,QAAQiB,UACpB,IAAe3C,M,kCClB5B,uDAEO,MAAMiD,EAAM,CACf4B,OAAQ,OACRC,YAAc9E,GACHnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC/EiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPxC,OAAQ,SACRjE,KAAM,YACL,YAAasB,EAAO,IAAK,QAAS,YAAaA,EAAO,IAAK,U,kCCXxE,8DAGO,MAAMuqB,EAAW,CACpB1lB,OAAQ,QACRC,YAAc9E,GACHnB,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CACnDiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPzG,KAAM,SACNiE,OAAQ,YAGhBqpB,sBAAwBhsB,IACpB,MAAM,SAAEuF,GAAavF,EACfmsB,EAAW5mB,EAASkG,MAI1B,MAAO,CAHW5M,OAAOC,OAAO,CAAE+C,KAAM,WAAY+T,WAAY5V,EAAM2hB,kBAAqBwK,GAAY,YAAWA,IAAaA,EAAStqB,OAAS,IAC3I,CAAEI,MAAO,YAAQkqB,EAAU,CAAE3b,KAAM,WACnC,Q,kCCnBd,uDAEO,MAAMga,EAAQ,CACjB3lB,OAAQ,QACRC,YAAc9E,GACHnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC7FiF,MAAO,SACPC,SAAU,SACVC,MAAO,SACPxC,OAAQ,SACRjE,KAAM,YACL,YAAasB,EAAO,IAAK,UAAW,YAAaA,EAAO,IAAK,UAAW,IAAYA,EAAO,U,kCCXxG,sDAEO,MAAM0qB,EAAO,CAChB7lB,OAAQ,OACRC,YAAc9E,IACV,MAAM,QAAE0B,EAAO,MAAEqD,EAAK,OAAEC,GAAWhF,EAC7B2C,EAASjB,EAAQiB,OACvB,OAAK3C,EAAMuF,SAAS+F,GAAMtL,EAAMuF,SAASgG,GAAMvL,EAAMuF,SAAS6mB,UAAapsB,EAAMuF,SAAS8mB,UAInFxtB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC7FiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPxC,OAAQ,SACRjE,KAAM,YACL,IAA4B,IAAKsB,EAAO,CACzCisB,WAAuB,eAAXtpB,EAA0B,YAAc,IAAQoC,GAC5DmnB,YAAa,YACblJ,MAAkB,aAAXrgB,KACN,IAA4B,IAAK3C,EAAO,CACzCisB,WAAuB,aAAXtpB,EAAwB,YAAc,IAAQqC,GAC1DknB,YAAa,YACblJ,MAAkB,eAAXrgB,KACN,IAAmB,OAAQ3C,EAAO,CACnCoF,UAAW,iBAjBJ,M,kCCTnB,8DAGO,MAAMyG,EAAO,CAChBhH,OAAQ,OACRC,YAAc9E,IACV,MAAM,OAAEa,EAAM,SAAE0E,EAAQ,MAAER,EAAK,OAAEC,GAAWhF,EAC5C,OAAOnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CACvIiF,MAAO,UACPC,SAAU,UACVC,MAAO,UACPzG,KAAM,SACNiE,OAAQ,YACP,IAAqB,IAAK3C,EAAO,IAAQ+E,KAAU,IAAqB,IAAK/E,EAAO,IAAQgF,KAAW,IAAYhF,IAAS,IAAmB,OAAQA,EAAO,CAC/JoF,UAAW,cACV,IAAsB,QAGnC,SAAe1D,EAAS6D,EAAU1E,GAE9B,QAAUK,KADAQ,EAAQuD,OAAS,YAAc,QAASvD,EAASb,IAEvD,MAAO,SAGX,OATwCoE,CAAMjF,EAAM0B,QAAS6D,EAAU1E,KAAW,IAAsB,WAW5G,SAAkBa,EAAS6D,EAAU1E,GAEjC,QAAUK,KADAQ,EAAQwD,UAAY,YAAc,WAAYxD,EAASb,IAE7D,MAAO,SAGX,OAjBoHqE,CAASlF,EAAM0B,QAAS6D,EAAU1E,Q,kCCf1J,6FAOO,MAAM+pB,EAAO,CAChB/lB,OAAQ,OACRC,YAAc9E,IACV,MAAM,OAAEa,EAAM,QAAEa,EAAO,MAAEqD,EAAK,OAAEC,GAAWhF,EACrC2C,EAASjB,EAAQiB,OACjB2pB,EAA2B,eAAX3pB,EAA0B,QAAU,SACpD4pB,EAAgC,eAAX5pB,EAA0B,SAAW,QAChE,OAAO9D,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC3GiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPxC,OAAQ,SACRjE,KAAM,YACL,IAAqB,IAAKsB,EAAO,IAAQ+E,GAAQ,CAAEK,UAAW,QAAU,IAAqB,IAAKpF,EAAO,IAAQgF,GAAS,CAAEI,UAAW,QAAU,IAAmB,OAAQpF,EAAO,CACpLwsB,aAAcC,EAAYzsB,GAC1BoF,UAAWknB,KACV,CAAE,CAACC,GAAqB,CAAElrB,MAAO,YAAgBK,EAAQgrB,UAAW7rB,EAAO+pB,KAAK8B,gBAG7F,SAASD,EAAYzsB,GACjB,MAAM,OAAEa,EAAM,QAAEa,GAAY1B,GACtB,OAAE2C,GAAWjB,EACb4qB,EAA2B,eAAX3pB,EAA0B,QAAU,SACpDf,EAAQ5B,EAAMW,kBAA6B,eAAXgC,EAA0B,IAAM,KAChEgqB,EAAmB,YAAgBjrB,EAAQ4qB,GAAgB5qB,EAAQhD,KAAM,YAAc,OAAQgD,EAASb,EAAQ,CAAEuE,UAAWknB,IAAkBzrB,EAAO+pB,KAAKgC,UACjK,QAAyB1rB,IAArByrB,EACA,OAAOA,EAEN,CACD,MAAMxJ,EAAavhB,EAAQA,EAAMhC,IAAI,cAAWsB,EAChD,OAAIiiB,GAAc,YAAcA,IAAe,YAASA,EAAWhhB,MACrC,EAAlBghB,EAAWhhB,KAAY,EAGT,EADF,YAA0BtB,EAAO8jB,KAAM2H,GAChC,K,kCCzCvC,gFAKO,MAAMO,UAAoB,IAC7B,YAAYrgB,EAAMlN,EAAQqe,EAAiBmP,EAAcjsB,GACrDjC,MAAM4N,EAAM,SAAUlN,EAAQqe,EAAiB9c,EAAQisB,EAActgB,EAAKqR,SACtErR,EAAKqR,SAAWrR,EAAKqR,QAAQ3W,OAAiC,WAAxBsF,EAAKqR,QAAQ3W,KAAKoE,GAA0C,WAAxBkB,EAAKqR,QAAQ3W,KAAKqE,IAC5F,IAAS,IAAYyJ,0BAEzBjW,KAAKqb,OAAS5N,EAAK4N,OACnBrb,KAAKM,SAAWN,KAAKguB,cAAcvgB,EAAMzN,KAAKqb,OAAQ0S,EAAcjsB,GAExE,cAAc2L,EAAM4N,EAAQwD,EAAU/c,GAClC,MAAMxB,EAAW,GACXyb,GAAQ,YAAQV,IAAWA,EAAOU,KAAQ,CAAC8C,EAAWA,EAAS9C,IAAM,MACrEC,GAAW,YAAQX,IAAWA,EAAOW,QAAW,CAAC6C,EAAWA,EAAS7C,OAAS,MAC9E+R,EAAgB,YAAQ1S,IAAWA,GAAW,CAACwD,EAAWA,EAASxD,OAAS,MAElF,IAAK,MAAM4S,KAAeF,EACtB,IAAK,MAAMG,KAAYnS,EACnB,IAAK,MAAMoS,KAAenS,EAAQ,CAC9B,MAAMvc,GAAQwuB,qBAAiCA,IAAgB,KAC1DC,kBAA2BA,IAAa,KACxCC,qBAAiCA,IAAgB,IAChDC,EAAc,CAChB/S,OAAQ4S,EACRlS,IAAKmS,EACLlS,OAAQmS,GAEZ7tB,EAASyH,KAAK,YAAW0F,EAAKA,KAAMzN,KAAMA,KAAKkf,QAAQ,QAAUzf,QAAO0C,EAAWisB,EAAatsB,IAI5G,OAAOxB,EAEX,kBACI,YAAsBN,MAE1B,wBACI,MAAM,OAAEqb,GAAWrb,KACbsb,EAAU,YAAQD,QAAUlZ,EAAYkZ,EAAOW,OAASX,EAAOW,OAAOjb,OAAS,EACrF,OAAOjB,OAAOC,OAAOD,OAAOC,OAAO,GAAKub,EAAU,CAAEA,WAAY,IAAM,CAAE+D,OAAQ,OAAQnZ,MAAO,W,iCC3CvG,4pBAEO,SAASmoB,EAASC,GACrB,YAAuBnsB,IAAhBmsB,EAAU,OAEd,SAASC,EAAiBD,GAC7B,OAAOA,QAAmBnsB,IAAdmsB,EAAQ,KAEjB,SAASE,EAAQF,GACpB,YAAsBnsB,IAAfmsB,EAAS,MAEb,SAASG,EAAUH,GACtB,YAAwBnsB,IAAjBmsB,EAAW,QAEf,SAASI,EAAaJ,GACzB,YAA2BnsB,IAApBmsB,EAAc,WAElB,SAASK,EAAQL,GACpB,YAAsBnsB,IAAfmsB,EAAS,MAEb,SAASM,EAASN,GACrB,YAAuBnsB,IAAhBmsB,EAAU,OAEd,SAASO,EAASP,GACrB,YAAuBnsB,IAAhBmsB,EAAU,OAEd,SAASQ,EAASR,GACrB,YAAuBnsB,IAAhBmsB,EAAU,OAEd,SAASS,EAAgBT,GAC5B,YAA8BnsB,IAAvBmsB,EAAiB,cAErB,SAASU,EAAUV,GACtB,YAAwBnsB,IAAjBmsB,EAAW,QAEf,SAASW,EAAYX,GACxB,YAA0BnsB,IAAnBmsB,EAAa,UAEjB,SAASY,EAAMZ,GAClB,QAASA,EAAO,IAEb,SAASa,EAASb,GACrB,YAAuBnsB,IAAhBmsB,EAAU,OAEd,SAASc,EAAWd,GACvB,YAAyBnsB,IAAlBmsB,EAAY,SAEhB,SAAS5nB,EAAY4nB,GACxB,YAA0BnsB,IAAnBmsB,EAAa,UAEjB,SAASe,EAAQf,GACpB,YAAsBnsB,IAAfmsB,EAAS,MAEb,SAASgB,EAAOhB,GACnB,YAAqBnsB,IAAdmsB,EAAQ,KAEZ,SAASiB,EAAmB7f,GAC/B,OAAOA,EAAUxF,IAAIokB,GACbD,EAASC,GACF,CACH5f,OAAQ,YAAwB4f,EAAE5f,OAAQ,MAG3C4f,K,gCC/Df,u9CAOO,MAAMkB,EAAM,MACNC,EAAS,SACTC,EAAQ,QAERC,EAAI,IACJC,EAAI,IACJC,EAAK,KACLC,EAAK,KAELC,EAAW,WACXC,EAAY,YACZC,EAAY,YACZC,EAAa,aAEbC,EAAQ,QACRC,EAAO,OACPC,EAAS,SACTC,EAAQ,QACRC,EAAO,OACPC,EAAU,UACVC,EAAc,cACdC,EAAgB,gBAChBC,EAAc,cAEdC,EAAO,OACPC,EAAQ,QACRC,EAAS,SACTC,EAAM,MACNC,EAAU,UACVC,EAAO,OACPC,EAAM,MACbC,EAAyB,CAC3B5kB,EAAG,EACHC,EAAG,EACHiS,GAAI,EACJC,GAAI,GAKD,SAAS0S,EAA8B7vB,GAC1C,OAAQA,GACJ,KAAKwuB,EACD,MAAO,IACX,KAAKE,EACD,MAAO,KACX,KAAKD,EACD,MAAO,IACX,KAAKE,EACD,MAAO,MAGnB,MAAMmB,EAA4B,CAC9B/D,UAAW,EACXgE,WAAY,EACZjE,SAAU,EACVkE,UAAW,GAER,SAASC,EAAqBxkB,GACjC,OAAOA,KAAKqkB,EAET,MAAMI,EAAuB,YAAKJ,GACnCK,EAAqB5xB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIoxB,GAAyBE,GAA4B,CAE1HjrB,MAAO,EAAG8C,KAAM,EAAGC,OAAQ,EAE3B0D,QAAS,EAAGF,YAAa,EAAGC,cAAe,EAAGH,YAAa,EAAG9M,KAAM,EAAG+M,MAAO,EAE9EyH,MAAO,EAAGrH,KAAM,EAAG6kB,OAAQ,EAAG5U,IAAK,EAAG6U,QAAS,EAAGxG,KAAM,EAAGyG,IAAK,IAC7D,SAASC,EAAevwB,GAC3B,MAAmB,UAAZA,GAAmC,SAAZA,GAAkC,WAAZA,EAExD,MAAMwwB,EAAsB,CACxBhW,IAAK,EACLC,OAAQ,EACRT,MAAO,GAEEyW,EAAiB,YAAKD,GAC7BE,EAAgBnyB,OAAOC,OAAOD,OAAOC,OAAO,GAAI2xB,GAAqBK,GAC9DG,EAAW,YAAKD,IACrB9d,MAAOge,EAAIR,OAAQ5N,EAAI6N,QAASQ,GAASH,EAAeI,EAA2B,YAAOJ,EAAe,CAAC,QAAS,SAAU,aAC7HlW,IAAKmI,EAAIlI,OAAQsW,EAAI/W,MAAOgX,GAAOF,EAA0BG,EAAgC,YAAOH,EAA0B,CAAC,MAAO,SAAU,UASrH,YAAKA,GACA,YAAKG,GACtC,SAASC,EAAuBC,GACnC,QAASF,EAA8BE,GAEpC,SAASC,EAAUD,GACtB,QAAST,EAAcS,GAEpB,MAAME,EAA0B,CAAC,KAAM,KAAM,YAAa,cAC1D,SAASC,GAAwB7lB,GAEpC,OADa8lB,GAAoB9lB,KACjBA,EAKb,SAAS8lB,GAAoBvxB,GAChC,OAAQA,GACJ,IAAK,KACD,MAAO,IACX,IAAK,KACD,MAAO,IACX,IAAK,YACD,MAAO,WACX,IAAK,aACD,MAAO,YAEf,OAAOA,EAKJ,SAASwxB,GAAyBxxB,GACrC,OAAQA,GACJ,IAAK,IACD,MAAO,KACX,IAAK,IACD,MAAO,KACX,IAAK,WACD,MAAO,YACX,IAAK,YACD,MAAO,cAKU,YAAKmwB,GAA3B,MAECnlB,EAAGymB,GAAIxmB,EAAGymB,GAElBxU,GAAIyU,GAAKxU,GAAIyU,GAAK9F,SAAU+F,GAAW9F,UAAW+F,GAAY9B,UAAW+B,GAAYhC,WAAYiC,IAAgB7B,EAEjH8B,GAA4B,YAAO9B,EAAoB,CAAC,IAAK,IAAK,KAAM,KAAM,WAAY,YAAa,YAAa,eACvG+B,GAAuB,YAAKD,IAEnCE,GAA+B,CAAEnnB,EAAG,EAAGC,EAAG,GACnCmnB,GAA0B,YAAKD,IACrC,SAASrO,GAAY9jB,GACxB,MAAmB,MAAZA,EAAkB,QAAU,SAEhC,SAASqyB,GAAwBtkB,GACpC,MAAoB,UAAbA,EAAuB,IAAM,IAGxC,MAIAxC,KAAM+mB,GAAIjC,QAASkC,GAAK1I,KAAM2I,GAAKlC,IAAKmC,GAExCrC,OAAQsC,GAAKlX,IAAKmX,GAAI/f,MAAOggB,IAAQX,GAA2BY,GAAkC,YAAOZ,GAA2B,CAAC,OAAQ,UAAW,OAAQ,MAAO,SAAU,MAAO,UAC3Ka,GAA6B,YAAKD,IACxC,SAASE,GAA0B/yB,GACtC,QAASiyB,GAA0BjyB,GAKhC,SAASgzB,GAAchzB,GAC1B,OAAQA,GACJ,KAAK4uB,EACL,KAAKC,EACL,KAAKC,EACL,KAAKE,EACL,KAAKD,EACL,KAAKE,EACL,KAAKG,EACD,OAAO,EACX,KAAKF,EACL,KAAKC,EACD,OAAO,GAInB,MAAM8D,GAAsB10B,OAAOC,OAAOD,OAAOC,OAAO,GAAI2zB,IAA+BU,IAE9EK,GAAiB,YAAKD,IAC5B,SAASE,GAAenzB,GAC3B,QAASizB,GAAoBjzB,GAQ1B,SAASozB,GAAYpzB,EAAS6C,GACjC,OAwBJ,SAA0B7C,GACtB,OAAQA,GACJ,KAAK4uB,EACL,KAAKC,EACL,KAAKC,EAEL,KAAKS,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKJ,EACL,KAAKL,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EAEL,KAAKjB,EACL,KAAKF,EACL,KAAKC,EACD,OAAOmF,GACX,KAAKjF,EACL,KAAKC,EACL,KAAKG,EACL,KAAKC,EAED,OAAO6E,GACX,KAAKhF,EACL,KAAKC,EACL,KAAKG,EACL,KAAKC,EACD,MAAO,CACH5E,KAAM,SACNpnB,IAAK,SACLunB,MAAO,SACPC,KAAM,SACNC,KAAM,SACNJ,OAAQ,SACRtO,MAAO,SACP2O,OAAQ,SACRC,KAAM,SACNhmB,KAAM,SACNS,MAAO,UAEf,KAAKiqB,EACD,MAAO,CACHtT,MAAO,SACP4O,KAAM,SACNF,KAAM,SACNJ,OAAQ,SACRK,OAAQ,SACR1nB,IAAK,SACL4I,KAAM,SACNjH,KAAM,SACNS,MAAO,UAEf,KAAKgqB,EACD,MAAO,CAAErT,MAAO,SAAUuO,SAAU,UACxC,KAAKoF,EACD,MAAO,CAAE9jB,KAAM,UACnB,KAAKokB,EACD,MAAO,CAAEzF,MAAO,WApFjBqJ,CAAiBvzB,GAAS6C,GAErC,MAAMwwB,GAAY,CAEdtJ,KAAM,SACNpnB,IAAK,SACLqnB,OAAQ,SACRC,SAAU,SACVC,MAAO,SACP5lB,KAAM,SACN8lB,KAAM,SACN1O,MAAO,SACPyO,KAAM,SACNE,OAAQ,SACRtlB,MAAO,SACPwG,KAAM,SACN+e,KAAM,WAEFL,SAAUuJ,IAAOH,GAAWC,GAA4B,YAAOD,GAAW,CAAC,aAqE5E,SAASI,GAAUzzB,GACtB,OAAQA,GACJ,KAAKouB,EACL,KAAKC,EACL,KAAKW,EACL,KAAKI,EACL,KAAKH,EACL,KAAKC,EACL,KAAKC,EAEL,KAAKb,EACL,KAAKC,EACD,OACJ,KAAKJ,EACL,KAAKF,EACL,KAAKC,EACL,KAAKa,EAEL,KAAKM,EACL,KAAKI,EACL,KAAKC,EACL,KAAKC,EACD,MAAO,WAEX,KAAKf,EACL,KAAKC,EACL,KAAKC,EACD,MAAO,WAEX,KAAKN,EACL,KAAKC,EACL,KAAKC,EACL,KAAKC,EACL,KAAKY,EACL,KAAKC,EACL,KAAKF,EACD,U,iCCvUZ,qSAWO,SAASoE,EAA4BlN,EAAYxmB,GACpD,OAAOwmB,EAAuB,UAAZxmB,EAAsB,kBAAoB,oBAEzD,SAAS2zB,EAA0BnN,EAAYxmB,GAClD,MAAM5B,EAAOw1B,EAA0BpN,EAAYxmB,GACnD,OAAO,YAAO5B,GAAQA,EAAKyD,KAAOgyB,EAE/B,SAASD,EAA0BpN,EAAYxmB,GAClD,MAAM5B,EAAOooB,EAAuB,UAAZxmB,EAAsB,gBAAkB,kBAChE,OAAO,YAAgB5B,EAAM,CAAEyD,KAAM2kB,EAAW3kB,OAE7C,MAAMgyB,EAAe,GASrB,MAAMC,EAAgB,CACzBpxB,QAAS,EACTqxB,WAAY,YACZrjB,WAAY,mBACZ2T,KAZ6B,CAC7B2P,gBAAiB,IACjBC,iBAAkB,IAClBpyB,KAAMgyB,GAUNhxB,KAAM,IACNknB,KAAM,GACNpnB,IAAK,IACLqnB,OAAQ,GACRC,SAAU,GACVC,MAAO,GACP5lB,KAAM,GACNoX,MAAO,GACPyO,KAAM,IACNC,KAAM,CAAEvlB,MAAO,SACfwlB,OAAQ,GACR9e,KAAM,CAAE1G,MAAO,SACfylB,KAAM,IACNvlB,MAAO,GACPmvB,QAAS,CACL91B,KAAM,GACNma,OAAQ,IACR4b,IAAK,GACL9qB,OAAQ,CAAExE,MAAO,SACjBuvB,SAAU,GACVhK,KAAM,GACNiK,MAAO,MAEXC,SAAU,CACNhc,OAAQ,OACR8R,MAAM,EACNiK,OAAO,GAEXE,UAAW,CACPxlB,KAAM,CACFzD,QAAS,IAEbkpB,SAAS,GAEblzB,MAAO,IACPgU,WAAY,GACZ1O,KAAM,GACN6tB,MAAO,GACPC,MAAO,GACPC,SAAU,GACVC,UAAW,GACXC,QAAS,GACTC,WAAY,GACZC,SAAU,GACV3jB,OAAQ,IACRC,OAAQ,CAAE2jB,aAAc,GAAIC,aAAc,IAC1CC,aAAc,GACdC,UAAW,GACXC,YAAa,GACb1a,UAAW,IACX5N,MAAO,GACPjH,MAAO,GACPmU,MAAO,CAAEiB,QAAS,KAClBnB,OAAQ,CAAEmB,QAAS,KACnBxO,OAAQ,CAAEwO,QAAS,MAEhB,SAASoa,EAAW90B,GACvB,OAAO,YAAU,YAAUuzB,GAAgBvzB,GAE/C,MAAM+0B,EAAc,CAAC,UAAW,KAC1BC,EAA4B,CAC9B,UACA,QACA,SACA,SACA,eACA,aACA,aACA,SACA,QACA,YACA,WAEEC,EAAkDj3B,OAAOC,OAAO,CAAE6lB,KAAM,CAAC,kBAAmB,mBAAoB,gBAAiB,iBAAkB,SAAW,KAC7J,SAASoR,EAAuBl1B,GACnCA,EAAS,YAAUA,GACnB,IAAK,MAAMiW,KAAQ+e,SACRh1B,EAAOiW,GAGlB,GAAIjW,EAAOqG,KACP,IAAK,MAAM4P,KAAQ,WACRjW,EAAOqG,KAAK4P,GAG3B,GAAIjW,EAAO6Q,OAAQ,CACf,IAAK,MAAMoF,KAAQ,WACRjW,EAAO6Q,OAAOoF,GAEzB,IAAK,MAAMA,KAAQ,WACRjW,EAAO6Q,OAAOoF,GAI7B,GAAIjW,EAAOsC,KACP,IAAK,MAAM2T,KAAQ,WACRjW,EAAOsC,KAAK2T,GAG3B,IAAK,MAAMkf,KAAYJ,EAAa,CAEhC,IAAK,MAAM9e,KAAQ,WACRjW,EAAOm1B,GAAUlf,GAG5B,MAAMmf,EAA4BH,EAAgDE,GAClF,GAAIC,EACA,IAAK,MAAMnf,KAAQmf,SACRp1B,EAAOm1B,GAAUlf,GAMhCof,EAAer1B,EAAQm1B,GAE3B,IAAK,MAAMG,KAAK,qBAELt1B,EAAOs1B,GAIlBD,EAAer1B,EAAQ,QAAS,eAEhC,IAAK,MAAMiW,KAAQjW,EACX,YAASA,EAAOiW,KAAwC,IAA9B,YAAKjW,EAAOiW,IAAOhX,eACtCe,EAAOiW,GAGtB,OAAO,YAAKjW,GAAQf,OAAS,EAAIe,OAASK,EAE9C,SAASg1B,EAAer1B,EAAQiW,EAChCsf,EAAQC,GACJ,MAAMC,EAAsB,UAATxf,EACb,YAAmBjW,EAAOsF,OAAOhD,KACjCkzB,EACIx1B,EAAOiW,GAAMuf,GACbx1B,EAAOiW,GACJ,SAATA,IACAsf,EAAS,QAEb,MAAMhpB,EAAQvO,OAAOC,OAAOD,OAAOC,OAAO,GAAIw3B,GAAaz1B,EAAOuM,MAAM0J,IAEpE,YAAK1J,GAAOtN,OAAS,IACrBe,EAAOuM,MAAMgpB,GAAUtf,GAAQ1J,GAE9BipB,UAEMx1B,EAAOiW,K,iCCxLtB,mJAKO,SAASyf,EAAO73B,GACnB,OAAO,YAASA,SAA0BwC,IAAjBxC,EAAW,KAEjC,MAAM83B,EAAkB,GAQzBC,EAAgC,YAPL,CAC7BxxB,MAAO,EACPmZ,OAAQ,EACRxF,OAAQ,EACRyB,QAAS,EACTkB,QAAS,IAGN,SAASmb,EAAyBlqB,EAAMmqB,EAAU91B,GACrD,MAAM+1B,EAAoB/1B,EAAO81B,GAC3Bvb,EAAS,IAEPG,QAASsb,EAAa,QAAExc,GAAYuc,OACtB11B,IAAlB21B,IACAzb,EAAOG,QAAUsb,QAEL31B,IAAZmZ,IACK,YAAY7N,KAAU,YAAeA,EAAK8N,QAC1C,YAAa9N,IAAS,YAAQA,EAAK4N,SACpC,YAAa5N,MACb4O,EAAOf,QAAUA,GAIzB,IAAK,MAAMvD,KAAQ2f,EACf,QAAmBv1B,IAAfsL,EAAKsK,GACL,GAAa,YAATA,EAAoB,CACpB,MAAMyE,EAAU/O,EAAKsK,GACrBsE,EAAOtE,GAAQ,YAASyE,GAClBA,EACA,CACET,IAAKS,EAAQT,KAAO+b,EACpB9b,OAAQQ,EAAQR,QAAU8b,QAIlCzb,EAAOtE,GAAQtK,EAAKsK,GAIhC,OAAOsE,I,gCCjDX,qLAKO,MAAM0b,EALb,QASMC,EAAO,YAAO,KACpB,IAAIC,EAAUD,EAwCP,SAAS7yB,EAAI+yB,GAEhB,OADAD,EAAUC,EAMP,SAASC,IAEZ,OADAF,EAAUD,EAGP,SAAShjB,KAAQojB,GACpBH,EAAQjjB,QAAQojB,GAKb,SAASC,KAASD,GACrBH,EAAQI,SAASD,K,iCCpErB,8T,27lBCAO,SAASE,EAAe1uB,GAC3B,QAASA,EAAO,OAAOA,EAAU,OAE9B,SAAS2uB,EAAgB9xB,GAC5B,QAASA,KAAgBA,EAAmB,OAEzC,SAAS+xB,EAAY/qB,GACxB,YAAyBtL,IAAlBsL,EAAY,MAPvB,uG,iCCAA,6VASO,SAASgrB,EAAazuB,EAAM0uB,GAAS,EAAMC,EAAO,KACrD,GAAI,YAAQ3uB,GAAO,CACf,MAAM4uB,EAAY5uB,EAAKE,IAAIuK,GAAKgkB,EAAahkB,EAAGikB,EAAQC,IACxD,OAAOD,MAAaE,EAAUvwB,KAAK,SAAWuwB,EAE7C,OAAI,YAAW5uB,GACT2uB,EAAK,YAAa3uB,GAAM,GAAQ0uB,IAEpCA,EAASC,EAAK/jB,KAAKC,UAAU7K,IAASA,EAE1C,SAAS6uB,EAA6B53B,EAAO0e,GAkBhD,OAjBA,YAAiB1e,EAAO,CAACue,EAASsZ,KAC9B,MAAMr5B,EAAO+f,EAAQ/f,KACrB,IAAIqiB,EAAagX,EAAYhX,WAAW7gB,EAAOue,GAC/CG,EAAQ5X,QAAQ+wB,EAAYnZ,QAAQ1e,EAAOue,IAC3C,YAAiBA,EAASuZ,IAClBA,EAAWpZ,UACXA,EAAUoZ,EAAWpZ,QAAQ1e,EAAOue,EAASG,IAE7CoZ,EAAWjX,aACXA,EAAaiX,EAAWjX,WAAW7gB,EAAOue,EAASsC,MAG3DnC,EAAQ5X,KAAK,CACTtI,KAAMA,EAAO,IACbsP,iBAAkB,YAAYyQ,EAAQ/f,KAAO,SAAWqiB,SAGzDkX,EAAoBrZ,GAExB,SAASsZ,EAAqBh4B,EAAO0e,GACxC,GAAI1e,EAAMG,UAAU6a,WAAa,YAAKhb,EAAMG,UAAU6a,WAAWlb,OAAQ,CACrE,MAAMtB,EAAO,YAAYwB,EAAMie,QAAQ,SACvCS,EAAQuZ,QAAQ,CACZz5B,KAAM,QACN6C,MAAO,GACP4d,GAAI,CACA,CACIC,OAAQ,YAAc,YAAa,SACnCpR,yCAA0CtP,eAK1D,OAAOu5B,EAAoBrZ,GAExB,SAASwZ,EAAwBl4B,EAAO0e,GAC3C,IAAIyZ,GAAgB,EAsBpB,GArBA,YAAiBn4B,EAAO,CAACue,EAASsZ,KAC9B,MAAMr5B,EAAO+f,EAAQ/f,KACf45B,EAAQ,YAAY55B,EAAO,KACnBkgB,EAAQjR,OAAOwS,GAAKA,EAAEzhB,OAASA,GAClCsB,QACP4e,EAAQ5X,KAAK,CACTtI,KAAM+f,EAAQ/f,KACdsP,UAAW,OAAwBsqB,KACV,WAApB7Z,EAAQV,QAAuB,SAAW,YAAYU,EAAQV,eAG3Esa,GAAgB,EACZN,EAAYpZ,kBACZC,EAAUmZ,EAAYpZ,gBAAgBze,EAAOue,EAASG,IAE1D,YAAiBH,EAASuZ,IAClBA,EAAWrZ,kBACXC,EAAUoZ,EAAWrZ,gBAAgBze,EAAOue,EAASG,QAI7DyZ,EAAe,CACCzZ,EAAQjR,OAAOwS,GAAgB,SAAXA,EAAEzhB,MACzBsB,QACT4e,EAAQuZ,QAAQ,CACZz5B,KAAM,OACN6C,MAAO,GACP4d,GAAI,CAAC,CAAEC,OAAQ,YAAapR,OAAQ,wCAIhD,OAAOiqB,EAAoBrZ,GAExB,SAAS2Z,EAA0Br4B,EAAOrB,GAmB7C,OAlBA,YAAiBqB,EAAOue,IACpB,MAAMxV,EAAO,CAAEvK,KAAM+f,EAAQ/f,KAAO,KACpC,GAAI+f,EAAQxV,KAAM,CACd,MAAMuvB,EAAS/Z,EAAQI,QAAQC,MAAM3V,IAAI4V,IACrC,MAAM,QAAEH,GAAYG,EACpB,OADiC,YAAOA,EAAM,CAAC,cAG7C0Z,EAASha,EAAQxV,KAAKE,IAAI+U,GAAKwZ,EAAaxZ,GAAG,IACrDjV,EAAKwB,OACgB,aAAjBgU,EAAQ1c,KACF,CAAC,CAAE22B,KAAM,YAASx4B,EAAO,CAAEy4B,QAAQ,IAAUH,SAAQ/tB,OAAQguB,IAC7DA,EAAOtvB,IAAI+U,IAAK,CAAGwa,KAAM,YAASx4B,EAAO,CAAEy4B,QAAQ,IAAUH,SAAQ/tB,OAAQyT,KAE1Erf,EAAK8O,OAAO5N,GAAKA,EAAErB,OAAS+f,EAAQ/f,KAAO,KAC9CsB,QACVnB,EAAKmI,KAAKiC,KAGXpK,EAEJ,SAAS+5B,EAA2B14B,EAAOorB,GAS9C,OARA,YAAiBprB,EAAO,CAACue,EAASsZ,KAC9BzM,EAAQyM,EAAYzM,MAAQyM,EAAYzM,MAAMprB,EAAOue,EAAS6M,GAASA,EACvE,YAAiB7M,EAASuZ,IAClBA,EAAW1M,QACXA,EAAQ0M,EAAW1M,MAAMprB,EAAOue,EAAS6M,QAI9CA,EAEJ,SAASuN,EAA4B34B,EAAOorB,GAC/C,IAAK,MAAMhsB,KAASY,EAAMX,SAClB,YAAYD,KACZgsB,EAAQsN,EAA2Bt5B,EAAOgsB,IAGlD,OAAOA,EAQJ,SAASwN,EAA6B54B,EAAO4iB,GAChD,MAAMiW,EAAYllB,KAAKjH,MAAMkW,EAAUlV,OAAO+K,QAAQ,IAAkB,KAClEja,EAAO,YAAQq6B,EAAU7d,WACzBzV,EAAWszB,EAAUtzB,SAC3B,IAAItD,EAAQ42B,EAAU52B,MAClBsc,EAAUve,EAAMG,UAAU6a,WAAahb,EAAMG,UAAU6a,UAAUxc,GACrE,IAAI+f,EAGC,CAED,GADAA,EAAUve,EAAM84B,sBAAsBt6B,EAAMq6B,EAAU7d,WACjDzV,GAAatD,GAOb,GAAIsD,IAAatD,EAAO,CACzB,MAAM82B,EAAYxa,EAAQI,QAAQC,MAAMnR,OAAOyH,GAAKA,EAAE5U,UAAYiF,IAC7DwzB,EAAUj5B,QAAUi5B,EAAUj5B,OAAS,GACxCmC,EAAQsc,EAAQI,QAAQC,MAAM,GAAG3c,MACjC,aAAO82B,EAAUj5B,OAAiB,YAAR,mBACV,YAAYyF,mCAA0C,YAAYszB,EAAU7d,iCACtE,YAAY/Y,QAGlCA,EAAQ82B,EAAU,GAAG92B,YAfzBA,EAAQsc,EAAQI,QAAQC,MAAM,GAAG3c,MAC7Bsc,EAAQI,QAAQC,MAAM9e,OAAS,GAC/B,YAAK,yGACiB,YAAYmC,OAe1C,MAAO,CAAEyL,OAAQ,YAAoBzL,EAAOzD,IAEhD,OAzBI,YAAK,2FAyBF,CAAEkP,OAAQ,QAErB,SAASqqB,EAAoBrZ,GACzB,OAAOA,EAAQzV,IAAIgX,IACXA,EAAEhB,KAAOgB,EAAEhB,GAAGnf,eACPmgB,EAAEhB,GACNgB,M,iCC9KR,SAAS+Y,EAAWxsB,GACvB,QAASA,EAAW,KADxB,mC,iCCAA,oRAGWysB,EAHX,yBAIA,SAAWA,GACPA,EAASC,KAAO,OAChBD,EAASE,MAAQ,QACjBF,EAASG,IAAM,MACfH,EAASI,KAAO,OAChBJ,EAASK,MAAQ,QACjBL,EAASM,QAAU,UACnBN,EAASO,QAAU,UACnBP,EAASQ,aAAe,eACxBR,EAASS,UAAY,YACrBT,EAASU,cAAgB,gBACzBV,EAASW,mBAAqB,qBAC9BX,EAASY,0BAA4B,4BACrCZ,EAASa,iCAAmC,mCAE5Cb,EAASc,UAAY,YACrBd,EAASe,eAAiB,iBAC1Bf,EAASgB,aAAe,eACxBhB,EAASiB,oBAAsB,sBAC/BjB,EAASkB,eAAiB,iBAC1BlB,EAASmB,oBAAsB,sBAC/BnB,EAASoB,QAAU,UACnBpB,EAASqB,YAAc,cACvBrB,EAASsB,aAAe,eACxBtB,EAASuB,iBAAmB,mBAC5BvB,EAASwB,QAAU,UACnBxB,EAASyB,SAAW,WACpBzB,EAAS0B,OAAS,SAClB1B,EAAS2B,QAAU,UACnB3B,EAAS4B,SAAW,WACpB5B,EAAS6B,WAAa,aACtB7B,EAAS8B,WAAa,aACtB9B,EAAS+B,gBAAkB,kBAC3B/B,EAASgC,aAAe,eACxBhC,EAASiC,iBAAmB,mBAC5BjC,EAASkC,sBAAwB,wBACjClC,EAASmC,6BAA+B,+BACxCnC,EAASoC,oCAAsC,sCAE/CpC,EAASqC,aAAe,eACxBrC,EAASsC,kBAAoB,oBAC7BtC,EAASuC,gBAAkB,kBAC3BvC,EAASwC,uBAAyB,yBAClCxC,EAASyC,kBAAoB,oBAC7BzC,EAAS0C,uBAAyB,yBAClC1C,EAAS2C,WAAa,aACtB3C,EAAS4C,eAAiB,iBAC1B5C,EAAS6C,gBAAkB,kBAC3B7C,EAAS8C,oBAAsB,sBAhDnC,CAiDG9C,IAAaA,EAAW,KAE3B,MAAM+C,EAA8B,CAChCC,KAAM,EACNC,QAAS,EACTC,MAAO,EACPC,IAAK,EACLC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,aAAc,GAELC,EAAiB,YAAKV,GAC5B,SAASW,EAAsB/5B,GAClC,QAASo5B,EAA4Bp5B,GAEzC,MAAMg6B,EAA4B,CAC9BC,QAAS,EACTC,WAAY,EACZC,SAAU,EACVC,OAAQ,EACRC,QAAS,EACTC,SAAU,EACVC,WAAY,EACZC,WAAY,EACZC,gBAAiB,GAEd,SAASC,EAAoB16B,GAChC,QAASg6B,EAA0Bh6B,GAEvC,MAgBM26B,EAA2B,CAC7BC,eAAgB,EAChBC,oBAAqB,EACrBC,aAAc,EACdC,iBAAkB,EAClBC,sBAAuB,EACvBC,6BAA8B,EAC9BC,oCAAqC,EACrCC,gBAAiB,EACjBC,aAAc,EACdC,kBAAmB,EACnBC,gBAAiB,EACjBC,uBAAwB,EACxBC,kBAAmB,EACnBC,uBAAwB,GAEtBC,EAAqBz/B,OAAOC,OAAOD,OAAOC,OAAO,GAAI89B,GAA4BW,GAChF,SAASgB,EAAclR,GAC1B,QAASiR,EAAmBjR,GAEzB,SAASmR,EAAiBnR,GAC7B,OAAOA,EAAEra,OAAO,GAEpB,MAAMyrB,EAAiB5/B,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIk9B,GAA8BY,GAvC9E,CAC/B8B,YAAa,EACbC,iBAAkB,EAClBC,UAAW,EACXC,cAAe,EACfC,mBAAoB,EACpBC,0BAA2B,EAC3BC,iCAAkC,EAClCC,aAAc,EACdC,UAAW,EACXC,eAAgB,EAChBC,aAAc,EACdC,oBAAqB,EACrBC,eAAgB,EAChBC,oBAAqB,IAyBiJhC,GACjJ,YAAKkB,GAqDvB,SAASe,EAAiB58B,GAC7B,OAAO85B,EAAen1B,OAAO,CAAC4M,EAAOsrB,IAC7BC,EAAiB98B,EAAU68B,GACpB,IAAItrB,EAAOsrB,GAEftrB,EACR,IAGA,SAASurB,EAAiBlnB,EAAc5V,GAC3C,MAAM+8B,EAAQnnB,EAAaonB,QAAQh9B,GACnC,OAAQ+8B,GAAS,IAAM/8B,IAAaq2B,EAASO,SAAqB,IAAVmG,GAAkD,MAAnCnnB,EAAavF,OAAO0sB,EAAQ,IAMhG,SAASE,EAAUrnB,EAAcvW,GAAO,IAAE69B,GAAQ,CAAEA,KAAK,IAC5D,MAAMC,EAAW,YAAoB99B,GAC/B+9B,EAAMzB,EAAc/lB,GAAgB,MAAQ,GAUlD,IAAIynB,EACJ,MAAMpgC,EAAI68B,EAAen1B,OAAO,CAAC24B,EAAUC,KACnCT,EAAiBlnB,EAAc2nB,KAC/BD,EAASC,GAZjB,SAAcv9B,GACV,OAAIA,IAAaq2B,EAASoB,YAEX2F,YAAcD,WAGfC,IAAMp9B,KAAYm9B,KAMbK,CAAKD,GACpBF,EAAeE,GAEZD,GACR,IAIH,OAHIJ,IACAjgC,EAAEogC,IAAiB,MAEhB,YAAapgC,GAEjB,SAASwgC,EAAsBz9B,EAAUuE,GAC5C,IAAKvE,EACD,OAEJ,MAAM09B,EAAiB,GACjBC,EAAUb,EAAiB98B,EAAUq2B,EAASC,MAChDwG,EAAiB98B,EAAUq2B,EAASE,QAEpCmH,EAAex5B,MAAyB,IAApBK,EAA4B,KAAO,MAEvDu4B,EAAiB98B,EAAUq2B,EAASG,KACpCkH,EAAex5B,KAAKK,EAAkB,KAAO,MAExCu4B,EAAiB98B,EAAUq2B,EAASI,OACzCiH,EAAex5B,KAAK,MAAQy5B,EAAU,IAAM,KAE5CA,GACAD,EAAex5B,KAAKK,EAAkB,KAAO,MAEjD,MAAMq5B,EAAiB,GACnBd,EAAiB98B,EAAUq2B,EAASK,QACpCkH,EAAe15B,KAAK,MAEpB44B,EAAiB98B,EAAUq2B,EAASM,UACpCiH,EAAe15B,KAAK,MAEpB44B,EAAiB98B,EAAUq2B,EAASO,UACpCgH,EAAe15B,KAAK,MAEpB44B,EAAiB98B,EAAUq2B,EAASQ,eACpC+G,EAAe15B,KAAK,MAExB,MAAM25B,EAAqB,GAO3B,OANIH,EAAexgC,OAAS,GACxB2gC,EAAmB35B,KAAKw5B,EAAel5B,KAAK,MAE5Co5B,EAAe1gC,OAAS,GACxB2gC,EAAmB35B,KAAK05B,EAAep5B,KAAK,MAEzCq5B,EAKJ,SAASC,EAAiB99B,EAAUX,EAAOkF,EAAiBmiB,GAC/D,IAAK1mB,EACD,OAEJ,MAAM69B,EAAqBJ,EAAsBz9B,EAAUuE,GAC3D,IAAIw5B,EAAa,GAqBjB,OApBIjB,EAAiB98B,EAAUq2B,EAASoB,WAEpCsG,mBAA8B1+B,MAE9Bw+B,EAAmB3gC,OAAS,IACxB6gC,IAEAA,GAAc,aAMdA,GADArX,eAC2BrnB,OAAWw+B,EAAmBr5B,KAAK,uBAGlCnF,OAAWw+B,EAAmBr5B,KAAK,UAIhEu5B,QAAcz/B,EAElB,SAAS0/B,EAAkBh+B,GAC9B,MAAiB,QAAbA,GAAsBA,EAASg9B,QAAQ,QAAU,GACjD,IAAS,IAAYrnB,oBAAoB3V,IAClCA,EAAS6V,QAAQ,MAAO,SAE5B7V,I,iCCxSX,iHAIO,SAASi+B,EAAiBvgC,EAASqC,GACtC,OAAI,YAAS,CAAC,MAAO,UAAWA,GACrB,SAEF,YAAS,CAAC,OAAQ,SAAUA,GAC1B,MAEQ,QAAZrC,EAAoB,MAAQ,SAEhC,SAASwgC,EAAkBhqB,EAAMkR,EAAennB,EAAQP,GAC3D,MAAMygC,EAAmC,QAAZzgC,EAAoBO,EAAO40B,UAAwB,WAAZn1B,EAAuBO,EAAO20B,aAAe30B,EAAO60B,YACxH,OAAO,YAAgB1N,GAAiBA,EAAcrW,OAASqW,EAAcrW,OAAOmF,QAAQ5V,EAAW6/B,EAAqBjqB,GAAOjW,EAAO8Q,OAAOmF,IAE9I,SAASkqB,EAAoBC,EAAYjZ,EAAennB,EAAQP,GACnE,MAAM4gC,EAAQ,GACd,IAAK,MAAMpqB,KAAQmqB,EAAY,CAC3B,MAAM5/B,EAAQy/B,EAAkBhqB,EAAMkR,EAAennB,EAAQP,QAC/CY,IAAVG,IACA6/B,EAAMpqB,GAAQzV,GAGtB,OAAO6/B,I,iCCzBX,0HAMO,MAAMC,UAAsB,IAC/B,YAAY7hC,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EACjB1P,KAAKqiC,iBAAmB,YAAmBriC,KAAK0P,UAAU4yB,WAE9D,QACI,OAAO,IAAIF,EAAc,KAAM,YAAUpiC,KAAK0P,YAElD,4BAA4BnP,EAAQU,GAqBhC,OAnBAA,EAAMshC,gBAAgB,CAAC1gC,EAAUN,KAC7B,GAAK,YAAgBM,IAGjB,YAAYA,EAASkB,MAAO,CAC5B,MAAM,MAAEG,EAAK,SAAEW,GAAahC,EACtBkB,EAAOlB,EAASkB,KAEhBu/B,EAAYv/B,EACbmH,IAAI,CAACs4B,EAAWvjB,OACP,YAAsB,CAAE/b,QAAOW,WAAU4+B,MAAOD,SAAkBvjB,QAE3E5W,KAAK,IAAMtF,EAAKhC,OACrBR,EAAS,IAAI6hC,EAAc7hC,EAAQ,CAC/B+hC,YACAx6B,GAAI46B,EAAoB7gC,EAAUN,EAAS,CAAE+F,OAAO,SAIzD/G,EAEX,iBACI,OAAO,IAAIoiC,IAAI,CAAC3iC,KAAK0P,UAAU5H,KAEnC,kBACI,OAAO9H,KAAKqiC,iBAEhB,WACI,MAAO,CACHv/B,KAAM,UACN2O,KAAMzR,KAAK0P,UAAU4yB,UACrBx6B,GAAI9H,KAAK0P,UAAU5H,IAG3B,OACI,mBAAoB,YAAK9H,KAAK0P,cAG/B,SAASgzB,EAAoB7gC,EAAUN,EAAS+L,GACnD,OAAO,YAAQzL,EAAU/B,OAAOC,OAAO,CAAEkR,OAAQ1P,EAAS2P,OAAQ,cAAiB5D,GAAO,O,iCCxD9F,8HAoBA,SAASs1B,EAAO5/B,EAAKE,GACjB,SAAU,YAAYF,MAAQE,IAQ3B,SAAS2/B,EAAiB5hC,EAAOiC,EAAOF,GAC3C,MACM+Z,EAAM6lB,EADU,YAAa5/B,OAAKb,IAAc,GACpBe,GAClC,OAAOjC,EAAMie,WAAWnC,UAK5B,SAAS+lB,EAAmBxU,EAAGtrB,EAAK/B,GAChC,IAAI6G,EAKAA,EATR,SAAwBwmB,GACpB,MAAO,OAAQA,EAIXyU,CAAezU,GACV,YAASA,EAAExmB,IAAM,CAACwmB,EAAExmB,MAAOwmB,EAAExmB,UAAY,CAACwmB,EAAExmB,GAAG,GAAIwmB,EAAExmB,GAAG,IAGxD,CAAC,YAAQwmB,EAAG,CAAEhnB,OAAO,IAAS,YAAQgnB,EAAG,CAAEtmB,UAAW,MAAOV,OAAO,KAE7E,MAAM07B,EAAgB,YAAahgC,OAAKb,IAAc,GAChD4a,EAAM6lB,EAAOI,EAAe1U,EAAEprB,QAC9B,OAAEyL,EAAM,aAAEs0B,GAxBpB,SAA6BhiC,EAAO8b,GAChC,MAAO,CACHpO,OAAQ1N,EAAMie,WAAWnC,UACzBkmB,aAAchiC,EAAMie,WAAWnC,aAqBFmmB,CAAoBjiC,EAAO8b,GAE5D,MAAO,CAAEA,MAAKomB,aADOrjC,OAAOC,OAAOD,OAAOC,OAAO,CAAEiD,IAAKggC,EAAe9/B,MAAOorB,EAAEprB,MAAO4E,GAAI,CAACA,IAAQ6G,EAAS,CAAEA,UAAW,IAAOs0B,EAAe,CAAEA,gBAAiB,KAGhK,MAAMG,UAAgB,IACzB,YAAY7iC,EAAQ8C,GAChBxD,MAAMU,GACNP,KAAKqD,KAAOA,EAEhB,QACI,OAAO,IAAI+/B,EAAQ,KAAM,YAAUpjC,KAAKqD,OAE5C,wBAAwB9C,EAAQU,GAC5B,MAAMoC,EAAOpC,EAAMoiC,eAAe,CAACC,EAAmBzhC,EAAUN,KAC5D,GAAI,YAAgBM,IAAa,YAAUA,EAASmB,KAAM,CACtD,MAAM,IAAE+Z,EAAG,aAAEomB,GAAiBL,EAAmBjhC,EAAUA,EAASmB,IAAK/B,GACzEqiC,EAAkBvmB,GAAOjd,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIojC,GAAeG,EAAkBvmB,IAxDxH,SAAsB9b,EAAOY,EAAUN,EAASO,GAC5C,GAAI,YAAiBD,EAAUN,GAAU,CAErC,MAAM2F,EAAQ,YAAYjG,KAASA,EAAMkH,KAAK5G,IAAYN,EAAM0R,OAAOpR,KAAiB,GAClFgiC,EAAa,YAAQ1hC,EAAU,CAAE4P,KAAM,UACvC+xB,EAAW,YAAQ3hC,EAAU,CAAE4P,KAAM,QAASzJ,UAAW,QAC/D,MAAO,CACHy7B,UAAW,YAAQ5hC,EAAU,CAAEmG,UAAW,QAASV,OAAO,IAC1Do8B,QAAS,YAAoBH,EAAYC,EAAUt8B,EAAMgB,OAAQpG,IAGzE,MAAO,GA6CoH6hC,CAAa1iC,EAAOY,EAAUN,EAASN,EAAMa,SAEhK,OAAOwhC,GACR,IACH,OAA0B,IAAtB,YAAKjgC,GAAMtC,OACJ,KAEJ,IAAIqiC,EAAQ7iC,EAAQ8C,GAM/B,yBAAyB9C,EAAQ+tB,EAAGrtB,GAChC,MAAM,IAAE8b,EAAG,aAAEomB,GAAiBL,EAAmBxU,EAAGA,EAAEtrB,IAAK/B,GAC3D,OAAO,IAAImiC,EAAQ7iC,EAAQ,CACvB,CAACwc,GAAMomB,IAOf,MAAMS,EAAOC,GACT,IAAK,MAAM9mB,KAAO,YAAK6mB,EAAMvgC,MACrB0Z,KAAO/c,KAAKqD,MACZwgC,EAAaD,EAAMvgC,KAAK0Z,GAAKpO,OAAQ3O,KAAKqD,KAAK0Z,GAAKpO,QAEpD3O,KAAKqD,KAAK0Z,GAAKjV,GAAK,YAAO,IAAI9H,KAAKqD,KAAK0Z,GAAKjV,MAAO87B,EAAMvgC,KAAK0Z,GAAKjV,IAAK,MAG1E9H,KAAKqD,KAAK0Z,GAAO6mB,EAAMvgC,KAAK0Z,GAGpC,IAAK,MAAM1c,KAASujC,EAAMtjC,SACtBsjC,EAAME,YAAYzjC,GAClBA,EAAME,OAASP,KAEnB4jC,EAAMG,SAEV,iBACI,OAAO,IAAIpB,IAAI,YAAK3iC,KAAKqD,MACpB6G,IAAI8C,GAAKA,EAAElF,IACXk8B,KAAK,IAEd,kBACI,OAAO,IAAIrB,IAAI,YAAK3iC,KAAKqD,MAAM6G,IAAI8C,GAAKA,EAAE9J,QAE9C,OACI,aAAc,YAAKlD,KAAKqD,QAE5B,WACI,OAAO,YAAKrD,KAAKqD,MAAM4mB,QAAQjnB,IAC3B,MAAM0M,EAAY,IACXu0B,KAAUC,GAAelhC,EAAI8E,GAC9Bq8B,EAAWrkC,OAAOC,OAAO,CAAE+C,KAAM,MAAOI,MAAO,YAAmBF,EAAIE,OAAQ4E,GAAIm8B,EAAOt1B,OAAQ3L,EAAI2L,QAAU3L,EAAIA,MACpHA,EAAIA,IAAI8W,QAAU9W,EAAIigC,eACvBvzB,EAAU3H,KAAK,CACXjF,KAAM,SACNI,MAAO,YAAmBF,EAAIE,OAC9ByL,OAAQ3L,EAAIigC,eAEhBkB,EAASrqB,OAAS,CAAEnL,OAAQ3L,EAAIigC,eAEpCvzB,EAAU3H,KAAKo8B,GACf,IAAK,MAAMr8B,KAAMo8B,EACb,IAAK,IAAIjlB,EAAI,EAAGA,EAAI,EAAGA,IACnBvP,EAAU3H,KAAK,CACXjF,KAAM,UACN2O,KAAM,YAAQ,CAAEvO,MAAO+gC,EAAMhlB,IAAM,CAAExN,KAAM,UAC3C3J,GAAIA,EAAGmX,KAWnB,OAPIjc,EAAI0gC,SACJh0B,EAAU3H,KAAK,CACXjF,KAAM,UACN2O,KAAMzO,EAAI0gC,QACV57B,GAAI9E,EAAIygC,YAGT/zB,O,iCChJnB,4FAOA,MAAM00B,EAAgB,CAClB7kB,IAAKC,GACuB,aAAjBA,EAAQ1c,MAA2C,WAApB0c,EAAQV,SAAwBU,EAAQtE,MAAyB,WAAjBsE,EAAQtE,KAElGvN,MAAO,CAAC1M,EAAOue,KACX,MAAM/f,EAAO,YAAQ+f,EAAQ/f,MACvB4kC,EAAS7kB,EAAQne,OAAS,GAChC,IAAK,MAAMye,KAAQN,EAAQI,QAAQC,MAAO,CACtC,MAAMte,EAAUue,EAAKve,QACrB,IAAK,YAAeA,GAChB,SAEJ,MAAMsB,EAAQ5B,EAAMW,kBAAkBL,GAChCgB,EAAYM,EAAQA,EAAMhC,IAAI,aAAUsB,EAC9C,GAAKU,GAAU,YAAoBN,IAOnC,GAHAM,EAAMsC,IAAI,YAAa,CAAEwJ,OAAQ,YAAoBmR,EAAK5c,MAAOzD,KAAS,GAC1E4kC,EAAMt8B,KAAK+X,GAEP7e,EAAM4d,UAAY5d,EAAM4d,SAAS9C,MAAQ9a,EAAM4d,SAAS7C,OAAQ,CACjD/a,EAAMW,kBAAkBL,IAAY,IAAI,IAAI,KACpD4D,IAAI,YAAa,CAAEwJ,OAAQ,YAAoBmR,EAAK5c,MAAOzD,KAAS,SAR3E,IAAS,IAAYoW,6BAYjC6J,gBAAiB,CAACze,EAAOue,EAASG,KAC9B,MAAM0kB,EAAQ7kB,EAAQne,OAAOqN,OAAOoR,IAASH,EAAQjR,OAAOwS,GAAKA,EAAEzhB,OAASqgB,EAAKH,QAAQ/f,MAAMmB,QAG/F,IAAKE,EAAMV,QAAU+jC,EAAgBrjC,KAAWojC,EAAMtjC,OAClD,OAAO4e,EAQX,MAAM4kB,EAAU5kB,EAAQjR,OAAOwS,GAAKA,EAAEzhB,OAAS+f,EAAQ/f,MAAM,GAC7D,IAAIsP,EAASw1B,EAAQx1B,OACrB,GAAIA,EAAO8xB,QAAQ,MAAyB,EACxC0D,EAAQx1B,WAAas1B,EAAMn6B,IAAI4V,MAAW,YAAYA,EAAK5c,WAAW4c,EAAKH,QAAQ/f,QAAQyI,KAAK,aAE/F,CACD,IAAK,MAAMyX,KAAQukB,EAAO,CACtB,MAAM16B,KAAa,YAAYmW,EAAK5c,WAAW4c,EAAKH,QAAQ/f,OACxDmP,EAAO8xB,QAAQl3B,GAAW,IAC1BoF,KAAYA,EAAOy1B,UAAU,EAAGz1B,EAAOhO,OAAS,OAAO4I,MAG/D46B,EAAQx1B,OAASA,EAErB,OAAO4Q,EAAQ3R,OAAOq2B,EAAMn6B,IAAI4V,IAAQ,CAAGrgB,KAAMqgB,EAAKH,QAAQ/f,UAElE+f,QAAS,CAAC1e,EAAOue,EAASG,KAEtB,GAAI1e,EAAMV,SAAW+jC,EAAgBrjC,GACjC,IAAK,MAAM6e,KAAQN,EAAQne,OAAQ,CAC/B,MAAMsN,EAASgR,EAAQjR,OAAOwS,GAAKA,EAAEzhB,OAASqgB,EAAKH,QAAQ/f,MAAM,GACjE+O,EAAO5G,KAAO,eACP4G,EAAOrM,aACPqM,EAAOI,OAGtB,OAAO4Q,IAIR,SAASza,EAAOjE,EAAOM,GAE1B,gBADc,YAAYN,EAAMwgB,UAAUlgB,OAG9C,SAAS+iC,EAAgBrjC,GACrB,OAAOA,EAAMV,QAAU,YAAaU,EAAMV,WAAaU,EAAMV,OAAOA,QAAU+jC,EAAgBrjC,EAAMV,OAAOA,SANhG,O,iCC5Ef,gQAMO,SAASkkC,EAAiC59B,GAC7C,MAAM,QAAE+qB,GAAY/qB,EAAa69B,EAAmB,YAAO79B,EAAa,CAAC,YACzE,IAAK+qB,EACD,MAAO,CAAE8S,iBAAkB79B,GAE/B,IAAI89B,EACAC,EA+BJ,OA9BI,YAAQhT,IACRA,EAAQtwB,QAASgtB,IACTA,EAAE3nB,WACGg+B,IACDA,EAAmC,IAEvCA,EAAiC58B,KAAKumB,KAGjCsW,IACDA,EAAsC,IAE1CA,EAAoC78B,KAAKumB,MAG7CqW,IACAD,EAAiB9S,QAAU+S,IAI3B/S,EAAmB,UACnB8S,EAAiB9S,QAAUA,EAG3BgT,EAAsChT,EAG1C,YAAQgT,IAAuF,IAA/CA,EAAoC7jC,SACpF6jC,EAAsCA,EAAoC,IAEvE,CAAEA,sCAAqCF,oBAE3C,SAASG,EAAwBC,EAAgBC,EAA0BC,EAA+BC,GAAgB,GAC7H,GAAI,YAAaD,EACb,MAAO,CAAEpT,QAASoT,EAA8BpT,SAOpD,MAAO,CACHA,QAAS,IANckT,EAAe56B,IAAI,EAAGg7B,cAAaC,kBAAkB,CAC5EjiC,MAAOgiC,EAAcH,EAAyB7hC,MAC9CJ,KAAMiiC,EAAyBjiC,KAC/BsE,MAAO+9B,GAAeF,EAAgB,OAASF,EAAyB7hC,MAAQ,UAMzE,YAAU8hC,KAIlB,SAASI,EAAkCC,EAAkBC,EAAgBP,EAA0BQ,EAAgBC,GAC1H,MAAM,MAAE3iC,EAAK,KAAEsF,GAAS48B,EACxB,MAAO,EAAGU,WAAUrhC,OAAMshC,iBAAgBC,oBAA+BC,gBAAgB,OACrF,MAAMx+B,EAAQe,QAAuBhG,IAAfgG,EAAKf,WACrBjF,OACmCA,IAAnC4iC,EAAyB39B,MACrB29B,EAAyB39B,MACzB29B,EAAyB7hC,MACnC,OAAO2iC,EAAgBR,EAAkBI,EAAUD,EAAqB,CACpEphC,OACAoC,SAAU1G,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE,CAACulC,GAAiBxlC,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAEmD,MAAOwiC,EAAiB,IAAMX,EAAyB7hC,MAAOJ,KAAMiiC,EAAyBjiC,MAASsE,EAAQ,CAAEA,SAAU,IAAOvE,EAAQ,CAAEA,SAAU,IAAOsF,EAAO,CAAEA,QAAS,KAAS,YAASw9B,GAC9S,CACE,CAACL,EAAiB,KAAM,CACpBpiC,MAAOyiC,EAAoB,IAAMZ,EAAyB7hC,MAC1DJ,KAAMiiC,EAAyBjiC,OAGrC,IAAMyiC,GAAiBK,MAIlC,SAASC,EAAgBljC,EAAS+9B,EAAM8E,EAAqBM,GAChE,MAAM,KAAEvZ,EAAI,MAAEnmB,EAAK,QAAEyG,GAAYlK,EAC3ByB,EAAOzB,EAAQG,KACrB,OAAIH,EAAQ+9B,SAA4Bv+B,IAAlBQ,EAAQ+9B,IAAuB8E,EAAoB9E,GAC9D,CACH5gC,OAAOC,OAAOD,OAAOC,OAAO,GAAI+lC,GAAe,CAAE1hC,KAAMtE,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIylC,EAAoB9E,IAASnU,EAAO,CAAEA,QAAS,IAAOnmB,EAAQ,CAAEA,SAAU,IAAOyG,EAAU,CAAEA,WAAY,IAAO,YAAUi5B,EAAa1hC,MAAQ0hC,EAAa1hC,KAAO,CAAEtB,KAAMgjC,EAAa1hC,OAAU,CAAEiK,SAAUjK,KAAQs8B,MAAY,YAAU/9B,EAAQ+9B,IAAS,GAAK/9B,EAAQ+9B,OAGxa,GAEJ,SAASqF,EAA4Bt4B,EAAM7J,EAAQqW,GACtD,MAAM,SAAEzT,GAAaiH,EACf63B,EAA4B,aAAX1hC,EAAwB,IAAM,IAC/CmhC,EAA2Bv+B,EAAS8+B,GACpCU,EAA4Bx/B,EAAS8+B,EAAiB,KACtDW,EAAgCz/B,EAAS8+B,EAAiB,SAC1DY,EAAiC1/B,EAAS8+B,EAAiB,UACjE,MAAO,CACHP,yBAA0BoB,EAA8BpB,EAA0B9qB,GAClF+rB,0BAA2BG,EAA8BH,EAA2B/rB,GACpFgsB,8BAA+BE,EAA8BF,EAA+BhsB,GAC5FisB,+BAAgCC,EAA8BD,EAAgCjsB,GAC9FqrB,kBAGR,SAASa,EAA8BpB,EAA0B9qB,GAC7D,GAAI8qB,GAA4BA,EAAyBp+B,UAAW,CAChE,MAAM,UAAEA,GAAco+B,EAA0BqB,EAAiC,YAAOrB,EAA0B,CAAC,cAInH,OAHIp+B,IAAcsT,GACd,IAAS,IAAYD,6CAA6CrT,EAAWsT,IAE1EmsB,EAGP,OAAOrB,EAGR,SAASsB,EAAoB54B,EAAMwM,GACtC,MAAM,KAAE7V,EAAI,SAAEoC,GAAaiH,EAC3B,GAAI,YAAWjH,EAAS+F,IAAM,YAAa/F,EAAS+F,GAAI,CAEpD,GAAI,YAAW/F,EAASgG,IAAM,YAAahG,EAASgG,GAAI,CAEpD,QAA6BrK,IAAzBqE,EAAS+F,EAAE5F,WAA2BH,EAASgG,EAAE7F,YAAcsT,EAC/D,MAAO,WAEN,QAA6B9X,IAAzBqE,EAASgG,EAAE7F,WAA2BH,EAAS+F,EAAE5F,YAAcsT,EACpE,MAAO,aAEN,GAAIzT,EAAS+F,EAAE5F,YAAcsT,GAAiBzT,EAASgG,EAAE7F,YAAcsT,EACxE,MAAM,IAAItI,MAAM,sCAGhB,OAAI,YAAUvN,IAASA,EAAKR,OACjBQ,EAAKR,OAGT,WAIf,MAAO,aAEN,GAAI,YAAW4C,EAASgG,IAAM,YAAahG,EAASgG,GAErD,MAAO,WAIP,MAAM,IAAImF,MAAM,oCAAsCsI,EAAgB,O,iCCxJ9E,iKAkBA,SAASqsB,EAAQC,GACb,MAAoB,MAAfA,EAAQ,IAA8C,MAAhCA,EAAQA,EAAQxlC,OAAS,IAChC,MAAfwlC,EAAQ,IAA8C,MAAhCA,EAAQA,EAAQxlC,OAAS,GACzCwlC,EAAQC,MAAM,GAAI,GAEtBD,EAoCJ,MAAME,UAAkB,IAC3B,YAAYlmC,EAAQoN,GAChB9N,MAAMU,GACNP,KAAK0mC,OAAS/4B,EAElB,QACI,OAAO,IAAI84B,EAAU,KAAM,YAAUzmC,KAAK0mC,SAE9C,OACI,eAAgB,YAAK1mC,KAAK0mC,UAK9B,oBAAoBnmC,EAAQU,EAAO0lC,GAE/B,IAAIxjB,EAAW,GACf,MAAMvjB,EAAOqB,EAAMrB,KAInB,OAHK,YAAYA,IAASA,GAAQA,EAAKsI,QAAUtI,EAAKsI,OAAOyF,QACzDwV,EAAWvjB,EAAKsI,OAAOyF,OAEpB3N,KAAK4mC,kBAAkBrmC,EAAQ4iB,EAAU,GAAIwjB,GAExD,uCAAuCpmC,EAAQmP,EAAWi3B,GACtD,MAAMh5B,EAAQ,GAiCd,OAhCA,YAAY+B,EAAUhB,OAAQA,IAC1B,GAAI,YAAiBA,GAAS,CAE1B,IAAIm4B,EAAM,KAIN,YAAsBn4B,GACtBm4B,EAAMn4B,EAAO+zB,MAER,YAAsB/zB,GAC3Bm4B,EAAMn4B,EAAOuV,MAAM,GAEd,YAAsBvV,KAC3Bm4B,GAAOn4B,EAAOo4B,OAASp4B,EAAW,IAAG,IAErCm4B,IACI,YAAWA,GACXl5B,EAAMe,EAAOxL,OAAS,OAEjB,YAAS2jC,GACdl5B,EAAMe,EAAOxL,OAAS,SAEjB,YAAS2jC,KACdl5B,EAAMe,EAAOxL,OAAS,WAG1BwL,EAAO7K,WACP8J,EAAMe,EAAOxL,OAAS,WAIP,IAAvB,YAAKyK,GAAO5M,OACL,KAEJf,KAAK4mC,kBAAkBrmC,EAAQ,GAAIoN,EAAOg5B,GAKrD,gCAAgCpmC,EAAQU,EAAO0lC,GAC3C,MAAMxe,EAAW,GACjB,SAASjT,EAAIrT,GACL,YAAqBA,GACrBsmB,EAAStmB,EAASqB,OAAS,OAEJ,iBAAlBrB,EAASiB,MACd,YAAWjB,EAAS8E,WAEpBwhB,EAAStmB,EAASqB,OAAS,SAEtB,YAAgBrB,EAASqB,OAAS,EAGjCrB,EAASqB,SAASilB,IACpBA,EAAStmB,EAASqB,OAAS,WAG1B,YAAgBrB,IAAa,YAAYA,EAASkB,OAAS,YAAgBlB,EAASkB,KAAKG,OAAS,IAEjGrB,EAASkB,KAAKG,SAASilB,IACzBA,EAAStmB,EAASkB,KAAKG,OAAS,YAkB5C,IAdI,YAAYjC,IAAU,YAAaA,KAEnCA,EAAMshC,gBAAgB,CAAC1gC,EAAUN,KAC7B,GAAI,YAAgBM,GAChBqT,EAAIrT,OAEH,CACD,MAAMklC,EAAc,YAAoBxlC,GAClCylC,EAAe/lC,EAAMY,SAASklC,GACpC7xB,EAAIpV,OAAOC,OAAOD,OAAOC,OAAO,GAAI8B,GAAW,CAAEiB,KAAMkkC,EAAalkC,WAK5E,YAAY7B,GAAQ,CACpB,MAAM,KAAEmD,EAAI,QAAEzB,EAAO,SAAE6D,GAAavF,EACpC,GAAI,YAAWmD,KAEVnD,EAAMuF,SAAS2N,MAAO,CACvB,MACM0Y,EAAsBrmB,EADgB,eAAnB7D,EAAQiB,OAA0B,IAAM,MAE7D,YAAWipB,IACkB,iBAA7BA,EAAoB/pB,MAClB+pB,EAAoB3pB,SAASilB,IAC/BA,EAAS0E,EAAoB3pB,OAAS,WAIlD,OAAOlD,KAAK4mC,kBAAkBrmC,EAAQ,GAAI4nB,EAAUwe,GAKxD,yBAAyBpmC,EAAQ4iB,EAAUgF,EAAUwe,GAEjD,IAAK,MAAMzjC,KAAS,YAAKilB,GAAW,CAChC,MAAM8e,EAAWN,EAAcjhC,gBAAgBxC,QACxBf,IAAnB8kC,EAAS3kC,QAEL2kC,EAAS9jB,UACT8jB,EAAS3kC,QAAU6lB,EAASjlB,IACT,YAAnB+jC,EAAS3kC,OACW,YAApB6lB,EAASjlB,UACFilB,EAASjlB,GAGhB,IAAS,IAAYkT,eAAelT,EAAOilB,EAASjlB,GAAQ+jC,EAAS3kC,SAIjF,IAAK,MAAMY,KAAS,YAAKigB,GAAW,CAChC,MAAM8jB,EAAWN,EAAc9lC,IAAIqC,QAClBf,IAAb8kC,IAEIA,IAAa9jB,EAASjgB,UACfigB,EAASjgB,GAGhB,IAAS,IAAYkT,eAAelT,EAAOigB,EAASjgB,GAAQ+jC,KAIxE,MAAMt5B,EAAQ,IAAI,IAAMwV,EAAUgF,GAElCwe,EAAcO,QAAQv5B,GAEtB,MAAMwI,EAAI,GACV,IAAK,MAAM4G,KAAO,YAAKpP,EAAMsU,WAAY,CACrC,MAAM4kB,EAAMl5B,EAAM9M,IAAIkc,GACV,OAAR8pB,IACA1wB,EAAE4G,GAAO8pB,GAGjB,OAAuB,IAAnB,YAAK1wB,GAAGpV,QAAgB4lC,EAAcve,aAC/B,KAEJ,IAAIqe,EAAUlmC,EAAQ4V,GAEjC,YACI,OAAOnW,KAAK0mC,OAEhB,MAAM9C,GACF5jC,KAAK0mC,OAAS5mC,OAAOC,OAAOD,OAAOC,OAAO,GAAIC,KAAK0mC,QAAS9C,EAAMj2B,OAClEi2B,EAAMG,SAKV,sBACI,MAAMoD,EAAc,GACpB,IAAK,MAAMjkC,KAAS,YAAKlD,KAAK0mC,QAAS,CACnC,MAAMvwB,EAAInW,KAAK0mC,OAAOxjC,GACS,IAA3B,YAAgBA,KAChBikC,EAAYjkC,GAASiT,GAG7B,OAAOgxB,EAGX,iBACI,OAAO,IAAIxE,IAAI,YAAK3iC,KAAK0mC,SAE7B,kBACI,OAAO,IAAI/D,IAAI,YAAK3iC,KAAK0mC,SAE7B,mBAAmBU,GAAa,GAC5B,OAAO,YAAKpnC,KAAK0mC,QACZh4B,OAAOxL,IAAUkkC,GAAa,YAAgBlkC,GAAS,GACvDgH,IAAIhH,IACL,MAAMuO,EArOlB,SAAyBvO,EAAOyK,GAC5B,MAAM/D,EAAI,YAAoB1G,GAC9B,GAAc,WAAVyK,EACA,kBAAmB/D,KAElB,GAAc,YAAV+D,EACL,mBAAoB/D,KAEnB,GAAc,WAAV+D,EACL,kBAAmB/D,KAElB,GAAc,SAAV+D,EACL,gBAAiB/D,KAEhB,GAAc,YAAV+D,EACL,OAAO/D,EAEN,GAA+B,IAA3B+D,EAAMkzB,QAAQ,SAAgB,CAEnC,mBAAoBj3B,MADF08B,EAAQ34B,EAAM64B,MAAM,EAAG74B,EAAM5M,aAG9C,GAA8B,IAA1B4M,EAAMkzB,QAAQ,QAAe,CAElC,kBAAmBj3B,MADD08B,EAAQ34B,EAAM64B,MAAM,EAAG74B,EAAM5M,aAK/C,OADA,IAAS,IAAYmV,kBAAkBvI,IAChC,KA0MU05B,CAAgBnkC,EAAOlD,KAAK0mC,OAAOxjC,IAChD,OAAKuO,EAGW,CACZ3O,KAAM,UACN2O,OACA3J,GAAI,YAAoB5E,IALjB,OASVwL,OAAO4f,GAAW,OAANA,M,iCC7QzB,0bAaO,SAASgZ,EAAY/kC,EAAWV,GACnC,OAAQ,YAAkBU,KAAe,YAAUV,EAASmB,KAEzD,SAASukC,EAAUtmC,EAAOM,GAC7B,MAAMimC,EAA0B,MAAZjmC,EAAkB,IAAM,IAC5C,GAAIN,EAAMW,kBAAkB4lC,GACxB,OAAOvmC,EAAMwgB,UAAU+lB,GAIxB,SAASC,EAAWxmC,EAAOymC,EAAenmC,EAASM,GAEtD,QAAiCM,IAA7BulC,EAAcD,WACd,OAAO,YAAeC,EAAcD,YAEnC,CAED,MAAME,EAAQ,YAAc,aAAc1mC,EAAMa,OAAQP,EAASqC,EAAOrC,GAAUN,EAAMW,kBAAkBL,GAASV,IAAI,SACvH,YAAcsB,IAAVwlC,EACO,YAAeA,GAIlBpmC,IAAY,KAAK,YAAS,CAAC,IAAS,KAAUM,EAASiB,MAChD,SAGX,GAIL,SAAS8kC,EAAqBD,EAAOE,GACxC,QAAc1lC,IAAVwlC,EAEA,OADAA,EAAQ,YAAeA,GACJ,QAAfE,GAAuC,WAAfA,EACpBF,GAAS,IAAM,KAAOA,EACA,QAAfE,EAAuB,SAAW,MAEpC,KAAOF,GAASA,GAAS,IACR,QAAfE,EAAuB,MAAQ,SAG/B,SAIPF,GAAS,IAAM,KAAOA,GAAU,KAAOA,GAASA,GAAS,IAClD,SAEF,IAAMA,GAASA,GAAS,IACP,SAAfE,EAAwB,MAAQ,SAGjB,SAAfA,EAAwB,SAAW,MAMnD,SAASC,EAAkBH,EAAOE,GACrC,QAAc1lC,IAAVwlC,EAEA,OADAA,EAAQ,YAAeA,GACJ,QAAfE,GAAuC,WAAfA,EACpBF,EAAQ,KAAQ,EACT,SAEF,EAAIA,GAASA,EAAQ,IACJ,QAAfE,EAAuB,QAAU,OAGlB,QAAfA,EAAuB,OAAS,SAItCF,EAAQ,IAAM,KAAQ,EAChB,SAEF,IAAMA,GAASA,EAAQ,IACN,SAAfE,EAAwB,OAAS,QAGlB,SAAfA,EAAwB,QAAU,OAMlD,SAASE,EAAkBlmC,EAAUN,GACxC,GAAgB,MAAZA,GAAmB,YAAS,CAAC,eAAgB,YAAaM,EAASiB,MACnE,OAAO,EAIR,SAASklC,EAAoBnmC,EAAUU,GAE1C,GAAsB,YAAlBV,EAASiB,KACT,MAAkB,QAAdP,GACO,SAMZ,SAASqB,EAAOrC,GACnB,OAAQA,GACJ,KAAK,IACD,MAAO,SACX,KAAK,IACD,MAAO,OAGf,MAAM,IAAIoQ,MAAM,IAAYuH,0BAEzB,SAAS+uB,GAAiB,SAAEpmC,EAAQ,UAAEU,EAAS,KAAE5C,IACpD,IAAK,YAAkB4C,IACL,QAAdA,IACC,YAAS,CAAC,QAAS,QAAS,MAAO,WAAYV,EAASgC,UACzD,OAAI,YAAUhC,EAASmB,KAEZ,CAAE2L,eAAgBhP,EAAKgP,cAE3B,CAAEA,eAAgBhP,EAAKgP,cAI/B,SAASnD,EAAOk8B,EAAezmC,EAAOY,GACzC,MAAMqmC,EAAOR,EAAcl8B,OAC3B,GAAI08B,EACA,OAAO,YAAWrmC,EAAUqmC,GAI7B,SAASC,EAAc/jC,EAAMvC,GAChC,MAAa,SAATuC,GAAmB,YAAWvC,GACvB,EAEJ,I,iCCrJX,qIAMO,SAASumC,EAAiBhoC,GAC7B,OAAOA,aAAgB,KAAcA,aAAgB,KAAiBA,aAAgB,IAM1F,MAAMioC,EACF,cACIroC,KAAKsoC,UAAW,EAGpB,aACItoC,KAAKsoC,UAAW,EAEpB,kBACI,OAAOtoC,KAAKsoC,UAOb,MAAMC,UAA0BF,EACnC,cACIxoC,QACAG,KAAKwoC,WAAY,EAErB,cACIxoC,KAAKwoC,WAAY,EAErB,mBACI,OAAOxoC,KAAKwoC,UAEhB,YACI,MAAO,CAAEC,aAAczoC,KAAKyoC,aAAcC,YAAa1oC,KAAK0oC,aAEhE,WAAU,aAAED,EAAY,YAAEC,IAClBD,GACAzoC,KAAK2oC,cAELD,GACA1oC,KAAK4oC,aAMb,SAGA,uBAAuBxoC,GACnB,GAAIgoC,EAAiBhoC,GACjB,OAAO,EAEX,MAAMyoC,EAAOzoC,EAAKG,QACZ,aAAEkoC,GAAiBzoC,KAAKmV,IAAI/U,GAIlC,OAHIqoC,GACAzoC,KAAK8oC,uBAAuBD,GAEzB7oC,KAAK0oC,aAMb,MAAMK,UAAyBV,K,iCCxEtC,sQAmBO,SAASW,EAAiB/nC,GACzB,YAAYA,GAOpB,SAA8BA,GAC1B,MAAMI,EAASJ,EAAMQ,gBACfN,EAAuBF,EAAMG,UAAUC,OAC7C,IAAUF,GAAsBG,QAASC,IACrC,MAAMC,EAAiBH,EAAOE,GACxBmB,EAAkBlB,EAAiBA,EAAe0D,YAAS/C,EAC3D2hB,EAmFP,SAA+B7iB,EAAOM,GACzC,MAAMgB,EAAYtB,EAAMW,kBAAkBL,GAASV,IAAI,QACjDqE,EAnBV,SAAqCA,EAAQrD,EAAUU,EAAWK,GAC9D,GAAe,iBAAXsC,EAA2B,CAC3B,MAAM,MAAEqG,EAAK,OAAE09B,GAAWC,EAAyBrnC,EAAUU,GAC7D,IAAKgJ,EAED,YADA,IAAS09B,QAIZ,QAAe9mC,IAAX+C,GAAwBtC,EAAYumC,sBAAuB,CAEhE,MAAM,MAAE59B,GAAU29B,EAAyBrnC,EAAUU,GACrD,GAAIgJ,EACA,MAAO,eAGf,OAAOrG,EAIQkkC,CAA4BnoC,EAAMooC,YAAY9nC,GAAUN,EAAMY,SAASN,GAAUgB,EAAWtB,EAAMa,OAAOe,OACpHqC,IAAWjE,EAAMooC,YAAY9nC,KAC7BN,EAAMQ,gBAAgBF,GAAWzB,OAAOC,OAAOD,OAAOC,OAAO,GAAIkB,EAAMQ,gBAAgBF,IAAW,CAAE2D,YAGxG,GAAgB,MAAZ3D,GAAmBN,EAAMsF,gBAAgB,MACzC,OAAItF,EAAMsF,gBAAgB,KACf,YAAwB+iC,EAAyB/mC,EAAW2C,EAAQjE,EAAO,KAAMqoC,EAAyB/mC,EAAW2C,EAAQjE,EAAO,MAAO,SAAU,QAASsoC,GAG9JD,EAAyB/mC,EAAW2C,EAAQjE,EAAO,MAG7D,GAAgB,MAAZM,GAAmBN,EAAMsF,gBAAgB,MAC9C,OAAItF,EAAMsF,gBAAgB,KACf,YAAwB+iC,EAAyB/mC,EAAW2C,EAAQjE,EAAO,KAAMqoC,EAAyB/mC,EAAW2C,EAAQjE,EAAO,MAAO,SAAU,QAASsoC,GAG9JD,EAAyB/mC,EAAW2C,EAAQjE,EAAO,MAGlE,OAAOqoC,EAAyB/mC,EAAW2C,EAAQjE,EAAOM,GA1GtCioC,CAAsBvoC,EAAOM,GACvCG,EAAiBP,EAAqBI,GAY5C,GAXAG,EAAed,gBAAgB,UAAWkjB,GACtC,YAAkBphB,IAMlBhB,EAAeyD,IAAI,YAAa,CAC5BwJ,OAAQ,IAAmB,IAAUjM,KACtC,GAEHzB,EAAMG,UAAUxB,KAAK6pC,UAAW,CAEhC,IAAIC,EAAczoC,EAClB,MAAQ,YAAayoC,IAAgBA,EAAYnpC,QAC7CmpC,EAAcA,EAAYnpC,OAG9B,GAAgB,WADAmpC,EAAYtoC,UAAU0d,QAAQjc,MAAMtB,GAEhD,IAAK,MAAM2D,KAAU4e,EAAQxhB,MAErB,YAAgB4C,KAEhBA,EAAOtF,KAAO,IAAqBsF,EAAOtF,KAAK8Z,QAAQ,IAAoB,QArC3FiwB,CAAqB1oC,GA4C7B,SAAiCA,GAC7B,IAAK,MAAMZ,KAASY,EAAMX,SACtB0oC,EAAiB3oC,GAErB,MAAMc,EAAuBF,EAAMG,UAAUC,OAC7C,IAAUF,GAAsBG,QAASC,IACrC,IAAIuiB,EACAD,EAAY,KAChB,IAAK,MAAMxjB,KAASY,EAAMX,SAAU,CAChC,MAAMkF,EAAiBnF,EAAMe,UAAUC,OAAOE,GAC9C,GAAIiE,EAAgB,CAEZse,OADY3hB,IAAZ2hB,EACUte,EAAeE,gBAAgB,WAG/B,YAAwBoe,EAASte,EAAeE,gBAAgB,WAAY,UAAW,QAAS6jC,GAE9G,MAAMK,EAAKpkC,EAAe3E,IAAI,aAC1BgjB,GAAa+lB,GAAM/lB,EAAUlV,SAAWi7B,EAAGj7B,QAC3C,IAAS,gFAEbkV,EAAY+lB,GAGpBzoC,EAAqBI,GAASX,gBAAgB,UAAWkjB,GACrDD,GACA1iB,EAAqBI,GAAS4D,IAAI,YAAa0e,GAAW,KAnE9DgmB,CAAwB5oC,GA2HhC,SAASqoC,EAAyB/mC,EAAW2C,EAAQjE,EAAOM,GACxD,MAAMM,EAAWZ,EAAMY,SAASN,GAChC,GAAI2D,GAAqB,iBAAXA,IAA8B,YAAkBA,GAAS,CAEnE,MAAM,KAAEpC,EAAI,SAAEe,GAAahC,EAC3B,MAAa,aAATiB,GAAuBe,EAChB,YAZnB,SAA+BqB,EAAQpC,EAAMe,GACzC,OAAOqB,EAAOgF,IAAIuK,IAEd,MAAO,CAAE9F,iBADI,YAAU8F,EAAG,CAAE5Q,WAAUf,eAUdgnC,CAAsB5kC,EAAQpC,EAAMe,IAErD,YAAa,CAACqB,IAEzB,MAAM+Y,EAAQhd,EAAMgd,MACpB,GAAIA,GAAS1c,IAAY0c,EAAMH,aAAc,CACzC,GAAqB,cAAjBG,EAAMD,OACN,OAAO,YAAa,CAAC,CAAC,EAAG,KAE7B,MAAMpe,EAAOqB,EAAMyhB,gBAAgB,KACnC,OAAO,YAAa,CAChB,CACI9iB,OACAsD,MAAOjC,EAAM+P,QAAQzP,EAAS,CAAE2P,OAAQ,WAE5C,CACItR,OACAsD,MAAOjC,EAAM+P,QAAQzP,EAAS,CAAE2P,OAAQ,WAIpD,MAAMnO,EAAO,YAAexB,GAyGzB,SAAoBN,EAAOM,EAASgB,GACvC,IAAK,YAAkBA,GACnB,OAGJ,MAAMV,EAAWZ,EAAMY,SAASN,GAC1BwB,EAAOlB,EAASkB,KAEtB,GAAI,YAAYA,GACZ,MAAO,CACH2E,GAAI,MACJxE,MAAO,YAAoBrB,EAAUN,GACrC4S,MAAO,aAGf,MAAM41B,EAA4B,OAAhB9oC,EAAMgd,MAExB,GAAI,YAAYlb,GACZ,OAAOinC,EAAmBjnC,EAAMgnC,GAE/B,GAAI,YAAiBhnC,GAAO,CAC7B,MAAM,SAAEyD,EAAQ,MAAE2N,GAAUpR,EACtBknC,EAAmBhpC,EAAMY,SAAS2E,IAClC,UAAEG,EAAS,MAAEzD,GAAU+mC,EAC7B,GAAI,YAAYtjC,IAAc,YAAYA,GACtC,OAAOqjC,EAAmB,CACtB9mC,MAAO,YAAQ+mC,GACf91B,SACD41B,GAEF,GAAI,YAAcpjC,KAAeA,EAClC,OAAOqjC,EAAmB,CACtBtiC,GAAIf,EACJzD,QACAiR,SACD41B,OAGN,IAAa,eAAThnC,EACL,MAAO,CACH2E,GAAI,MACJxE,MAAOjC,EAAM+P,QAAQzP,GACrB4S,MAAO,cAGV,GAAI,IAAc,CAAC,iBAAahS,GAAoCY,GACrE,OAAO,EAGX,OAzJMmnC,CAAWjpC,EAAOM,EAASgB,QAC3BJ,EACN,GAAe,iBAAX+C,EAA2B,CAC3B,MAAMtF,EAAOqB,EAAMyhB,gBAAgB,MAC7B,MAAExf,GAAUrB,EAClB,OAAO,YAAa,CAChB,CACIjC,OACAsD,MAAO,YAAQ,CAAEA,QAAOyD,UAAW,SAEvC,CACI/G,OACAsD,MAAO,YAAQ,CAAEA,QAAOyD,UAAW,WAI1C,GAAI,YAAU9E,EAASmB,KAAM,CAC9B,GAAI,YAAkBT,GAClB,MAAkB,gBAAdA,EAEO,YAAa,IAIjB,YAAa,CAChB,CAGI3C,KAAM,IAAemD,GAAQ9B,EAAMyhB,gBAAgB,KAAQzhB,EAAMyhB,gBAAgB,KAEjFxf,MAAOjC,EAAM+P,QAAQzP,EAAS,YAAiBM,EAAUN,GAAW,CAAEyG,UAAW,SAAY,IAE7FjF,MAAe,IAATA,GAAkB,YAASA,GAK3BA,EAJA,CACEG,MAAOjC,EAAM+P,QAAQzP,EAAS,IAC9BmG,GAAI,UAMnB,CAED,MAAM,IAAE1E,GAAQnB,EAChB,GAAI,YAAUmB,GAAM,CAChB,MAAMC,EAAY,YAAiBhC,EAAOY,EAASqB,MAAOF,GAC1D,OAAO,YAAa,CAChB,IAAI,IAAiB,KACjB,MAAM2L,EAAS1N,EAAMkC,cAAcF,GACnC,UAAW0L,YAAiBA,cAKpC,OAAO,YAAa,CAChB,CACI/O,KAAMqB,EAAMyhB,gBAAgB,KAC5Bxf,MAAOjC,EAAM+P,QAAQzP,EAAS,QAM7C,GAAIM,EAASgC,UACd,IAAc,CAAC,OAAQ,OAAQtB,IAC/B,YAAQhB,EAASM,EAAU,YAAYZ,GAASA,EAAMuF,SAAS,YAAyBjF,SAAYY,EAAWlB,EAAM0B,QAAS1B,EAAMa,QAAS,CAC7I,MAAMlC,EAAOqB,EAAMyhB,gBAAgB,KACnC,OAAO,YAAa,CAChB,CACI9iB,OACAsD,MAAOjC,EAAM+P,QAAQzP,IAEzB,CACI3B,OACAsD,MAAOjC,EAAM+P,QAAQzP,EAAS,CAAE2P,OAAQ,WAI/C,OAAInO,EACE,YAAa,CAChB,CAGInD,KAAM,IAAemD,GAAQ9B,EAAMyhB,gBAAgB,KAAQzhB,EAAMyhB,gBAAgB,KACjFxf,MAAOjC,EAAM+P,QAAQzP,GACrBwB,KAAMA,KAKP,YAAa,CAChB,CACInD,KAAMqB,EAAMyhB,gBAAgB,KAC5Bxf,MAAOjC,EAAM+P,QAAQzP,MAKrC,SAASyoC,EAAmBjnC,EAAMgnC,GAC9B,MAAM,GAAEriC,EAAE,MAAExE,EAAK,MAAEiR,GAAUpR,EAC7B,OAAOjD,OAAOC,OAAOD,OAAOC,OAAO,CAE/B2H,GAAIA,IAAOqiC,EAAY,MAAQ,MAAqB7mC,EAAQ,CAAEA,MAAO,IAAwBA,IAAW,IAAOiR,EAAQ,CAAEA,SAAU,IA4DpI,SAAS+0B,EAAyBrnC,EAAUU,GAC/C,MAAM,UAAEoE,EAAS,KAAE7D,GAASjB,EAC5B,OAAK8E,EAMD,YAASA,KAAe,IAAuBA,GACxC,CACH4E,OAAO,EACP09B,OAAQ,IAAYhxB,uCAAuCtR,IAGtD,iBAAT7D,GACkB,QAAdP,EACO,CACHgJ,OAAO,EACP09B,OAAQ,IAAY/wB,+BAA+BrW,IAIxD,CAAE0J,OAAO,GAnBL,CACHA,OAAO,EACP09B,OAAQ,IAAYjxB,wCAAwCnW,IAsBxE,SAAS0nC,EAAkB5jC,EAAIC,EAAI1E,EAAUyX,GAKzC,OAJIhT,EAAGwd,UAAYvd,EAAGud,UAClB,IAAS,IAAYtK,+BAA+B3X,EAAUyX,EAAYhT,EAAGrD,MAAOsD,EAAGtD,QAGpF,CAAE6gB,SAAUxd,EAAGwd,SAAU7gB,MAAO,IAAIqD,EAAGrD,SAAUsD,EAAGtD,QAkFxD,SAAS6nC,EAAmBjlC,GAC/B,GAAI,YAAgBA,IAAW,YAASA,EAAOhC,OAC3C,OAAOgC,EAAOhC,MAEb,GAAI,YAAuBgC,GAAS,CACrC,IAAIhC,EACJ,IAAK,MAAMknC,KAAkBllC,EAAOq0B,OAChC,GAAI,YAAgB6Q,IAAmB,YAASA,EAAelnC,OAC3D,GAAKA,GAGA,GAAIA,IAAUknC,EAAelnC,MAE9B,OADA,IAAS,+KACFA,OAJPA,EAAQknC,EAAelnC,MASnC,OADA,IAAS,6QACFA,EAEN,GAAI,YAAsBgC,GAAS,CACpC,IAAS,6KACT,MAAMhC,EAAQgC,EAAOq0B,OAAO,GAC5B,OAAO,YAASr2B,GAASA,OAAQf,GAIlC,SAASkoC,EAAeppC,EAAOM,GAYlC,OApHG,SAAsBuiB,GACzB,MAAMwmB,EAAgB,IAAYxmB,EAAQ5Z,IAAIhF,IAE1C,GAAI,YAAgBA,GAAS,CACzB,MAAQnC,KAAMwnC,GAAOrlC,EACrB,OADiD,YAAOA,EAAQ,CAAC,SAGrE,OAAOA,IACP,KACEslC,EAAQ,IAAY1mB,EACrB5Z,IAAIpJ,IACL,GAAI,YAAgBA,GAAI,CACpB,MAAMogB,EAAIpgB,EAAEiC,KAWZ,YAVUZ,IAAN+e,GAAoB,IAAeA,KACtB,UAATA,EAAExZ,WAEKwZ,EAAEhe,MAEG,cAAZge,EAAE/M,cAEK+M,EAAE/M,OAGV+M,KAIVxS,OAAOwS,QAAW/e,IAAN+e,GAAkB,KACnC,GAA6B,IAAzBopB,EAAcvpC,OACd,OAEC,GAA6B,IAAzBupC,EAAcvpC,OAAc,CACjC,MAAMmE,EAAS4e,EAAQ,GACvB,GAAI,YAAgB5e,IAAWslC,EAAMzpC,OAAS,EAAG,CAC7C,IAAIgC,EAAOynC,EAAM,GAKjB,OAJIA,EAAMzpC,OAAS,IACf,IAAS,IAAYkY,oBACrBlW,GAAO,GAEJjD,OAAOC,OAAOD,OAAOC,OAAO,GAAImF,GAAS,CAAEnC,SAEtD,OAAOmC,EAGX,MAAMulC,EAAmB,IAAYD,EAAMtgC,IAAIgX,GACvC,IAAeA,IAAMA,EAAExZ,MAAM,IACtBwZ,GAEX,IAAS,IAAYnI,kBAAkBmI,KAChC,IACP,KACJ,IAAIne,EAC4B,IAA5B0nC,EAAiB1pC,OACjBgC,EAAO0nC,EAAiB,GAEnBA,EAAiB1pC,OAAS,IAC/B,IAAS,IAAYkY,oBACrBlW,GAAO,GAEX,MAAM2nC,EAAU,IAAY5mB,EAAQ5Z,IAAIpJ,GAChC,YAAgBA,GACTA,EAAElB,KAEN,MACP2M,GAAKA,GACT,GAAuB,IAAnBm+B,EAAQ3pC,QAA+B,OAAf2pC,EAAQ,GAAa,CAG7C,OADe5qC,OAAOC,OAAO,CAAEH,KAAM8qC,EAAQ,GAAInR,OAAQ+Q,EAAcpgC,IAAIpJ,GAAKA,EAAEoC,QAAWH,EAAO,CAAEA,QAAS,IAGnH,OAAOjD,OAAOC,OAAO,CAAEw5B,OAAQ+Q,GAAkBvnC,EAAO,CAAEA,QAAS,IA8C5D4nC,CAXgB1pC,EAAMG,UAAUC,OAAOE,GACfV,IAAI,WAAWqJ,IAAKhF,IAI3C,YAAgBA,KAChBA,EAAOtF,KAAOqB,EAAMqhB,iBAAiBpd,EAAOtF,OAEzCsF,O,iCCvef,6DAGO,MAAM0lC,UAAmB,IAC5B,YAAYhrC,GAGR,IAAIsI,EAIJ,GANArI,MAAM,MACND,EAAOA,GAAQ,CAAEH,KAAM,UAElB,YAAYG,KACbsI,EAAStI,EAAKsI,OAASpI,OAAOC,OAAO,GAAI,YAAKH,EAAKsI,OAAQ,CAAC,WAAa,IAEzE,YAAatI,GACbI,KAAK6qC,MAAQ,CAAEr/B,OAAQ5L,EAAK4L,aAE3B,GAAI,YAAU5L,IAEf,GADAI,KAAK6qC,MAAQ,CAAEhZ,IAAKjyB,EAAKiyB,MACpB3pB,EAAOpF,KAAM,CAGd,IAAIgoC,EAAmB,kBAAkBC,KAAKnrC,EAAKiyB,KAAK,GACnD,YAAS,CAAC,OAAQ,MAAO,MAAO,MAAO,YAAaiZ,KACrDA,EAAmB,QAGvB5iC,EAAOpF,KAAOgoC,QAGb,YAAkBlrC,GAEvBI,KAAK6qC,MAAQ,CAAEr/B,OAAQ,CAAC,CAAE1I,KAAM,aAE3B,YAAYlD,IAAS,YAAYA,MACtCI,KAAK6qC,MAAQ,IAGjB7qC,KAAKgrC,WAAa,YAAYprC,GAE1BA,EAAKH,OACLO,KAAKirC,MAAQrrC,EAAKH,MAElByI,GAAU,YAAKA,GAAQnH,OAAS,IAChCf,KAAK6qC,MAAM3iC,OAASA,GAG5B,kBACI,OAAO,IAAIy6B,IAEf,kBAGA,WACI,OAAO3iC,KAAK6qC,MAEhB,UACI,QAAS7qC,KAAKirC,MAElB,kBACI,OAAOjrC,KAAKgrC,WAEhB,eACI,OAAOhrC,KAAKirC,MAEhB,aAAaxrC,GACTO,KAAKirC,MAAQxrC,EAEjB,WAAWc,GACP,MAAM,IAAIoR,MAAM,kCAEpB,SACI,MAAM,IAAIA,MAAM,iDAEpB,OACI,MAAM,IAAIA,MAAM,uBAEpB,WACI,OAAO7R,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,KAAMO,KAAKirC,OAASjrC,KAAK6qC,OAAQ,CAAEn7B,UAAW,Q,iCC3E3F,0QAGO,SAASw7B,EAAqBC,GACjC,OAAOA,GAAaA,EAAqB,UAEtC,SAASC,EAAsBD,GAClC,OAAOA,KAAeA,EAAUjoC,YAA6Bf,IAApBgpC,EAAU1I,MAEhD,SAAS4I,EAAmBF,GAC/B,OAAOA,KAAeA,EAAUjoC,YAA0Bf,IAAjBgpC,EAAUG,GAEhD,SAASC,EAAoBJ,GAChC,OAAOA,KAAeA,EAAUjoC,YAA2Bf,IAAlBgpC,EAAUK,IAEhD,SAASC,EAAmBN,GAC/B,OAAOA,KAAeA,EAAUjoC,YAA0Bf,IAAjBgpC,EAAUO,GAEhD,SAASC,EAAoBR,GAChC,OAAOA,KAAeA,EAAUjoC,YAA2Bf,IAAlBgpC,EAAUS,IAEhD,SAASC,EAAsBV,GAClC,SAAIA,GAAaA,EAAUjoC,OACnB,YAAQioC,EAAUlnB,QAAqC,IAA3BknB,EAAUlnB,MAAMljB,QAMjD,SAAS+qC,EAAsBX,GAClC,OAAQA,KAAeA,EAAUjoC,QAAU,YAAQioC,EAAUrE,QAAU,YAAQqE,EAAUY,KAMtF,SAASC,EAAiBb,GAC7B,OAAQW,EAAsBX,IAC1BC,EAAsBD,IACtBU,EAAsBV,IACtBE,EAAmBF,IACnBM,EAAmBN,IACnBI,EAAoBJ,IACpBQ,EAAoBR,GAE5B,SAASc,EAAmBx3B,EAAG5Q,GAC3B,OAAO,YAAU4Q,EAAG,CAAE5Q,WAAU6Q,MAAM,IAMnC,SAASw3B,EAAsBf,EAAWgB,GAAa,GAC1D,MAAM,MAAEjpC,EAAK,SAAEW,GAAasnC,EACtBrK,EAAYj9B,EAIV,QAAU,YAAkBA,EAAUX,GAAS,IACjD,YAAQioC,EAAW,CAAE15B,KAAM,UACjC,GAAI25B,EAAsBD,GACtB,OAAOrK,EAAY,MAAQmL,EAAmBd,EAAU1I,MAAO5+B,GAE9D,GAAIwnC,EAAmBF,GAAY,CAEpC,SAAUrK,KAAamL,EADTd,EAAUG,GACyBznC,KAEhD,GAAI4nC,EAAmBN,GAAY,CAEpC,SAAUrK,KAAamL,EADTd,EAAUO,GACyB7nC,KAEhD,GAAI0nC,EAAoBJ,GAAY,CAErC,SAAUrK,MAAcmL,EADVd,EAAUK,IAC0B3nC,KAEjD,GAAI8nC,EAAoBR,GAAY,CAErC,SAAUrK,MAAcmL,EADVd,EAAUS,IAC0B/nC,KAEjD,GAAIioC,EAAsBX,GAC3B,kBAhCR,SAA6BjD,EAAMrkC,GAC/B,OAAOqkC,EAAKh+B,IAAIuK,GAAKw3B,EAAmBx3B,EAAG5Q,IA+BpBuoC,CAAoBjB,EAAUrE,MAAOjjC,GAAUwE,KAAK,UAAUy4B,YAEhF,GAjDF,SAA+BqK,GAClC,OAAOA,KAAeA,EAAUjoC,YAA6Bf,IAApBgpC,EAAU5/B,MAgD1C8gC,CAAsBlB,GAC3B,OAAOA,EAAU5/B,SAAWu1B,oBAA4BA,QAAkBA,mBAA2BA,KAEpG,GAAI+K,EAAsBV,GAAY,CACvC,MAAMmB,EAAQnB,EAAUlnB,MAAM,GACxBsoB,EAAQpB,EAAUlnB,MAAM,GAC9B,GAAc,OAAVqoB,GAA4B,OAAVC,GAAkBJ,EACpC,MAAQ,WACJrL,EACA,MACAmL,EAAmBK,EAAOzoC,GAC1B,KACAooC,EAAmBM,EAAO1oC,GAC1B,KAER,MAAM2oC,EAAQ,GAOd,OANc,OAAVF,GACAE,EAAMzkC,QAAQ+4B,QAAgBmL,EAAmBK,EAAOzoC,MAE9C,OAAV0oC,GACAC,EAAMzkC,QAAQ+4B,QAAgBmL,EAAmBM,EAAO1oC,MAErD2oC,EAAMzrC,OAAS,EAAIyrC,EAAMnkC,KAAK,QAAU,OAGnD,MAAM,IAAIsJ,kCAAkCiD,KAAKC,UAAUs2B,MAExD,SAASsB,EAAmB7iC,GAC/B,OAAIoiC,EAAiBpiC,IAAMA,EAAE/F,SAClB/D,OAAOC,OAAOD,OAAOC,OAAO,GAAI6J,GAAI,CAAE/F,SAAU,YAAkB+F,EAAE/F,YAExE+F,I,iCCjHX,kCAIO,MAAM8iC,EACT,YAAYC,GACR7sC,OAAO8sC,eAAe5sC,KAAM,SAAU,CAClC6sC,YAAY,EACZhsC,IAAK8rC,IAGb,gBAAgBG,EAAQC,GACpB,OAAO,IAAIL,EAAiB,IAAMI,EAAOC,O,iCCZjD,ofAiBO,MAAMC,UAAoB,IAC7B,IAAI5sC,GACA,MAAMG,EAASH,EAAKG,OAEpB,GAAIH,aAAgB,IAAW,CAC3B,GAAI,YAAiBG,GACjB,OAAOP,KAAKitC,MAEhB,GAAI1sC,EAAO2sC,cAAgB,EAGvB,OADAltC,KAAK2oC,cACE3oC,KAAKitC,MAEhB,GAAI1sC,aAAkB,IAClBP,KAAK4oC,aACLroC,EAAOyiB,MAAM5iB,OAEZ,CAED,GAAI,YAAkBG,EAAO4sC,iBAAkB/sC,EAAKgtC,mBAEhD,OADAptC,KAAK2oC,cACE3oC,KAAKitC,MAEhBjtC,KAAK4oC,aACLxoC,EAAKitC,kBAIb,OADArtC,KAAK2oC,cACE3oC,KAAKitC,OAQb,MAAMK,UAA4B,IACrC,WAAW/sC,EAAQJ,GACf,MAAMotC,EAAaptC,EAAMqtC,QACzB,IAAK,MAAMptC,KAAQD,EACfI,EAAOujC,YAAY1jC,GACnBA,EAAKG,OAASgtC,EACdntC,EAAK2jC,SAGb,IAAI3jC,GACA,MAAMqtC,EAASrtC,EAAKE,SAAS4J,IAAIqC,GAAKA,EAAEmhC,QAClCC,EAAU,GAChB,IAAK,IAAI1uB,EAAI,EAAGA,EAAIwuB,EAAO1sC,OAAQke,SACJ9c,IAAvBwrC,EAAQF,EAAOxuB,IACf0uB,EAAQF,EAAOxuB,IAAM,CAAC7e,EAAKE,SAAS2e,IAGpC0uB,EAAQF,EAAOxuB,IAAIlX,KAAK3H,EAAKE,SAAS2e,IAG9C,IAAK,MAAM2uB,KAAK,YAAKD,GACbA,EAAQC,GAAG7sC,OAAS,IACpBf,KAAK4oC,aACL5oC,KAAK6tC,WAAWztC,EAAMutC,EAAQC,KAGtC,IAAK,MAAMvtC,KAASD,EAAKE,SACrBN,KAAKmV,IAAI9U,GAEb,OAAOL,KAAK0oC,aAQb,MAAMoF,UAA6B,IACtC,IAAI1tC,GACA,OAAIA,aAAgB,KAAcA,EAAK8sC,cAAgB,GAAK9sC,aAAgB,IAEjEJ,KAAKitC,OAGZjtC,KAAK4oC,aACLxoC,EAAK2jC,SAEF/jC,KAAKitC,QAQb,MAAMc,UAAiC,IAC1C,cACIluC,SAAS0a,WACTva,KAAKu5B,OAAS,IAAIoJ,IAEtB,IAAIviC,GAEA,GADAJ,KAAK2oC,cACDvoC,aAAgB,IAAc,CAC9B,MAAM4tC,EAAU5tC,EAAK+sC,iBACjB,YAAgBa,EAAShuC,KAAKu5B,SAC9Bv5B,KAAK4oC,aACLxoC,EAAK2jC,UAGL/jC,KAAKu5B,OAAS,IAAIoJ,IAAI,IAAI3iC,KAAKu5B,UAAWyU,IAGlD,OAAOhuC,KAAKitC,MAEhB,QACIjtC,KAAKu5B,OAAOja,SAMb,MAAM2uB,UAAuB,IAChC,IAAI7tC,GACAJ,KAAK2oC,cACL,MACMuF,EADS9tC,EAAKG,OACYD,SAASoO,OAAOnC,GAAKA,aAAa,KAC5D4hC,EAAcD,EAAiBE,MACrC,IAAK,MAAMvqC,KAAYqqC,EACnBluC,KAAK4oC,aACLuF,EAAYnrB,MAAMnf,GAEtB,OAAO7D,KAAKitC,OAgCb,SAASoB,EAAcjuC,GAC1B,GAAIA,aAAgB,IAChB,GAA2B,IAAvBA,EAAK8sC,eAAyB9sC,EAAKE,SAAS,aAAc,IAYzD,CAED,MAAMguC,EAAYluC,EAAKa,MAAMG,UAAUxB,KAAKo4B,MAcxD,SAASuW,EAAoBnuC,GACzB,GAAIA,aAAgB,KAAcA,EAAK0C,OAAS,KACjB,IAAvB1C,EAAK8sC,cAAqB,CAC1B,MAAM7sC,EAAQD,EAAKE,SAAS,GACtBD,aAAiB,MACnBA,EAAMgtC,iBACNkB,EAAoBnuC,KAnBxBmuC,CAAoBD,GAEpB,MAAME,GA7CIjzB,EA6CkBnb,EA5CpC,SAASioB,EAAMjoB,GACX,KAAMA,aAAgB,KAAY,CAC9B,MAAMquC,EAAOruC,EAAKioB,QAClB,GAAIomB,aAAgB,IAAY,CAC5B,MAAMC,EAAU,IAAqBD,EAAKE,YAC1CF,EAAKG,UAAUF,GACfnzB,EAAMta,MAAMG,UAAUxB,KAAKivC,YAAYH,GAAWD,OAE7CA,aAAgB,KACrBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,MAChBA,EAAKK,cAAcvzB,EAAMge,QAG7B,OADAn5B,EAAKE,SAAS2pB,QAAQ5B,GAAO/mB,QAAS2e,GAAOA,EAAE1f,OAASkuC,GACjD,CAACA,GAEZ,OAAOruC,EAAKE,SAAS2pB,QAAQ5B,KA4BnBomB,EAAOruC,EAAKE,SAAS4J,IAAIskC,GAAQxK,OACvC,IAAK,MAAMh3B,KAAKyhC,EACZzhC,EAAEzM,OAAS+tC,MApBwD,CAEvE,MAAMjuC,EAAQD,EAAKE,SAAS,IACxBD,aAAiB,KACjBA,aAAiB,KACjBA,aAAiB,KACjBA,aAAiB,MACjBA,EAAMyuC,cAAc1uC,EAAKm5B,QAE7Bl5B,EAAMgtC,iBACNgB,EAAcjuC,QAelBA,EAAKE,SAAS4J,IAAImkC,GArD1B,IAAsB9yB,EAsEf,MAAMwzB,UAA+B,IACxC,IAAI3uC,GAEIA,aAAgB,MAAeA,EAAK4uC,eACpChvC,KAAK4oC,aACLxoC,EAAK2jC,UAET,IAAK,MAAM1jC,KAASD,EAAKE,SACrBN,KAAKmV,IAAI9U,GAEb,OAAOL,KAAK0oC,aAQb,MAAMuG,UAAmB,IAC5B,IAAI7uC,GACA,MAAMG,EAASH,EAAKG,OACd2uC,EAAmB,IAAI3uC,EAAOD,UAC9B6uC,EAAgB5uC,EAAOD,SAASoO,OAAQrO,GAAUA,aAAiB,KACzE,GAAIE,EAAO2sC,cAAgB,GAAKiC,EAAcpuC,QAAU,EAAG,CACvD,MAAMquC,EAAc,GACdC,EAAmB,IAAI1M,IAC7B,IAAK,MAAM2M,KAAaH,EAAe,CACnC,MAAMxhC,EAAQ2hC,EAAU3hC,MACxB,IAAK,MAAMigC,KAAK,YAAKjgC,GACXigC,KAAKwB,EAGFA,EAAYxB,KAAOjgC,EAAMigC,IAC9ByB,EAAiBn6B,IAAI04B,GAHrBwB,EAAYxB,GAAKjgC,EAAMigC,GAOnC,IAAK,MAAM1qC,KAASmsC,SACTD,EAAYlsC,GAEvB,GAAiC,IAA7B,YAAKksC,GAAaruC,OAAc,CAChCf,KAAK4oC,aACL,MAAM2G,EAAkB,IAAI,IAAUhvC,EAAQ6uC,GAC9C,IAAK,MAAMI,KAAaN,EAAkB,CACtC,GAAIM,aAAqB,IACrB,IAAK,MAAMzyB,KAAO,YAAKqyB,UACZI,EAAU7hC,MAAMoP,GAG/Bxc,EAAOujC,YAAY0L,GACnBA,EAAUjvC,OAASgvC,EAEfC,aAAqB,KAA8C,IAAjC,YAAKA,EAAU7hC,OAAO5M,QACxDyuC,EAAUzL,WAM1B,OADA/jC,KAAK2oC,cACE3oC,KAAKitC,OAGb,MAAMwC,UAAwB,IACjC,IAAIrvC,GACA,MAAMG,EAASH,EAAKG,OACdmvC,EAAcnvC,EAAOD,SAASoO,OAAQrO,GAAUA,aAAiB,KAIjEsvC,EAAoB,GAE1B,IAAK,MAAMC,KAAOF,EAAa,CAC3B,MAAMG,EAAW,YAAKD,EAAIE,SACpBD,KAAYF,IACdA,EAAkBE,GAAY,IAElCF,EAAkBE,GAAU9nC,KAAK6nC,GAGrC,IAAK,MAAMxjB,KAAS,YAAKujB,GAAoB,CACzC,MAAMI,EAAgBJ,EAAkBvjB,GACxC,GAAI2jB,EAAchvC,OAAS,EAAG,CAC1B,MAAMivC,EAAaD,EAAc3B,MACjC,IAAK,MAAMwB,KAAOG,EACVC,EAAWhtB,MAAM4sB,KACjBrvC,EAAOujC,YAAY8L,GACnBA,EAAIrvC,OAASyvC,EACbJ,EAAI7L,SACJ/jC,KAAK4oC,eAMrB,OADA5oC,KAAK2oC,cACE3oC,KAAKitC,OAMb,MAAMgD,UAAkB,IAC3B,YAAYhvC,GACRpB,QACAG,KAAKiB,MAAQA,EAEjB,IAAIb,GACA,MAAMG,EAASH,EAAKG,OACd2vC,IAAe,YAAiB3vC,IAAWA,aAAkB,KAAcA,aAAkB,KAC7F4vC,EAAiB,GACjBC,EAAgB,GACtB,IAAK,MAAM/vC,KAASE,EAAOD,SACnBD,aAAiB,MACb6vC,IAAe,YAAkB3vC,EAAO4sC,iBAAkB9sC,EAAM+sC,mBAChE+C,EAAepoC,KAAK1H,GAGpB+vC,EAAcroC,KAAK1H,IAI/B,GAAI8vC,EAAepvC,OAAS,EAAG,CAC3B,MAAMsvC,EAAcF,EAAe/B,MACnC,IAAK,MAAMprC,KAAOmtC,EACdE,EAAYrtB,MAAMhgB,EAAKhD,KAAKiB,MAAM4iC,aAAa3oB,KAAKlb,KAAKiB,QAE7DjB,KAAK4oC,aACDroC,aAAkB,IAClBA,EAAOyiB,MAAMqtB,EAAarwC,KAAKiB,MAAM4iC,aAAa3oB,KAAKlb,KAAKiB,QAG5DovC,EAAYhD,iBAGpB,GAAI+C,EAAcrvC,OAAS,EAAG,CAC1B,MAAMuvC,EAAeF,EAAchC,MACnC,IAAK,MAAMprC,KAAOotC,EACdE,EAAattB,MAAMhgB,EAAKhD,KAAKiB,MAAM4iC,aAAa3oB,KAAKlb,KAAKiB,QAE9DjB,KAAK4oC,aAGT,OADA5oC,KAAK2oC,cACE3oC,KAAKitC,OAUb,MAAMsD,UAAqB,IAC9B,IAAInwC,GACA,MAAMG,EAASH,EAAKG,OACdD,EAAW,IAAIC,EAAOD,UAE5B,IADuB,YAAKA,EAAUD,GAASA,aAAiB,MACzCE,EAAO2sC,eAAiB,EAE3C,OADAltC,KAAK2oC,cACE3oC,KAAKitC,MAEhB,MAAMuD,EAAgB,GAGtB,IAAIC,EACJ,IAAK,MAAMpwC,KAASC,EAChB,GAAID,aAAiB,IAAY,CAC7B,IAAIqwC,EAAarwC,EACjB,KAAoC,IAA7BqwC,EAAWxD,eAAqB,CACnC,MAAMyD,EAAWD,EAAWpwC,SAAS,GACrC,KAAIqwC,aAAoB,KAIpB,MAHAD,EAAaC,EAMrBH,EAAczoC,QAAQ2oC,EAAWpwC,UAC7BmwC,GAKAlwC,EAAOujC,YAAYzjC,GACnBA,EAAME,OAASkwC,EAAWlwC,OAC1BkwC,EAAWlwC,OAAOujC,YAAY2M,GAC9BA,EAAWlwC,OAASmwC,EACpB1wC,KAAK4oC,cAGL6H,EAAaC,OAIjBF,EAAczoC,KAAK1H,GAG3B,GAAImwC,EAAczvC,OAAQ,CACtBf,KAAK4oC,aACL,IAAK,MAAMvoC,KAASmwC,EAChBnwC,EAAME,OAAOujC,YAAYzjC,GACzBA,EAAME,OAASkwC,EAIvB,OADAzwC,KAAK2oC,cACE3oC,KAAKitC,S,iCCxapB,8FAOA,MAAM2D,EAAc,KACb,SAASC,EAAW/zB,GACvB,SAAUA,IACHA,EAAEogB,MACCpgB,EAAEqgB,SACFrgB,EAAEsgB,OACFtgB,EAAEwgB,MACFxgB,EAAEugB,KACFvgB,EAAEygB,OACFzgB,EAAE0gB,SACF1gB,EAAE2gB,SACF3gB,EAAE4gB,eAET,MAAMoT,EAAS,CAClB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAESC,EAAeD,EAAO5mC,IAAIktB,GAAKA,EAAEnjB,OAAO,EAAG,IAC3C+8B,EAAO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC1EC,EAAaD,EAAK9mC,IAAIpJ,GAAKA,EAAEmT,OAAO,EAAG,IA6D7C,SAASi9B,EAAapwC,EAAGiS,GAAY,EAAOo+B,GAAS,GACxD,MAAMC,EAAQ,GAkBd,GAjBIr+B,QAAuB5Q,IAAVrB,EAAEu8B,KACX,YAAKv8B,GAAGC,OAAS,IACjB,IAAS,IAAY4Y,WAAW7Y,WAChCA,EAAI,YAAUA,IACLu8B,UAGFl7B,IAAXrB,EAAEo8B,KACFkU,EAAMrpC,KAAKjH,EAAEo8B,WAEE/6B,IAAVrB,EAAEu8B,IAEP+T,EAAMrpC,KAAK6oC,GAGXQ,EAAMrpC,KAAK,QAEC5F,IAAZrB,EAAEs8B,MAAqB,CACvB,MAAMA,EAAQrqB,EAnEtB,SAAwBqkB,GACpB,GAAI,YAASA,GAET,OAAQA,EAAI,GAAGxe,WAEd,CACD,MAAMy4B,EAASja,EAAEka,cACXC,EAAaT,EAAOjQ,QAAQwQ,GAClC,IAAoB,IAAhBE,EACA,OAAOA,EAAa,GAExB,MAAMC,EAASH,EAAOp9B,OAAO,EAAG,GAC1Bw9B,EAAkBV,EAAalQ,QAAQ2Q,GAC7C,IAAyB,IAArBC,EACA,OAAOA,EAAkB,GAG7B,MAAM,IAAI9/B,MAAM,IAAY2H,gBAAgB,QAAS8d,KAkD3Bsa,CAAe5wC,EAAEs8B,OAASt8B,EAAEs8B,MACtDgU,EAAMrpC,KAAKq1B,QAEV,QAAkBj7B,IAAdrB,EAAEq8B,QAAuB,CAC9B,MAAMA,EAAUpqB,EApFxB,SAA0B4+B,GACtB,GAAI,YAASA,GAKT,OAJIA,EAAI,GACJ,IAAS,IAAYr4B,gBAAgB,UAAWq4B,KAG5CA,EAAI,GAAG/4B,WAIf,MAAM,IAAIjH,MAAM,IAAY2H,gBAAgB,UAAWq4B,IA0E3BC,CAAiB9wC,EAAEq8B,SAAWr8B,EAAEq8B,QAC5DiU,EAAMrpC,KAAKo1B,EAAU,WAGrBiU,EAAMrpC,KAAK,GAEf,QAAe5F,IAAXrB,EAAEw8B,KACF8T,EAAMrpC,KAAKjH,EAAEw8B,WAEZ,QAAcn7B,IAAVrB,EAAEu8B,IAAmB,CAG1B,MAAMA,EAAMtqB,EA/DpB,SAAsBjS,GAClB,GAAI,YAASA,GAGT,OAAQA,EAAI,EAAK,GAEhB,CACD,MAAM+wC,EAAS/wC,EAAEwwC,cACXQ,EAAWd,EAAKnQ,QAAQgR,GAC9B,IAAkB,IAAdC,EACA,OAAOA,EAAW,GAEtB,MAAMC,EAASF,EAAO59B,OAAO,EAAG,GAC1B+9B,EAAgBf,EAAWpQ,QAAQkR,GACzC,IAAuB,IAAnBC,EACA,OAAOA,EAAgB,GAG3B,MAAM,IAAIrgC,MAAM,IAAY2H,gBAAgB,MAAOxY,KA6C3BmxC,CAAanxC,EAAEu8B,KAAOv8B,EAAEu8B,IAChD+T,EAAMrpC,KAAKs1B,EAAM,WAGjB+T,EAAMrpC,KAAK,GAIf,IAAK,MAAMlE,IAAY,CAAC,QAAS,UAAW,UAAW,qBAC/B1B,IAAhBrB,EAAE+C,GACFutC,EAAMrpC,KAAKjH,EAAE+C,IAGbutC,EAAMrpC,KAAK,GAGnB,MAAMmqC,EAAcd,EAAM/oC,KAAK,MAC/B,OAAI8oC,EACIrwC,EAAEmgC,IACK,IAAIkR,sCAAsCD,MAA1C,GAGA,IAAIC,6BAA6BD,KAAjC,GAGXpxC,EAAEmgC,WACYiR,iBAGKA,O,iCClKpB,SAASE,EAAgB3kC,GAC5B,OAAO4kC,EAAc5kC,IAAS6kC,EAAc7kC,IAAS8kC,EAAa9kC,GAE/D,SAAS8kC,EAAa9kC,GACzB,YAA0BtL,IAAnBsL,EAAa,OAEjB,SAAS4kC,EAAc5kC,GAC1B,YAA2BtL,IAApBsL,EAAc,QAElB,SAAS6kC,EAAc7kC,GAC1B,YAA2BtL,IAApBsL,EAAc,QAVzB,yI,iCCAA,8XAmCO,SAAS+kC,EAAW5yC,EAAMwiB,GAC7B,IAAK,MAAMwhB,KAASxhB,EAAS,CACzB,MAAMqwB,EAAY7O,EAAMhkC,KAExB,KAAIA,EAAKH,OAAQmkC,EAAM8O,WAAa9yC,EAAKH,OAASmkC,EAAM+O,aAIpD/yC,EAAa,QAAKA,EAAa,OAAEgzC,MAAQH,EAAUvqC,QAAUuqC,EAAUvqC,OAAO2qC,SAGlF,GAAI,YAAajzC,IAAS,YAAa6yC,IACnC,GAAI,YAAU7yC,EAAK4L,OAAQinC,EAAUjnC,QACjC,OAAOo4B,OAGV,GAAI,YAAUhkC,IAAS,YAAU6yC,IAClC,GAAI7yC,EAAKiyB,MAAQ4gB,EAAU5gB,IACvB,OAAO+R,OAGV,GAAI,YAAYhkC,IACbA,EAAKH,OAASmkC,EAAM+O,SACpB,OAAO/O,EAInB,OAAO,KAyLJ,SAASja,EAAU1oB,GACtB,IAAI6xC,EAxLR,SAAmB7xC,EAAOmhB,GACtB,QAAmBjgB,IAAflB,EAAMrB,MAAuBqB,EAAMV,OA2BnC,OAAOU,EAAMV,OAAOa,UAAUxB,KAAKmzC,UAC7B9xC,EAAMV,OAAOa,UAAUxB,KAAKmzC,UAC5B9xC,EAAMV,OAAOa,UAAUxB,KAAKo4B,KA7BS,CAE3C,GAAmB,OAAf/2B,EAAMrB,KAAe,CAErB,MAAMyiB,EAAS,IAAI,IAAW,IAE9B,OADAD,EAAQra,KAAKsa,GACNA,EAEX,MAAM2wB,EAAiBR,EAAWvxC,EAAMrB,KAAMwiB,GAC9C,GAAI4wB,EAQA,OAPK,YAAY/xC,EAAMrB,QACnBozC,EAAepzC,KAAKsI,OAAS,YAAU,GAAIjH,EAAMrB,KAAKsI,OAAQ8qC,EAAepzC,KAAKsI,UAGjF8qC,EAAeN,WAAazxC,EAAMrB,KAAKH,OACxCuzC,EAAeL,SAAW1xC,EAAMrB,KAAKH,MAElCuzC,EAEN,CACD,MAAM3wB,EAAS,IAAI,IAAWphB,EAAMrB,MAEpC,OADAwiB,EAAQra,KAAKsa,GACNA,IAiKJ4wB,CAAUhyC,EAAOA,EAAMG,UAAUxB,KAAKwiB,SACjD,MAAM,YAAEysB,EAAW,oBAAEqE,GAAwBjyC,EAAMG,UAAUxB,KACvD+mC,EAAgB1lC,EAAMV,OAASU,EAAMV,OAAOa,UAAUxB,KAAK+mC,cAActe,QAAU,IAAI,IACvFzoB,EAAOqB,EAAMrB,KACf,YAAYA,IAER,YAAoBA,GACpBkzC,EAAO,IAAI,IAAaA,EAAMlzC,EAAKuzC,UAE9B,YAAqBvzC,KAC1BkzC,EAAO,IAAI,IAAcA,EAAMlzC,EAAK8qB,YAGxCic,EAAcve,cAAe,GAExBxoB,GAAQA,EAAKsI,QAAgC,OAAtBtI,EAAKsI,OAAOyF,QAExCg5B,EAAcve,cAAe,GAEjC0qB,EAAO,IAAUM,aAAaN,EAAM7xC,EAAO0lC,IAAkBmM,GAOzD,YAAoB7xC,KAElB,YAAYA,KAAU,YAAaA,IAAaA,EAAMV,QAAW,YAAaU,EAAMV,UACtFuyC,EAAO,IAAI,IAAeA,IAI9B,MAAMO,EAAgBpyC,EAAMV,QAAU,YAAaU,EAAMV,SACrD,YAAYU,IAAU,YAAaA,KAC/BoyC,IACAP,EAAO,IAAQQ,iBAAiBR,EAAM7xC,IAAU6xC,GAGpD7xC,EAAMsyC,WAAWxyC,OAAS,IAC1B+xC,EA5LD,SAA6BA,EAAM7xC,EAAO0lC,GAC7C,IAAI6M,EAAgB,EACpB,IAAK,MAAMllB,KAAKrtB,EAAMsyC,WAAY,CAC9B,IACIE,EADAC,OAAcvxC,EAElB,GAAI,YAAYmsB,GACZmlB,EAAgBX,EAAO,IAAI,IAAcA,EAAMxkB,GAC/ColB,EAAc,eAEb,GAAI,YAASplB,GACdmlB,EAAgBX,EAAO,IAAUa,gCAAgCb,EAAMxkB,EAAGqY,IAAkBmM,EAC5FA,EAAO,IAAI,IAAWA,EAAM7xC,EAAOqtB,EAAE5f,aAEpC,GAAI,YAAM4f,GACXmlB,EAAgBX,EAAO,IAAQc,kBAAkBd,EAAMxkB,EAAGrtB,GAC1DyyC,EAAc,cAEb,GAAI,YAAWplB,GAAI,CACpBolB,EAAc,YAGSvxC,IAFNwkC,EAAcjhC,gBAAgB4oB,EAAEprB,OAEpCZ,QACTwwC,EAAO,IAAI,IAAUA,EAAM,CAAE,CAACxkB,EAAEprB,OAAQwwC,IACxC/M,EAAcxhC,IAAImpB,EAAEprB,MAAOwwC,GAAa,IAE5CD,EAAgBX,EAAO,IAAac,kBAAkBd,EAAMxkB,QAE3D,GAAI,YAAYA,GACjBmlB,EAAgBX,EAAO,IAAcc,kBAAkBd,EAAMxkB,GAC7DolB,EAAc,SACV,YAAoBzyC,KACpB6xC,EAAO,IAAI,IAAeA,SAG7B,GAAI,YAASxkB,GACdmlB,EAAgBX,EAAO,IAAWe,KAAKf,EAAM7xC,EAAOqtB,EAAGklB,KACvDE,EAAc,eAEb,GAAI,YAASplB,GACdmlB,EAAgBX,EAAO,IAAI,IAAoBA,EAAMxkB,GACrDolB,EAAc,cAEb,GAAI,YAAgBplB,GACrBmlB,EAAgBX,EAAO,IAAI,IAA2BA,EAAMxkB,GAC5DolB,EAAc,cAEb,GAAI,YAAQplB,GACbmlB,EAAgBX,EAAO,IAAUc,kBAAkBd,EAAMxkB,GACzDolB,EAAc,eAEb,GAAI,YAAOplB,GACZmlB,EAAgBX,EAAO,IAAI,IAAkBA,EAAMxkB,GACnDolB,EAAc,eAEb,GAAI,YAAUplB,GACfmlB,EAAgBX,EAAO,IAAI,IAAqBA,EAAMxkB,GACtDolB,EAAc,eAEb,GAAI,YAAQplB,GACbmlB,EAAgBX,EAAO,IAAI,IAAmBA,EAAMxkB,GACpDolB,EAAc,eAEb,GAAI,YAASplB,GACdwkB,EAAO,IAAI,IAAoBA,EAAMxkB,QAEpC,GAAI,YAASA,GACdmlB,EAAgBX,EAAO,IAAWc,kBAAkBd,EAAMxkB,GAC1DolB,EAAc,eAEb,GAAI,YAAUplB,GACfmlB,EAAgBX,EAAO,IAAI,IAAqBA,EAAMxkB,GACtDolB,EAAc,eAEb,GAAI,YAAaplB,GAClBmlB,EAAgBX,EAAO,IAAI,IAAwBA,EAAMxkB,GACzDolB,EAAc,cAEb,KAAI,YAAQplB,GAIZ,CACD,IAAS,IAAY/X,wBAAwB+X,IAC7C,SALAmlB,EAAgBX,EAAO,IAAI,IAAmBA,EAAMxkB,GACpDolB,EAAc,UAMlB,GAAID,QAAiCtxC,IAAhBuxC,EACjB,IAAK,MAAMxwC,KAASuwC,EAActG,kBAAoB,GAClDxG,EAAcxhC,IAAIjC,EAAOwwC,GAAa,GAIlD,OAAOZ,EAiGIgB,CAAoBhB,EAAM7xC,EAAO0lC,IAE5CmM,EAAO,IAAUiB,yBAAyBjB,EAAM7xC,EAAO0lC,IAAkBmM,EACrE,YAAY7xC,KACZ6xC,EAAO,IAAYkB,SAASlB,EAAM7xC,GAClC6xC,EAAO,IAAakB,SAASlB,EAAM7xC,KAEnC,YAAYA,IAAU,YAAaA,MAC9BoyC,IACDP,EAAO,IAAQQ,iBAAiBR,EAAM7xC,IAAU6xC,GAEpDA,EAAO,IAAaQ,iBAAiBR,EAAM7xC,IAAU6xC,EACrDA,EAAO,IAAcmB,qBAAqBnB,EAAM7xC,IAGpD,MAAMizC,EAAUjzC,EAAMie,QAAQ,KACxBi1B,EAAM,IAAI,IAAWrB,EAAMoB,EAAS,IAAKhB,GAG/C,GAFArE,EAAYqF,GAAWC,EACvBrB,EAAOqB,EACH,YAAYlzC,GAAQ,CACpB,MAAM2uC,EAAM,IAAc0D,iBAAiBR,EAAM7xC,GAC7C2uC,IACAkD,EAAOlD,EACH,YAAoB3uC,KACpB6xC,EAAO,IAAI,IAAeA,KAGlCA,EAAO,IAAWQ,iBAAiBR,EAAM7xC,IAAU6xC,EACnDA,EAAO,IAAUQ,iBAAiBR,EAAM7xC,IAAU6xC,EAElD,YAAY7xC,KACZ6xC,EAAO,IAAkBe,KAAKf,EAAM7xC,IAAU6xC,GAGlD,MAAMsB,EAAWnzC,EAAMie,QAAQ,KACzB8Y,EAAO,IAAI,IAAW8a,EAAMsB,EAAU,IAAMlB,GAClDrE,EAAYuF,GAAYpc,EACxB8a,EAAO9a,EAEP,IAAI+a,EAAY,KAChB,GAAI,YAAa9xC,GAAQ,CACrB,MAAMozC,EAAYpzC,EAAMie,QAAQ,SAEhC4zB,EAAO,IAAcmB,qBAAqBnB,EAAM7xC,GAGhD6xC,EAAO,YAA2BA,EAAM7xC,EAAMsa,QAAUu3B,EACxDC,EAAY,IAAI,IAAUD,EAAM7xC,EAAOozC,EAAWrc,EAAK2W,aACvDE,EAAYwF,GAAatB,EACzBD,EAAOC,EAEX,OAAOjzC,OAAOC,OAAOD,OAAOC,OAAO,GAAIkB,EAAMG,UAAUxB,MAAO,CAAEivC,cAC5DqE,sBACAiB,MACAnc,OACA+a,YACApM,oB,iCCxVR,gOAMO,SAAS2N,EAAqBrzC,GACjCszC,EAAwBtzC,GACxB,MAAMuzC,EAAiBvzC,EAAMG,UAAUgO,WACvColC,EAAe5zC,gBAAgB,QAAS6zC,EAAiCxzC,EAAO,UAChFuzC,EAAe5zC,gBAAgB,SAAU6zC,EAAiCxzC,EAAO,WAE9E,MAAMyzC,EAAwBJ,EAC/BK,EAAqB,CACvBx1B,QAAS,QACTC,QAAS,UAEN,SAASw1B,EAAsB3zC,GAClCszC,EAAwBtzC,GACxB,MAAMuzC,EAAiBvzC,EAAMG,UAAUgO,WACjCylC,EAAkBF,EAAmB1zC,EAAM8d,YAC7C81B,GACAL,EAAe5zC,gBAAgBi0C,EAAiBJ,EAAiCxzC,EAAO4zC,IAGzF,SAASN,EAAwBtzC,GACpC,IAAK,MAAMZ,KAASY,EAAMX,SACtBD,EAAMy0C,kBAGd,SAASL,EAAiCxzC,EAAOqO,GAC7C,MAAM/N,EAAuB,UAAb+N,EAAuB,IAAM,IACvCwP,EAAU7d,EAAMG,UAAU0d,QAChC,IAAIi2B,EAEJ,IAAK,MAAM10C,KAASY,EAAMX,SAAU,CAChC,MAAM00C,EAAY30C,EAAMe,UAAUgO,WAAW1J,gBAAgB4J,GACvD2lC,EAAen2B,EAAQjc,MAAMtB,GACnC,GAAqB,gBAAjB0zC,GAAsD,SAApBD,EAAU1yC,MAAkB,CAG9DyyC,OAAa5yC,EACb,MAEJ,GAAI4yC,EAAY,CACZ,GAAqB,gBAAjBE,GAAkCF,EAAWzyC,QAAU0yC,EAAU1yC,MAAO,CAGxEyyC,OAAa5yC,EACb,MAEJ4yC,EAAa,YAAwBA,EAAYC,EAAW1lC,EAAU,SAGtEylC,EAAaC,EAGrB,GAAID,EAAY,CAEZ,IAAK,MAAM10C,KAASY,EAAMX,SACtBW,EAAM4iC,aAAaxjC,EAAM6e,QAAQ5P,GAAWrO,EAAMie,QAAQ5P,IAC1DjP,EAAMe,UAAUgO,WAAWjK,IAAImK,EAAU,UAAU,GAEvD,OAAOylC,EAIP,MAAO,CACH5xB,UAAU,EACV7gB,WAAOH,GAIZ,SAAS+yC,EAAoBj0C,GAChC,MAAM,KAAEtB,EAAI,UAAEyB,GAAcH,EAC5B,IAAK,MAAMM,KAAW,IAAyB,CAC3C,MAAM+N,EAAW,YAAY/N,GAC7B,GAAI5B,EAAK2P,GAAW,CAChB,MAAM6lC,EAAgBx1C,EAAK2P,GAC3BlO,EAAUgO,WAAWjK,IAAImK,EAAU,YAAO6lC,GAAiB,OAASA,GAAe,OAElF,CACD,MAAMznB,EAAc0nB,EAAgBn0C,EAAOqO,GAC3ClO,EAAUgO,WAAWjK,IAAImK,EAAUoe,GAAa,KAI5D,SAAS0nB,EAAgBn0C,EAAOqO,GAC5B,MAAM/N,EAAuB,UAAb+N,EAAuB,IAAM,IACvCxN,EAASb,EAAMa,OACf8hB,EAAiB3iB,EAAMW,kBAAkBL,GAC/C,GAAIqiB,EAAgB,CAChB,MAAMrhB,EAAYqhB,EAAe/iB,IAAI,QAC/BojB,EAAQL,EAAe/iB,IAAI,SACjC,GAAI,YAAkB0B,GAAY,CAC9B,MAAM5C,EAAO,YAA0BmC,EAAO8jB,KAAMtW,GACpD,OAAI,YAAc2U,IAAU,YAAOtkB,GAExB,OAGAA,EAIX,OAAO,YAA4BmC,EAAO8jB,KAAMtW,GAGnD,GAAIrO,EAAMuhB,cACX,OAAO,YAA4B1gB,EAAO8jB,KAAMtW,GAE/C,CACD,MAAM3P,EAAO,YAA0BmC,EAAO8jB,KAAMtW,GACpD,OAAO,YAAO3P,GAAQA,EAAKyD,KAAOzD,K,iCCjH1C,sFAMO,MAAM01C,UAAqB,IAC9B,YAAY90C,EAAQmjC,GAChB7jC,MAAMU,GACNP,KAAK0jC,QAAUA,EAEnB,QACI,OAAO,IAAI2R,EAAa,KAAM,YAAUr1C,KAAK0jC,UAEjD,wBAAwBnjC,EAAQU,GAC5B,MAAMyiC,EAAUziC,EAAMoiC,eAAe,CAACiS,EAAmBzzC,EAAUN,KAC/D,MAAM,SAAEsC,EAAQ,MAAEX,GAAUrB,EACtB0zC,EAAc,YAAYt0C,GAASA,EAAMuF,SAAS,YAAyBjF,SAAYY,EACvFmO,EAAO,YAAYrP,IAAU,YAAQM,EAASM,EAAU0zC,EAAat0C,EAAM0B,QAAS1B,EAAMa,QAChG,GAAI+B,EAAU,CACV,MAAMiE,EAAK,YAAQjG,EAAU,CAAEyF,OAAO,IACtCguC,EAAkB,YAAK,CAAExtC,KAAIjE,WAAUX,WAAYpD,OAAOC,OAAO,CAAE+H,KAC/DjE,WACAX,SAAUoN,EAAO,CAAEA,MAAM,GAAS,IAE1C,OAAOglC,GACR,IACH,OAA6B,IAAzB,YAAK5R,GAAS3iC,OACP,KAEJ,IAAIs0C,EAAa90C,EAAQmjC,GAEpC,yBAAyBnjC,EAAQ+tB,GAC7B,MAAMltB,EAAYtB,OAAOC,OAAO,GAAIuuB,GACpC,OAAO,IAAI+mB,EAAa90C,EAAQ,CAC5B,CAAC,YAAKa,IAAaA,IAO3B,MAAMwiC,GACF5jC,KAAK0jC,QAAU5jC,OAAOC,OAAO,GAAIC,KAAK0jC,SAEtC,IAAK,MAAM3mB,KAAO6mB,EAAMF,QACf1jC,KAAK0jC,QAAQ3mB,KAAQ6mB,EAAMF,QAAQ3mB,GAAKzM,OAEzCtQ,KAAK0jC,QAAQ3mB,GAAO6mB,EAAMF,QAAQ3mB,IAG1C,IAAK,MAAM1c,KAASujC,EAAMtjC,SACtBsjC,EAAME,YAAYzjC,GAClBA,EAAME,OAASP,KAEnB4jC,EAAMG,SAEV,iBACI,OAAO,IAAIpB,IAAI,YAAK3iC,KAAK0jC,SAASx5B,IAAIN,GAAKA,EAAE9B,KAEjD,kBACI,OAAO,IAAI66B,IAAI,YAAK3iC,KAAK0jC,SAASx5B,IAAIN,GAAKA,EAAE1G,QAEjD,OACI,kBAAmB,YAAKlD,KAAK0jC,WAEjC,WACI,MAAM6P,EAAa,GACnB,IAAK,MAAM3pC,KAAK,YAAK5J,KAAK0jC,SAAU,CAChC,MAAM,SAAE7/B,EAAQ,MAAEX,EAAK,GAAE4E,EAAE,KAAEwI,GAAS1G,EACtC2pC,EAAWxrC,KAAK,CACZjF,KAAM,UACNgF,KACA2J,KAAM,YAAU5N,EAAUX,KAE1BoN,GACAijC,EAAWxrC,KAAK,CACZjF,KAAM,UACNgF,GAAIA,EAAK,OACT2J,KAAM,YAAU5N,EAAUX,EAAO,CAAE69B,KAAK,MAIpD,OAAOwS,K,iCCnFf,oEAAO,MAAMiC,EAAkB,CAAC,MAAO,UAC1BC,EAAe,CAAC,SAAU,W,iCCDvC,uNACO,MAAMC,EAA8B,CACvCC,WAAY,CACRjV,KAAM,SACNkV,OAAQ,SAEZC,cAAe,CACXnV,KAAM,SACNkV,OAAQ,SAEZE,WAAY,CACRpV,KAAM,SACNkV,OAAQ,QAEZG,UAAW,CACPrV,KAAM,SACNkV,OAAQ,QAEZI,cAAe,CACXtV,KAAM,SACNkV,OAAQ,YAEZK,eAAgB,CACZvV,KAAM,SACNkV,OAAQ,aAEZM,gBAAiB,CACbxV,KAAM,SACNkV,OAAQ,cAEZO,aAAc,CACVzV,KAAM,SACNkV,OAAQ,WAEZQ,UAAW,CACP1V,KAAM,OACNkV,OAAQ,UAEZS,SAAU,CACN3V,KAAM,OACNkV,OAAQ,cAEZU,eAAgB,CACZ5V,KAAM,OACNkV,OAAQ,cAEZW,YAAa,CACT7V,KAAM,OACNkV,OAAQ,WAEZY,UAAW,CACP9V,KAAM,OACNkV,OAAQ,eAEZa,UAAW,CACP/V,KAAM,QACNkV,OAAQ,UAEZc,SAAU,CACNhW,KAAM,QACNkV,OAAQ,cAEZe,eAAgB,CACZjW,KAAM,QACNkV,OAAQ,cAEZgB,YAAa,CACTlW,KAAM,QACNkV,OAAQ,WAEZiB,UAAW,CACPnW,KAAM,QACNkV,OAAQ,gBAGT,SAASkB,EAAuBriC,GACnC,OAAOA,EAAa,UAEjB,MAAMsiC,EAAa,CAAC,SAAU,OAAQ,SAAU,QAAS,SAKnDC,EAAqB,CAC9BC,KAAM,OACNb,UAAW,OACXC,SAAU,OACVE,YAAa,OACbhP,UAAW,OACXiP,UAAW,OACX5yC,OAAQ,OACRszC,aAAc,OACdhyC,OAAQ,OACRiyC,YAAa,OACbC,cAAe,OACfC,YAAa,OACbnvC,OAAQ,OACRI,WAAY,OACZqtC,WAAY,OACZlO,WAAY,OACZoO,cAAe,OACfyB,WAAY,OACZxB,WAAY,OACZyB,WAAY,OACZC,iBAAkB,OAClBzB,UAAW,OACXC,cAAe,OACfE,gBAAiB,OACjBuB,WAAY,OACZtB,aAAc,OACduB,aAAc,OACdlhB,aAAc,OACdzN,OAAQ,OACR4uB,UAAW,OACXC,UAAW,OACX55B,OAAQ,OACR65B,SAAU,OACVpB,UAAW,OACXqB,UAAW,OACXC,WAAY,OACZnB,YAAa,OACboB,UAAW,OACXpiB,MAAO,OACPqiB,SAAU,OACV7wC,MAAO,OACP8wC,WAAY,OACZC,WAAY,OACZC,cAAe,OACfC,WAAY,OACZC,UAAW,OACXC,cAAe,OACfC,gBAAiB,OACjBC,WAAY,OACZC,aAAc,OACdniB,aAAc,OACdoiB,OAAQ,OACRC,OAAQ,OACR/B,UAAW,OACXgC,UAAW,OACXrtC,OAAQ,OACR3I,MAAO,OACPi2C,OAAQ,QAECC,EAA+B,CACxCn1C,OAAQ,EACRszC,aAAc,EACdhyC,OAAQ,EACRiyC,YAAa,EACb6B,WAAY,EACZC,iBAAkB,EAClB7B,cAAe,EACfC,YAAa,EACbnvC,OAAQ,EACRI,WAAY,EACZ2uC,KAAM,EACNb,UAAW,EACXC,SAAU,EACVC,eAAgB,EAChBC,YAAa,EACbC,UAAW,EACXb,WAAY,EACZlO,WAAY,EACZoO,cAAe,EACfyB,WAAY,EACZxB,WAAY,EACZyB,WAAY,EACZC,iBAAkB,EAClBzB,UAAW,EACXC,cAAe,EACfC,eAAgB,EAChBC,gBAAiB,EACjBuB,WAAY,EACZtB,aAAc,EACduB,aAAc,EACdlhB,aAAc,EACdzN,OAAQ,EACRmwB,gBAAiB,EACjBvB,UAAW,EACXC,UAAW,EACX55B,OAAQ,EACR65B,SAAU,EACVpB,UAAW,EACXoC,UAAW,EACXnC,SAAU,EACVC,eAAgB,EAChBmB,UAAW,EACXqB,YAAa,EACbpB,WAAY,EACZnB,YAAa,EACboB,UAAW,EACXpiB,MAAO,EACPqiB,SAAU,EACVpB,UAAW,EACXzvC,MAAO,EACP8wC,WAAY,EACZkB,YAAa,EACbjB,WAAY,EACZC,cAAe,EACfC,WAAY,EACZC,UAAW,EACXC,cAAe,EACfc,eAAgB,EAChBb,gBAAiB,EACjBC,WAAY,EACZC,aAAc,EACdniB,aAAc,EACdoiB,OAAQ,EACRC,OAAQ,EACRptC,OAAQ,EACRstC,OAAQ,GAENQ,EAAwBx5C,OAAOC,OAAOD,OAAOC,OAAO,GAAIg5C,GAA+B,CAAEQ,UAAW,EAAG/yC,SAAU,IAChH,SAASgzC,EAAezhC,GAC3B,QAASuhC,EAAsBvhC,GAGJ,YAAKuhC,I,iCCxNpC,0RAKO,SAAS9tC,EAAOmH,EAAQ9Q,GAC3B,MAAMqmC,EAAOv1B,EAAOnH,OACpB,GAAI08B,EACA,OAAO,YAAWrmC,EAAUqmC,GAI7B,SAASuR,EAAkBr1C,EAAM7C,EAASm4C,EAAiBC,GAC9D,GAAgB,UAAZp4C,EAAqB,CAErB,MAAMmL,EAAQ,iCAAuBgtC,IAAoBC,EACzD,GAAIjtC,EACA,OAAOA,EAGf,OAAQtI,GACJ,IAAK,MACL,IAAK,OACL,IAAK,QACL,IAAK,SACD,MAAO,SACX,IAAK,OACL,IAAK,QACL,IAAK,OACD,MAAO,SACX,IAAK,QACL,IAAK,SACL,IAAK,OACL,IAAK,WACL,IAAK,OACL,IAAK,OACD,MAAO,UASZ,SAAStB,EAAK2X,GACjB,MAAM,OAAE9H,GAAW8H,EACnB,OAAO,YAAgB9H,EAAO7P,KAAM2Q,EAAYgH,IAE7C,SAAShH,GAAY,QAAElS,EAAO,SAAEsC,EAAQ,UAAEtB,EAAS,aAAEq3C,IAExD,GAAI,YAAer4C,GAAU,CACzB,GAAI,YAAS,CAAC,UAAW,QAAS,OAAQsC,GACtC,MAAO,SAEX,GAAI,YAAyBtB,GACzB,OAAOq3C,EAAe,gBAAaz3C,EAG3C,OAAOy3C,EAAe,cAAWz3C,EAE9B,SAAS03C,GAAU,OAAElnC,EAAM,aAAEmnC,EAAY,SAAEj2C,EAAQ,QAAEtC,EAAO,UAAEgB,IACjE,MAAMqB,EAAS,YAAgB+O,EAAO/O,OAAQk2C,EAAal2C,OAAQ,SAC7Dm2C,EAAaj3C,EAAK,CAAE6P,SAAQpR,UAASsC,WAAUtB,YAAWq3C,cAAc,IAC9E,OAAO,YAAgBjnC,EAAOknC,UAAWC,EAAaC,EAAa,oBAAsB,mBAE7F,SAA0Bn2C,EAAQm2C,GAC9B,OAAQn2C,GACJ,IAAK,MACL,IAAK,SACD,MAAO,aACX,IAAK,OACL,IAAK,QACL,IAAK,OACL,UAAKzB,EACD,OACJ,QAGI,MAAsB,aAAf43C,EAA4B,kBAAe53C,GAfmD63C,CAAiBp2C,EAAQm2C,IAkBnI,SAASE,GAAsB,OAAEtnC,EAAM,aAAEmnC,EAAY,MAAE74C,EAAK,QAAEM,EAAO,UAAEgB,IAC1E,MAAM,4BAAE23C,EAA2B,4BAAEC,EAA2B,0BAAEC,EAAyB,0BAAEC,GAA8BP,EAE3H,GAAY,eADAD,EAAU,CAAElnC,SAAQmnC,eAAcv4C,UAASgB,cAC7B,CACtB,MAAMqB,EAAS,YAAgB+O,EAAO/O,OAAQk2C,EAAal2C,QAC3D,MAAe,QAAXA,GAA+B,WAAXA,EACb02C,EAAqBr5C,EAAO,QAASk5C,EAA6BD,GAGlEC,EAKX,OAAOG,EAAqBr5C,EAAO,SAAUo5C,EAA2BD,GAGhF,SAASE,EAAqBr5C,EAAOqO,EAAUzE,EAAKH,GAEhD,MAAO,CAAEiE,gBADU1N,EAAMmgB,iBAAiB9R,GAAUX,WACX9D,MAAQH,MAE9C,SAASs9B,EAAoBzlC,GAChC,GAAI,YAAS,CAAC,WAAY,YAAa,OAAQA,GAC3C,MAAO,W,iCCzGf,6DAOO,MAAMg4C,UAAmC,IAC5C,YAAYh6C,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EAErB,QACI,OAAO,IAAI6qC,EAA2B,KAAM,YAAUv6C,KAAK0P,YAE/D,cAAc6pB,GACVv5B,KAAK0P,UAAU5I,QAAU,YAAO9G,KAAK0P,UAAU5I,QAAQkH,OAAOurB,GAASz4B,GAAKA,GAEhF,kBACI,MAAM05C,EAAM,IAAI7X,IAQhB,OAPI3iC,KAAK0P,UAAU5I,SACf9G,KAAK0P,UAAU5I,QAAQxF,QAAQsI,GAAK4wC,EAAItlC,IAAItL,IAEhD5J,KAAK0P,UAAU8Y,cACVte,IAAI2b,GAAKA,EAAE3iB,OACXwL,OAAO9E,QAAWzH,IAANyH,GACZtI,QAAQsI,GAAK4wC,EAAItlC,IAAItL,IACnB4wC,EAEX,iBACI,OAAO,IAAI7X,IAAI3iC,KAAK0P,UAAU8Y,cAActe,IAAIlK,KAAKy6C,iBAEzD,eAAeC,GACX,OAAOA,EAAsB5yC,IAAM,YAAQ4yC,GAE/C,OACI,gCAAiC,YAAK16C,KAAK0P,aAE/C,WACI,MAAM6pB,EAAS,GACTohB,EAAM,GACN7yC,EAAK,GACX,IAAK,MAAM0gB,KAAiBxoB,KAAK0P,UAAU8Y,cACvCmyB,EAAI5yC,KAAKygB,EAAc9gB,IACvBI,EAAGC,KAAK/H,KAAKy6C,eAAejyB,IAC5B+Q,EAAOxxB,UAA6B5F,IAAxBqmB,EAActlB,MAAsB,KAAOslB,EAActlB,OAEzE,MAAM4D,EAAU9G,KAAK0P,UAAU5I,QAC/B,OAAOhH,OAAOC,OAAO,CAAE+C,KAAM,gBAAiBgF,KAC1C6yC,MACAphB,eAAuBp3B,IAAZ2E,EAAwB,CAAEA,WAAY,O,iCClD7D,8FA0CO,MAAM8zC,UAAsB,IAK/B,YAAYr6C,EAAQs6C,EAAYC,GAC5Bj7C,MAAMU,GACNP,KAAK66C,WAAaA,EAClB76C,KAAK86C,SAAWA,EAEpB,QACI,OAAO,IAAIF,EAAc,KAAM,IAAIjY,IAAI3iC,KAAK66C,YAAa,YAAU76C,KAAK86C,WAE5E,cACI,OAAO96C,KAAK66C,WAEhB,wBAAwBt6C,EAAQU,GAC5B,IAAIyF,GAAc,EAClBzF,EAAMshC,gBAAgBpvB,IACdA,EAAGxM,YACHD,GAAc,KAGtB,MAAMq0C,EAAO,GACPC,EAAO,IAAIrY,IACjB,OAAKj8B,GAILzF,EAAMshC,gBAAgB,CAAC1gC,EAAUN,KAC7B,MAAM,UAAEoF,EAAS,MAAEzD,GAAUrB,EAC7B,GAAI8E,EACA,GAAkB,UAAdA,EACAo0C,EAAK,KAAOA,EAAK,MAAQ,GACzBA,EAAK,KAAY,MAAI,IAAIpY,IAAI,CAAC,YAAQ9gC,EAAU,CAAEyF,OAAO,UAExD,CACD,GAAI,YAAYX,IAAc,YAAYA,GAAY,CAClD,MAAMe,EAAK,YAAYf,GAAa,SAAW,SACzCs0C,EAAWt0C,EAAUe,GAC3BqzC,EAAKE,GAAYF,EAAKE,IAAa,GACnCF,EAAKE,GAAUvzC,GAAM,IAAIi7B,IAAI,CAAC,YAAQ,CAAEj7B,KAAIxE,MAAO+3C,GAAY,CAAE3zC,OAAO,WAGxEyzC,EAAK73C,GAAS63C,EAAK73C,IAAU,GAC7B63C,EAAK73C,GAAOyD,GAAa,IAAIg8B,IAAI,CAAC,YAAQ9gC,EAAU,CAAEyF,OAAO,MAG7D,YAAe/F,IAA2C,iBAA/BN,EAAMooC,YAAY9nC,KAC7Cw5C,EAAK73C,GAAS63C,EAAK73C,IAAU,GAC7B63C,EAAK73C,GAAY,IAAI,IAAIy/B,IAAI,CAAC,YAAQ,CAAEz/B,QAAOyD,UAAW,OAAS,CAAEW,OAAO,MAC5EyzC,EAAK73C,GAAY,IAAI,IAAIy/B,IAAI,CAAC,YAAQ,CAAEz/B,QAAOyD,UAAW,OAAS,CAAEW,OAAO,YAtFpG,SAAsB0zC,EAAMz5C,EAASM,EAAUZ,GAC3C,MAAMs0C,EAAc,YAAYt0C,GAASA,EAAMuF,SAAS,YAAyBjF,SAAYY,EAC7F,GAAI,YAAgBN,IAChB,YAAYZ,IACZ,YAAQM,EAASM,EAAU0zC,EAAat0C,EAAM0B,QAAS1B,EAAMa,QAC7Dk5C,EAAK9lC,IAAI,YAAQrT,EAAU,KAC3Bm5C,EAAK9lC,IAAI,YAAQrT,EAAU,CAAEqP,OAAQ,SACjC,YAAiBrP,EAAUN,IAC3By5C,EAAK9lC,IAAI,YAAQrT,EAAU,CAAEmG,UAAW,gBAG3C,GAAI,YAAqBzG,GAAU,CACpC,MAAM25C,EAAa,YAA8B35C,GACjDy5C,EAAK9lC,IAAIjU,EAAMie,QAAQg8B,SAGvBF,EAAK9lC,IAAI,YAAQrT,IA2ETs5C,CAAaH,EAAMz5C,EAASM,EAAUZ,KAG1C+5C,EAAKr7C,KAAO,YAAKo7C,GAAMh6C,SAAW,EAC3B,KAEJ,IAAI65C,EAAcr6C,EAAQy6C,EAAMD,IAnC5B,KAqCf,yBAAyBx6C,EAAQ+tB,GAC7B,MAAM0sB,EAAO,IAAIrY,IACXoY,EAAO,GACb,IAAK,MAAM75B,KAAKoN,EAAE3nB,UAAW,CACzB,MAAM,GAAEe,EAAE,MAAExE,EAAK,GAAE4E,GAAOoZ,EACtBxZ,IACW,UAAPA,GACAqzC,EAAK,KAAOA,EAAK,MAAQ,GACzBA,EAAK,KAAY,MAAI,IAAIpY,IAAI,CAAC76B,GAAU,YAAQoZ,EAAG,CAAE5Z,OAAO,QAG5DyzC,EAAK73C,GAAS63C,EAAK73C,IAAU,GAC7B63C,EAAK73C,GAAOwE,GAAM,IAAIi7B,IAAI,CAAC76B,GAAU,YAAQoZ,EAAG,CAAE5Z,OAAO,QAIrE,IAAK,MAAM4Z,KAAKoN,EAAExnB,SAAW,GACzBk0C,EAAK9lC,IAAIgM,GAEb,OAAI85B,EAAKr7C,KAAO,YAAKo7C,GAAMh6C,SAAW,EAC3B,KAEJ,IAAI65C,EAAcr6C,EAAQy6C,EAAMD,GAE3C,MAAMnX,GACF,OAAI,YAAS5jC,KAAK66C,WAAYjX,EAAMiX,aAxG5C,SAAuBO,EAAgBC,GACnC,IAAK,MAAMn4C,KAAS,YAAKm4C,GAAgB,CAErC,MAAMV,EAAMU,EAAcn4C,GAC1B,IAAK,MAAMwE,KAAM,YAAKizC,GACdz3C,KAASk4C,EAETA,EAAel4C,GAAOwE,GAAM,IAAIi7B,IAAI,IAAKyY,EAAel4C,GAAOwE,IAAO,MAAQizC,EAAIjzC,KAGlF0zC,EAAel4C,GAAS,CAAE,CAACwE,GAAKizC,EAAIjzC,KA+FxC4zC,CAAct7C,KAAK86C,SAAUlX,EAAMkX,WAC5B,IAGP,IAAU,uCACH,GAGf,cAAcvhB,GACVA,EAAOj4B,QAAQtB,KAAK66C,WAAW3lC,IAAKlV,KAAK66C,YAE7C,kBACI,OAAO,IAAIlY,IAAI,IAAI3iC,KAAK66C,cAAe,YAAK76C,KAAK86C,YAErD,iBACI,MAAMN,EAAM,IAAI7X,IAChB,IAAK,MAAMz/B,KAAS,YAAKlD,KAAK86C,UAC1B,IAAK,MAAMpzC,KAAM,YAAK1H,KAAK86C,SAAS53C,IAAS,CACzC,MAAMk0B,EAAIp3B,KAAK86C,SAAS53C,GAAOwE,GAChB,IAAX0vB,EAAEz3B,KACF66C,EAAItlC,OAAOxN,KAAMxE,KAGjBk0B,EAAE91B,QAAQk5C,EAAItlC,IAAKslC,GAI/B,OAAOA,EAEX,OACI,mBAAoB,YAAK,CAAEK,WAAY76C,KAAK66C,WAAYC,SAAU96C,KAAK86C,aAE3E,WACI,MAAMH,EAAM,GACNphB,EAAS,GACTzxB,EAAK,GACX,IAAK,MAAM5E,KAAS,YAAKlD,KAAK86C,UAC1B,IAAK,MAAMpzC,KAAM,YAAK1H,KAAK86C,SAAS53C,IAChC,IAAK,MAAMq4C,KAASv7C,KAAK86C,SAAS53C,GAAOwE,GACrCI,EAAGC,KAAKwzC,GACRZ,EAAI5yC,KAAKL,GACT6xB,EAAOxxB,KAAe,MAAV7E,EAAgB,KAAO,YAAmBA,IAWlE,MAPe,CACXJ,KAAM,YACNgE,QAAS,IAAI9G,KAAK66C,YAClBF,MACAphB,SACAzxB,S,iCCtLZ,gJAgBO,MAAM0zC,UAAkB,IAM3B,YAAYj7C,EAAQU,EAAOxB,EAAMG,GAC7BC,MAAMU,GACNP,KAAKiB,MAAQA,EACbjB,KAAKP,KAAOA,EACZO,KAAKJ,KAAOA,EACZ,IAAK,MAAM2B,KAAW,IAAgB,CAClC,MAAMM,EAAWZ,EAAMsa,MAAMha,GAC7B,GAAIM,EAAU,CACV,MAAM,IAAEmB,EAAG,KAAED,GAASlB,EACtB7B,KAAKuB,GAAWzB,OAAOC,OAAO,CAAEN,KAAMwB,EAAMie,WAAW3d,YAAmBg4B,OAAQ,CAAC,YAAQ13B,MAAe,YAAUmB,GAAO,CAAC,YAAQnB,EAAU,CAAEmG,UAAW,SAAY,KAAS,YAAYjF,GACtL,CAAE04C,UAAW14C,GACb,YAAQA,GACJ,CAAE24C,eAAgB,YAAoB75C,EAAUN,IAChD,KAGlBvB,KAAK27C,WAAa16C,EAAMZ,MAE5B,OACI,IAAIm6C,EAAM,QACV,IAAK,MAAMj5C,KAAW,IACdvB,KAAKuB,KACLi5C,OAAWj5C,EAAQ2S,OAAO,MAAM,YAAKlU,KAAKuB,OAGlD,OAAOi5C,EAEX,aACI,MAAM5wC,EAAI,GACV,IAAK,MAAMrI,KAAW,IACdvB,KAAKuB,IAAYvB,KAAKuB,GAASg4B,QAC/B3vB,EAAE7B,QAAQ/H,KAAKuB,GAASg4B,QAGhC,OAAO3vB,EAEX,kBACI,MAAMgyC,EAAY,IAAIjZ,IAAI3iC,KAAKu5B,QAC/B,IAAK,MAAMh4B,KAAW,IACdvB,KAAKuB,KACDvB,KAAKuB,GAASk6C,WACdG,EAAU1mC,IAAIlV,KAAKuB,GAASk6C,UAAUv4C,OAEtClD,KAAKuB,GAASm6C,gBACdE,EAAU1mC,IAAIlV,KAAKuB,GAASm6C,iBAIxC,OAAOE,EAEX,iBACI,OAAO,IAAIjZ,IAKf,YACI,OAAO3iC,KAAKP,KAEhB,oCACI,MAAMo8C,EAAiC,GACvC,IAAK,MAAMt6C,IAAW,CAAC,IAAK,KAAM,CAC9B,MAAMu6C,EAAsB97C,KAAK27C,WAAWv6C,UAAUC,OAAOE,GAC7D,GAAIu6C,IAAwBA,EAAoB77C,OAAQ,CAEpD,MAAM6C,EAAOg5C,EAAoBj7C,IAAI,QAC/BojB,EAAQ63B,EAAoBj7C,IAAI,SACtC,GAAI,YAAkBiC,IAAS,YAAcmhB,GAAQ,CACjD,MAAM/e,EAAS,YAAelF,KAAK27C,WAAYp6C,GACzC2B,EAAQ,YAAmBgC,GAC7BhC,EACA24C,EAA+Bt6C,GAAW2B,EAG1C,IAAS,gEAKzB,OAAO24C,EAEX,4BAA4Bt6C,EAASw6C,EAAiBF,GAClD,MAAMG,EAAe,CAAEjgC,IAAK,IAAKC,OAAQ,KAAMza,GACzCg4B,EAAS,GACTohB,EAAM,GACN7yC,EAAK,GACP+zC,GAAkCA,EAA+BG,KAC7DD,GAEAxiB,EAAOxxB,iBAAiB8zC,EAA+BG,MACvDrB,EAAI5yC,KAAK,SAITwxB,EAAOxxB,KAAK8zC,EAA+BG,IAC3CrB,EAAI5yC,KAAK,aAGbD,EAAGC,iBAAiB8zC,EAA+BG,OAEvD,MAAM,UAAEP,EAAS,eAAEC,GAAmB17C,KAAKuB,GAC3C,GAAIk6C,EAAW,CACX,MAAM,GAAE/zC,EAAK,IAAe,MAAExE,GAAUu4C,EACxCliB,EAAOxxB,KAAK7E,GACZy3C,EAAI5yC,KAAKL,GACTI,EAAGC,KAAK,YAAQ0zC,EAAW,CAAEn0C,OAAO,UAE/Bo0C,IACLniB,EAAOxxB,KAAK2zC,GACZf,EAAI5yC,KAAK,OACTD,EAAGC,KAAK2zC,IAEZ,MAAO,CACHj8C,KAAMO,KAAKuB,GAAS9B,KAEpB4iB,OAAQ05B,GAAmB/7C,KAAKJ,KAChC8P,UAAW,CACP5P,OAAOC,OAAO,CAAE+C,KAAM,YAAagE,QAAS9G,KAAKuB,GAASg4B,QAAWA,EAAOx4B,OACtE,CACEw4B,SACAohB,MACA7yC,MAEF,MAIlB,wBAAwB+zC,GACpB,MAAM,QAAEvgC,GAAYtb,KAAKiB,MAAMob,QACzB,cAAEwM,GAAkB7oB,KAAKiB,MAAMG,UAC/BxB,EAAO,GACPq8C,EAAgB,GACtB,IAAK,MAAM7yB,KAAiB,IAAiB,CACzC,IAAK,MAAMJ,KAAc,IAAc,CACnC,MAAMkzB,EAAWrzB,EAAcO,IAAkBP,EAAcO,GAAeJ,IAAgB,GAC9F,IAAK,MAAMpW,KAAUspC,EACjB,GAAItpC,EAAOuW,MAAQvW,EAAOuW,KAAKpoB,OAAS,EAAG,CACvCk7C,EAAc7yB,IAAiB,EAC/B,OAIZ,GAAI6yB,EAAc7yB,GAAgB,CAC9B,MAAMjC,kBAA8BnnB,KAAKub,MAAM9b,UACzC08C,EAAyB,QAAlB/yB,EACP9N,EACI,CAAE3M,eAAgBwY,OAAiB7L,MACnC,EACJA,EACI,CAAE3M,cAAewY,MAAgB7L,MACjC,CAAE3M,OAAQwY,GACpBvnB,EAAKmI,KAAK,CACNtI,QAASO,KAAKub,MAAM9b,QAAQ2pB,IAC5B1Z,UAAW,CACP,CACI5M,KAAM,WACNs5C,MAAO,EACPD,YAMpB,MAAM,IAAEpgC,EAAG,OAAEC,GAAWigC,EAIxB,OAHIlgC,GAAOC,IACPpc,EAAKs5B,QAAQl5B,KAAKq8C,4BAA4B,QAAS,KAAMR,IAE1Dj8C,EAEX,WACI,MAAMA,EAAO,GACb,IAAIm8C,EAAkB,KACtB,MAAMF,EAAiC77C,KAAKs8C,qCACtC,OAAEtgC,EAAM,IAAED,EAAG,MAAER,GAAUvb,KAC/B,GAAIgc,GAAUD,IAAQ8/B,EAA+BtvC,GAAKsvC,EAA+BrvC,GAAI,CAEzFuvC,WAA2B/7C,KAAKgc,OAAOvc,QAAQO,KAAK+b,IAAItc,OACxD,MAAM85B,EAAS,GAAGvrB,OAAO6tC,EAA+BtvC,GAAK,GAAIsvC,EAA+BrvC,GAAK,IAC/FmuC,EAAMphB,EAAOrvB,IAAI,IAAM,YAC7BtK,EAAKmI,KAAK,CACNtI,KAAMs8C,EACN15B,OAAQriB,KAAKJ,KACb8P,UAAW,CACP,CACI5M,KAAM,YACNgE,QAAS9G,KAAKu5B,OACdA,SACAohB,UAKhB,IAAK,MAAMp5C,IAAW,CAAC,IAAQ,KACvBvB,KAAKuB,IACL3B,EAAKmI,KAAK/H,KAAKq8C,4BAA4B96C,EAASw6C,EAAiBF,IAG7E,GAAItgC,EAAO,CACP,MAAMghC,EAAYv8C,KAAKw8C,wBAAwBX,GAC3CU,GACA38C,EAAKmI,QAAQw0C,GAGrB,OAAO38C,K,iCCjOf,uDAEO,MAAM68C,EACT,YAAYh9C,EAAM0V,GACdnV,KAAKP,KAAOA,EACZO,KAAKmV,IAAMA,EAEf,gBAAgB1H,GACZ,QAAI,YAAWA,IACJ,YAAYA,EAAKrJ,QAAUpE,KAAKP,Q,iCCTnD,uGAOO,SAASi9C,EAAWjvC,EAAMlN,EAAQqe,EAAiB+9B,EAAU99B,EAAU/c,GAC1E,GAAI,YAAY2L,GACZ,OAAO,IAAI,IAAWA,EAAMlN,EAAQqe,EAAiBC,EAAU/c,GAE9D,GAAI,YAAY2L,GACjB,OAAO,IAAI,IAAWA,EAAMlN,EAAQqe,EAAiB+9B,EAAU99B,EAAU/c,GAExE,GAAI,YAAW2L,GAChB,OAAO,IAAI,IAAUA,EAAMlN,EAAQqe,EAAiB+9B,EAAU99B,EAAU/c,GAEvE,GAAI,YAAa2L,GAClB,OAAO,IAAI,IAAYA,EAAMlN,EAAQqe,EAAiBC,EAAU/c,GAE/D,GAAI,YAAgB2L,GACrB,OAAO,IAAI,IAAYA,EAAMlN,EAAQqe,EAAiBC,EAAU/c,GAEpE,MAAM,IAAI6P,MAAM,IAAY4D,YAAY9H,M,iCCvB5C,0KAcA,SAASmvC,EAAcz0C,EAAMu4B,EAAMkV,EAAQiH,GACvC10C,EAAK2G,OAAS3G,EAAK2G,QAAU,GAC7B3G,EAAK2G,OAAO4xB,GAAQv4B,EAAK2G,OAAO4xB,IAAS,GACzCv4B,EAAK2G,OAAO4xB,GAAM3xB,OAAS5G,EAAK2G,OAAO4xB,GAAM3xB,QAAU,GAEvD5G,EAAK2G,OAAO4xB,GAAM3xB,OAAO6mC,GAAUiH,EAEhC,SAASC,EAAaC,EAAUC,EAAMl7C,EAAQwL,EAAM,CAAEsF,QAAQ,IACjE,MAAMkJ,EAAKihC,EAAS96B,WAAW,OAAEre,EAAM,MAAEf,EAAK,UAAE02C,EAAS,MAAEnyC,EAAK,OAAE0xC,GAAWh9B,EAAI3T,EAAO,YAAO2T,EAAI,CAAC,SAAU,QAAS,YAAa,QAAS,WAyB7I,GAvBA,YAAK3T,GAAM7G,QAAQyW,IACf,MAAMklC,EAAW,IAAmBllC,GAC9BmlC,EAAY/0C,EAAK4P,GACvB,GAAIklC,GAAYA,IAAaD,GAAqB,SAAbC,SAC1B90C,EAAK4P,QAEX,GAAI,YAAuBmlC,GAAY,CACxC,MAAM,OAAEtH,EAAM,KAAElV,GAAS,IAA4B3oB,IAC/C,UAAErO,EAAS,MAAEpH,GAAU46C,EACvBL,EAAQ,KACN,YAAQnzC,GAAaA,EAAY,CAACA,IAAYQ,IAAI8C,IAClD,MAAQ1K,MAAOmS,EAAC,KAAE0oC,GAASnwC,EAC3B,MAAO,CACHmwC,KAAM,YAAW,KAAMA,GACvB76C,MAAOmS,KAGf,CAAEnS,UAENs6C,EAAcz0C,EAAMu4B,EAAMkV,EAAQiH,UAC3B10C,EAAK4P,MAGP,SAATilC,EAAiB,CACjB,IAAK70C,EAAK8uC,KACN,OAGJ,GAAI9uC,EAAK2G,OAAQ,CAEb,MAAM,KAAEmoC,GAAS9uC,EAAK2G,OACtB3G,EAAK2G,OAAShP,OAAOC,OAAO,GAAKk3C,EAAO,CAAEA,QAAS,IAClB,IAA7B,YAAK9uC,EAAK2G,QAAQ/N,eACXoH,EAAK2G,OAGpB,OAAOhP,OAAOC,OAAOD,OAAOC,OAAO,CAAE8C,QACjCe,UAAUuE,GAAO,CAAEjD,QAAQ,EAAO6jB,QAAQ,EAG1C4uB,UAAW,EAAGC,UAAW,EAAGhiB,OAAO,EAAOkjB,OAAQ,YAAgBA,EAAQ,KAG7E,CAED,IAAKxrC,EAAIsF,QAAUmqC,EAASvzB,cAExB,OAEJ,QAAkBrnB,IAAdo3C,EAAyB,CACzB,IAAI9nC,EAAO8nC,EACPpxC,EAAK2G,QACL3G,EAAK2G,OAAOia,QACZ5gB,EAAK2G,OAAOia,OAAOha,QACnB,YAAY5G,EAAK2G,OAAOia,OAAOha,OAAOjC,QACtC2E,EAAO8nC,EAAU7/B,QAAQ,cAAevR,EAAK2G,OAAOia,OAAOha,OAAOjC,KAAK6B,SAE3EiuC,EAAcz0C,EAAM,SAAU,OAAQ,CAAEwG,OAAQ8C,IAGpD,GAAItJ,EAAK2G,OAAQ,CACb,IAAK,MAAM4xB,KAAQ,IACVqc,EAASK,YAAY1c,WACfv4B,EAAK2G,OAAO4xB,GAGM,IAA7B,YAAKv4B,EAAK2G,QAAQ/N,eACXoH,EAAK2G,OAGpB,MAAMuuC,EAtFd,SAAuBj2C,EAAOtF,GAC1B,OAAI,YAAQsF,GACDA,EAAM8C,IAAIrI,GAAY,YAAaA,EAAUC,IAASuG,KAAK,MAE/DjB,EAkFiBgH,CAAchH,EAAOtF,GACzC,OAAOhC,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE8C,QAC/Ce,SAAQqzC,MAAM,GAAUoG,EAAc,CAAEj2C,MAAOi2C,GAAgB,IAAMl1C,GAAO,CAAE2wC,OAAQ,YAAgBA,EAAQ,MAQnH,SAASwE,EAAoBr8C,GAChC,MAAM,KAAEkoB,GAASloB,EAAMG,UACvB,IAAK,MAAMG,KAAW,IAClB,GAAI4nB,EAAK5nB,GACL,IAAK,MAAM4G,KAAQghB,EAAK5nB,GACpB,IAAK4G,EAAKtH,IAAI,aAAc,CAExB,MAAMyO,EAAuB,MAAZ/N,EAAkB,SAAW,QAC9C,MAAO,CACH,CACI9B,KAAM6P,EACNP,OAAQ9N,EAAMmgB,iBAAiB9R,GAAUX,SAOjE,MAAO,GAEJ,SAAS4uC,EAAaC,EAAgB17C,GACzC,MAAM,EAAEyK,EAAI,GAAE,EAAEC,EAAI,IAAOgxC,EAC3B,MAAO,IACAjxC,EAAErC,IAAI2B,GAAKixC,EAAajxC,EAAG,OAAQ/J,OACnC0K,EAAEtC,IAAI2B,GAAKixC,EAAajxC,EAAG,OAAQ/J,OACnCyK,EAAErC,IAAI2B,GAAKixC,EAAajxC,EAAG,OAAQ/J,OACnC0K,EAAEtC,IAAI2B,GAAKixC,EAAajxC,EAAG,OAAQ/J,KACxC4M,OAAO7C,GAAKA,K,iCCnIlB,6FAOO,MAAM4xC,EAAe,gBACrB,MAAMC,EACT,eAAe79B,GACX7f,KAAK6f,MAAQA,EACb7f,KAAKuf,IAAM,IAGnB,MAAMK,EAAU,CACZL,IAAK,KACM,EAEX5R,MAAO,CAAC1M,EAAOue,EAASC,KACpB,MAAMhgB,EAAO+f,EAAQ/f,KACfqgB,EAAON,EAAQI,UAAYJ,EAAQI,QAAU,IAAI89B,GACjDC,EAAS,GACT52C,EAAY,GACZ4Y,EAAU,IAAIgjB,IACdoK,EAAa,CAAC52B,EAAG8N,KACnB,MAAM/S,EAAmB,WAAV+S,EAAqB9N,EAAE5U,QAAU4U,EAAEjT,MAClD,IAAI4mB,EAAK,eAAWrqB,KAAQyR,KAC5B,IAAK,IAAI0sC,EAAU,EAAGj+B,EAAQJ,IAAIuK,GAAK8zB,IACnC9zB,EAAK,eAAWrqB,KAAQyR,KAAU0sC,KAGtC,OADAj+B,EAAQzK,IAAI4U,GACL,CAAE,CAAC7F,GAAQ6F,IAKtB,IAAKrK,EAAO8Z,SAAW9Z,EAAOua,UAAW,CACrC,MAAM6jB,EAAM58C,EAAMa,OAAOma,UAAUwD,EAAO3c,MAC1C,GAAI2c,EAAOzV,KACP,IAAK,MAAMA,KAAQ,YAAMyV,EAAOzV,MAC5B,IAAK,MAAM+S,KAAO,YAAK/S,GACf,YAAuB+S,IACtB0C,EAAOua,YAAcva,EAAOua,UAAY,KAAKjyB,KAAKgV,GAG/B,aAAhB0C,EAAO3c,MACP,IAAS,wEACT2c,EAAOua,UAAY6jB,EAAI7jB,YAGtBva,EAAO8Z,SAAW9Z,EAAO8Z,OAAS,KAAKxxB,KAAKgV,QAO7D0C,EAAOua,UAAY6jB,EAAI7jB,UACvBva,EAAO8Z,OAASskB,EAAItkB,OAI5B,IAAK,MAAMr2B,KAASuc,EAAO8Z,QAAU,GAAI,CACrC,MAAMpjB,EAAI,CAAErT,KAAM,IAAKI,SACvBiT,EAAEwJ,QAAU7f,OAAOC,OAAO,GAAIgtC,EAAW52B,EAAG,SAC5C2J,EAAKD,MAAM9X,KAAKoO,GAEpB,IAAK,MAAM5U,KAAWke,EAAOua,WAAa,GAAI,CAC1C,MAAMn4B,EAAWZ,EAAMY,SAASN,GAChC,GAAIM,EAAU,CACV,IAAIqB,EAAQrB,EAASqB,MACrB,GAAIrB,EAASgC,SAAU,CAMnB,MAAMzC,EAAY,CACd0G,GANJ5E,EAAQjC,EAAM+P,QAAQzP,GAOlB2B,MAAOrB,EAASqB,MAChBW,SAAUhC,EAASgC,UAEvBkD,EAAU,YAAK3F,IAAcA,EAIjC,IAAKu8C,EAAOz6C,GAAQ,CAIhB,IAAIJ,EAAO,IACX,GAAqB,aAAjB0c,EAAQ1c,KAAqB,CAC7B,MAAMP,EAAYtB,EAAMW,kBAAkBL,GAASV,IAAI,QACnD,YAAoB0B,KACpBO,EAAO,UAGNjB,EAASmB,MACdF,EAAO,QAEX,MAAMqT,EAAI,CAAEjT,QAAO3B,UAASuB,QAC5BqT,EAAEwJ,QAAU7f,OAAOC,OAAOD,OAAOC,OAAO,GAAIgtC,EAAW52B,EAAG,SAAU42B,EAAW52B,EAAG,WAClF2J,EAAKD,MAAM9X,KAAM41C,EAAOz6C,GAASiT,GACjC2J,EAAKP,IAAIhe,GAAWo8C,EAAOz6C,SAI/B,IAAS,IAAYuS,mCAAmClU,IAGhE,GAAIke,EAAOzV,KAAM,CACb,MAAM8zC,EAAa7+B,GACRa,EAAKD,MAAM3V,IAAIiM,QAAuBhU,IAAjB8c,EAAE9I,EAAE5U,SAAyB0d,EAAE9I,EAAE5U,SAAW0d,EAAE9I,EAAEjT,QAEhF,GAAoB,aAAhBuc,EAAO3c,KACP0c,EAAQxV,KAAO8zC,EAAUr+B,EAAOzV,UAE/B,CACD,MAAMA,EAAO,YAAQyV,EAAOzV,MAAQyV,EAAOzV,KAAO,CAACyV,EAAOzV,MAC1DwV,EAAQxV,KAAOA,EAAKE,IAAI4zC,IAG5B,YAAK/2C,GAAWhG,SAChB+e,EAAKjc,SAAW,IAAI,IAAa,KAAMkD,KAG/C4Y,QAAS,CAAC1e,EAAOue,EAASu+B,KACtB,MAAMt+C,EAAO+f,EAAQ/f,KAAOg+C,EAE5B,OADkBM,EAAWrvC,OAAOwS,GAAKA,EAAEzhB,OAASA,GACnCsB,OACXg9C,EACAA,EAAW/vC,OAAO,CAChBvO,OACA6C,MAAOkd,EAAQI,QAAQC,MAAM3V,IAAI4V,IAC7B,MAAM,QAAEH,GAAYG,EACpB,OADiC,YAAOA,EAAM,CAAC,kBAMpD,O,iCC5If,uGAIO,SAASrR,EAAsBxN,GAClC,MAAO,IAAI+8C,EAAY/8C,EAAO,YAAa+8C,EAAY/8C,EAAO,WAE3D,SAAS+8C,EAAY/8C,EAAOqO,GAC/B,MAAM/N,EAAuB,UAAb+N,EAAuB,IAAM,IACvC3P,EAAOsB,EAAMG,UAAUgO,WAAWvO,IAAIyO,GAC5C,IAAK3P,GAAiB,WAATA,EACT,MAAO,GAGX,MAAMF,EAAOwB,EAAMmgB,iBAAiB9R,GAAUX,OAC9C,GAAa,SAAThP,EAAiB,CACjB,MAAMikB,EAAiB3iB,EAAMW,kBAAkBL,GAC/C,GAAIqiB,EAAgB,CAChB,MAAM9gB,EAAO8gB,EAAe/iB,IAAI,QAC1BojB,EAAQL,EAAe/iB,IAAI,SACjC,GAAI,YAAkBiC,IAAS,YAAcmhB,GAAQ,CACjD,MAAMxC,EAAYxgB,EAAMwgB,UAAUlgB,GAClC,GAAI,YAAaN,EAAMV,QAAS,CAK5B,GAAqC,gBADfU,EAAMV,OAAOa,UAAU0d,QAC3Bjc,MAAMtB,GACpB,MAAO,CAAC08C,EAAWx8B,EAAWwC,IAGtC,MAAO,CACHg6B,EAAWx8B,EAAWwC,GACtB,CACIxkB,OACAsP,OAAQmvC,EAASz8B,EAAWmC,aAA2BnC,iBAMvE,MAAM,IAAI9P,MAAM,0DAGhB,MAAO,CACH,CACIlS,OACA6C,MAAO3C,IAKvB,SAASs+C,EAAWx8B,EAAWwC,GAC3B,MAAO,CACHxkB,KAAMgiB,EAAY,QAClBnf,MAAO2hB,EAAM7gB,MAGd,SAAS86C,EAASz8B,EAAWmC,EAAgBuD,GAChD,MAAMrkB,EAAO8gB,EAAe/iB,IAAI,QAC1BoD,EAAU2f,EAAe/iB,IAAI,WAC7B+D,EAAe,YAAgBgf,EAAe/iB,IAAI,gBAAiBoD,GACzE,IAAIO,EAAeof,EAAe/iB,IAAI,gBAUtC,mBAAoBsmB,MATpB3iB,EACa,SAAT1B,OAEyBX,IAAjBqC,EACMA,EACAP,EAGN,MACyCW,QAAmB6c,W,iCCxE5E,uGAIO,SAAS08B,EAAoB58C,EAASN,GACzC,GAAI,YAAaA,IAAU,YAAaA,GACpC,MAAO,SAEN,GAAI,YAAcA,IAAU,YAAcA,GAC3C,OAAO,YAAS,IAAyBM,GAAW,cAAgB,SAGxE,MAAM,IAAIoQ,MAAM,kCAEb,SAASysC,EAAkBt/B,EAASvd,GACvC,MAAM88C,EAAsBv/B,EAAQjc,MAAMtB,GACpC2F,EAAQ,YAAS,IAAyB3F,GAAW,OAAS,SACpE,MAA4B,gBAAxB88C,GACgC,WAA5Bv/B,EAAQ5X,GAAO3F,IACf,IAAS,IAAYuX,sCAAsCvX,IAExD,eAEJud,EAAQ5X,GAAO3F,IAAY,W,iCCvB/B,SAAS+8C,EAAY52C,GACxB,QAASA,EAAG62C,GAET,SAASC,EAAa92C,GACzB,QAASA,EAAG+2C,IAET,SAASC,EAAah3C,GACzB,QAASA,EAAGi3C,IAET,SAASC,EAAYl3C,EAAI2J,GAC5B,GAAIqtC,EAAah3C,GACbk3C,EAAYl3C,EAAGi3C,IAAKttC,QAEnB,GAAImtC,EAAa92C,GAClB,IAAK,MAAMm3C,KAASn3C,EAAG+2C,IACnBG,EAAYC,EAAOxtC,QAGtB,GAAIitC,EAAY52C,GACjB,IAAK,MAAMm3C,KAASn3C,EAAG62C,GACnBK,EAAYC,EAAOxtC,QAIvBA,EAAG3J,GAGJ,SAASo3C,EAAwBp3C,EAAI2N,GACxC,OAAIqpC,EAAah3C,GACN,CAAEi3C,IAAKG,EAAwBp3C,EAAGi3C,IAAKtpC,IAEzCmpC,EAAa92C,GACX,CAAE+2C,IAAK/2C,EAAG+2C,IAAIv0C,IAAI4S,GAAKgiC,EAAwBhiC,EAAGzH,KAEpDipC,EAAY52C,GACV,CAAE62C,GAAI72C,EAAG62C,GAAGr0C,IAAI4S,GAAKgiC,EAAwBhiC,EAAGzH,KAGhDA,EAAW3N,GAtC1B,2K,iCCAA,gPAQO,MAAMq3C,EAAW,WAKXC,EAAiB,YAJF,CACxBppB,MAAO,EACPjK,KAAM,IAGGszB,EAAqB,IAAI,IAAwBF,EAAUG,GACjE,SAASA,EAAkBzxC,GAAM,OAAE3L,IACtC,MAAM,UAAE4N,EAAS,yBAAEq1B,EAAwB,eAAEO,EAAc,8BAAEN,EAA6B,YAAEma,EAAW,QAAEx8C,EAAO,UAAEwZ,EAAS,gBAAEijC,GAAoBC,EAAe5xC,EAAMsxC,EAAUj9C,GAC1Kw9C,EAAmB,YAAkC38C,EAAS2iC,EAAgBP,EAA0BC,EAA+BljC,EAAO+zB,UAC9IhK,EAAO,CAAE/oB,KAAM,OAAQc,OAAQu7C,GACrC,OAAOr/C,OAAOC,OAAOD,OAAOC,OAAO,GAAIoc,GAAY,CAAEzM,YAAWiO,MAAO,IAC5D2hC,EAAiB,CAChB7Z,SAAU,QACVrhC,KAAMynB,EACN6Z,eAAgB,QAChBE,cAAewZ,OAEhBE,EAAiB,CAChB7Z,SAAU,QACVrhC,KAAMynB,EACN6Z,eAAgB,QAChBE,cAAewZ,OAEhBE,EAAiB,CAChB7Z,SAAU,OACVrhC,KAAM,OACNshC,eAAgB,QAChBC,kBAAmB,QACnBC,cAAewZ,OAI/B,SAASG,EAA2B9xC,EAAMwM,GACtC,MAAM,SAAEzT,GAAaiH,EACrB,GAqFJ,SAAgCjH,GAC5B,OAAS,YAAWA,EAAS+F,IAAM,YAAW/F,EAASgG,MAClD,YAAWhG,EAASiY,MACpB,YAAWjY,EAASkY,MACpB,YAAWlY,EAASg5C,UACpB,YAAWh5C,EAASi5C,WACpB,YAAWj5C,EAASk5C,UACpB,YAAWl5C,EAASm5C,SA5FrBC,CAAuBp5C,GACvB,MAAO,CACH5C,OAAQ,YAAoB6J,EAAMwM,GAClC4lC,UAAW,OAGnB,MAAMC,EAwFV,SAAiDt5C,GAC7C,OAAO,YAAWA,EAASiY,KAAO,YAAWjY,EAASkY,IAzFnBqhC,CAAwCv5C,GACrEw5C,EA0FV,SAA4Cx5C,GACxC,OAAQ,YAAWA,EAASg5C,SACxB,YAAWh5C,EAASi5C,UACpB,YAAWj5C,EAASk5C,SACpB,YAAWl5C,EAASm5C,SA9FMM,CAAmCz5C,GAC3D+F,EAAI/F,EAAS+F,EACbC,EAAIhG,EAASgG,EACnB,GAAIszC,EAA4B,CAE5B,GAAIE,EACA,MAAM,IAAIruC,MAAMsI,EAAgB,oEAEpC,MAAMwE,EAAKjY,EAASiY,GACdC,EAAKlY,EAASkY,GACpB,GAAI,YAAWD,IAAO,YAAWC,GAE7B,MAAM,IAAI/M,MAAMsI,EAAgB,+BAE/B,GAAI,YAAWwE,GAAK,CACrB,GAAI,YAAWlS,IAAM,YAAaA,GAE9B,MAAO,CAAE3I,OAAQ,aAAci8C,UAAW,0BAI1C,MAAM,IAAIluC,MAAM,4CAA8CsI,GAGjE,GAAI,YAAWyE,GAAK,CAErB,GAAI,YAAWlS,IAAM,YAAaA,GAE9B,MAAO,CAAE5I,OAAQ,WAAYi8C,UAAW,0BAIxC,MAAM,IAAIluC,MAAM,4CAA8CsI,GAGtE,MAAM,IAAItI,MAAM,kBAEf,CAED,MAAM6tC,EAASh5C,EAASg5C,OAClBC,EAAUj5C,EAASi5C,QACnBC,EAASl5C,EAASk5C,OAClBC,EAAUn5C,EAASm5C,QACzB,GAAI,YAAWF,KAAa,YAAWD,GAEnC,MAAM,IAAI7tC,MAAMsI,EAAgB,uCAEpC,GAAI,YAAW0lC,KAAa,YAAWD,GAEnC,MAAM,IAAI/tC,MAAMsI,EAAgB,uCAEpC,GAAI,YAAWulC,IAAW,YAAWE,GAEjC,MAAM,IAAI/tC,MAAMsI,EAAgB,iEAE/B,GAAI,YAAWulC,GAAS,CACzB,GAAI,YAAWjzC,IAAM,YAAaA,GAE9B,MAAO,CAAE3I,OAAQ,aAAci8C,UAAW,oBAI1C,MAAM,IAAIluC,MAAM,iEAGnB,GAAI,YAAW+tC,GAAS,CACzB,GAAI,YAAWlzC,IAAM,YAAaA,GAE9B,MAAO,CAAE5I,OAAQ,WAAYi8C,UAAW,oBAIxC,MAAM,IAAIluC,MAAM,iEAGxB,MAAM,IAAIA,MAAM,mBAqBjB,SAAS0tC,EAAe5xC,EAAMwM,EAAenY,GAEhD,MAAM,KAAEsC,EAAI,SAAEoC,EAAQ,UAAEyV,EAAWpF,WAAYqpC,GAAOzyC,EAAM0O,EAAY,YAAO1O,EAAM,CAAC,OAAQ,WAAY,YAAa,eACjH9K,EAAU,YAAUyB,GAAQA,EAAO,CAAEtB,KAAMsB,GAE7C6X,GACA,IAAS,IAAYtG,sBAAsBsE,IAE/C,MAAM,OAAErW,EAAM,UAAEi8C,GAAcN,EAA2B9xC,EAAMwM,IACzD,yBAAE8qB,EAAwB,0BAAEiB,EAAyB,8BAAEC,EAA6B,+BAAEC,EAA8B,eAAEZ,GAAmB,YAA4B73B,EAAM7J,EAAQqW,IACnL,0BAAEkmC,EAAyB,wBAAEC,EAAuB,eAAEtb,EAAc,0BAAEub,GAwBhF,SAA2C19C,EAASoiC,EAA0BiB,EAA2BC,EAA+BC,EAAgC2Z,EAAW5lC,EAAenY,GAC9L,IAAIq+C,EAA4B,GAC5BC,EAA0B,GAC9B,MAAME,EAAsBvb,EAAyB7hC,MACrD,IAAI4hC,EACAub,GAA4B,EAChC,GAAkB,QAAdR,EAAqB,CACrB,MAAMhmC,EAASlX,EAAQkX,OACjBlX,EAAQkX,OACRlX,EAAQmX,OACe,QAAnBnX,EAAQmX,OACJ,SACA,OACJhY,EAAO+zB,SAAShc,OACpBC,EAASnX,EAAQmX,OAASnX,EAAQmX,OAAoB,SAAXD,EAAoB,SAAW,MAIhF,GAHgB,WAAXA,IAAqC,QAAXC,IAC3B,IAAS,IAAYC,oCAAoCF,EAAQC,EAAQG,IAE9D,WAAXH,GAAkC,UAAXA,EACvBqmC,EAA4B,CACxB,CAAEz4C,GAAIoS,EAAQ5W,MAAOo9C,EAAqBx4C,GAAI,UAAYw4C,GAC1D,CAAE54C,GAAImS,EAAQ3W,MAAOo9C,EAAqBx4C,GAAI,UAAYw4C,IAE9DF,EAA0B,CACtB,CACI9d,2BAA4Bge,uBAAyCA,MACrEx4C,GAAI,SAAWw4C,GAEnB,CACIhe,2BAA4Bge,uBAAyCA,MACrEx4C,GAAI,SAAWw4C,IAGvBxb,EAAiB,CACb,CAAEI,YAAa,UAAWC,YAAa,YAAUtrB,IACjD,CAAEqrB,YAAa,SAAUC,YAAaob,EAAe1mC,EAAQC,EAAQ,MACrE,CAAEorB,YAAa,SAAUC,YAAaob,EAAe1mC,EAAQC,EAAQ,OAEzEumC,GAA4B,MAE3B,CAID,IAAIG,EACAC,EACAC,EALA/9C,EAAQkX,QAAUlX,EAAQmX,QAC1B,IAAS,IAAYI,0BAA0BvX,EAAQmX,OAAQG,IAKpD,OAAXH,GACA0mC,EAAW,OACXC,EAAgB,MAChBC,EAAgB,QAGhBF,EAAW,SACXC,EAAgB,KAChBC,EAAgB,MAEpBP,EAA4B,CACxB,CAAEz4C,GAAI+4C,EAAev9C,MAAOo9C,EAAqBx4C,GAAI,SAAWw4C,GAChE,CAAE54C,GAAIg5C,EAAex9C,MAAOo9C,EAAqBx4C,GAAI,SAAWw4C,GAChE,CAAE54C,GAAI84C,EAAUt9C,MAAOo9C,EAAqBx4C,GAAI,UAAYw4C,IAEhExb,EAAiB,CACb,CACII,YAAa,SACbC,YAAa,YAAM,CAAEjiC,MAAOo9C,EAAqB35C,UAAW+5C,EAAe59C,KAAM,gBAAkBhB,EAAQ,CACvG0F,gBAAgB,KAGxB,CACI09B,YAAa,SACbC,YAAa,YAAM,CAAEjiC,MAAOo9C,EAAqB35C,UAAW85C,EAAe39C,KAAM,gBAAkBhB,EAAQ,CACvG0F,gBAAgB,KAGxB,CACI09B,YAAa,UACbC,YAAa,YAAM,CAAEjiC,MAAOo9C,EAAqB35C,UAAW65C,EAAU19C,KAAM,gBAAkBhB,EAAQ,CAClG0F,gBAAgB,WAM/B,EACG7E,EAAQkX,QAAUlX,EAAQmX,SAC1B,IAAS,IAAYF,oCAAoCjX,EAAQkX,OAAQlX,EAAQmX,SAEnE,2BAAd+lC,GACA/a,EAAiB,GACjBsb,EAA0B,CACtB,CAAE9d,oBAAqB0D,EAA0B9iC,UAAW4E,GAAI,SAAWw4C,GAC3E,CAAEhe,oBAAqBge,MAAyBx4C,GAAI,SAAWw4C,KAGhD,qBAAdT,IACL/a,EAAiB,CAAC,CAAEI,YAAa,GAAIC,YAAamb,IAClDF,EAA0B,CACtB,CACI9d,oBAAqBge,gBAAkCra,EAA8B/iC,UACrF4E,GAAI,SAAWw4C,IAGnBpa,EACAka,EAAwBr4C,KAAK,CACzBu6B,oBAAqBge,gBAAkCpa,EAA+BhjC,UACtF4E,GAAI,SAAWw4C,IAInBF,EAAwBr4C,KAAK,CACzBu6B,oBAAqBge,gBAAkCra,EAA8B/iC,UACrF4E,GAAI,SAAWw4C,KAI3B,IAAK,MAAMK,KAA0BP,EACjCtb,EAAe/8B,KAAK,CAChBm9B,YAAayb,EAAuB74C,GAAG08B,UAAU,EAAG,GACpDW,YAAawb,EAAuBre,UAC/B5oB,QAAQ,IAAIknC,OAAO,cAAe,KAAM,IACxClnC,QAAQ,IAAIknC,OAAO,SAAU,KAAM,MAIpD,MAAO,CAAER,0BAAyBD,4BAA2Brb,iBAAgBub,6BArJ6BQ,CAAkCl+C,EAASoiC,EAA0BiB,EAA2BC,EAA+BC,EAAgC2Z,EAAW5lC,EAAenY,GAC7Rga,EAAKwpB,EAA4Dwb,GAAdt6C,EAASsV,GAA6B,MAAnBwpB,EAAyB,KAAO,MAAmDhT,GAAd9rB,EAASs6C,GAA6B,MAAnBxb,EAAyB,SAAW,UAA2DvhB,GAAdvd,EAAS8rB,GAA6B,MAAnBgT,EAAyB,UAAY,WAA6Dyb,GAAdv6C,EAASud,GAAwC,YAAOvd,EAAU,CAAe,iBAAPsV,EAAkBA,EAAKA,EAAK,GAAkB,iBAAPglC,EAAkBA,EAAKA,EAAK,GAAkB,iBAAPxuB,EAAkBA,EAAKA,EAAK,GAAkB,iBAAPvO,EAAkBA,EAAKA,EAAK,OACjjB,KAAE1gB,EAAI,UAAE0D,EAAWJ,UAAWq6C,EAAcl6C,QAASm6C,EAAYz6C,SAAUw+B,GAAkC,YAA8B+b,EAAkCj/C,GAC7K6E,EAAY,IAAIq6C,KAAiBb,GACjCr5C,EAAwB,QAAd+4C,EAAsB,GAAKoB,EACrC7B,EAAkB,YAAwBta,EAAgBC,EAA0BC,EAA+Bqb,GACzH,MAAO,CACH3wC,UAAW,IACHyM,EAAUzM,WAAa,MACxBrM,KACA0D,KACEJ,EAAU5F,OAAc,CAAC,CAAE4F,YAAWG,YAAnB,MACrBs5C,GAEPt5C,UACAi+B,2BACAO,iBACAN,gCACAma,YAAwB,aAAXv7C,EAAwB,aAAe,WACpDjB,UACAwZ,YACAijC,mBAkIR,SAASmB,EAAe1mC,EAAQC,EAAQonC,GACpC,OAAO,YAAUrnC,GAAU,IAAMqnC,EAAY,IAAMpnC,I,iCCpTvD,4EAkBO,MAAMqnC,UAAkB,IAC3B,YAAY5gD,EAAQ0d,GAChBpe,MAAMU,GACNP,KAAKohD,OAASnjC,EAElB,QACI,OAAO,IAAIkjC,EAAU,KAAM,YAAUnhD,KAAKohD,SAE9C,yBAAyB7gD,EAAQ8gD,GAC7B,MAAM,MAAEpjC,EAAK,QAAEnX,EAAO,GAAEgB,EAAE,OAAEkW,EAAS,QAAWqjC,EAC1CC,EAAa,GACbC,EAAY,GAClB,QAA4Bp/C,IAAxBk/C,EAAet+C,KACf,IAAK,MAAM04C,KAAa4F,EAAet+C,KACnCu+C,EAAWv5C,KAAK0zC,EAAUv4C,OAC1Bq+C,EAAUx5C,KAAK,YAAgB0zC,EAAUtnC,MAAO,cAGxD,MAAMpR,EAAO,CACTG,MAAOo+C,EACPntC,MAAOotC,GAEX,IAAIC,EAUJ,OALIA,EA9BZ,SAAwB15C,GACpB,OAAO,YAAQA,IAAOA,EAAG25C,MAAMvgC,GAAK,YAASA,KAAOpZ,EAAG/G,OAAS,EAyBxD2gD,CAAe55C,GACAA,EAEV,YAASA,GACC,CAACA,EAAIA,EAAK,QAGV,CAACu5C,EAAepjC,MAAQ,SAAUojC,EAAepjC,MAAQ,QAErE,IAAIkjC,EAAU5gD,EAAQ,CACzBohD,WAAY1jC,EACZnX,UACAkX,SACAjb,OACA6+C,QAAS,GACT95C,GAAI05C,IAGZ,wBAAwBjhD,EAAQU,GAC5B,MAAM4gD,EAAkB5gD,EAAMgd,OACxB,SAAEzX,GAAavF,EACrB,IAAK4gD,EACD,OAAO,KAEX,IAAIC,EACJ,GAAID,EAAgBE,eAAgB,CAChC,MAAMC,EAAOx7C,EAASq7C,EAAgBE,gBACtCD,EAAoB,YAAiBE,GAEzC,MAAMC,EAjEd,SAA0BhhD,GACtB,OAAOA,EAAMgd,MAAMikC,QAAQ15C,OAAO,CAAC+wB,EAAQ4oB,KACvC,MAAMtgD,EAAWsgD,EAAGtgD,SACdugD,EAAS,YAAQvgD,GAIvB,OAHIugD,GACA7oB,EAAOxxB,KAAKq6C,GAET7oB,GACR,IAyDiB8oB,CAAiBphD,GAC3BqhD,EAAWrhD,EAAMuF,SAAS2N,MAChC,IAAIpR,EAaJ,OAXIA,EADA,YAAQu/C,IAAa,YAAWA,GACzB,YAAWA,GAKXL,EAAQz5C,OAAO,CAAC0Y,EAAGhe,KACtBge,EAAEhe,MAAM6E,KAAK7E,GACbge,EAAE/M,MAAMpM,KAAK,cACNmZ,GACR,CAAEhe,MAAO,GAAIiR,MAAO,KAEpB,IAAIgtC,EAAU5gD,EAAQ,CACzBuhD,oBACAH,WAAY1gD,EAAM+P,QAAQ6wC,EAAgB/jC,cAC1C8jC,QAAS,GACTK,UACAl/C,OACAib,OAAQ6jC,EAAgB7jC,OACxB+O,OAAQ80B,EAAgB90B,OACxBjlB,GAAI,CACA7G,EAAM+P,QAAQ6wC,EAAgB/jC,aAAc,CAAE5M,OAAQ,QAAS5J,OAAO,IACtErG,EAAM+P,QAAQ6wC,EAAgB/jC,aAAc,CAAE5M,OAAQ,MAAO5J,OAAO,OAIhF,YACI,OAAOtH,KAAKohD,OAEhB,cAAc7nB,GACVv5B,KAAKohD,OAAOQ,QAAQ75C,QAAQwxB,GAEhC,kBACI,MAAMihB,EAAM,IAAI7X,IAKhB,OAJA6X,EAAItlC,IAAIlV,KAAKohD,OAAOO,YACpB3hD,KAAKuiD,mBAAmBjhD,QAAQsI,GAAK4wC,EAAItlC,IAAItL,IAC7C5J,KAAKohD,OAAOQ,QAAQtgD,QAAQsI,GAAK4wC,EAAItlC,IAAItL,IACzC5J,KAAKohD,OAAOr+C,KAAKG,MAAM5B,QAAQsI,GAAK4wC,EAAItlC,IAAItL,IACrC4wC,EAEX,iBACI,OAAO,IAAI7X,IAAI3iC,KAAKohD,OAAOt5C,IAE/B,OACI,eAAgB,YAAK9H,KAAKohD,UAE9B,mBACI,MAAM,kBAAEU,EAAiB,OAAE/0B,EAAM,QAAEjmB,GAAY9G,KAAKohD,OACpD,OAAIU,EACIA,EAAkB9+C,IACd+pB,EAGO,CAAC,YAAQ+0B,EAAmB,CAAE95C,UAAW,SAE7C,CAEH,YAAQ85C,EAAmB,IAC3B,YAAQA,EAAmB,CAAE95C,UAAW,SAGzC,CAAC,YAAQ85C,IAEbh7C,GAAW,GAEtB,WACI,MAAM4I,EAAY,IACZ,QAAEkyC,EAAO,kBAAEE,EAAmBH,WAAYz+C,EAAK,QAAE++C,EAAO,KAAEl/C,EAAI,OAAEib,EAAM,OAAE+O,EAAM,GAAEjlB,GAAO9H,KAAKohD,OAElG,GAAIr0B,GAAU+0B,EAAmB,CAC7B,MAAM,KAAExxC,EAAO,GAAG,IAAEtN,GAAQ8+C,EACxB9+C,GAGA0M,EAAU3H,KAAK,CACXjF,KAAM,UACN2O,QAASnB,KACL,YAAQwxC,EAAmB,CAAErwC,KAAM,cAC/B,EAAInB,KACR,YAAQwxC,EAAmB,CAAErwC,KAAM,QAASzJ,UAAW,QAC3DF,GAAI,YAAQg6C,EAAmB,CAAE95C,UAAW,MAAOV,OAAO,MAGlEoI,EAAU3H,KAAK,CACXjF,KAAM,SACNI,QACA4D,QAAS,IAAIm7C,KAAYL,GACzB7kC,IAAK,YAAQ+kC,EAAmB,CAAE95C,UAAW,QAC7Cw6C,OAAQ,QACRlgD,MAAO,IAYf,OARAoN,EAAU3H,KAAK,CACXjF,KAAM,QACNgE,QAAS,IAAI9G,KAAKuiD,sBAAuBX,GACzC1+C,QACAH,OACA+E,KACAkW,WAEGtO,K,iCC9Kf,uJAUO,MAAMgc,EAAO,CAChB5lB,OAAQ,OACRC,YAAc9E,GACHnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC/EiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPxC,OAAQ,SACRjE,KAAM,YACL8iD,EAAaxhD,EAAO,IAAK,SAAUwhD,EAAaxhD,EAAO,IAAK,UAGlE,SAASwhD,EAAaxhD,EAAOM,EAAS6C,GACzC,MAAM,OAAEtC,EAAM,SAAE0E,EAAQ,QAAE7D,GAAY1B,EAChCyhD,EAAuB,MAAZnhD,EAAkB,KAAO,KACpCkkB,EAA0B,MAAZlkB,EAAkB,QAAU,SAC1CM,EAAW2E,EAASjF,GACpB4O,EAAY3J,EAASk8C,GACrB7/C,EAAQ5B,EAAMW,kBAAkBL,GAChCgB,EAAYM,EAAQA,EAAMhC,IAAI,aAAUsB,EACxCsf,EAAYxgB,EAAMwgB,UAAUlgB,GAC5BqC,EAASjB,EAAQiB,OACjB++C,EAAan8C,EAASif,IACxBjf,EAAS7G,MACTgD,EAAQ8iB,IACR9iB,EAAQhD,MACR,YAAc,OAAQgD,EAASb,EAAQ,CAAEuE,UAAWof,IAClDm9B,EAAwB,MAAZrhD,EAA6B,aAAXqC,EAAmC,eAAXA,EAE5D,GAAI,YAAW/B,KACV,YAAUA,EAASmB,MAAQ,YAASnB,EAASmB,MAASnB,EAASgC,WAAasM,KAC5EwyC,IACA,YAAkBpgD,GAAY,CAC/B,MAAM+N,EAAO,YAAQ/O,EAASM,OAAUM,EAAWQ,EAASb,GAC5D,OAAO,IAAmB,CACtBD,WACAsO,YACA5O,UACAoB,UACA8e,YACAnR,OACAkM,QAAS,YAAgB7Z,EAAQkgD,WAAY/gD,EAAOsC,GAAMy+C,YAC1Dh+C,QAAShC,EAAMhC,IAAI,aAGtB,IAAM,YAAWgB,IAAa,YAAkBU,IAAeqgD,KAAezyC,EAAW,CAE1F,GAAI,YAAWtO,IAAaU,IAAc,IAAUmC,KAAM,CACtD,MAAM4L,EAAO,YAAmBzO,GAAYA,EAASyO,UAAOnO,EAC5D,OAAO,IAAoBN,EAAUN,EAASN,EAAO6hD,EAAe1+C,EAAMzB,EAAS8iB,EAAahE,EAAW5e,EAAOf,EAAQwO,IAG9H,OAAO,IAAqC/O,EAASN,EAAO,IAAQA,EAAMwkB,IAAeq9B,EAAe1+C,EAAMzB,EAAS8iB,EAAahE,EAAW5e,EAAOf,IAGtJ,OAAO,IAAqBP,EAASN,EAAO,CAAEisB,WAAY,YAAaC,YAAa,cAG5F,SAAS21B,EAAe1+C,EAAMzB,EAAS8iB,EAAahE,EAAW5e,EAAOf,EAAQwO,GAC1E,MAAMsd,EAAmB,YAAgBjrB,EAAQ8iB,GAAc9iB,EAAQhD,KAEvE,YAAc,OAAQgD,EAASb,EAAQ,CAAEuE,UAAWof,KACpD,QAAyBtjB,IAArByrB,EACA,MAAO,CAAEtrB,MAAOsrB,GAEpB,GAAI/qB,EAAO,CACP,MAAMN,EAAYM,EAAMhC,IAAI,QAC5B,GAAkB,UAAd0B,GAAuC,SAAdA,EAAsB,CAC/C,QAAsCJ,IAAlCL,EAAOsC,GAAM2+C,iBACb,MAAO,CAAEzgD,MAAOR,EAAOsC,GAAM2+C,kBAEjC,GAAIxgD,IAAc,IAAUwB,MAAO,CAC/B,MAAMqgB,EAAavhB,EAAMhC,IAAI,SAC7B,OAAI,YAAcujB,IAAe,YAASA,EAAWhhB,MAC1C,CAAEd,MAAO8hB,EAAWhhB,KAAO,GAE/B,CAAEd,MAAO,IAAe,GAI/B,OAAO,IAAYmf,EAAWnR,GAKlC,MAAO,CAAEhO,MAAOR,EAAOsC,GAAMN,oBAIrC,MAAMV,EAAO,YAA0BtB,EAAO8jB,KAAMH,GAIpD,MAAO,CAAEnjB,MAHK,YAEdR,EAAOsC,GAAM2+C,iBAAkB3/C,EAAO,M,gCCtG1C,o2BAEO,MAAM4/C,EAAO,OACPC,EAAM,MACNC,EAAQ,QACRC,EAAO,OACPp/C,EAAQ,QACRq/C,EAAO,OACPC,EAAO,OACPzyB,EAAO,OACP0yB,EAAO,OACPC,EAAQ,QACRC,EAAS,SACTC,EAAS,SACTC,EAAW,WAElBC,EAAa,CACfr4B,KAAM,EACNpnB,IAAK,EACLunB,MAAO,EACP5lB,KAAM,EACNoX,MAAO,EACPnQ,KAAM,EACN+e,KAAM,EACNvlB,MAAO,EACPolB,KAAM,EACNF,SAAU,EACVG,KAAM,EACNJ,OAAQ,EACRK,OAAQ,GAKL,SAASg4B,EAAWxsB,GACvB,OAAO,YAAS,CAAC,OAAQ,OAAQ,SAAUA,GAExC,SAASysB,EAAgBzsB,GAC5B,OAAO,YAAS,CAAC,OAAQ,MAAO,SAAUA,GAEvC,MAAM0sB,EAAkB,YAAKH,GAC7B,SAASI,EAAU3/C,GACtB,OAAOA,EAAW,KAEO,aAAM0/C,GAK5B,MAUME,EAAqB,GAAGh2C,OAVR,CACzB,SACA,cACA,aACA,mBACA,gBACA,aACA,oBAEuB,CAAC,OAAQ,gBAEvBi2C,EAAiC,CAC1C,SACA,QACA,UACA,UACA,uBACA,gBAESC,EAA8C,CACvD54B,KAAM,CAAC,OAAQ,SACfpnB,IAAK,CAAC,aAAc,qBAAsB,oBAC1CwnB,KAAM,CAAC,aAAc,qBAAsB,oBAC3C7lB,KAAM,CAAC,SACPiH,KAAM,CAAC,mBACP+e,KAAM,CAAC,WAAY,cAEVs4B,EAAoB,CAC7B/9C,MAAO,UACPg+C,QAAS,SACTC,aAAc,GAGLC,EAAmB,CAC5BzB,WAAY,EACZ/+C,mBAH2B,EAI3BygD,qBAAsB,IAEbC,EAAoB,CAC7B3B,WAAY,EACZ/+C,mBAR2B,EAS3BygD,qBAAsB,IAEbE,EAAoB,CAC7B92B,UAAW,GAER,SAAS+2B,EAAYttB,GACxB,OAAO2sB,EAAU3sB,GAAKA,EAAEt0B,KAAOs0B,I,iCChGnC,4OAEA,MAAMutB,EAAU,EAAIA,S,iCCFpB,oEAAO,MAAMC,EAAe,UACfvvB,EAAgB,CACzBxT,OAAQ,CACJ3B,GAAI,QACJqZ,OAAQ,CAACqrB,GACT9lC,QAAS,SACT+lC,MAAO,MACPvlC,MAAO,YAEXwlC,MAAO,CACH5kC,GAAI,QACJqZ,OAAQ,CAACqrB,GACTG,OAAQ,iBACRjmC,QAAS,SACT+lC,MAAO,MACPvlC,MAAO,YAEX0lC,SAAU,CACN9kC,GAAI,kDACJ8Z,UAAW,CAAC,IAAK,KACjBtZ,UAAW,kDACXa,KAAM,SACNnd,KAAM,CAAE8E,KAAM,OAAQyD,YAAa,KAAOxD,OAAQ,SAClD2V,QAAS,SACTQ,MAAO,c,iCCxBf,4GAIO,MAAM2lC,EAAqB,SACrBC,EAAwB,EAIrC,SAASC,EAAUC,GACf,MAAMC,EAAS,GAUf,OADAD,EAAM9jD,SARN,SAASgkD,EAAOllD,GACe,IAAvBA,EAAK8sC,cACLmY,EAAOt9C,KAAK3H,GAGZA,EAAKE,SAASgB,QAAQgkD,MAIvBD,EAEJ,SAASE,EAAOh5C,GACnB,OAAOA,EASX,SAASi5C,EAAaC,EAAWtlD,GAW7B,OAVcA,EAAM+J,IAAI9J,IACpB,GAAIqlD,aAAqB,IAAmB,CACxC,MAAMC,EAAWD,EAAU3c,uBAAuB1oC,GAElD,OADAqlD,EAAUttB,QACHutB,EAGP,OAAOD,EAAUtwC,IAAI/U,KAGhBulD,KAAKJ,GAEtB,SAASK,EAA2BC,EAAe5kD,GAC/C,IAAImkD,EAAQS,EAAczjC,QAC1B,MAAM0jC,EAAe,IAAInjB,IAezB,OAdAmjB,EAAa5wC,IAAIswC,EAAa,IAAI,IAAqCJ,IAEvEA,EAAQA,EAAM12C,OAAOzE,GAAKA,EAAEijC,cAAgB,GAC5C4Y,EAAa5wC,IAAIswC,EAAa,IAAI,IAAmCL,EAAUC,KAC/EA,EAAQA,EAAM12C,OAAOzE,GAAKA,EAAEijC,cAAgB,GAC5C4Y,EAAa5wC,IAAIswC,EAAa,IAAI,IAA0BL,EAAUC,KACtEU,EAAa5wC,IAAIswC,EAAa,IAAI,IAAqBvkD,GAAQkkD,EAAUC,KACzEU,EAAa5wC,IAAIswC,EAAa,IAAI,IAAuCL,EAAUC,KACnFU,EAAa5wC,IAAIswC,EAAa,IAAI,IAAyBL,EAAUC,KACrEU,EAAa5wC,IAAIswC,EAAa,IAAI,IAA8BL,EAAUC,KAC1EU,EAAa5wC,IAAIswC,EAAa,IAAI,IAA6BL,EAAUC,KACzEU,EAAa5wC,IAAIswC,EAAa,IAAI,IAAkCJ,IACpEU,EAAa5wC,IAAIswC,EAAa,IAAI,IAA2BL,EAAUC,KACvES,EAAczjC,QAAUgjC,EACjBU,EAAavmC,KAAI,GAKrB,SAASwmC,EAAiBnmD,EAAMqB,GAEnC,YAAWrB,EAAKwiB,SAChB,IAAI4jC,EAAmB,EACnBC,EAAoB,EACxB,IAAK,IAAIhnC,EAAI,EAAGA,EAAIimC,GACXU,EAA2BhmD,EAAMqB,GADCge,IAIvC+mC,IAGJpmD,EAAKwiB,QAAQlY,IAAI,KACjB,IAAK,IAAI+U,EAAI,EAAGA,EAAIimC,GACXU,EAA2BhmD,EAAMqB,GADCge,IAIvCgnC,IAGJ,YAAWrmD,EAAKwiB,SACZ2E,KAAKrc,IAAIs7C,EAAkBC,KAAuBf,GAClD,iCAAsCA,iB,iCCzF9C,sEAQO,MAAMgB,UAA4B,IACrC,YAAY3lD,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EAErB,QACI,OAAO,IAAIw2C,EAAoB,KAAM,YAAUlmD,KAAK0P,YAExD,cAAc6pB,GACVv5B,KAAK0P,UAAU5I,QAAU,YAAO9G,KAAK0P,UAAU5I,QAAQkH,OAAOurB,GAASz4B,GAAKA,GAEhF,kBACI,MAAM05C,EAAM,IAAI7X,IAOhB,OANC3iC,KAAK0P,UAAU5I,SAAW,IAAIxF,QAAQsI,GAAK4wC,EAAItlC,IAAItL,KACnD5J,KAAK0P,UAAU3M,MAAQ,IAAIzB,QAAQ81B,GAAKojB,EAAItlC,IAAIkiB,EAAEl0B,QACnDlD,KAAK0P,UAAUy2C,OACVj8C,IAAI2b,GAAKA,EAAE3iB,OACXwL,OAAO9E,QAAWzH,IAANyH,GACZtI,QAAQsI,GAAK4wC,EAAItlC,IAAItL,IACnB4wC,EAEX,iBACI,OAAO,IAAI7X,IAAI3iC,KAAK0P,UAAUy2C,OAAOj8C,IAAIlK,KAAKy6C,iBAElD,eAAe2L,GACX,OAAOA,EAAet+C,IAAM,YAAQs+C,GAExC,OACI,yBAA0B,YAAKpmD,KAAK0P,aAExC,WACI,MAAM6pB,EAAS,GACTohB,EAAM,GACN7yC,EAAK,GACL2S,EAAS,GACf,IAAK,MAAM0rC,KAAUnmD,KAAK0P,UAAUy2C,OAChCxL,EAAI5yC,KAAKo+C,EAAOz+C,IAChBI,EAAGC,KAAK/H,KAAKy6C,eAAe0L,IAC5B1rC,EAAO1S,UAAsB5F,IAAjBgkD,EAAOE,MAAsB,KAAOF,EAAOE,OACvD9sB,EAAOxxB,UAAsB5F,IAAjBgkD,EAAOjjD,MAAsB,KAAOijD,EAAOjjD,OAE3D,MAAMojD,EAAQtmD,KAAK0P,UAAU42C,MACvBx/C,EAAU9G,KAAK0P,UAAU5I,QAC/B,GAAIw/C,GAAsB,OAAbA,EAAM,IAA4B,OAAbA,EAAM,IAAe3L,EAAI8G,MAAM3kC,GAAK,YAAcA,IAEhF,OAAOhd,OAAOC,OAAO,CAAE+C,KAAM,gBAAiBgF,KAAI6yC,IAAKA,EAAKphB,eAAuBp3B,IAAZ2E,EAAwB,CAAEA,WAAY,IAEjH,MAAMw6C,EAAa,GACbC,EAAY,GAClB,QAA4Bp/C,IAAxBnC,KAAK0P,UAAU3M,KACf,IAAK,MAAM04C,KAAaz7C,KAAK0P,UAAU3M,KACnCu+C,EAAWv5C,KAAK0zC,EAAUv4C,OAC1Bq+C,EAAUx5C,KAAK0zC,EAAUtnC,OAAS,aAG1C,MAAMpR,EAAO,CACTG,MAAOo+C,EACPntC,MAAOotC,GAELgF,EAAcvmD,KAAK0P,UAAU62C,YACnC,OAAOzmD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,SAAU2X,SAC/D3S,KACA6yC,MACAphB,SACAx2B,aAAyBZ,IAAhBokD,EAA4B,CAAEA,eAAgB,SAAmBpkD,IAAZ2E,EAAwB,CAAEA,WAAY,SAAiB3E,IAAVmkD,EAAsB,CAAEA,SAAU,O,iCCxEzJ,qLAKO,SAASE,EAAUC,GACtB,MAAwB,QAAjBA,GAA2C,UAAjBA,GAA6C,UAAjBA,EAE1D,SAASC,EAAWp3C,GACvB,OAAOA,SAAkB,YAAwBA,KAAc,MAEnE,SAASq3C,EAAmBj5C,GACxB,OAAO,YAASA,GAAY,CAAE5K,KAAM4K,GAAaA,GAAY,GAE1D,SAASk5C,EAAkBn5C,EAAM3L,GACpC,MAAM4L,EAAW5N,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,OAAUhB,EAAS6kD,EAAmB7kD,EAAO4L,UAAY,IAAMi5C,EAAmBl5C,EAAKC,WAO5I,MANsB,QAAlBA,EAAS5K,OACH,YAAY2K,IAAS,YAAWA,KAClC,IAAS,IAAY+H,gBACrB9H,EAAS5K,KAAO,QAGjB4K,EAEX,MAAMm5C,EAAuB,CACzB,aACA,WAGG,SAASC,EAA0Bx4B,GACtC,OAAOu4B,EAAqBr+C,OAAO,CAACsU,EAAG3G,KAC/BmY,QAAcnsB,IAATmsB,EAAEnY,KACP2G,EAAE3G,GAAKmY,EAAEnY,IAEN2G,GACR,M,iCCnCP,yPAcO,SAASiqC,EAAmB9lD,EAAOM,GACtC,MAAM6F,EAAQnG,EAAMG,UAAUynB,cAActnB,GAAS6F,MAC/CtF,EAASb,EAAMa,OAASb,EAAMa,YAASK,EACvC8mB,EAAgBhoB,EAAMG,UAAUynB,cAActnB,GAAS0nB,cACvDhoB,EAAMG,UAAUynB,cAActnB,GAAS0nB,mBACvC9mB,GACA,YAAEi3C,EAAW,WAAEjB,EAAU,YAAE6O,GAAgB,YAAoB,CAAC,cAAe,aAAc,eAAgB/9B,EAAennB,EAAQP,GACpI6nB,EAAgB,YAAiB7nB,EAASylD,GAChD,MAAO,CACHvnD,QAAS8B,UACTuB,KAAM,QACNmkD,QAAS79B,UACThiB,MAAOtH,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE+M,KAAM1F,GAAsB,QAAZ7F,EAAoB,CAAEqC,OAAQ,QAAW,IAAM,CAAEyK,MAAO,gBAAkB64C,EAA2B/O,EAAY/uB,IAAiB+9B,EAAwB/9B,EAAe+uB,EAAYiB,IAAegO,EAAyBtlD,EAAQmnB,EAAe1nB,EAAS,IAAyB,OAGtX,SAAS4lD,EAAwB/9B,EAAeue,EAAO/mB,EAAS,UACnE,OAAQA,GACJ,IAAK,QACD,MAAO,CAAE1a,MAAO,QACpB,IAAK,MACD,MAAO,CAAEA,MAAO,SAExB,MAAMA,EAAQ,YAAkByhC,EAAyB,QAAlBve,EAA0B,OAAS,OAC1E,OAAOljB,EAAQ,CAAEA,SAAU,GAExB,SAASghD,EAA2Bvf,EAAOpmC,GAC9C,MAAM4E,EAAW,YAAqBwhC,EAAmB,QAAZpmC,EAAoB,OAAS,OAC1E,OAAO4E,EAAW,CAAEA,YAAa,GAE9B,SAASkhD,EAAqBpmD,EAAOM,GACxC,MAAM8nB,EAAepoB,EAAMG,UAAUynB,cAActnB,GAC7C+lD,EAAS,GACf,IAAK,MAAMt+B,KAAc,IACrB,GAAIK,EAAaL,GACb,IAAK,MAAMu+B,KAAcl+B,EAAaL,GAClCs+B,EAAOv/C,KAAKy/C,EAAoBvmD,EAAOM,EAASynB,EAAYK,EAAck+B,IAItF,OAAOD,EAEX,SAASt6B,EAAQ/D,EAAe1nB,GAC5B,MAAM,KAAEwB,GAASkmB,EACjB,OAAI,YAAYlmB,GACL,CACHG,MAAO,YAAQH,EAAM,CAAE0O,KAAM,UAC7B0C,MAAOpR,EAAKoR,OAAS,aAGpB,YAAQpR,GACN,CACHG,MAAO,YAAoB+lB,EAAe1nB,EAAS,CAAEkQ,KAAM,UAC3D0C,MAAO,aAIJ,CACHjR,MAAO,YAAQ+lB,EAAe,CAAExX,KAAM,UACtC0C,MAAOpR,GAAQ,aAIpB,SAAS0kD,EAAmBx+B,EAAe1nB,EAASO,GACvD,MAAM,OAAEoG,EAAM,WAAEu/B,EAAU,YAAEigB,EAAW,YAAE5+B,EAAW,UAAEywB,GAAc,YAAoB,CAAC,SAAU,aAAc,cAAe,cAAe,aAActwB,EAAennB,EAAQP,GAC9KomD,EAAgB,YAAgB1+B,EAAe/gB,EAAQ,SAAUpG,GAAQ6M,OACzEya,EAAgB,YAAiB7nB,EAASunB,GAChD,OAAOhpB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE+M,KAAM,CAC7E6B,OAAQ4qC,EACFA,EACG7/B,QAAQ,cAAeiuC,GACvBjuC,QAAQ,cAAe,YAAQuP,EAAe,CAAExX,KAAM,YACzDk2C,IACQ,QAAZpmD,EAAoB,CAAEqC,OAAQ,QAAW,IAAM,CAAEyK,MAAO,cAAei4C,MAAO,UAAYY,EAA2Bzf,EAAYre,IAAiB+9B,EAAwB/9B,EAAeqe,EAAYigB,IAAeN,EAAyBtlD,EAAQmnB,EAAe1nB,EAAS,IAAyB,MAE7S,SAASimD,EAAoBvmD,EAAOM,EAASynB,EAAYK,EAAck+B,GAC1E,GAAIA,EAAY,CACZ,IAAIngD,EAAQ,KACZ,MAAM,cAAE6hB,GAAkBI,EACpBvnB,EAASb,EAAMa,OAASb,EAAMa,YAASK,EAC7C,GAAI8mB,GAAiBs+B,EAAWx+B,OAAQ,CACpC,MAAM,YAAED,GAAgB,YAAoB,CAAC,eAAgBG,EAAennB,EAAQP,IAEnE,QAAZA,IAAsB,YAAS,CAAC,MAAO,UAAWunB,IACtC,WAAZvnB,IAAyB,YAAS,CAAC,OAAQ,SAAUunB,MACtD1hB,EAAQqgD,EAAmBx+B,EAAe1nB,EAASO,IAG3D,MAAM8lD,EAAuB,YAAa3mD,KAAW,YAAeA,EAAMsa,OACpE4N,EAAOo+B,EAAWp+B,KAClB0+B,EAAU1+B,GAAQA,EAAKpoB,OAAS,EACtC,GAAIqG,GAASygD,EAAS,CAClB,MAAMpiC,EAA0B,QAAZlkB,EAAoB,SAAW,QACnD,OAAOzB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,KAAMwB,EAAMie,WAAW3d,KAAWynB,KAAelmB,KAAM,QAASmkD,QAAS1lD,KAAWynB,KAAiBK,EAAaJ,cAC3L,CACEkD,KAAM,CAAEvsB,KAAMqB,EAAMie,QAAQ3d,EAAU,YACtCwB,KAAMiqB,EAAQ/D,EAAe1nB,IAE/B,IAAOsmD,GAAWD,EAClB,CACEz7B,KAAM,CAAEvsB,KAAMqB,EAAMie,wBAAwB3d,OAE9C,IAAO6F,EAAQ,CAAEA,SAAU,IAAOmgD,EAAWzhC,WAC7C,CACEhX,OAAQ,CACJC,OAAQ,CACJ,CAAC0W,GAAc8hC,EAAWzhC,cAIpC,IAAO+hC,EAAU,CAAE1+B,QAAS,KAG1C,OAAO,KAEX,MAAM2+B,EAAoB,CACtB9rC,OAAQ,CACJogC,MAAO,EACPrb,IAAK,GAEThlB,IAAK,CACDqgC,MAAO,EACPrb,IAAK,IAGN,SAASgnB,EAAmB3O,EAAahwB,GAC5C,OAAO0+B,EAAkB1+B,GAAegwB,GAErC,SAAS4O,EAAwBC,EAAsBnmD,GAC1D,MAAMomD,EAAY,GAClB,IAAK,MAAM3mD,KAAW,IAAgB,CAClC,MAAM4mD,EAAkBF,EAAqB1mD,GAC7C,GAAI4mD,GAAmBA,EAAgBl/B,cAAe,CAClD,MAAM,YAAEmwB,EAAW,YAAE4N,GAAgB,YAAoB,CAAC,cAAe,eAAgBmB,EAAgBl/B,cAAennB,EAAQP,GAC1H6nB,EAAgB,YAAiB7nB,EAASylD,GAC1C12C,EAAOy3C,EAAmB3O,EAAahwB,QAChCjnB,IAATmO,IACA43C,EAAU9+B,GAAiB9Y,IAIvC,OAAO,YAAK43C,GAAWnnD,OAAS,EAAImnD,OAAY/lD,EAE7C,SAASilD,EAAyBtlD,EAAQmnB,EAAe1nB,EAAS2gC,EAAYkmB,GACjF,MAAMjmB,EAAQ,GACd,IAAK,MAAMpqB,KAAQmqB,EAAY,CAC3B,IAAKkmB,EAAcrwC,GACf,SAEJ,MAAMzV,EAAQ,YAAkByV,EAAMkR,EAAennB,EAAQP,QAC/CY,IAAVG,IACA6/B,EAAMimB,EAAcrwC,IAASzV,GAGrC,OAAO6/B,I,gCCvKX,kgBAQWkmB,EARX,+CASA,SAAWA,GAEPA,EAAUC,OAAS,SACnBD,EAAUE,IAAM,MAChBF,EAAUG,IAAM,MAChBH,EAAUI,KAAO,OACjBJ,EAAUK,OAAS,SAEnBL,EAAU9kD,KAAO,OACjB8kD,EAAU7kD,IAAM,MAEhB6kD,EAAUM,SAAW,WACrBN,EAAUO,SAAW,WACrBP,EAAUQ,UAAY,YACtBR,EAAUS,YAAc,cAExBT,EAAUU,QAAU,UACpBV,EAAUtkD,MAAQ,QAClBskD,EAAU3jD,KAAO,OAlBrB,CAmBG2jD,IAAcA,EAAY,KAK7B,MAAMW,EAAuB,CACzBC,OAAQ,UACRC,IAAK,UACLliC,IAAK,UACLmiC,KAAM,UACNC,OAAQ,UACR10C,KAAM,OACNusB,IAAK,OACLooB,QAAS,UACT,cAAe,cACfpsC,MAAO,mBACP3M,KAAM,mBACNg5C,SAAU,eACVC,SAAU,eACVC,UAAW,gBAEFC,EAAc,YAAKT,GAIzB,SAASU,EAAgBC,EAAYC,GACxC,MAAMC,EAAiBb,EAAqBW,GACtCG,EAAiBd,EAAqBY,GAC5C,OAAQC,IAAmBC,GACH,qBAAnBD,GAA4D,SAAnBC,GACtB,qBAAnBA,GAA4D,SAAnBD,EAKlD,MAAME,EAAyB,CAE3Bd,OAAQ,EACRC,IAAK,EACLliC,IAAK,EACLmiC,KAAM,EACNC,OAAQ,EAER10C,KAAM,EACNusB,IAAK,EAELhkB,MAAO,GACP3M,KAAM,GAEN+4C,QAAS,EACT,cAAe,EACfC,SAAU,EACVC,SAAU,EACVC,UAAW,GAKR,SAASQ,EAAoBznD,GAChC,OAAOwnD,EAAuBxnD,GAE3B,MAAM0nD,EAAkC,CAAC,SAAU,MAAO,MAAO,OAAQ,SAAU,OAAQ,OAC5FC,EAAiC,aAAMD,GAGvCE,EAA+B,aADQ,CAAC,WAAY,WAAY,cAEzDC,EAA2BH,EAAgCj8C,OAAO,CAC3E,WACA,WACA,cAEEq8C,EAA0B,aAAMD,GAEhCE,EAAwB,aADQ,CAAC,UAAW,cAAe,QAAS,SAGnE,SAASC,EAAkBznD,GAC9B,OAAOA,KAAQwnD,EAEZ,SAASE,EAAoB1nD,GAChC,OAAOA,KAAQunD,EAEZ,SAASI,EAAyB3nD,GACrC,OAAOA,KAAQonD,EAEZ,SAASQ,EAAuB5nD,GACnC,OAAOA,KAAQqnD,EAEZ,MAAMQ,EAAqB,CAC9B3mD,aAAc,GACdM,oBAAqB,GACrBC,qBAAsB,EACtB0hB,YAAa,EACbE,YAAa,EACbS,YAAa,GACbY,WAAY,GACZC,WAAY,GAEZrB,QAAS,EACTF,eAAgB,EAChBS,eAAgB,EAChBU,cAAe,EACfC,cAAe,GAEZ,SAASsjC,EAAiB9iC,GAC7B,OAAOA,KAAYA,EAAa,KAE7B,SAAS+iC,EAAkB3lD,GAC9B,OAAOA,GAAUA,EAAkB,UAEvC,MAAM4lD,EAAuB,CACzBhoD,KAAM,EACNoC,OAAQ,EACRgB,MAAO,EACP+d,MAAO,EACP6D,OAAQ,EACRzkB,KAAM,EAENwB,QAAS,EACTkmD,MAAO,EAEPC,MAAO,EACPvnD,KAAM,EAENme,KAAM,EACNqpC,SAAU,EACVC,SAAU,EACV5nD,YAAa,EACb0B,KAAM,EAENf,QAAS,EACTO,aAAc,EACdI,aAAc,IAGZ,KAAE9B,EAAI,OAAEoC,EAAM,MAAE+e,EAAK,OAAE6D,IADG,YAAKgjC,GACGA,GAAsBK,EAAkD,YAAOL,EAAsB,CAAC,OAAQ,SAAU,QAAS,WAC5JM,EAA8C,YAAKD,IA6HhE,WACI,MAAMvqB,EAAQ,GACd,IAAK,MAAMr/B,KAAW,IAClB,IAAK,MAAM8pD,KAAgB,YAAK,KAC5B,IAAK,MAAM9oD,KAAaknD,EAAa,CACjC,MAAM1sC,EAAMuuC,EAA0B/pD,EAAS8pD,GAC3CE,EAAwBhqD,EAASgB,IAAcipD,EAAyBjpD,EAAW8oD,KACnFzqB,EAAM7jB,GAAO6jB,EAAM7jB,IAAQ,GAC3B6jB,EAAM7jB,GAAKhV,KAAKxF,KApIJkpD,GACzB,SAASC,EAAyBnpD,EAAWgW,GAChD,OAAQA,GACJ,IAAK,OACL,IAAK,SACL,IAAK,UACL,IAAK,QACD,OAAO,EACX,IAAK,SACL,IAAK,cACD,OAAQ,YAAS,CAAC,QAAS,OAAQ,YAAahW,GACpD,IAAK,OACD,OAAQ,YAAS,CAAC,QAAS,OAAQ,WAAY,WAAYA,GAC/D,IAAK,QACD,OAAOkoD,EAAyBloD,IAA4B,SAAdA,GAAsC,UAAdA,EAC1E,IAAK,UACD,OAAOkoD,EAAyBloD,IAAc,YAAS,CAAC,QAAS,QAASA,GAC9E,IAAK,eACL,IAAK,QACD,OAAO,YAAS,CAAC,QAAS,QAASA,GACvC,IAAK,eACD,MAAqB,SAAdA,EACX,IAAK,QACD,OAAOkoD,EAAyBloD,GACpC,IAAK,OACD,OAAOkoD,EAAyBloD,IAA4B,aAAdA,GAA0C,cAAdA,EAC9E,IAAK,WACD,MAAqB,QAAdA,EACX,IAAK,OACD,MAAqB,QAAdA,EACX,IAAK,WACD,MAAqB,WAAdA,EACX,IAAK,OACD,OAAQioD,EAAoBjoD,KACvB,YAAS,CACN,MACA,OACA,MACA,YACA,YACDA,IAMZ,SAASopD,EAAoCpqD,EAASgX,GACzD,OAAQA,GACJ,IAAK,cACL,IAAK,SACD,OAAK,YAAehX,QAGpB,EAFW,IAAYuW,mCAAmCvW,GAG9D,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAK,QACL,IAAK,OACL,IAAK,WACL,IAAK,WACL,IAAK,OACL,IAAK,UACL,IAAK,eACL,IAAK,eACL,IAAK,UACL,IAAK,QACL,IAAK,QACL,IAAK,OACD,QAGL,SAASiqD,EAAyBI,EAAeP,GACpD,OAAI,YAAS,CAAC,IAAc,KAAeA,QACdlpD,IAAlBypD,GAA+BrB,EAAkBqB,GAEnDP,IAAiB,IACf,YAAS,CAAChD,EAAU9kD,KAAM8kD,EAAU7kD,SAAKrB,GAAYypD,GAEvDP,IAAiB,KACf,YAAS,CACZhD,EAAUE,IACVF,EAAUG,IACVH,EAAUI,KACVJ,EAAUK,OACVL,EAAUM,SACVN,EAAUO,SACVP,EAAUQ,UACVR,EAAUC,YACVnmD,GACDypD,GAIJ,SAASL,EAAwBhqD,EAASgB,GAC7C,OAAQhB,GACJ,KAAK,IACL,KAAK,IACD,OAAOkpD,EAAyBloD,IAAc,YAAS,CAAC,OAAQ,SAAUA,GAC9E,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAGD,OAAQkoD,EAAyBloD,IAC7BmoD,EAAuBnoD,IACvB,YAAS,CAAC,OAAQ,SAAUA,GACpC,KAAK,IACL,KAAK,IACL,KAAK,IACD,MAAqB,SAAdA,EACX,KAAK,IACD,MAAqB,YAAdA,EAGf,OAAO,EAqBX,SAAS+oD,EAA0B/pD,EAAS8pD,GACxC,OAAO9pD,EAAU,IAAM8pD,I,gCChT3B,4cAyBO,MAAMQ,EACT,cACI7rD,KAAK8rD,QAAU,GAEnB,OAAOC,EAASrd,GACZ1uC,KAAK8rD,QAAQC,GAAWrd,EAE5B,IAAIjvC,GACA,YAA8B0C,IAAvBnC,KAAK8rD,QAAQrsD,GAExB,IAAIA,GAGA,KAAOO,KAAK8rD,QAAQrsD,IAASA,IAASO,KAAK8rD,QAAQrsD,IAC/CA,EAAOO,KAAK8rD,QAAQrsD,GAExB,OAAOA,GAYR,SAASusD,EAAY/qD,GACxB,OAAOA,GAAwB,SAAfA,EAAM6B,KAEnB,SAASmpD,EAAahrD,GACzB,OAAOA,GAAwB,UAAfA,EAAM6B,KAEnB,SAASopD,EAAcjrD,GAC1B,OAAOA,GAAwB,WAAfA,EAAM6B,KAEnB,SAASqpD,EAAclrD,GAC1B,OAAOA,GAAwB,WAAfA,EAAM6B,KAEnB,SAASspD,EAAanrD,GACzB,OAAOA,GAAwB,UAAfA,EAAM6B,KAEnB,MAAMupD,EACT,YAAY5+C,EAAM3K,EAAMvC,EAAQqe,EAAiB9c,EAAQ+c,EAAUC,EAAS8G,GACxE5lB,KAAK8C,KAAOA,EACZ9C,KAAKO,OAASA,EACdP,KAAK8B,OAASA,EACd9B,KAAK6e,SAAWA,EAChB7e,KAAK4lB,KAAOA,EACZ5lB,KAAKM,SAAW,GAIhBN,KAAKssD,iBAAoBloD,IAGjBA,EAAK+nB,MAAQ/nB,EAAK+nB,KAAKvsB,OACvBwE,EAAK+nB,KAAKvsB,KAAOI,KAAKsiB,iBAAiBle,EAAK+nB,KAAKvsB,OAGjDwE,EAAK+nB,MAAQ/nB,EAAK+nB,KAAK5Q,OAASnX,EAAK+nB,KAAK5Q,MAAM3b,OAChDwE,EAAK+nB,KAAK5Q,MAAM3b,KAAOI,KAAKsiB,iBAAiBle,EAAK+nB,KAAK5Q,MAAM3b,OAE1DwE,GAEXpE,KAAKO,OAASA,EACdP,KAAK8B,OAASA,EACd9B,KAAK6e,SAAWA,EAEhB7e,KAAKP,KAAOgO,EAAKhO,MAAQmf,EACzB5e,KAAKoH,MAAQ,YAASqG,EAAKrG,OAAS,CAAE0F,KAAMW,EAAKrG,OAAUqG,EAAKrG,MAEhEpH,KAAKusD,aAAehsD,EAASA,EAAOgsD,aAAe,IAAIV,EACvD7rD,KAAKwsD,kBAAoBjsD,EAASA,EAAOisD,kBAAoB,IAAIX,EACjE7rD,KAAKysD,cAAgBlsD,EAASA,EAAOksD,cAAgB,IAAIZ,EACzD7rD,KAAKJ,KAAO6N,EAAK7N,KACjBI,KAAK6O,YAAcpB,EAAKoB,YACxB7O,KAAKuzC,WAAa,YAAmB9lC,EAAKiC,WAAa,IACvD1P,KAAKqc,OAAS,YAAW5O,IAAS,YAAYA,GAAQ,GAAK,YAAyBA,EAAM3K,EAAMhB,GAChG9B,KAAKoB,UAAY,CACbxB,KAAM,CACFwiB,QAAS7hB,EAASA,EAAOa,UAAUxB,KAAKwiB,QAAU,GAClDysB,YAAatuC,EAASA,EAAOa,UAAUxB,KAAKivC,YAAc,GAC1DqE,oBAAqB3yC,EAASA,EAAOa,UAAUxB,KAAKszC,oBAAsB,GAE1EzJ,UAAW,YAAYh8B,IAAUlN,GAAUA,EAAOa,UAAUxB,KAAK6pC,gBAA2BtnC,IAAdsL,EAAK7N,MAEvFwP,WAAY,IAAI,IAChByZ,cAAe,CAAE9M,IAAK,GAAIC,OAAQ,GAAIT,MAAO,IAC7CnX,KAAM,KACN0a,QAAShf,OAAOC,OAAO,CAAE8C,MAAO,GAAIsF,KAAM,GAAIwK,OAAQ,IAAOmM,EAAU,YAAUA,GAAW,IAC5F7C,UAAW,KACX5a,OAAQ,KACRwV,WAAY,KACZsS,KAAM,GACNgB,QAAS,IAGjB,YACI,OAAOnqB,KAAKohB,iBAAiB,SAEjC,aACI,OAAOphB,KAAKohB,iBAAiB,UAEjC,QACIphB,KAAK0sD,aACL1sD,KAAK80C,kBACL90C,KAAK2sD,iCACL3sD,KAAK4pB,kBACL5pB,KAAKuiB,kBACLviB,KAAK2pB,YACL3pB,KAAK4sD,sBACL5sD,KAAK6sD,eACL7sD,KAAK6pB,iBAET,aACI,YAAY7pB,MAEhB,kBACI,YAAgBA,MAOpB,iCACkC,UAA1BA,KAAKkf,QAAQ,UACblf,KAAK6jC,aAAa7jC,KAAKkf,QAAQ,SAAU,SAEd,WAA3Blf,KAAKkf,QAAQ,WACblf,KAAK6jC,aAAa7jC,KAAKkf,QAAQ,UAAW,UAGlD,eACI,YAAYlf,MAEhB,qBACI,GAAkB,SAAdA,KAAK8C,MAAiC,UAAd9C,KAAK8C,KAC7B,OAAQ9C,KAAK4lB,MAAQ5lB,KAAK4lB,KAAKvX,OAAU,OAIjD,uBAAuBuX,GAEnB,MAAQvX,MAAO6N,GAAM0J,EAAMknC,EAAW,YAAOlnC,EAAM,CAAC,UAC9C/E,EAAI,GACV,IAAK,MAAM3f,KAAY4rD,EACnB,GAAI,YAAeA,EAAU5rD,GAAW,CACpC,MAAMoB,EAAQwqD,EAAS5rD,QACTiB,IAAVG,IACAue,EAAE3f,GAAY,CAAEoB,UAI5B,OAAOue,EAEX,yBAAyBksC,GACrB,IAAIhnD,OAAc5D,EAIlB,OAHInC,KAAK4lB,OACL7f,EAAc/F,KAAKgtD,uBAAuBhtD,KAAK4lB,OAE9CmnC,GAGiB,SAAd/sD,KAAK8C,MAAiC,UAAd9C,KAAK8C,KAI9BiD,EAHQjG,OAAOC,OAAO,CAAEiG,MAAOhG,KAAKohB,iBAAiB,SAAUnb,OAAQjG,KAAKohB,iBAAiB,WAAcrb,GAAe,IAKrI,iBACI,IAAK/F,KAAKqc,OACN,OAEJ,MAAMP,EAAK9b,KAAKqc,QAAQ,QAAEG,GAAYV,EAAIO,EAAS,YAAOP,EAAI,CAAC,aACzD,UAAE1a,EAAS,OAAEU,GAAW9B,KACxBkoD,EAAY,YAAwB9mD,EAAUynB,cAAe/mB,GACnE,OAAOhC,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAEkE,QAASuY,GAAWxc,KAAKitD,yBAA0B5wC,GAAU6rC,EAAY,CAAEA,aAAc,IAEhJ,wBACI,MAAO,GAEX,sBACI,MAAM,cAAEr/B,GAAkB7oB,KAAKoB,UAC/B,IAAI8rD,EAAc,GAClB,IAAK,MAAM3rD,KAAW,IACdsnB,EAActnB,GAAS6F,OACvB8lD,EAAYnlD,KAAK,YAAmB/H,KAAMuB,IAGlD,IAAK,MAAMA,KAAW,IAClB2rD,EAAcA,EAAYl/C,OAAO,YAAqBhO,KAAMuB,IAEhE,OAAO2rD,EAEX,eACI,OAAO,YAAaltD,KAAKoB,UAAU+nB,KAAMnpB,KAAK8B,QAElD,kBACI,OAAO,YAAgB9B,MAE3B,sBACI,OAAO,YAAoBA,MAE/B,gBACI,MAAM8b,EAAK9b,KAAKoH,OAAS,IAAI,SAAEZ,GAAasV,EAAIqxC,EAAkB,YAAOrxC,EAAI,CAAC,aACxE1U,EAAQtH,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,YAAmBC,KAAK8B,OAAOsF,OAAOgmD,SAAUD,GAAmB3mD,EAAW,CAAEsI,OAAQ,CAAEC,OAAQvI,IAAe,IAC7K,GAAIY,EAAM0F,KAaN,OAZI,YAAS,CAAC,OAAQ,SAAU9M,KAAK8C,MAE7B,YAAS,CAAC,cAAUX,GAAYiF,EAAMwZ,UACtCxZ,EAAMk/C,MAAQl/C,EAAMk/C,OAAS,SAOjCl/C,EAAMwZ,OAASxZ,EAAMwZ,QAAU,QAE5B,YAAKxZ,GAAOrG,OAAS,EAAIqG,OAAQjF,EAOhD,cAAcwd,EAAU,IACpB,MAAMyM,EAAQ,IACdzM,EAAUA,EAAQ3R,OAAOhO,KAAK+pB,oBAClBhpB,OAAS,IACjBqrB,EAAMzM,QAAUA,GAEpB,MAAMtD,EAASrc,KAAKqtD,iBAChBhxC,IACA+P,EAAM/P,OAASA,GAEnB+P,EAAMC,MAAQ,GAAGre,OAAOhO,KAAKstD,sBAAuBttD,KAAKkqB,iBAGzD,MAAM7oB,GAAUrB,KAAKO,QAAU0rD,EAAajsD,KAAKO,QAAU,YAAeP,MAAQ,GAC9EqB,EAAON,OAAS,IAChBqrB,EAAM/qB,OAASA,GAEnB,MAAM8nB,EAAOnpB,KAAKu9C,eACdp0B,EAAKpoB,OAAS,IACdqrB,EAAMjD,KAAOA,GAEjB,MAAMgB,EAAUnqB,KAAKoqB,kBAIrB,OAHID,EAAQppB,OAAS,IACjBqrB,EAAMjC,QAAUA,GAEbiC,EAEX,gCAAgC7qB,GAC5B,IAAK,MAAMlB,KAASL,KAAKM,SACrB,GAAI0rD,EAAY3rD,IACZ,GAAIA,EAAMkG,gBAAgBhF,GACtB,OAAO,OAIX,GAAIlB,EAAMktD,gCAAgChsD,GACtC,OAAO,EAInB,OAAO,EAEX,QAAQuL,GACJ,OAAO,aAAS9M,KAAKP,KAAOO,KAAKP,KAAO,IAAM,IAAMqN,GAOxD,gBAAgBrN,GACZ,MAAM+tD,EAAWxtD,KAAKkf,QAAQzf,GAGxBguD,EAAYztD,KAAKoB,UAAUxB,KAAKszC,oBAEtC,OADAua,EAAUD,IAAaC,EAAUD,IAAa,GAAK,EAC5CA,EAEX,iBAAiBl+C,GACb,GAAI28C,EAAajsD,KAAKO,QAAS,CAC3B,MAAMgB,EAAU,YAAwB+N,GAClCsU,EAAiB5jB,KAAKoB,UAAUC,OAAOE,GAC7C,GAAIqiB,IAAmBA,EAAe3jB,OAAQ,CAE1C,MAAM6C,EAAO8gB,EAAe/iB,IAAI,QAC1BojB,EAAQL,EAAe/iB,IAAI,SACjC,GAAI,YAAkBiC,IAAS,YAAcmhB,GAAQ,CACjD,MAAMxC,EAAYmC,EAAe/iB,IAAI,QAC/BqE,EAAS,YAAelF,KAAMuB,GAC9B2B,EAAQ,YAAmBgC,GACjC,GAAIhC,EAAO,CACP,MAAM89B,EAAW,YAAQ,CAAEr6B,UAAW,WAAYzD,SAAS,CAAEuO,KAAM,UACnE,MAAO,CACH9C,OAAQ,YAAS8S,EAAWmC,EAAgBod,IAKhD,OADA,IAAS,8DACF,OAKvB,MAAO,CACHryB,OAAQ3O,KAAKysD,cAAc5rD,IAAIb,KAAKkf,QAAQ5P,KAMpD,iBAAiB7P,GACb,MAAMW,EAAOJ,KAAKoB,UAAUxB,KAAKivC,YAAYpvC,GAC7C,OAAKW,EAKEA,EAAKuuC,YAFDlvC,EAIf,cAAciuD,GACV,OAAO1tD,KAAKysD,cAAc5rD,IAAI6sD,GAElC,aAAa3B,EAASrd,GAClB1uC,KAAKysD,cAAc3f,OAAOif,EAASrd,GAEvC,YAAYqd,EAASrd,GACjB1uC,KAAKusD,aAAazf,OAAOif,EAASrd,GAEtC,iBAAiBqd,EAASrd,GACtB1uC,KAAKwsD,kBAAkB1f,OAAOif,EAASrd,GAK3C,UAAUif,EAAmBhgD,GACzB,OAAIA,EAIO3N,KAAKkf,QAAQyuC,GAMvB,YAAUA,IAAsB,YAAeA,IAAsB3tD,KAAKoB,UAAUC,OAAOssD,IAExF3tD,KAAKusD,aAAahtC,IAAIvf,KAAKkf,QAAQyuC,IAC5B3tD,KAAKusD,aAAa1rD,IAAIb,KAAKkf,QAAQyuC,SAL9C,EAYJ,eAAehgD,GACX,OAAIA,EAIO3N,KAAKkf,QAAQ,cAEnBlf,KAAKoB,UAAUyV,aAAe7W,KAAKoB,UAAUyV,WAAW5W,QACzDD,KAAKwsD,kBAAkBjtC,IAAIvf,KAAKkf,QAAQ,eACjClf,KAAKwsD,kBAAkB3rD,IAAIb,KAAKkf,QAAQ,oBAFnD,EASJ,kBAAkB3d,GAEd,IAAKvB,KAAKoB,UAAUC,OAChB,MAAM,IAAIsQ,MAAM,mIAEpB,MAAMi8C,EAAsB5tD,KAAKoB,UAAUC,OAAOE,GAClD,OAAIqsD,IAAwBA,EAAoB3tD,OACrC2tD,EAEJ5tD,KAAKO,OAASP,KAAKO,OAAOqB,kBAAkBL,QAAWY,EAKlE,sBAAsB0rD,EAAcC,GAChC,IAAIC,EAAM/tD,KAAKoB,UAAU6a,UAAU4xC,GAInC,IAHKE,GAAO/tD,KAAKO,SACbwtD,EAAM/tD,KAAKO,OAAOw5B,sBAAsB8zB,EAAcC,KAErDC,EACD,MAAM,IAAIp8C,MAAM,IAAYiE,kBAAkBk4C,IAElD,OAAOC,GAIR,MAAMC,UAAuB3B,EAEhC,QAAQ9qD,EAAS+L,EAAM,IACnB,MAAMzL,EAAW7B,KAAK6B,SAASN,GAC/B,GAAKM,EAGL,OAAO,YAAQA,EAAUyL,GAE7B,eAAe1D,EAAGI,EAAMskB,GACpB,OAAO,YAAOtuB,KAAKiuD,aAAc,CAACC,EAAKC,EAAInhD,KACvC,MAAMnL,EAAW,YAAYssD,GAC7B,OAAItsD,EACO+H,EAAEskD,EAAKrsD,EAAUmL,GAErBkhD,GACRlkD,EAAMskB,GAEb,gBAAgB1kB,EAAG0kB,GACf,YAAQtuB,KAAKiuD,aAAc,CAACE,EAAInhD,KAC5B,MAAMnL,EAAW,YAAYssD,GACzBtsD,GACA+H,EAAE/H,EAAUmL,IAEjBshB,M,+BCvcX,mpCAMO,MAAM8/B,EAAY,IACZC,EAAY,IASlB,SAASC,EAAKC,EAAKpsB,GACtB,MAAMsM,EAAO,GACb,IAAK,MAAM12B,KAAQoqB,EAEX,YAAeosB,EAAKx2C,KACpB02B,EAAK12B,GAAQw2C,EAAIx2C,IAGzB,OAAO02B,EAMJ,SAAS+f,EAAKD,EAAKpsB,GACtB,MAAMsM,EAAO3uC,OAAOC,OAAO,GAAIwuD,GAC/B,IAAK,MAAMx2C,KAAQoqB,SACRsM,EAAK12B,GAEhB,OAAO02B,EAKX9L,IAAI8rB,UAAkB,OAAI,WACtB,aAAc,IAAIzuD,MAAMkK,IAAIqC,GAAK,IAAgBA,IAAIlE,KAAK,SAKvD,MAAMwM,EAAY,IAIlB,SAAS64B,EAAK7hC,GACjB,GAAI,YAASA,GACT,OAAOA,EAEX,MAAM6mB,EAAM,YAAS7mB,GAAKA,EAAI,IAAgBA,GAE9C,GAAI6mB,EAAI3xB,OAAS,IACb,OAAO2xB,EAGX,IAAI/M,EAAI,EACR,IAAK,IAAI1G,EAAI,EAAGA,EAAIyT,EAAI3xB,OAAQke,IAAK,CAEjC0G,GAAKA,GAAK,GAAKA,EADF+M,EAAIg8B,WAAWzvC,GAE5B0G,GAAQA,EAEZ,OAAOA,EAEJ,SAASgpC,EAAcpiD,GAC1B,OAAa,IAANA,GAAqB,OAANA,EAEnB,SAASqiD,EAASC,EAAOC,GAC5B,OAAOD,EAAMhuB,QAAQiuB,IAAS,EAY3B,SAASnJ,EAAKp8C,EAAKK,GACtB,IAAIqV,EAAI,EACR,IAAK,MAAO2uB,EAAG/hC,KAAMtC,EAAIwlD,UACrB,GAAInlD,EAAEiC,EAAG+hC,EAAG3uB,KACR,OAAO,EAGf,OAAO,EAKJ,SAASwiC,EAAMl4C,EAAKK,GACvB,IAAIqV,EAAI,EACR,IAAK,MAAO2uB,EAAG/hC,KAAMtC,EAAIwlD,UACrB,IAAKnlD,EAAEiC,EAAG+hC,EAAG3uB,KACT,OAAO,EAGf,OAAO,EAYJ,SAAS+vC,EAAUC,KAASC,GAC/B,IAAK,MAAMhuC,KAAKguC,EACZD,EAAOE,EAAWF,EAAM/tC,GAE5B,OAAO+tC,EAGX,SAASE,EAAWF,EAAMC,GACtB,GAAmB,iBAARA,GAA4B,OAARA,EAC3B,OAAOD,EAEX,IAAK,MAAM94C,KAAK+4C,EACP,YAAeA,EAAK/4C,SAGVhU,IAAX+sD,EAAI/4C,KAGc,iBAAX+4C,EAAI/4C,IAAmB,YAAQ+4C,EAAI/4C,KAAkB,OAAX+4C,EAAI/4C,GACrD84C,EAAK94C,GAAK+4C,EAAI/4C,GAEU,iBAAZ84C,EAAK94C,IAA+B,OAAZ84C,EAAK94C,GACzC84C,EAAK94C,GAAK64C,EAAU,YAAQE,EAAI/4C,GAAGi5C,aAAe,GAAK,GAAIF,EAAI/4C,IAG/D64C,EAAUC,EAAK94C,GAAI+4C,EAAI/4C,KAG/B,OAAO84C,EAEJ,SAASI,EAAO7jD,EAAQ5B,GAC3B,MAAM0lD,EAAU,GACVC,EAAI,GACV,IAAI96C,EACJ,IAAK,MAAMoyB,KAAOr7B,GACdiJ,EAAI7K,EAAEi9B,MACG0oB,IAGTA,EAAE96C,GAAK,EACP66C,EAAQvnD,KAAK8+B,IAEjB,OAAOyoB,EAkBJ,SAASE,EAAS3jD,EAAG4jD,GACxB,GAAI5jD,EAAElM,OAAS8vD,EAAE9vD,KACb,OAAO,EAEX,IAAK,MAAMkhB,KAAKhV,EACZ,IAAK4jD,EAAElwC,IAAIsB,GACP,OAAO,EAGf,OAAO,EAEJ,SAAS6uC,EAAgB7jD,EAAG4jD,GAC/B,IAAK,MAAM1yC,KAAOlR,EACd,GAAI4jD,EAAElwC,IAAIxC,GACN,OAAO,EAGf,OAAO,EAEJ,SAAS4yC,EAAgB9jD,GAC5B,MAAM+jD,EAAW,IAAIjtB,IACrB,IAAK,MAAMp2B,KAAKV,EAAG,CACf,MAEMgkD,EAFa,YAAgBtjD,GAEKrC,IAAI,CAACsC,EAAGyS,IAAa,IAANA,EAAUzS,MAAQA,MAChDqjD,EAAqB3lD,IAAI,CAACgS,EAAG+C,IAAM4wC,EAAqBrpB,MAAM,EAAGvnB,EAAI,GAAG5W,KAAK,KACrF/G,QAAQkL,GAAKojD,EAAS16C,IAAI1I,IAE/C,OAAOojD,EAMJ,SAASE,EAAkBjkD,EAAG4jD,GACjC,YAAUttD,IAAN0J,QAAyB1J,IAANstD,GAGhBC,EAAgBC,EAAgB9jD,GAAI8jD,EAAgBF,IAmBxD,MAAMM,EAAOjwD,OAAOiwD,KACpB,SAAS7nB,EAAK37B,GACjB,MAAMyjD,EAAQ,GACd,IAAK,MAAMpiB,KAAKrhC,EACR,YAAeA,EAAGqhC,IAClBoiB,EAAMjoD,KAAKwE,EAAEqhC,IAGrB,OAAOoiB,EAEJ,SAASjB,EAAQxiD,GACpB,MAAM0jD,EAAW,GACjB,IAAK,MAAMriB,KAAKrhC,EACR,YAAeA,EAAGqhC,IAClBqiB,EAASloD,KAAK,CACVgV,IAAK6wB,EACLtrC,MAAOiK,EAAEqhC,KAIrB,OAAOqiB,EAEJ,SAASC,EAAUT,GACtB,OAAa,IAANA,IAAoB,IAANA,EAKlB,SAASU,EAAQjvC,GAEpB,MAAMkvC,EAAgBlvC,EAAExH,QAAQ,MAAO,KAEvC,OAAQwH,EAAEmvC,MAAM,QAAU,IAAM,IAAMD,EAEnC,SAASE,EAAY5oD,EAAI6oD,GAC5B,OAAI,YAAa7oD,GACN,KAAO4oD,EAAY5oD,EAAGi3C,IAAK4R,GAAM,IAEnC,YAAa7oD,GACX,IAAMA,EAAG+2C,IAAIv0C,IAAKu0C,GAAQ6R,EAAY7R,EAAK8R,IAAKloD,KAAK,UAAY,IAEnE,YAAYX,GACV,IAAMA,EAAG62C,GAAGr0C,IAAKq0C,GAAO+R,EAAY/R,EAAIgS,IAAKloD,KAAK,UAAY,IAG9DkoD,EAAG7oD,GAMX,SAAS8oD,EAAqBjC,EAAKkC,GACtC,GAA4B,IAAxBA,EAAa1vD,OACb,OAAO,EAEX,MAAMgX,EAAO04C,EAAajjB,QAI1B,OAHIgjB,EAAqBjC,EAAIx2C,GAAO04C,WACzBlC,EAAIx2C,GAEa,IAArBg4C,EAAKxB,GAAKxtD,OAEd,SAAS2vD,EAAUxvC,GACtB,OAAOA,EAAEhN,OAAO,GAAGnC,cAAgBmP,EAAEjN,OAAO,GAOzC,SAAS08C,EAAoBC,EAAMC,EAAQ,SAC9C,MAAMC,EAAS,YAAgBF,GACzBhB,EAAW,GACjB,IAAK,IAAI3wC,EAAI,EAAGA,GAAK6xC,EAAO/vD,OAAQke,IAAK,CACrC,MAAMhO,MAAa6/C,EACdtqB,MAAM,EAAGvnB,GACT/U,IAAI,KACJ7B,KAAK,SACVunD,EAAS7nD,QAAQ8oD,IAAQ5/C,KAE7B,OAAO2+C,EAASvnD,KAAK,QAQlB,SAAS0oD,EAAoBH,EAAMC,EAAQ,SAC9C,SAAUA,KAAS,YAAY,YAAgBD,GAAMvoD,KAAK,SAMvD,SAAS2oD,EAAmBJ,GAC/B,SAAU,YAAgBA,GACrB1mD,IAAIiM,GAAKA,EAAEuD,QAAQ,IAAK,QACxBrR,KAAK,SAMP,SAAS4oD,EAAoBL,GAChC,SAAU,YAAgBA,GAAMvoD,KAAK,OAKlC,SAAS6oD,EAAgBN,GAC5B,OAAKA,EAGE,YAAgBA,GAAM7vD,OAFlB,EAOR,SAASowD,KAAmB/4B,GAC/B,IAAK,MAAMg5B,KAAOh5B,EACd,QAAYj2B,IAARivD,EACA,OAAOA,EAMnB,IAAIC,EAAY,GAMT,SAASC,EAASrgD,GACrB,MAAMsgD,IAAOF,EACb,OAAOpgD,EAASO,OAAOP,GAAUsgD,EAAKA,EAQnC,SAASC,EAAc/xD,GAC1B,OAEG,SAAyBA,GAC5B,OAA8B,IAAvBA,EAAKohC,QAAQ,MAHb4wB,CAAgBhyD,GAAQA,OAAYA,IAQxC,SAASiyD,EAAe/pB,GAC3B,OAASA,EAAQ,IAAO,KAAO,M,iCCjY5B,SAASgqB,EAAalkD,GACzB,YAA0BtL,IAAnBsL,EAAa,OADxB,mC,iCCAO,SAASmkD,EAAYnkD,GACxB,YAAyBtL,IAAlBsL,EAAY,MADvB,mC,gCCAA,+EAIO,MAAMokD,EACT,YAAYtxD,EAAQuxD,GAChB9xD,KAAK8xD,UAAYA,EACjB9xD,KAAK+xD,UAAY,GACjB/xD,KAAKgyD,QAAU,KACXzxD,IACAP,KAAKO,OAASA,GAMtB,QACI,MAAM,IAAIoR,MAAM,qBAEpB,aACI,OAAO3R,KAAKgyD,QAKhB,WAAWzxD,GACPP,KAAKgyD,QAAUzxD,EACXA,GACAA,EAAO0xD,SAASjyD,MAGxB,eACI,OAAOA,KAAK+xD,UAEhB,cACI,OAAO/xD,KAAK+xD,UAAUhxD,OAE1B,SAASV,EAAO6xD,GAERlyD,KAAK+xD,UAAUlxB,QAAQxgC,IAAU,EACjCG,QAAQwU,KAAK,6CAGL7S,IAAR+vD,EACAlyD,KAAK+xD,UAAUI,OAAOD,EAAK,EAAG7xD,GAG9BL,KAAK+xD,UAAUhqD,KAAK1H,GAG5B,YAAY+xD,GACR,MAAMF,EAAMlyD,KAAK+xD,UAAUlxB,QAAQuxB,GAEnC,OADApyD,KAAK+xD,UAAUI,OAAOD,EAAK,GACpBA,EAKX,SACI,IAAIA,EAAMlyD,KAAKgyD,QAAQluB,YAAY9jC,MACnC,IAAK,MAAMK,KAASL,KAAK+xD,UAErB1xD,EAAM2xD,QAAUhyD,KAAKgyD,QACrBhyD,KAAKgyD,QAAQC,SAAS5xD,EAAO6xD,KAMrC,iBAAiBtuB,GACb,MAAMrjC,EAASqjC,EAAMrjC,OACrBA,EAAOujC,YAAY9jC,MACnBA,KAAKO,OAASA,EACdqjC,EAAMrjC,OAASP,KAEnB,iBACI,MAAMO,EAASP,KAAKgyD,QACdzpC,EAAYhoB,EAAOA,OAEzB,IAAK,MAAMF,KAASL,KAAK+xD,UACrB1xD,EAAME,OAASA,EAGnBP,KAAK+xD,UAAY,GACjBxxD,EAAOujC,YAAY9jC,MACnBO,EAAOA,OAAOujC,YAAYvjC,GAE1BP,KAAKO,OAASgoB,EACdhoB,EAAOA,OAASP,MAGjB,MAAMqyD,UAAmBR,EAM5B,YAAYtxD,EAAQ8hB,EAAQvf,EAAM2qD,GAC9B5tD,MAAMU,EAAQ8hB,GACdriB,KAAK8C,KAAOA,EACZ9C,KAAKytD,UAAYA,EACjBztD,KAAKsyD,QAAUtyD,KAAKirC,MAAQ5oB,GACxBriB,KAAKytD,WAAeztD,KAAKirC,SAASjrC,KAAKytD,YACvCztD,KAAKytD,UAAUztD,KAAKirC,OAAS,GAGrC,QACI,MAAMsnB,EAAW,IAAIvyD,KAAKovD,YAO1B,OANAmD,EAAST,UAAY,SAAW9xD,KAAK8xD,UACrCS,EAASD,QAAUtyD,KAAKsyD,QACxBC,EAAStnB,MAAQ,SAAWjrC,KAAKirC,MACjCsnB,EAASzvD,KAAO9C,KAAK8C,KACrByvD,EAAS9E,UAAYztD,KAAKytD,UAC1B8E,EAAS9E,UAAU8E,EAAStnB,OAAS,EAC9BsnB,EAEX,kBACI,OAAO,IAAI5vB,IAEf,iBACI,OAAO,IAAIA,IAEf,OAII,YAHmBxgC,IAAfnC,KAAKwyD,QACLxyD,KAAKwyD,gBAAkB,iBAEpBxyD,KAAKwyD,MAWhB,YAEI,OADAxyD,KAAKytD,UAAUztD,KAAKirC,SACbjrC,KAAKsyD,QAEhB,aACI,QAAStyD,KAAKytD,UAAUztD,KAAKirC,OAEjC,UAAU5oB,GACNriB,KAAKsyD,QAAUjwC,K,iCCjJvB,sEAQO,SAASuf,EAAW3gC,EAAOwxD,EAAUryD,GACxC,OAAO,YAAYqyD,EAAWtnB,GACtB,YAASA,GACFA,EAEF,YAAqBA,GACnB,YAAwBlqC,EAAOkqC,EAAUlvB,UAAW7b,GAIpD,YAAsB+qC,M,iCClBzC,wHAMO,SAASunB,EAAmBzxD,EAAO0xD,GACtC,MAAMC,EAAW,GACXC,EAAkB5xD,EAAMa,OAAOma,UACrC,IAAK,IAAIxc,KAAQkzD,EAAS,CACtB,IAAK,YAAeA,EAASlzD,GACzB,SAEJ,MAAMggB,EAAS,YAAUkzC,EAAQlzD,IAC3Bqc,EAAK+2C,EAAgBpzC,EAAO3c,OAAO,OAAEy2B,EAAM,UAAES,GAAcle,EAAI+hC,EAAM,YAAO/hC,EAAI,CAAC,SAAU,cAKjG,IAAK,MAAMiB,KAAO8gC,EAGD,cAAR9gC,GAAuB0C,EAAO8Z,QAAoB,WAARxc,GAAoB0C,EAAOua,YAG9D,SAARjd,IACA0C,EAAO1C,GAAOjd,OAAOC,OAAOD,OAAOC,OAAO,GAAI89C,EAAI9gC,IAAO0C,EAAO1C,UAEhD5a,IAAhBsd,EAAO1C,KAAsC,IAAhB0C,EAAO1C,KACpC0C,EAAO1C,GAAO8gC,EAAI9gC,IAAQ0C,EAAO1C,KAIzC,MAAMyC,EAAWozC,EADjBnzD,EAAO,YAAQA,IACmBK,OAAOC,OAAOD,OAAOC,OAAO,GAAI0f,GAAS,CAAEhgB,KAAMA,EAAM0gB,OAAQ,YAASV,EAAOS,IAAM,YAAcT,EAAOS,GAAI,SAAWT,EAAOS,KAClK,YAAiBV,EAASuZ,IAClBA,EAAWprB,OACXorB,EAAWprB,MAAM1M,EAAOue,EAASC,EAAQkzC,EAAQlzD,MAI7D,OAAOmzD,EAEJ,SAASE,EAAwB7xD,EAAO8xD,EAAYC,GACvD,MAAMC,EAAS,GAoBf,MAAMC,EAAe,YAAYH,GAnBjC,SAActzD,GACV,MAAM0zD,EAAQ,YAAQ1zD,GAChB+f,EAAUve,EAAM84B,sBAAsBo5B,EAAO1zD,GAC7C45B,EAAQ,YAAY85B,EAAQ,KAClC,GAAI3zC,EAAQI,QAAQ/b,SAAU,CAC1B,MAAMxD,EAAQ2yD,GAAU/xD,EAAMG,UAAUxB,KAAKu0C,IACvCif,EAAS5zC,EAAQI,QAAQ/b,SAASwkB,QACpChoB,EAAME,OACN6yD,EAAOC,iBAAiBhzD,GAGxBA,EAAME,OAAS6yD,EAMvB,MAHsB,SAAlB5zC,EAAQqlC,OACRoO,EAAOlrD,KAAKsxB,sBAEWA,YAAsC,WAApB7Z,EAAQV,QAAuB,SAAW,YAAYU,EAAQV,gBAG/G,OAASm0C,EAAOlyD,OAAS,KAAOkyD,EAAO/oD,IAAIgX,kBAAoBA,OAAO7Y,KAAK,QAAU,QAAU,QAAU6qD,O,iCChE7G,uHAUO,MAAMI,EAAQ,SACRC,EAAgB,iBACvBvO,EAAW,CACbrlC,QAAS,CAAC1e,EAAOue,KACb,MAAM/f,EAAO+f,EAAQ/f,KACf+zD,EAAW/zD,EAAO,IAClBkhB,EAAY,IAAOpB,IAAIC,GACvBG,EAAU,GACV8zC,EAAc,GACdC,EAAgB,GACtB,GAAIl0C,EAAQkB,YAAcC,EAAW,CACjC,MAAMgzC,6CAAwD,YAAYl0D,EAAO6zD,KACjFnzC,EAAOX,EAAS,CAACU,EAAI0zC,KACjB,MAAMC,EAAU,YAAMD,EAAI9yC,QAAQ,GAAGpS,SAAWklD,EAAI9yC,QAAQ,GAAGpS,OAAS,KAIxE,OAHImlD,EAAQhzB,QAAQ8yB,GAAc,GAC9BE,EAAQ9rD,KAAK4rD,GAEVzzC,IAGfV,EAAQI,QAAQC,MAAMve,QAAQ,CAACwe,EAAMb,KACjC,MAAM1d,EAAUue,EAAKve,QACrB,GAAIA,IAAY,KAAKA,IAAY,IAE7B,YADA,YAAK,+DAGT,MAAMyI,EAAOwV,EAAQxV,KAAOwV,EAAQxV,KAAKiV,GAAK,KACxC60C,EAyHlB,SAAwB7yD,EAAOue,EAASM,EAAM9V,GAC1C,MAAMzI,EAAUue,EAAKve,QACf4xD,EAAQrzC,EAAKH,QAAQW,OACrByzC,EAAQj0C,EAAKH,QAAQ/f,KACrB+gB,EAAY,IAAOpB,IAAIC,GACvBiC,EAAY,YAAYxgB,EAAMwgB,UAAUlgB,IACxCsB,EAAQ5B,EAAMW,kBAAkBL,GAChCgB,EAAYM,EAAQA,EAAMhC,IAAI,aAAUsB,EACxC6xD,EAAUthC,YAAiBjR,MAAciR,KACzC/yB,EAAOsB,EAAMmgB,iBAAiB7f,IAAY,IAAI,QAAU,UAAUoN,OAClEslD,KAAW1yD,UACX2e,EAAKC,EAAOX,EAAS,CAAC/V,EAAKmqD,IACtB,IACAnqD,EACH,CAAE0W,OAAQyzC,EAAI9yC,QAAQ,GAAI/R,WAAYklD,MAAUA,MAChD,CAAE9zC,OAAQyzC,EAAK7kD,WAAYokD,eAAmBc,SAAat0D,SAUnE,OAJAugB,EAAGnY,KAAK,CACJoY,OAAQ,CAAExR,OAAQ6Q,EAAQ/f,KAAO8zD,GACjCxkD,OAAQ,YAAoBxM,OAAiByxD,KAAUD,YAAgBC,KAAUD,WAAiB,WAE/FpzC,EACD,CAAC,CAAElhB,KAAMs0D,EAAO7zC,GAAI,KACpB,CACEpgB,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,KAAM0zD,GAAUnpD,EAAO,CAAEA,KAAM,YAAaA,GAAM,EAAMgqD,IAAY,CAAE1xD,MAAO,KAAQ,CAAE4d,GAAIA,IACzHpgB,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,KAAMs0D,GAAU/pD,EAAO,CAAEA,KAAM,YAAaA,IAAU,IAAM,CAAEkW,GAAI,CACxF,CACIC,OAAQ,CAAExR,OAAQwkD,GAClBpkD,UAAWokD,YAAgBA,wBAA4B1xC,MAAc0xC,UAzJtEe,CAAejzD,EAAOue,EAASM,EAAM9V,GAC1C+pD,EAAQj0C,EAAKH,QAAQ/f,KACrBuzD,EAAQrzC,EAAKH,QAAQW,OACrBmB,EAAY,YAAYxgB,EAAMwgB,UAAUlgB,IACxCgB,EAAYtB,EAAMW,kBAAkBL,GAASV,IAAI,QACjDszD,EAAQ,YAAoB5xD,GAAa,IAAM,GACrDod,EAAQ5X,QAAQ+rD,GAChBL,EAAY1rD,KAAKgsD,GACjBL,EAAc3rD,KAAK,CACf0Z,UAAWxgB,EAAMwgB,UAAUlgB,GAC3BkQ,kBAAmBsiD,aACXI,WAAe1yC,MAAc0xC,aAAiBgB,IAAQJ,cACvDI,WAAe1yC,MAAc0xC,aAAiBgB,IAAQJ,aAKhEpzC,GACDhB,EAAQ5X,KAAK,CACTtI,KAAMA,EAAO8zD,EACbjxD,MAAO,GACP4d,GAAI,CACA,CACIC,OAAQuzC,EAAcxpD,IAAIokB,IAAK,CAAGzrB,MAAOyrB,EAAE7M,aAC3C1S,OAAQ2kD,EAAcxpD,IAAIokB,GAAKA,EAAE7c,MAAMpJ,KAAK,cAAgB5I,EAAO8zD,aAQnF,MAAMvpD,EAAOwV,EAAQxV,KACf+E,WAAkB,YAAS9N,eAAmBuyD,YACpD,OAAO7zC,EAAQ3R,OAAOlO,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,KAAMA,EAAO,KAAUuK,EAAO,CAAEA,SAAU+E,MAAW,YAAa/E,OAAa,IAAM,CAAEkW,GAAI,CACvI,CACIC,OAAQ,CAAC,CAAExR,OAAQ8kD,EAAYprD,KAAK,UACpC0G,OAAQ0kD,EAAYprD,KAAK,eAAiB0G,OAAY0kD,mBAItE3xC,WAAY,CAAC7gB,EAAOue,KAEhB,OADYA,EAAQ/f,KAAO,IACd,MAA4B,WAApB+f,EAAQV,QAAuB,iBAAmB,YAAS7d,QAEpForB,MAAO,CAACprB,EAAOue,EAAS6M,KACpB,MAAM5sB,EAAO+f,EAAQ/f,MACf,EAAE8M,EAAC,EAAEC,GAAMgT,EAAQI,QAAQL,IAC3B60C,EAAS7nD,GAAKA,EAAEoT,QAAQW,OACxB+zC,EAAS7nD,GAAKA,EAAEmT,QAAQW,OACxB+Y,UAAgB,YAAY7Z,EAAQ/f,KAAO,QAEjD,GAAI,IAAO8f,IAAIC,GACX,OAAO6M,EAEX,MAAMtd,EAAS,CACXxC,OAASpK,IAANoK,EAAkB,CAAEoC,UAAWylD,QAAgB,CAAE9xD,MAAO,GAC3DkK,OAASrK,IAANqK,EAAkB,CAAEmC,UAAW0lD,QAAgB,CAAE/xD,MAAO,GAC3Dmc,QAAUtc,IAANoK,EAAkB,CAAEoC,UAAWylD,QAAgB,CAAElxD,MAAO,CAAEkpB,MAAO,UACrE1N,QAAUvc,IAANqK,EAAkB,CAAEmC,UAAW0lD,QAAgB,CAAEnxD,MAAO,CAAEkpB,MAAO,YAMzE,GAAwB,WAApB5M,EAAQV,QACR,IAAK,MAAM/B,KAAO,YAAKhO,GACnBA,EAAOgO,GAAO,CACVjd,OAAOC,OAAO,CAAEo9C,QAAS9jB,eAAmBA,iBAAqB,YAASp4B,MAAY8N,EAAOgO,IAC7F,CAAEza,MAAO,IAOrB,MAAMwZ,EAAK0D,EAAQpb,MAAM,KAAE8E,EAAI,YAAEyD,GAAgBmP,EAAI3S,EAAS,YAAO2S,EAAI,CAAC,OAAQ,gBAC5Ew4C,EAAW,YAAKnrD,GAAQX,OAAO,CAACiB,EAAKmkC,KACvCnkC,EAAImkC,GAAK,CACL,CACIuP,KAAM,MAAOh7C,IAANoK,MAAsB6nD,YAAiBA,YAAmBjyD,IAANqK,MAAsB6nD,YAAiBA,QAC7F3lD,OAAO4f,GAAKA,GACZjmB,KAAK,QACV/F,MAAO6G,EAAOykC,IAElB,CAAEtrC,MAAO,OAENmH,GACR,IACH,MAAO,CACH,CACIhK,KAAMA,EAAO6zD,EAAQ,MACrBxwD,KAAM,OACNypB,MAAM,EACNzd,OAAQ,CACJylD,MAAO,CACHrrD,KAAM,CAAE5G,MAAO4G,GACfyD,YAAa,CAAErK,MAAOqK,IAE1BoC,OAAQA,OAGbsd,EACH,CACI5sB,KAAMA,EAAO6zD,EACbxwD,KAAM,OACNypB,MAAM,EACNzd,OAAQ,CACJylD,MAAO,CACHrrD,KAAM,CAAE5G,MAAO,gBAEnByM,OAAQjP,OAAOC,OAAOD,OAAOC,OAAO,GAAIgP,GAASulD,QA+CrE,SAASn0C,EAAOX,EAAS+wC,GACrB,OAAO/wC,EAAQW,OAAO3X,OAAO,CAAC0X,EAAI0zC,IACzBA,EAAI9yC,QAIFyvC,EAAGrwC,EAAI0zC,IAHV,eAAQA,6DACD1zC,GAGZ,IAhDQ,O,iCC1Jf,qDAEO,MAAMs0C,UAAsB,IAC/B,YAAYj0D,EAAQka,GAChB5a,MAAMU,GACNP,KAAKya,OAASA,EAElB,QACI,OAAO,IAAI+5C,EAAc,KAAMx0D,KAAKya,QAExC,kBACI,OAAO,IAAIkoB,IAEf,kBAGA,OACI,mBAAoB,YAAK3iC,KAAKya,UAElC,WACI,OAAO3a,OAAOC,OAAO,CAAE+C,KAAM,cAAgC,IAAhB9C,KAAKya,OAAkB,GAAKza,KAAKya,W,iCCpBtF,qDAEO,MAAMg6C,UAAqB,IAC9B,YAAYl0D,EAAQka,GAChB5a,MAAMU,GACNP,KAAKya,OAASA,EAElB,QACI,OAAO,IAAIg6C,EAAa,KAAMz0D,KAAKya,QAEvC,kBACI,OAAO,IAAIkoB,IAEf,iBACI,OAAO,IAAIA,IAAI,CAAC3iC,KAAKya,OAAO3S,IAAM,SAEtC,OACI,cAAe,YAAK9H,KAAKya,UAE7B,WACI,OAAO3a,OAAOC,OAAO,CAAE+C,KAAM,YAAc9C,KAAKya,W,iCCpBxD,uEAIO,MAAMi6C,UAAmB,IAC5B,YAAYn0D,EAAQU,EAAOyN,GACvB7O,MAAMU,GACNP,KAAKiB,MAAQA,EACbjB,KAAK0O,OAASA,EAGd1O,KAAKyR,KAAO,YAAWzR,KAAKiB,MAAOjB,KAAK0O,OAAQ1O,MAChDA,KAAKqiC,iBAAmB,YAAmBriC,KAAKyR,MAEpD,QACI,OAAO,IAAIijD,EAAW,KAAM10D,KAAKiB,MAAO,YAAUjB,KAAK0O,SAE3D,kBACI,OAAO1O,KAAKqiC,iBAEhB,iBACI,OAAO,IAAIM,IAEf,WACI,MAAO,CACH7/B,KAAM,SACN2O,KAAMzR,KAAKyR,MAGnB,OACI,gBAAiBzR,KAAKyR,U,iCC9B9B,6MAQO,MAAMkjD,EAAU,UAQVC,EAAgB,YAPF,CACvBl/B,IAAK,EACL9qB,OAAQ,EACR+qB,SAAU,EACVhK,KAAM,EACNiK,MAAO,IAGEi/B,EAAoB,IAAI,IAAwBF,EAASG,GAC/D,SAASC,EAAej7C,GAC3B,OAAI,YAASA,GACF,QAGJA,EAEJ,SAASg7C,EAAiBrnD,GAAM,OAAE3L,IAErC,MAAM,KAAEsC,EAAMoC,SAAUwuD,EAAS,UAAE/4C,EAAWpF,WAAYqpC,GAAOzyC,EAAM0O,EAAY,YAAO1O,EAAM,CAAC,OAAQ,WAAY,YAAa,eAC5H9K,EAAU,YAAUyB,GAAQA,EAAO,CAAEtB,KAAMsB,GAE7C6X,GACA,IAAS,IAAYtG,sBAAsB,YAE/C,MAAMmE,EAASnX,EAAQmX,QAAUhY,EAAO2zB,QAAQ3b,OAC1C4L,EAAY,YAAgB/iB,EAAQhD,KAAMmC,EAAO2zB,QAAQ91B,MACzDs1D,EAAcF,EAAej7C,IAC7B,UAAEpK,EAAS,yBAAEq1B,EAAwB,eAAEO,EAAc,QAAEx+B,EAAO,UAAEH,EAAS,8BAAEq+B,EAA6B,YAAEma,EAAW,UAAE+V,EAAS,oCAAEtwB,GA4K5I,SAAmBn3B,EAAMqM,EAAQhY,GAC7B,MAAM8B,EAAS,YAAoB6J,EAAMknD,IACnC,yBAAE5vB,EAAwB,eAAEO,GAAmB,YAA4B73B,EAAM7J,EAAQ+wD,GACzFrU,EAAsBvb,EAAyB7hC,MAC/C+xD,EAAcF,EAAej7C,GAC7Bq7C,EAA2B,IAC1BC,EAAmB9U,GACtB,CACI54C,GAAI,SACJxE,MAAOo9C,EACPx4C,GAAI,WAAaw4C,GAErB,CACI54C,GAAI,MACJxE,MAAOo9C,EACPx4C,IAAqB,YAAhBmtD,EAA4B,iBAAmB,QAAU3U,GAElE,CACI54C,GAAI,MACJxE,MAAOo9C,EACPx4C,IAAqB,YAAhBmtD,EAA4B,iBAAmB,QAAU3U,IAGhEF,EAA0C,YAAhB6U,GAA6C,UAAhBA,EACvD,GACA,CAEE,CACI3yB,8BAA+Bge,0BAA4CA,MAC3Ex4C,GAAI,OAASw4C,GAEjB,CACIhe,kCAAmCge,oBAAsCA,SAA2BxmC,iBAAsBwmC,OAC1Hx4C,GAAI,iBAAmBw4C,GAE3B,CACIhe,kCAAmCge,oBAAsCA,SAA2BxmC,iBAAsBwmC,OAC1Hx4C,GAAI,iBAAmBw4C,IAG7BxkC,EAAKrO,EAAKjH,SAAUs6C,EAAKxb,EAAsDyb,GAARjlC,EAAGglC,GAAwC,YAAOhlC,EAAI,CAAe,iBAAPglC,EAAkBA,EAAKA,EAAK,OACjK,oCAAElc,EAAmC,iBAAEF,GAAqB,YAAiCqc,IAC7F,KAAE19C,EAAI,UAAE0D,EAAS,UAAEJ,EAAS,QAAEG,EAASN,SAAUw+B,GAAkC,YAA8BN,EAAkB5iC,GACnIq9C,EAAyB,aAAXv7C,EAAwB,aAAe,WACrDsxD,EAAYtxD,EAUlB,MAAO,CACH8L,UAVc,IACXrM,KACA0D,EACH,CACIJ,UAAW,IAAIA,KAAcwuD,GAC7BruD,cAEDs5C,GAIHt5C,UACAH,YACAo+B,2BACAO,iBACAN,gCACAma,cACA+V,YACAtwB,uCA3O4KywB,CAAU5nD,EAAMqM,EAAQhY,IAClM,MAAEsE,EAAK,KAAEzG,GAASqlC,EAA+BswB,EAA4C,YAAOtwB,EAA+B,CAAC,QAAS,SAC7IuwB,EAAmBhwB,GACd,YAAkC5iC,EAAS2iC,EAAgBP,EAA0BQ,EAAgBzjC,EAAO2zB,SAEjH+/B,EAAoBD,EAAgBD,GACpCG,EAAiBF,EAAgBvwB,GACjC0wB,EAAqBH,EAAgBz1D,OAAOC,OAAOD,OAAOC,OAAO,GAAIu1D,GAA6C31D,EAAO,CAAEA,QAAS,KACpIg2D,EAA6B,YAAwB,CACvD,CAAEzwB,YAA6B,YAAhB+vB,EAA4B,iBAAmB,OAAQ9vB,YAAa,OACnF,CAAED,YAAa,aAAcC,YAAa,MAC1C,CAAED,YAAa,WAAYC,YAAa,UACxC,CAAED,YAAa,aAAcC,YAAa,MAC1C,CAAED,YAA6B,YAAhB+vB,EAA4B,iBAAmB,OAAQ9vB,YAAa,QACpFJ,EAA0BC,GAEvB4wB,EAAU,CAAE9yD,KAAM,OAAQsD,MAAO,QAASyG,QAAS,EAAGjJ,OAAQu7C,GAC9D0W,EAAyC,YAAhBZ,EACzBU,EAEE,YAAwB,CACpB,CAAEzwB,YAAa,iBAAkBC,YAAa,iBAC9C,CAAED,YAAa,iBAAkBC,YAAa,kBAC/CJ,EAA0BC,GAC/B8wB,EAAgB,IACfN,EAAkB,CACjB/vB,SAAU,OACVrhC,KAAM,OACNshC,eAAgB,gBAChBC,kBAAmB,YACnBC,cAAeiwB,OAEhBL,EAAkB,CACjB/vB,SAAU,OACVrhC,KAAM,OACNshC,eAAgB,YAChBC,kBAAmB,gBACnBC,cAAeiwB,OAEhBL,EAAkB,CACjB/vB,SAAU,QACVrhC,KAAMwxD,EACNlwB,eAAgB,gBAChBE,cAAeiwB,OAEhBL,EAAkB,CACjB/vB,SAAU,QACVrhC,KAAMwxD,EACNlwB,eAAgB,gBAChBE,cAAeiwB,KAKjBE,EAAY,IACM,UAAhBd,EAA0Ba,EAAgB,MAC3CL,EAAe,CACdhwB,SAAU,MACVrhC,KAAMtE,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,OAAU4iB,EAAY,CAAE/lB,KAAM+lB,GAAc,IAAM,CAAE9hB,OAAQsxD,IACtGxvB,eAAgB,YAChBC,kBAAmB,YACnBC,cAAe+vB,OAEhBD,EAAmB,CAClBjwB,SAAU,SACVrhC,KAAMtE,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,QAAW,YAAShB,EAAO2zB,QAAQ7qB,SAAW9I,EAAO2zB,QAAQ7qB,OAAOxE,MAAQ,CAAEA,MAAOtE,EAAO2zB,QAAQ7qB,OAAOxE,OAAU,IAAOsf,EAAY,CAAE/lB,KAAM+lB,GAAc,IAAM,CAAE9hB,OAAQu7C,IACtOzZ,eAAgB,UAChBE,cAAe+vB,KAIvB,IAAIK,EACJ,GAAoB,YAAhBf,EAA2B,CAC3B,MAAMgB,sBAAmClxB,EAAyB7hC,UAC5DgzD,sBAAmCnxB,EAAyB7hC,UAC5DizD,MAAcD,OAAkBD,KAChCG,KAAsBH,OAAkBn8C,OAAYq8C,IACpDE,KAAsBH,OAAkBp8C,OAAYq8C,IACpDr1B,YAAsBiE,EAAyB7hC,UAC/CozD,EAAyB,CAC3B9tC,cAAe4sC,EAAmBrwB,EAAyB7hC,OAC3D4D,WAEJ,IAAIyvD,OAAsBp0D,EACN,UAAhB8yD,IACAsB,EAAsB,CAClB7mD,UAAW,CACP,CACIhB,WAAY0nD,QAAuBt1B,UAAkBA,QAAgBu1B,MAEzE,CACI1vD,UAAW,CACP,CACIe,GAAI,MACJxE,MAAO6hC,EAAyB7hC,MAChC4E,GAAI,iBAAmBi9B,EAAyB7hC,OAEpD,CACIwE,GAAI,MACJxE,MAAO6hC,EAAyB7hC,MAChC4E,GAAI,iBAAmBi9B,EAAyB7hC,OAGpD,CACIwE,GAAI,MACJxE,MAAO,aAAe6hC,EAAyB7hC,MAC/C4E,GAAI,aAAei9B,EAAyB7hC,OAEhD,CACIwE,GAAI,MACJxE,MAAO,aAAe6hC,EAAyB7hC,MAC/C4E,GAAI,aAAei9B,EAAyB7hC,UAE7CyD,GAEPG,YAGR6W,MAAOm4C,IAGf,MAAM,QAAElkC,GAAY0jC,EAA2CkB,EAAmD,YAAOlB,EAA2C,CAAC,YAC/JmB,EAAsB,YAAgB9zD,EAAS,WAAYb,EAAO2zB,QAAS,CAC7E/lB,UAAW,CAAC,CAAEhB,WAAYoyB,OAAes1B,UAAyBt1B,OAAeu1B,OACjFjyD,KAAM,QACNoC,SAAU1G,OAAOC,OAAOD,OAAOC,OAAO,CAAE,CAACulC,GAAiB,CAClDpiC,MAAO6hC,EAAyB7hC,MAChCJ,KAAMiiC,EAAyBjiC,OAC9B0zD,GAAoD5xB,EAAsC,CAAEhT,QAASgT,GAAwC,MACvJ,GACC6xB,GAAuBF,EACvBP,EAAuB,CACnBtmD,UAAW,CAAC4mD,GACZ34C,MAAO,CAAC84C,EAAqBF,IAG5BE,GACLT,EAAuBS,GACF/mD,UAAUwpB,QAAQo9B,GAElCC,IACLP,EAAuBO,GACF7mD,UAAUwpB,QAAQo9B,GAG/C,OAAIN,EAEOl2D,OAAOC,OAAOD,OAAOC,OAAO,GAAIoc,GAAY,CAAEwB,MAAO,IAChDq4C,EAAuB,CAACA,GAAwB,GACpD,CAEItmD,YACAiO,MAAOo4C,MAIhBj2D,OAAOC,OAAOD,OAAOC,OAAO,GAAIoc,GAAY,CAAEzM,WAAYyM,EAAUzM,WAAa,IAAI1B,OAAO0B,GAAYiO,MAAOo4C,IAE1H,SAASX,EAAmBsB,GACxB,MAAO,CACH,CACIhvD,GAAI,KACJxE,MAAOwzD,EACP5uD,GAAI,aAAe4uD,GAEvB,CACIhvD,GAAI,KACJxE,MAAOwzD,EACP5uD,GAAI,aAAe4uD,M,iCC5M/B,sLAKO,MAAMC,EAAY,YAKZC,EAAkB,YAJF,CACzBtmD,KAAM,EACNylB,QAAS,IAGA8gC,EAAsB,IAAI,IAAwBF,EAAWG,GACnE,SAASA,EAAmBrpD,GAAM,OAAE3L,IACvC,MAAM,UAAE4N,EAAS,yBAAEq1B,EAAwB,eAAEO,EAAc,8BAAEN,EAA6B,QAAEriC,EAAO,UAAEwZ,EAAS,gBAAEijC,GAAoB,YAAe3xC,EAAMkpD,EAAW70D,GAC9Ji1D,EAAep0D,EACfq0D,EAAoB,YAAkCD,EAAczxB,EAAgBP,EAA0BC,EAA+BljC,EAAOg0B,WACpJmhC,OAA2B90D,IAApBsL,EAAKjH,SAAS+F,QAAuCpK,IAApBsL,EAAKjH,SAASgG,EAC5D,IAAI0qD,EAAW,CAAEp0D,KAAMm0D,EAAO,OAAS,QACnCE,EAAc,CAAEr0D,KAAMm0D,EAAO,OAAS,QAC1C,MAAM3zD,EAAcxD,OAAOC,OAAOD,OAAOC,OAAO,GAAKg3D,EAAazzD,YAAc,CAAEA,YAAayzD,EAAazzD,aAAgB,IAAOyzD,EAAaK,SAAWL,EAAazzD,YAAc,CAAEA,YAAayzD,EAAaK,SAAY,IAW9N,OAVIH,GACAC,EAAWp3D,OAAOC,OAAOD,OAAOC,OAAO,GAAIm3D,GAAW5zD,GACtD6zD,EAAcr3D,OAAOC,OAAOD,OAAOC,OAAO,GAAIo3D,GAAc7zD,IAEvDyzD,EAAazzD,YAClB,IAAS,IAAY6W,sBAAsB,gBAEtC48C,EAAaK,SAClB,IAAS,IAAYj9C,sBAAsB,YAExCra,OAAOC,OAAOD,OAAOC,OAAO,GAAIoc,GAAY,CAAEzM,YAAWiO,MAAO,IAC5Dq5C,EAAkB,CACjBvxB,SAAU,OACVrhC,KAAM8yD,EACNxxB,eAAgB,QAChBC,kBAAmB,QACnBC,cAAewZ,OAEhB4X,EAAkB,CACjBvxB,SAAU,UACVrhC,KAAM+yD,EACNzxB,eAAgB,QAChBE,cAAewZ,OAEhB4X,EAAkB,CACjBvxB,SAAU,UACVrhC,KAAM+yD,EACNzxB,eAAgB,QAChBE,cAAewZ,S,iCChD/B,iHAQA,MAAMiY,EAAY,CAAC,IAAS,IAAQ,IAAQ,IAAW,IAAM,IAAQ,IAAS,KACvE,SAASC,EAAiB93C,EAAS+wC,GACtC,IAAK,MAAMjiC,KAAK+oC,EACR/oC,EAAE/O,IAAIC,IACN+wC,EAAGjiC,K,iCCZf,uDAEO,MAAMipC,UAAuB,IAChC,QACI,OAAO,IAAIA,EAAe,MAE9B,YAAYh3D,GACRV,MAAMU,GAEV,kBACI,OAAO,IAAIoiC,IAEf,iBACI,OAAO,IAAIA,IAAI,CAAC,MAEpB,OACI,MAAO,aAEX,WACI,MAAO,CAAE7/B,KAAM,aAAcgF,GAAI,Q,iCCnBzC,8CACO,MAAM0vD,EAAS,UAChBzS,EAAS,CACXxlC,IAAKC,GACuB,UAAjBA,EAAQ1c,MAAoB0c,EAAQulC,OAE/CplC,QAAS,CAAC1e,EAAOue,EAASG,IACfA,EAAQ3R,OAAO,CAClBvO,KAAM+f,EAAQ/f,KAAO+3D,EACrBl1D,OAAO,EACP4d,GAAI,CAAC,CAAEC,OAAQX,EAAQW,OAAQpR,OAAQyQ,EAAQulC,WAGvDjjC,WAAY,CAAC7gB,EAAOue,KAChB,MAAMi4C,EAAMj4C,EAAQ/f,KAAO,IACrBkP,EAAS6Q,EAAQ/f,KAAO+3D,EAC9B,SAAW7oD,cAAmB8oD,OACL,WAApBj4C,EAAQV,WAA0BnQ,uBAA8BA,qBAA0B,YAAS1N,YACjG0N,OAAY8oD,aAGZ,O,iCCrBf,iQASA,SAAS30D,EAAK40D,EAAWz2D,EAAOM,GAC5B,MAAMgB,EAAYtB,EAAMW,kBAAkBL,GAASV,IAAI,QACvD,OAAO,YAAgB62D,EAAU72D,IAAI,QAAS,YAAY,CAAEU,UAASgB,YAAWq3C,cAAc,KAE3F,SAAS+d,EAAQ91D,EAAU+1D,EAAa32D,EAAOM,EAASm2D,GAC3D,GAAwC,WAApC50D,EAAK40D,EAAWz2D,EAAOM,GACvB,OAEJ,IAAIi5C,EAAM16C,OAAOC,OAAOD,OAAOC,OAAO,GAAI,YAAgB,GAAIkB,EAAO,MAAsB,IAAaA,IACxG,MAAM,QAAE0B,EAAO,SAAE6D,EAAQ,OAAE1E,GAAWb,EAChC+H,EAASrG,EAAQqG,OACjB6D,EAAUgrD,EAAYrxD,EAASqG,UAAYlK,EAAQkK,QACzD,GAAI2tC,EAAItxC,KAEJ,GAAgB,SAAZ3H,GAAuByH,GAAUzH,IAAY,WACtCi5C,EAAItxC,UAGX,GAAIsxC,EAAItxC,KAAY,MAEZwuD,EAAU72D,IAAI,0BACP25C,EAAItxC,MAGXsxC,EAAItxC,KAAO,CAAE5G,MAAOR,EAAO6Q,OAAOmlD,qBAAuB,SACzDtd,EAAI7tC,YAAc,CAAErK,MAAOuK,GAAW,SAGzC,GAAI,YAAQ2tC,EAAItxC,MAAO,CACxB,MAAMA,EAAO6uD,EAAuBvxD,EAAS0C,MAAQ1C,EAASJ,QAAUzD,EAAQuG,MAASF,GAAUrG,EAAQyD,MACvG8C,IACAsxC,EAAItxC,KAAO,CAAE5G,MAAO4G,IAKpC,GAAIsxC,EAAIrxC,OACJ,GAAgB,WAAZ5H,IAA0ByH,GAAUzH,IAAY,WACzCi5C,EAAIrxC,YAGX,GAAIqxC,EAAIrxC,OAAc,aAEXqxC,EAAIrxC,YAEV,GAAI,YAAQqxC,EAAIrxC,QAAS,CAC1B,MAAMA,EAAS,YAAgB4uD,EAAuBvxD,EAAS2C,QAAU3C,EAASJ,OAAQzD,EAAQwG,OAAQH,EAASrG,EAAQyD,WAAQjE,GAC/HgH,IACAqxC,EAAIrxC,OAAS,CAAE7G,MAAO6G,IAYtC,OAPI5H,IAAY,KACRsL,IAEA2tC,EAAI3tC,QAAU,CAAEvK,MAAOuK,IAG/B2tC,EAAM16C,OAAOC,OAAOD,OAAOC,OAAO,GAAIy6C,GAAMod,GACrC,YAAKpd,GAAKz5C,OAAS,EAAIy5C,OAAMr4C,EAEjC,SAAS61D,EAASn2D,EAAUo2D,EAAch3D,EAAOM,EAASm2D,GAC7D,GAAwC,aAApC50D,EAAK40D,EAAWz2D,EAAOM,GACvB,OAEJ,IAAIi5C,EAAM,GACV,MAAM3tC,EAAUgrD,EAAY52D,EAAMuF,SAASqG,UAAY5L,EAAM0B,QAAQkK,QAMrE,OALIA,IAEA2tC,EAAI3tC,QAAU,CAAEvK,MAAOuK,IAE3B2tC,EAAM16C,OAAOC,OAAOD,OAAOC,OAAO,GAAIy6C,GAAMyd,GACrC,YAAKzd,GAAKz5C,OAAS,EAAIy5C,OAAMr4C,EAEjC,SAAS4mB,EAAOlnB,EAAUyoB,EAAYrpB,EAAOM,GAChD,MAAMoR,EAAS1R,EAAM0R,OAAOpR,GACtBO,EAASb,EAAMa,OACrB,IAAI04C,EAAM,GACV,GAAI,YAAqB34C,GAAW,CAChC,MAAM0oB,EAAatpB,EAAMW,kBAAkBL,GAASV,IAAI,UAAY,IAAU2C,IACxEiO,EAAO,YAAqB,cAAe5P,EAASgC,SAAU8O,EAAOzK,OAAQpG,EAAO6Q,OAAOvK,gBAAiBtG,EAAOwzB,WAAY/K,GACrID,EAAaxqB,OAAOC,OAAOD,OAAOC,OAAO,GAAK0R,EAAO,CAAE3E,KAAM,CAAE6B,OAAQ8C,IAAW,IAAM6Y,GAG5F,OADAkwB,EAAM16C,OAAOC,OAAOD,OAAOC,OAAO,GAAIy6C,GAAMlwB,GACrC,YAAKkwB,GAAKz5C,OAAS,EAAIy5C,OAAMr4C,EAExC,SAAS01D,EAAYpxD,GACjB,OAAOyxD,EAAkBzxD,EAAY,CAACgO,EAAG0jD,IAAmBpxC,KAAKrc,IAAI+J,EAAG0jD,EAAe71D,QAEpF,SAASy1D,EAAuBtxD,GACnC,OAAOyxD,EAAkBzxD,EAAY,CAACgO,EAAG0jD,IAC9B,YAAgB1jD,EAAG0jD,EAAe71D,QAGjD,SAAS41D,EAAkBzxD,EAAY2xD,GACnC,OAAI,YAAuB3xD,IACf,YAAQA,EAAWiD,WAAajD,EAAWiD,UAAY,CAACjD,EAAWiD,YAAYlB,OAAO4vD,EAAS3xD,EAAWnE,OAE7G,YAAWmE,GACTA,EAAWnE,WADjB,I,iCC5GT,+EAKO,MAAM+1D,UAAmB,IAC5B,YAAY93D,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EAErB,QACI,OAAO,IAAI2oD,EAAW,KAAM,YAAUr4D,KAAK0P,YAE/C,kBACI,OAAO,IAAIizB,IAAI,CAAC3iC,KAAK0P,UAAUqd,OAAQ/sB,KAAK0P,UAAUqN,OAAS/c,KAAK0P,UAAU5I,SAAW,KAE7F,iBACI,OAAO,IAAI67B,IAAI,CAAC3iC,KAAK0P,UAAUqd,SAEnC,gBAAgBurC,GACZ,MAAM,MAAElc,EAAQ,EAAC,KAAED,EAAI,KAAE/4C,GAASk1D,EAElC,MAAO,CAAE3pD,mBADM,CAACytC,EAAOD,KAAU/4C,EAAO,CAACA,GAAQ,IAAKiF,KAAK,SAG/D,yBAAyB9H,EAAQg4D,GAC7B,OAAO,IAAIF,EAAW93D,EAAQg4D,GAElC,wBAAwBh4D,EAAQU,GAC5B,MAAMuF,EAAWvF,EAAMuF,SACjBskB,EAAOtkB,EAAS+F,EAChBwe,EAAOvkB,EAASgG,EACtB,GAAI,YAAWse,IAAS,YAAWC,GAAO,CACtC,MAAMytC,EAAiB1tC,EAAKiC,OAASjC,EAAOC,EAAKgC,OAAShC,OAAO5oB,EACjE,QAAuBA,IAAnBq2D,EACA,OAEJ,MAAMC,EAAa3tC,EAAKiC,OAAShC,EAAOA,EAAKgC,OAASjC,OAAO3oB,GACvD,OAAEqgD,EAAM,MAAElgD,EAAK,MAAEgkD,EAAK,QAAEgS,GAAYE,EAAezrC,OACnD2rC,EAAgB,YAAmBz3D,EAAMmD,KAAMoC,GACrD,OAAO,IAAI6xD,EAAW93D,EAAQT,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAEgtB,OAAQyrC,EAAet1D,MAAO6Z,IAAK07C,EAAWv1D,OAAUs/C,EAAS,CAAEA,UAAW,SAAiBrgD,IAAVG,EAAsB,CAAEA,SAAU,IAAOgkD,EAAQ,CAAEA,SAAU,SAAmBnkD,IAAZm2D,EAAwB,CAAEA,WAAY,IAAOI,EAAc33D,OAAS,CAAE+F,QAAS4xD,GAAkB,KAEpW,OAAO,KAEX,OACI,gBAAiB,YAAK14D,KAAK0P,aAE/B,WACI,MAAM,OAAEqd,EAAM,IAAEhQ,EAAG,QAAEu7C,EAAO,OAAE9V,EAAM,QAAE17C,EAAO,MAAExE,EAAK,MAAEgkD,EAAQ,CAAC,KAAM,OAAUtmD,KAAK0P,UAC9EipD,EAAgB74D,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,SAAUI,MAAO6pB,EAAQhQ,OAAQu7C,EAAU,CAAEA,QAAS,YAAiBA,GAAWt4D,KAAK44D,gBAAgBN,GAAWA,GAAY,IAAM,CAAE9V,OAAQ,UAAa17C,EAAU,CAAEA,WAAY,IAAM,CAAExE,MAAO,OACxR,IAAIu2D,EACJ,GAAIrW,GAAqB,UAAXA,EAAoB,CAO9BqW,EAAkB,CANK/4D,OAAOC,OAAO,CAAE+C,KAAM,SAAUgF,GAAI,YAAYilB,WAAiB4tB,IAAK,CAAC6H,GAASjpB,OAAQ,CAACxM,GAASu5B,QAAOC,aAAa,GAAUz/C,EAAU,CAAEA,WAAY,IACvJ,CACpBhE,KAAM,UACN2O,cAAesb,8BAAmCA,mBAAwBA,IAC1EjlB,GAAIilB,QAIP,CAMD8rC,EAAkB,CALO,CACrB/1D,KAAM,UACN2O,cAAesb,gBAAqBzqB,aAAiByqB,IACrDjlB,GAAIilB,IAIZ,MAAO,CAAC4rC,KAAkBE,M,gCCnElC,4MAOO,SAASC,EAAY91D,GAIxB,OAHI,YAAUA,KACVA,EAAM,YAAaA,OAAKb,IAEpB,MACJ,YAAKa,GACAkH,IAAIiM,GAAK,gBAAYA,KAAKnT,EAAImT,OAC9B9N,KAAK,IAKX,SAAS0wD,EAAU/1D,GACtB,OAAe,IAARA,GAAiBg2D,EAAYh2D,KAASA,EAAIqR,OAK9C,SAAS4kD,EAASj2D,GACrB,MAAe,WAARA,GAAqBg2D,EAAYh2D,IAAQA,EAAIqR,OAEjD,SAAS2kD,EAAYh2D,GACxB,OAAO,YAASA,GAEb,SAASk2D,EAAY33D,GACxB,OAAQA,GACJ,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,IAGL,KAAK,IACD,OAAO,EACX,QACI,OAAO,M,iCChDnB,mJACO,MAAM43D,EAA8B,CACvCjhB,WAAY,QACZkB,YAAa,SACbjB,WAAY,QACZC,cAAe,WACfC,WAAY,QACZC,UAAW,OACXC,cAAe,WACfc,eAAgB,YAChBb,gBAAiB,aACjBC,WAAY,QACZuO,YAAa,SACbzwB,aAAc,UAEL6iC,EAA8B,CACvCzjB,WAAY,QACZ+R,YAAa,SACbjgB,WAAY,QACZqO,WAAY,QACZC,UAAW,OACXC,cAAe,WACfC,eAAgB,YAChBwB,WAAY,QACZ3uB,YAAa,SACb0N,aAAc,UAEL6iC,EAA0B,YAAKF,GAC/BG,EAA0B,YAAKF,I,gCC5B5C,wkBAcO,SAAShzD,EAAMnF,GAClB,MAAM,QAAE0B,EAAO,SAAE6D,EAAQ,OAAE1E,GAAWb,GAChC,OAAE+H,EAAQlG,KAAMm0B,GAAat0B,EAC7B42D,EAAc,CAChBrwD,KAAM,YAAc,OAAQvG,EAASb,GACrCqH,OAAQ,YAAc,SAAUxG,EAASb,GACzCsE,MAAO,YAAc,QAASzD,EAASb,IAErC03D,EAAsB,YAAS,CAAC,MAAO,QAAS,SAAU,SAAU,YAAaviC,GACjF,mBACA90B,EACAs3D,EAAc,YAAgB92D,EAAQuG,MAAiB,IAAXF,EAAkBrG,EAAQyD,WAAQjE,EAAWo3D,EAAYrwD,MAAiB,IAAXF,EAAkBuwD,EAAYnzD,WAAQjE,EAGvJq3D,GACME,EAAgB,YAAgB/2D,EAAQwG,QAAmB,IAAXH,EAAmBrG,EAAQyD,WAAQjE,EAAWo3D,EAAYpwD,QAAmB,IAAXH,EAAmBuwD,EAAYnzD,WAAQjE,GACzJw3D,EAAiB3wD,EAAS,OAAS,SACnC4wD,EAA6B95D,OAAOC,OAAOD,OAAOC,OAAO,GAAK05D,EAAc,CAAEvwD,KAAM,CAAE5G,MAAOm3D,IAAkB,IAAOC,EAAgB,CAAEvwD,OAAQ,CAAE7G,MAAOo3D,IAAoB,IAInL,OAHI/2D,EAAQyD,QAAU4C,EAASrG,EAAQuG,KAAOvG,EAAQwG,SAClD,IAAS,IAAYF,cAAc,WAAY,CAAEC,KAAM,SAAUvG,EAASwG,OAAQ,WAAYxG,KAE3F7C,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI65D,GAA6BC,EAAY,QAAS54D,EAAO,CACxHoF,UAAWszD,EACXlsC,aAAczkB,EAASywD,EAAcC,KACpCG,EAAY,OAAQ54D,EAAO,CAE5BwsB,aAAcjnB,EAAS0C,KAAOuwD,OAAct3D,KAC3C03D,EAAY,SAAU54D,EAAO,CAE9BwsB,aAAcjnB,EAAS2C,OAASuwD,OAAgBv3D,KAGjD,SAAS23D,EAAgB74D,EAAO84D,GACnC,MAAM,KAAE7wD,EAAgB,OAAEC,GAAwC,YAAjB4wD,EAAO3zD,MAAsBA,EAAMnF,GAAS,GAC7F,OAAOnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAsBzI,SAA2BqE,EAAM21D,GAC7B,OAAO,IAAgBvxD,OAAO,CAAC4uB,EAAGrf,UACX5V,IAAfiC,EAAK2T,IAAwC,WAAjBgiD,EAAOhiD,KACnCqf,EAAErf,GAAQ,CAAEzV,MAAO8B,EAAK2T,KAErBqf,GACR,IA5BsI4iC,CAAkB/4D,EAAM0B,QAASo3D,IAAUE,EAAqBh5D,EAAO,OAAQiI,IAAQ+wD,EAAqBh5D,EAAO,SAAUkI,IAAU0wD,EAAY,UAAW54D,IAAS44D,EAAY,cAAe54D,IAAS44D,EAAY,gBAAiB54D,IAAS44D,EAAY,cAAe54D,IAAS2wB,EAAQ3wB,IAAS6L,EAAK7L,EAAO,SAE/b,SAASg5D,EAAqBh5D,EAAOM,EAAS24D,GAC1C,MAAM,OAAEp4D,EAAM,KAAEsC,EAAI,QAAEzB,GAAY1B,EAElC,GAAgB,SADA,YAAoB,UAAW0B,EAASb,IAC9Bo4D,IAAa,YAAW91D,GAAO,CAGrD,MAAM+4C,EAAOgd,EAA0Bl5D,EAAO,CAAEmjD,SAAS,EAAM1tC,SAAU,MACzE,GAAIymC,EACA,MAAO,CACH,CAAC57C,GAAU,CAGP,CAAE47C,OAAM76C,MAAO,SACZ,YAAM43D,KAKzB,OAAOA,EAAW,CAAE,CAAC34D,GAAU24D,GAAa,GAUzC,SAASE,EAAeriD,EAAMzV,GACjC,QAAcH,IAAVG,EACA,MAAO,CAAE,CAACyV,GAAO,CAAEzV,MAAOA,IAIlC,SAAS63D,EAA0Bl5D,GAAO,QAAEmjD,GAAU,EAAK,SAAE1tC,IACzD,MAAM2jD,EAAc3jD,EAASlO,OAAO,CAAC8xD,EAAY/4D,KAC7C,MAAMqiB,EAAiB3iB,EAAMW,kBAAkBL,GAC/C,GAAIqiB,EAAgB,CAChB,MAAMrhB,EAAYqhB,EAAe/iB,IAAI,QAC/BqC,EAAQjC,EAAM+P,QAAQzP,EAAS,CAAEkQ,KAAM,UAEzCvO,GAAS,YAAoBX,KAC7B+3D,EAAWp3D,IAAS,GAG5B,OAAOo3D,GACR,IACG/gC,EAAS,YAAK8gC,GACpB,GAAI9gC,EAAOx4B,OAAS,EAAG,CACnB,MAAM2G,EAAK08C,EAAU,KAAO,KAC5B,OAAO7qB,EAAOrvB,IAAIhH,GAAS,YAAsBA,EAAOkhD,IAAU/7C,SAASX,OAI5E,SAAS6yD,EAAQt5D,GACpB,MAAM,OAAEa,EAAM,QAAEa,GAAY1B,EAE5B,GADgB,YAAoB,UAAW0B,EAASb,GAC3C,CACT,MAAM6M,EAASwrD,EAA0Bl5D,EAAO,CAAEyV,SAAU,CAAC,IAAK,OAClE,GAAI/H,EACA,MAAO,CAAE4rD,QAAS,CAAE5rD,WAG5B,MAAO,GAKJ,SAASkrD,EAAYt4D,EAASN,EAAOqM,EAAM,IAC9C,MAAM,QAAE3K,EAAO,SAAE6D,EAAQ,OAAE1E,GAAWb,GAChC,UAAEoF,EAAY9E,GAAY+L,EAChC,IAAI,WAAE4f,EAAU,aAAEO,GAAiBngB,OAChBnL,IAAf+qB,IAEAO,EAAeA,IACVpnB,IAAc9E,EAEPoB,EAAQpB,GAER,YAAgBoB,EAAQpB,GAAUoB,EAAQ0D,GAAY,YAAc9E,EAASoB,EAASb,EAAQ,CAAEuE,gBAC5G6mB,EAAaO,EAAe,CAAEnrB,MAAOmrB,QAAiBtrB,GAE1D,MAAMsE,EAAaD,EAASjF,GAC5B,OAAOi5D,EAAcv5D,EAAOwF,EAAYJ,EAAW27C,GACxC,IAAa,CAChBzgD,UACAkF,WAAYu7C,EACZr/C,UACAb,SACA2f,UAAWxgB,EAAMwgB,UAAUlgB,GAC3BsB,MAAO5B,EAAMW,kBAAkBL,GAC/B0c,MAAO,KACPiP,gBAQL,SAASstC,EAAcv5D,EAAOwF,EAAYJ,EAAWo0D,GACxD,MAAM/wD,EAAYjD,GAAcA,EAAWiD,UACrCwwD,EAAWO,EAAMh0D,GACvB,GAAIiD,EAAW,CAOX,MAAO,CACH,CAACrD,GAAY,KAPE,YAAQqD,GAAaA,EAAY,CAACA,IACrBQ,IAAI8C,IAChC,MAAM0tD,EAAoBD,EAAMztD,GAC1BmwC,EAAO,YAAuBnwC,GAAK,YAAwB/L,EAAO+L,EAAEiP,WAAa,YAAWhb,EAAO+L,EAAEmwC,MAC3G,OAAOr9C,OAAOC,OAAO,CAAEo9C,QAAQud,aAGiBv4D,IAAb+3D,EAAyB,CAACA,GAAY,KAI7E,YAAoB/3D,IAAb+3D,EAAyB,CAAE,CAAC7zD,GAAY6zD,GAAa,GAG7D,SAAStoC,EAAQ3wB,EAAOqM,EAAM,IACjC,MAAM,SAAE9G,EAAQ,QAAE7D,EAAO,OAAEb,GAAWb,EAChCwF,EAAaD,EAASorB,QAC5B,OAAI,YAAQnrB,GACD,CAAEmrB,QAAS,IAAuB,CAAEA,QAASnrB,GAAc3E,EAAQwL,IAGnEktD,EAAcv5D,EAAOwF,EAAY,UAAWu7C,IAE/C,MAAM2Y,EAA2B,IAAS3Y,EAAM/gD,EAAMa,OAAQwL,EAAIstD,aAAe,cAAgB,SACjG,GAAID,EACA,OAAOA,EAEX,GAAa,OAAT3Y,EAEA,OAGJ,IAAI6Y,EAAc,YAAgBl4D,EAAQivB,QAAS,YAAc,UAAWjvB,EAASb,IAIrF,OAHoB,IAAhB+4D,IACAA,EAAc,CAAEC,QAAS,aAEzB,YAASD,GACF,CAAEv4D,MAAOu4D,GAEX,YAASA,GAEc,aAAxBA,EAAYC,QACL,IAAuBt0D,EAAU1E,EAAQwL,GAGzC,CAAEqB,OAAQ,cANpB,IAaV,SAAS7B,EAAK7L,EAAOM,EAAU,QAClC,MAAMkF,EAAaxF,EAAMuF,SAASjF,GAClC,OAAOi5D,EAAcv5D,EAAOwF,EAAYlF,EAASygD,GAAQ,IAASA,EAAM/gD,EAAMa,SAE3E,SAASo1C,EAAar1C,EAAUN,EAASN,EAAO6hD,GACnD,MAAMrhC,EAAYxgB,EAAMwgB,UAAUlgB,GAC5BkkB,EAA0B,MAAZlkB,EAAkB,QAAU,SAChD,GAAIN,EAAMuF,SAAS7G,WACQwC,IAAvBlB,EAAM0B,QAAQhD,MACbmjD,QAA2C3gD,IAAzB2gD,EAAexgD,MAAsB,CAExD,GADerB,EAAM0B,QAAQiB,OACjB,CACR,MAAMm3D,EAA6B,CAG/B,CAACx5D,EAAU,KAAM,IAAaM,EAAU4f,EAAW,GAAI,CAAEnR,KAAM,MAEnE,GAAI,YAAiBrP,EAAMuF,SAAS7G,MAChC,OAAOG,OAAOC,OAAOD,OAAOC,OAAO,GAAIg7D,GAA6BlB,EAAY,OAAQ54D,EAAO,CAAEoF,UAAWof,KAE3G,GAAI,YAAWxkB,EAAMuF,SAAS7G,MAC/B,OAAOG,OAAOC,OAAOD,OAAOC,OAAO,GAAIg7D,GAA6BlB,EAAY,OAAQ54D,EAAO,CAAEoF,UAAWof,KAE3G,QAA2BtjB,IAAvBlB,EAAM0B,QAAQhD,KACnB,OAAOG,OAAOC,OAAOD,OAAOC,OAAO,GAAIg7D,GAA6B,CAAE,CAACt1C,GAAc,CAAEnjB,MAAOrB,EAAM0B,QAAQhD,QAE3G,GAAImjD,QAA2C3gD,IAAzB2gD,EAAexgD,MACtC,OAAOxC,OAAOC,OAAOD,OAAOC,OAAO,GAAIg7D,GAA6B,CAAE,CAACt1C,GAAcq9B,SAIzF,IAAS,IAAY3qC,iCAAiClX,EAAM0B,QAAQG,OAG5E,MAAM,KAAEwN,EAAO,GAAMzO,EACrB,MAAO,CAEH,CAACN,GAAU,IAAaM,EAAU4f,EAAW,CAAEzZ,UAAW,SAAW,CAAEsI,MAAO,EAAIA,GAAQ,IAC1F,CAACmV,GAAcq9B,GAAkB,IAAYrhC,EAAWnR,IAGzD,SAAS0qD,EAA8Bz5D,EAASN,EAAOg6D,EAAenY,GACzE,MAAMoY,EAA4B,MAAZ35D,EAAkB,KAAO,KACzCkkB,EAA0B,MAAZlkB,EAAkB,QAAU,SAChD,OAAOzB,OAAOC,OAAOD,OAAOC,OAAO,GAAIo7D,EAAc55D,EAASN,EAAOg6D,EAAe,CAAE50D,UAAW60D,KAAmBrB,EAAY,OAAQ54D,EAAO,CAAEisB,WAAY41B,EAAgBz8C,UAAWof,KAErL,SAAS21C,GAAY,SAAEv5D,EAAQ,UAAEsO,EAAS,QAAE5O,EAAO,KAAE+O,EAAI,UAAEmR,EAAS,QAAE9e,EAAO,QAAE6Z,EAAU,EAAC,QAAE3X,IAC/F,MAAMg+C,EAAa,CACft2C,EAAG1H,EAAU2X,EAAU,EACvBiC,GAAI5Z,EAAU,EAAI2X,EAClBhQ,EAAG3H,EAAU,EAAI2X,EACjBkC,GAAI7Z,EAAU2X,EAAU,GAEtBkmC,EAAWnhD,IAAY,IAAI,IAAK,IACtC,OAAI,YAAUM,EAASmB,MAAQnB,EAASgC,SAC7B,CACH,CAAC6+C,GAAW,IAAQ,CAChBnhD,UACAM,WACA4f,YACA9e,UACA2N,MAAO,EAAIA,GAAQ,EACnB0N,OAAQ6kC,KAActhD,QAE1B,CAACA,GAAU,IAAQ,CACfA,UACAM,WACA4f,YACA9e,UACA2N,KAAM,GAAK,EAAIA,GAAQ,EACvB0N,OAAQ6kC,EAAWthD,MAItB,YAASM,EAASmB,MAAQ,YAAWmN,GACnC,CACH,CAACuyC,GAAW,IAAa7gD,EAAU4f,EAAW,GAAI,CAAEzD,OAAQ6kC,KAActhD,QAC1E,CAACA,GAAU,IAAa4O,EAAWsR,EAAW,GAAI,CAAEzD,OAAQ6kC,EAAWthD,WAI3E,IAAS,IAAY6Y,yBAAyBsoC,IAO/C,SAASyY,EAAc55D,EAASN,EAAOisB,GAAY,UAAE7mB,GAAc,IAEtE,MAAM,SAAEG,EAAQ,KAAEpC,EAAI,QAAEzB,EAAO,OAAEb,EAAM,MAAEmc,GAAUhd,EAC7CwF,EAAaD,EAASjF,GACtB85D,EAAc70D,EAASjF,IAAY,IAAI,IAAK,KAC5CkgB,EAAYxgB,EAAMwgB,UAAUlgB,GAC5BsB,EAAQ5B,EAAMW,kBAAkBL,GAChCyc,EAAS,IAAczc,EAASN,EAAM0B,SAyB5C,MAAO,CACH,CAAC0D,GAAa9E,GAzBAkF,IAAeD,EAAS6mB,WAAY7mB,EAAS8mB,UAGzD,IAAa,CACX/rB,UACAkF,aACA40D,cACA14D,UACAb,SACA2f,YACA5e,QACAob,QACAD,SACAkP,WAAY,IAAoB,CAC5BvqB,UACAb,SACAorB,aACA3rB,UACAkgB,YACA5e,QACAuB,OACAk3D,yBAA0BD,MAnB9B,CAAEn4D,MAAOjC,EAAMie,QAAQ3d,KA0BnC,MAAMg6D,EAAoB,CACtBC,KAAM,IACN3hD,OAAQ,KACR4hD,MAAO,MAELC,EAAsB,CACxBC,IAAK,IACLC,OAAQ,KACRC,OAAQ,MAEL,SAASC,EAAqBv6D,EAASN,GAAO,WAAEisB,EAAU,YAAEC,EAAW,MAAElJ,IAC5E,OAAIA,EACO83C,EAAcx6D,EAASN,EAAO,CAAEisB,aAAYC,gBAEhDguC,EAAc55D,EAASN,EAAOisB,GAElC,SAAS6uC,EAAcx6D,EAASN,GAAO,WAAEisB,EAAU,YAAEC,IACxD,MAAM,QAAExqB,EAAO,OAAEb,GAAWb,EAEtBwkB,EAA0B,MAAZlkB,EAAkB,QAAU,SAC1Cy6D,EAkBV,SAAwB/6D,EAAOisB,EAAY3rB,GACvC,MAAM,SAAEiF,EAAQ,KAAEpC,EAAI,QAAEzB,EAAO,MAAEsb,EAAK,OAAEnc,GAAWb,EAC7Cg7D,EAA0B,OAAZ16D,EAAmB,IAAM,IACvCkkB,EAA0B,OAAZlkB,EAAmB,QAAU,SAC3CkF,EAAaD,EAASy1D,GACtBx6C,EAAYxgB,EAAMwgB,UAAUw6C,GAC5Bp5D,EAAQ5B,EAAMW,kBAAkBq6D,GAChCj+C,EAAS,IAAczc,EAASN,EAAM0B,SAC5C,IAAK8D,IAAeD,EAAS6mB,UAAY7mB,EAAS8mB,WAE9C,MAAO,CAAE,CAAC/rB,GAAU,CAAE2B,MAAOjC,EAAMie,QAAQ3d,KAE/C,MAAM24D,EAAW,IAAc,CAC3B34D,UACAkF,aACA40D,YAAa70D,EAASjF,GACtBoB,UACAb,SACA2f,YACA5e,QACAob,QACAD,SACAkP,gBAAY/qB,IAEhB,QAAiBA,IAAb+3D,EACA,MAAO,CAAE,CAAC34D,GAAU24D,GAKxB,OAAO,YAAgBgC,EAAgB36D,EAASoB,GAAUu5D,EAAgB36D,EAAS,CAC/E,CAACA,GAAU,YAAeA,EAASoB,EAASb,EAAOuM,OACnD,CAACoX,GAAc,YAAeA,EAAa9iB,EAASb,EAAOuM,SAC3D6tD,EAAgB36D,EAASO,EAAOsC,IAAQ83D,EAAgB36D,EAASO,EAAOsC,MAAO,CAC/E,CAAC7C,GAAU,IAAoB,CAC3BoB,UACAb,SACAorB,aACA3rB,UACAkgB,YACA5e,QACAuB,OACAk3D,yBAA0B90D,EAASjF,IAR5B,KApDI46D,CAAel7D,EAAOksB,EAFZ,MAAZ5rB,EAAkB,KAAO,MAGpC8E,EAAY21D,EAAWv2C,GAGjC,SAAwBlkB,EAASoB,EAASb,GACtC,MAAMs6D,EAA2B,MAAZ76D,EAAkB,QAAU,WAC3C2E,EAAQ,YAAgBvD,EAAQy5D,GAAe,YAAcA,EAAcz5D,EAASb,IAC1F,MAAgB,MAAZP,EACOg6D,EAAkBr1D,GAAS,UAG3Bw1D,EAAoBx1D,GAAS,UAVIm2D,CAAe96D,EAASoB,EAASb,GAAUP,EACvF,OAAOzB,OAAOC,OAAOD,OAAOC,OAAO,GAAIo7D,EAAc55D,EAASN,EAAOisB,EAAY,CAAE7mB,eAAe21D,GA8DtG,SAASE,EAAgB36D,EAASoB,GAC9B,MAAM8iB,EAA0B,OAAZlkB,EAAmB,QAAU,SACjD,OAAIoB,EAAQpB,GACD,CAAE,CAACA,GAAU,IAAeA,EAASoB,EAAQpB,KAE/CoB,EAAQ8iB,GACN,CAAE,CAACA,GAAc,CAAEnjB,MAAOK,EAAQ8iB,UADxC,I,gCCnaT,qfAOO,SAAS62C,EAAgBz7C,EAAG5f,EAAOs7D,GACtC,IAAK,MAAMr7D,KAAYq7D,EAAW,CAC9B,MAAMj6D,EAAQk6D,EAAct7D,EAAUD,EAAM0B,QAAS1B,EAAMa,aAC7CK,IAAVG,IACAue,EAAE3f,GAAY,CAAEoB,MAAOA,IAG/B,OAAOue,EAEJ,SAAS47C,EAAUr4D,GACtB,MAAO,GAAG4J,OAAO5J,EAAKtB,KAAMsB,EAAKiK,OAAS,IAEvC,SAASquD,EAAoBn7D,EAAS6C,EAAMtC,GAC/C,OAAO,YAAgBsC,EAAK7C,GAAUi7D,EAAcj7D,EAAS6C,EAAMtC,IAMhE,SAAS06D,EAAcj7D,EAAS6C,EAAMtC,GAAQ,UAAEuE,GAAc,IAEjE,OAAO,YAEPA,EAAYs2D,EAAep7D,EAAS6C,EAAMtC,EAAOuM,YAASlM,EAAWw6D,EAAep7D,EAAS6C,EAAMtC,EAAOuM,OAE1GhI,EAAYvE,EAAOsC,EAAKtB,MAAMuD,QAAalE,EAAWL,EAAOsC,EAAKtB,MAAMvB,GAGxE8E,EAAYvE,EAAOsC,KAAKiC,GAAavE,EAAOsC,KAAK7C,IAE9C,SAASo7D,EAAe5kD,EAAM3T,EAAMw4D,GACvC,MAAMC,EAASJ,EAAUr4D,GACzB,IAAI9B,EACJ,IAAK,MAAM+L,KAASwuD,EAAQ,CACxB,MAAMC,EAAcF,EAAiBvuD,GAG/B8H,EAAI4B,EACN+kD,QAAkC36D,IAAnB26D,EAAY3mD,KAC3B7T,EAAQw6D,EAAY3mD,IAG5B,OAAO7T,EAEJ,SAASy6D,EAAgBl7D,EAAUm7D,EAAiBvrD,EAAM3P,GAC7D,GAAI,YAAqBD,GAAW,CAChC,MAAM0oB,EAAa,YAAgB1oB,IAAaA,EAAgB,OAAKA,EAAgB,MAAEiB,OAAS,IAAUU,IAC1G,MAAO,CACHmL,OAAQsuD,EAAqB,YAAQp7D,EAAU,CAC3C4P,SACA5P,EAASgC,SAAUm5D,EAAiBl7D,EAAOgL,KAAK1E,gBAAiBtG,EAAOwzB,WAAY/K,GAAY,IAGvG,CACD,MAAMriB,EAASg1D,EAAar7D,EAAUm7D,EAAiBl7D,GACvD,GAAI,YAAUD,EAASmB,KAAM,CAGzB,MAAO,CACH2L,OAAQwuD,EAHO,YAAQt7D,EAAU,CAAE4P,SACtB,YAAQ5P,EAAU,CAAE4P,OAAMzJ,UAAW,QAEAE,EAAQpG,IAG7D,MAAsB,iBAAlBD,EAASiB,MAA2BoF,EAClC,CACHyG,UAAWyuD,EAAW,YAAQv7D,EAAU,CAAE4P,OAAMzJ,UAAW,UAAYE,MAIpE,CAAEyG,aAAc,YAAQ9M,EAAU,CAAE4P,aAOhD,SAASyrD,EAAar7D,EAAUm7D,EAAiBl7D,GAEpD,OAAIk7D,IAGAn7D,EAASiB,OAAS,IAEXhB,EAAOo7D,kBAFlB,GAMJ,SAASE,EAAWl6D,EAAOgF,GACvB,gBAAiBhF,OAAWgF,GAAU,OAEnC,SAASm1D,EAAiBn6D,EAAO85D,EAAiBl7D,GACrD,OAAOs7D,EAAWl6D,EAAO85D,GAAmBl7D,EAAOo7D,cAEhD,SAASC,EAAoB55B,EAAYC,EAAUt7B,EAAQpG,GAC9D,SAAUyhC,uBAAgCA,iBAA0B85B,EAAiB95B,EAAYr7B,EAAQpG,gBAAqBu7D,EAAiB75B,EAAUt7B,EAAQpG,KAK9J,SAASm7D,EAAqB/5D,EAAOW,EAAUqE,EAAQE,EAAiBk1D,EAC/E/yC,EAAYqvB,GAAe,GACvB,OAAK/1C,GAAYqE,GAEbA,EAASA,GAAUo1D,IACL1jB,KACArvB,EAAa,MAAQ,gBAAgBrnB,OAAWgF,WAG1D,EAIG,YAAiBrE,EAAUX,EAAOkF,EAAiBmiB,GAM3D,SAASgzC,EAAWjb,EAAUkb,GACjC,OAAO,YAAMlb,GAAU95C,OAAO,CAAC0Y,EAAGu8C,KAC9Bv8C,EAAEhe,MAAM6E,KAAK,YAAQ01D,EAAiBD,IACtCt8C,EAAE/M,MAAMpM,KAAK01D,EAAgB16D,MAAQ,aAC9Bme,GACR,CAAEhe,MAAO,GAAIiR,MAAO,KAEpB,SAASupD,EAAoBC,EAAIC,GACpC,MAAM39D,EAAS,IAAI09D,GAUnB,OATAC,EAAGt8D,QAAQu8D,IACP,IAAK,MAAMC,KAAa79D,EAEpB,GAAI,YAAU69D,KAAe,YAAUD,GACnC,OAGR59D,EAAO8H,KAAK81D,KAET59D,EAEJ,SAAS89D,EAAWC,EAAQC,GAC/B,OAAID,IAAWC,GAAWA,EAIhBD,EAMCA,EAAS,KAAOC,EAJhBA,EAJAD,EAWR,SAASE,EAAoBv4D,EAAIC,GACpC,GAAI,YAAQD,EAAGrD,QAAU,YAAQsD,EAAGtD,OAChC,MAAO,CACH6gB,SAAUxd,EAAGwd,SACb7gB,MAAOo7D,EAAoB/3D,EAAGrD,MAAOsD,EAAGtD,QAG3C,IAAK,YAAQqD,EAAGrD,SAAW,YAAQsD,EAAGtD,OACvC,MAAO,CACH6gB,SAAUxd,EAAGwd,SACb7gB,MAAOy7D,EAAWp4D,EAAGrD,MAAOsD,EAAGtD,QAIvC,MAAM,IAAIqP,MAAM,gC,gCC5KpB,+NAQO,MAAMwsD,EACT,YAAYh7C,EAAW,GAAIgF,EAAW,IAClCnoB,KAAKmjB,SAAWA,EAChBnjB,KAAKmoB,SAAWA,EAEpB,QACI,OAAO,IAAIg2C,EAAM,YAAUn+D,KAAKmjB,UAAW,YAAUnjB,KAAKmoB,WAE9D,UAGI,OAAOroB,OAAOC,OAAOD,OAAOC,OAAO,GAAIC,KAAKmjB,UAAWnjB,KAAKmoB,UAEhE,IAAIpL,GAEA,OAAO,YAAgB/c,KAAKmjB,SAASpG,GAAM/c,KAAKmoB,SAASpL,IAE7D,gBAAgBA,GAEZ,YAA2B5a,IAAvBnC,KAAKmjB,SAASpG,GACP,CAAEoG,UAAU,EAAM7gB,MAAOtC,KAAKmjB,SAASpG,SAElB5a,IAAvBnC,KAAKmoB,SAASpL,GACZ,CAAEoG,UAAU,EAAO7gB,MAAOtC,KAAKmoB,SAASpL,IAE5C,CAAEoG,UAAU,EAAO7gB,WAAOH,GAErC,gBAAgB4a,EAAKza,QACGH,IAAhBG,EAAMA,OACNtC,KAAKmF,IAAI4X,EAAKza,EAAMA,MAAOA,EAAM6gB,UAGzC,IAAIpG,EAAKza,EAAO6gB,GAGZ,cAFOnjB,KAAKmjB,EAAW,WAAa,YAAYpG,GAChD/c,KAAKmjB,EAAW,WAAa,YAAYpG,GAAOza,EACzCtC,KAEX,iBAAiB+c,EAAKmE,QAEM/e,IAApB+e,EAAEiC,SAASpG,GACX/c,KAAKmF,IAAI4X,EAAKmE,EAAEiC,SAASpG,IAAM,QAEN5a,IAApB+e,EAAEiH,SAASpL,IAChB/c,KAAKmF,IAAI4X,EAAKmE,EAAEiH,SAASpL,IAAM,GAGvC,kBAAkBA,EAAKmE,QAEJ/e,IAAX+e,EAAEnE,IACF/c,KAAKmF,IAAI4X,EAAKmE,EAAEnE,IAAM,GAO9B,QAAQ6mB,GACJ,IAAK,MAAM7mB,KAAO,YAAK6mB,EAAM3hB,WAAY,CACrC,MAAM4kB,EAAMjD,EAAMl+B,gBAAgBqX,GAClC/c,KAAKY,gBAAgBmc,EAAK8pB,KAI/B,SAASuM,EAAa9wC,GACzB,MAAO,CACH6gB,UAAU,EACV7gB,SAGD,SAAS87D,EAAa97D,GACzB,MAAO,CACH6gB,UAAU,EACV7gB,SAGD,SAAS+7D,EAAoBC,GAChC,MAAO,CAAC34D,EAAIC,EAAI1E,EAAUyX,KACtB,MAAM4lD,EAAOD,EAAQ34D,EAAGrD,MAAOsD,EAAGtD,OAClC,OAAIi8D,EAAO,EACA54D,EAEF44D,EAAO,EACL34D,EAEJ44D,EAAkB74D,EAAIC,EAAI1E,EAAUyX,IAG5C,SAAS6lD,EAAkB74D,EAAIC,EAAI1E,EAAUyX,GAKhD,OAJIhT,EAAGwd,UAAYvd,EAAGud,UAClB,IAAS,IAAYzK,yBAAyBxX,EAAUyX,EAAYhT,EAAGrD,MAAOsD,EAAGtD,QAG9EqD,EAEJ,SAAS84D,EAAwB94D,EAAIC,EAAI1E,EAAUyX,EAAY+lD,EAAaF,GAC/E,YAAWr8D,IAAPwD,QAAiCxD,IAAbwD,EAAGrD,MAEhBsD,EAEPD,EAAGwd,WAAavd,EAAGud,SACZxd,EAEFC,EAAGud,WAAaxd,EAAGwd,SACjBvd,EAEF,YAAUD,EAAGrD,SAAW,YAAUsD,EAAGtD,OACnCqD,EAGA+4D,EAAW/4D,EAAIC,EAAI1E,EAAUyX,K,iCCrH5C,+CAEO,SAAS5F,EAAUtF,EAAM3L,GAI5B,YAHeK,IAAXL,IACAA,EAAS,YAAW2L,EAAK3L,SAQjC,SAA8B2L,EAAM3L,EAAS,IACzC,OAAOuT,EAAWnL,IAAIuD,EAAM,CAAE3L,WAPvB68D,CAAqBlxD,EAAM3L,GAEtC,MAAMuT,EAAa,IARnB,QAQuB,I,gCCRvB,yXAQO,MAAMupD,EAAQ,SACRC,EAAQ,SACRC,EAAS,UACTC,EAAmB,qBACnBC,EAAuB,qBAC9B3H,EAAY,CAAEx1C,OAAA,IAAQijC,MAAA,IAAOE,SAAA,KAC5B,SAASia,EAAiBh+D,EAAOsvD,GACpC,MAAMwC,EAAa9xD,EAAMG,UAAU6a,UACnC,IAAK,MAAMxc,KAAQszD,EACf,GAAI,YAAeA,EAAYtzD,GAAO,CAClC,MAAMsuD,EAAMgF,EAAWtzD,GACvB8wD,EAAGxC,EAAKsJ,EAAUtJ,EAAIjrD,QAc3B,SAASyW,EAAStY,GAAO,OAAEy4B,GAAW,CAAEA,QAAQ,IACnD,IAAIj6B,EAAOi6B,EAAS,YAAYz4B,EAAMxB,MAAQwB,EAAMxB,KACpD,MAAMy/D,EAZV,SAAuBj+D,GACnB,IAAIV,EAASU,EAAMV,OACnB,KAAOA,IACC,YAAaA,IAGjBA,EAASA,EAAOA,OAEpB,OAAOA,EAIY4+D,CAAcl+D,GACjC,GAAIi+D,EAAY,CACZ,MAAM,MAAE3jD,GAAU2jD,EAClB,IAAK,MAAM39D,KAAW,IACdga,EAAMha,KACN9B,kBAAuB8B,UAAgB,YAAoB29D,EAAWluD,QAAQzP,GAAU,aAIpG,OAAO9B,EAEJ,SAAS2/D,EAAoBn+D,GAChC,IAAIo+D,GAAa,EAIjB,OAHAJ,EAAiBh+D,EAAOue,IACpB6/C,EAAaA,GAAc7/C,EAAQI,QAAQC,MAAM8lC,KAAK7lC,GAAQA,EAAK5c,QAAU,OAE1Em8D,EAEJ,SAASC,EAAqBz7C,GACjC,OAAOA,EAAUlV,OAAOkyB,QAAQk+B,IAAqB,I,gCCtDlD,SAASQ,EAAU3/D,GACtB,QAASA,EAAU,IAEhB,SAAS4/D,EAAa5/D,GACzB,QAASA,EAAa,OAEnB,SAAS6/D,EAAY7/D,GACxB,SAASA,EAAW,MAAM2/D,EAAU3/D,IAAU4/D,EAAa5/D,IAAU8/D,EAAY9/D,IAE9E,SAAS8/D,EAAY9/D,GACxB,OAAOA,IAAS+/D,EAAoB//D,IAASggE,EAAkBhgE,IAASigE,EAAqBjgE,IAE1F,SAAS+/D,EAAoB//D,GAChC,QAASA,EAAe,SAErB,SAASggE,EAAkBhgE,GAC9B,QAASA,EAAa,OAEnB,SAASigE,EAAqBjgE,GACjC,QAASA,EAAgB,UAnB7B,kTAqBO,MAAMkgE,EAAO,OACPC,EAAM,O,iCCtBnB,+EACO,MAAMC,EAAsB,CAC/B9lB,4BAA6B,IAC7BC,4BAA6B,IAC7BC,0BAA2B,IAC3BC,0BAA2B,IAElB4lB,EAA+B,CACxCC,WAAY,EACZC,cAAe,EACf7kD,QAAS,EACT8kD,aAAc,EACdvmB,UAAW,EACXwmB,UAAW,EACXn4D,OAAQ,EACRI,WAAY,EACZg4D,eAAgB,EAChBC,gBAAiB,EACjBC,oBAAqB,EACrBC,oBAAqB,EACrBC,kBAAmB,EACnBC,UAAW,EACXhrB,WAAY,EACZE,cAAe,EACfC,WAAY,EACZC,UAAW,EACXC,cAAe,EACfC,eAAgB,EAChBC,gBAAiB,EACjBuB,WAAY,EACZmpB,YAAa,EACbzqB,aAAc,EACduB,aAAc,EACdlhB,aAAc,EACd0iB,gBAAiB,EACjB2nB,QAAS,EACTC,QAAS,EACT9iD,OAAQ,EACRpa,OAAQ,EACRK,QAAS,EACT88D,WAAY,EACZC,YAAa,EACbC,WAAY,EACZC,iBAAkB,EAClBC,gBAAiB,EACjBC,aAAc,EACdC,cAAe,EACfC,WAAY,EACZC,kBAAmB,EACnBC,kBAAmB,EACnBC,WAAY,EACZ5oB,UAAW,EACXM,YAAa,EACb/xC,MAAO,EACP8wC,WAAY,EACZkB,YAAa,EACbhB,cAAe,EACfC,WAAY,EACZC,UAAW,EACXC,cAAe,EACfc,eAAgB,EAChBb,gBAAiB,EACjBC,WAAY,EACZC,aAAc,EACdsO,YAAa,EACbzwB,aAAc,EACdzzB,KAAM,EACN0I,OAAQ,EACRstC,OAAQ,GAEqB,YAAKmnB,I,iCCtEtC,8CACO,SAASyB,EAAmB94C,GAC/B,MAAM,OAENhI,EAAM,MAAE0lC,EAAK,OAAEtoC,EAAM,OAAEpa,EAAM,MAE7BwC,GAAUwiB,EAEV+4C,EAAkB,YAAO/4C,EAAa,CAAC,SAAU,QAAS,SAAU,SAAU,UAG9E,MAAO,CAAExkB,KAFItE,OAAOC,OAAOD,OAAOC,OAAO,GAAI4hE,GAAmBv7D,EAAQ,CAAE8C,KAAM9C,GAAU,IAE3EgnD,QADCttD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAK6gB,EAAS,CAAEA,UAAW,IAAO0lC,EAAQ,CAAEA,SAAU,IAAOtoC,EAAS,CAAEA,UAAW,IAAOpa,EAAS,CAAEA,UAAW,O,iCCV5L,mGAOO,MAAMg+D,EACT,IAAIn0D,EAAMgN,GACN,OAAI,YAAYhN,GACLzN,KAAKwb,SAAS/N,EAAMgN,GAEtB,YAAahN,GACXzN,KAAK6hE,UAAUp0D,EAAMgN,GAEvB,YAAchN,GACZzN,KAAK8hE,WAAWr0D,EAAMgN,GAExB,YAAchN,GACZzN,KAAK+hE,WAAWt0D,EAAMgN,GAExB,YAAahN,GACXzN,KAAKgiE,UAAUv0D,EAAMgN,GAGrBza,KAAKib,eAAexN,EAAMgN,GAGzC,eAAehN,EAAMgN,GACjB,GAAI,YAAYhN,GACZ,OAAOzN,KAAK4c,SAASnP,EAAMgN,GAE1B,GAAI,YAAWhN,GAChB,OAAOzN,KAAK6b,QAAQpO,EAAMgN,GAE9B,MAAM,IAAI9I,MAAM,IAAY4D,YAAY9H,IAE5C,SAASA,EAAMgN,GACX,OAAO3a,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAO,CAAEkQ,MAAOlQ,EAAKkQ,MAAMzT,IAAI+3D,GAAWjiE,KAAKib,eAAegnD,EAASxnD,MAElH,WAAWhN,EAAMgN,GACb,OAAO3a,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAO,CAAE2R,QAAS3R,EAAK2R,QAAQlV,IAAI+3D,GAAWjiE,KAAKkK,IAAI+3D,EAASxnD,MAE3G,WAAWhN,EAAMgN,GACb,OAAO3a,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAO,CAAE0R,QAAS1R,EAAK0R,QAAQjV,IAAI+3D,GAAWjiE,KAAKkK,IAAI+3D,EAASxnD,MAE3G,UAAUhN,EAAMgN,GACZ,MAAM,OAAEzM,GAAWP,EAAMkP,EAAO,YAAOlP,EAAM,CAAC,WAC9C,OAAO3N,OAAOC,OAAOD,OAAOC,OAAO,GAAI4c,GAAO,CAAE3O,OAAQA,EAAO9D,IAAI+3D,GAAWjiE,KAAKkK,IAAI+3D,EAASxnD,MAEpG,SAAShN,EAAMgN,GACX,OAAO3a,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAO,CAE1CA,KAAMzN,KAAKkK,IAAIuD,EAAKA,KAAMgN,KAElC,UAAUhN,EAAMgN,GACZ,OAAO3a,OAAOC,OAAOD,OAAOC,OAAO,GAAI0N,GAAO,CAAEA,KAAMzN,KAAKkK,IAAIuD,EAAKA,KAAMgN,Q,iCCxDlF,8GASA,MAAMynD,EAAqB,CACvBl9D,KAAM,EACN6U,OAAQ,EACR9G,UAAW,GAKR,MAAMovD,EAAkB,CAAC,IAAK,IAAM,IAAM,IAAO,IAAQ,IAAQ,IAAM,IAAM,KACvEC,EAAyB,CAAC,IAAK,KAkCrC,SAASnkD,EAAMmZ,EAAG5wB,EAAU8G,EAAM,IACrC,MAAMlJ,EAAO,YAAUgzB,GAAKA,EAAEt0B,KAAOs0B,EAErC,IAAK,YAAS+qC,EAAiB/9D,GAC3B,OAAO,KAEX,MAAM0Z,EAvCV,SAAiCtX,GAC7B,MAAMskB,EAAOtkB,EAAS+F,EAChBwe,EAAOvkB,EAASgG,EACtB,GAAI,YAAWse,IAAS,YAAWC,GAC/B,GAAkB,iBAAdD,EAAKhoB,MAAyC,iBAAdioB,EAAKjoB,KAAyB,CAC9D,GAAIgoB,EAAK7M,MACL,MAAO,IAEN,GAAI8M,EAAK9M,MACV,MAAO,IAGX,KAAM6M,EAAKnkB,aAAgBokB,EAAKpkB,UAC5B,OAAOmkB,EAAKnkB,UAAY,IAAM,QAGjC,IAAkB,iBAAdmkB,EAAKhoB,KACV,MAAO,IAEN,GAAkB,iBAAdioB,EAAKjoB,KACV,MAAO,QAGV,IAAI,YAAWgoB,IAAuB,iBAAdA,EAAKhoB,KAC9B,MAAO,IAEN,GAAI,YAAWioB,IAAuB,iBAAdA,EAAKjoB,KAC9B,MAAO,KAYUu/D,CAAwB77D,GAC7C,IAAKsX,EACD,OAAO,KAEX,MAAMwkD,EAAkB97D,EAASsX,GAC3BykD,EAAe,YAAiBD,GAAmB,YAAQA,EAAiB,SAAMngE,EAClFyqB,EAAoC,MAAjB9O,EAAuB,IAAM,IAChD0kD,EAAeh8D,EAASomB,GACxB61C,EAAiB,YAAiBD,GAAgB,YAAQA,EAAc,SAAMrgE,EAE9E+/C,EAAU,IAAqB15C,OAAO,CAACk6D,EAAInhE,KAE7C,GAAgB,YAAZA,GAAyB,YAAgBiF,EAAUjF,GAAU,CAC7D,MAAMkF,EAAaD,EAASjF,IAC3B,YAAQkF,GAAcA,EAAa,CAACA,IAAanF,QAAQ0gD,IACtD,MAAMngD,EAAW,YAAiBmgD,GAClC,GAAIngD,EAAS8E,UACT,OAGJ,MAAMiD,EAAI,YAAiB/H,GAAY,YAAQA,EAAU,SAAMM,IAG9DyH,GAEIA,IAAM64D,GAAkB74D,IAAM24D,IAC/BG,EAAG36D,KAAK,CAAExG,UAASM,eAI/B,OAAO6gE,GACR,IAEH,IAAI1kD,EAaJ,QAZ8B7b,IAA1BmgE,EAAgBrkD,MAEZD,EADA,YAAUskD,EAAgBrkD,OACjBqkD,EAAgBrkD,MAAQ,OAAS,KAGjCqkD,EAAgBrkD,MAGxBikC,EAAQnhD,OAAS,GAAK,YAASqhE,EAAwBh+D,KAE5D4Z,EAAS,SAERA,IAzFIkkD,EAyFqBlkD,GAC1B,OAAO,KAEX,GAAI,YAAYxX,IAAgC,IAAnB07C,EAAQnhD,OACjC,OAAO,KAGX,GAAIuhE,EAAgBz/D,OAASy/D,EAAgBz/D,MAAMC,MAAQw/D,EAAgBz/D,MAAMC,OAAS,IAAUwlD,OAAQ,CACxG,GAAIh7C,EAAIq1D,uBACJ,OAAO,KAGP,IAAS,IAAYvpD,0BAA0BkpD,EAAgBz/D,MAAMC,OAI7E,OAAI,YAAgB0D,EAAUsX,IAAiB,IAAI,IAAK,WACtB3b,IAA1BmgE,EAAgBrkD,OAChB,IAAS,IAAY9E,sBAAsB2E,IAExC,OAGPwkD,EAAgB37D,YAAc,YAAS,IAAS27D,EAAgB37D,YAChE,IAAS,IAAY0S,2BAA2BipD,EAAgB37D,YAE7D,CACHo7C,eAAgBygB,EAAe51C,OAAmBzqB,EAClD2b,eACAiP,OAAQ,YAAW3oB,GACnB89C,UACAlkC,a,iCCvIR,uEAIO,MAAM4kD,UAAwB,IACjC,YAAYn1D,EAAMmqB,EAAUr3B,EAAQqe,EAAiB9c,EAAQ+c,EAAUC,GACnEjf,MAAM4N,EAAMmqB,EAAUr3B,EAAQqe,EAAiB9c,EAAQ+c,EAAUC,GAErE,YACI9e,KAAKoB,UAAUxB,KAAO,YAAUI,MAChCA,KAAKM,SAASgB,QAAQjB,IAClBA,EAAMspB,cAGd,kBAII3pB,KAAKoB,UAAU6a,UAAY,GAC3B,IAAK,MAAM5b,KAASL,KAAKM,SACrBD,EAAMupB,kBACN,YAAKvpB,EAAMe,UAAU6a,WAAW3a,QAAQyb,IACpC/c,KAAKoB,UAAU6a,UAAUc,GAAO1c,EAAMe,UAAU6a,UAAUc,KAItE,iBACI,IAAK,MAAM1c,KAASL,KAAKM,SACrBD,EAAMwpB,iBAGd,sBACI,IAAK,MAAMxpB,KAASL,KAAKM,SACrBD,EAAMusD,sBAId,iCAAiCjtC,GAC7B,OAAO3f,KAAKM,SAASkI,OAAO,CAACshB,EAAIzpB,IAAUA,EAAM4O,iCAAiC6a,GAAKnK,GAE3F,kBAEI,OADA3f,KAAKM,SAASgB,QAAQjB,GAASA,EAAM0pB,mBAC9B,GAEX,wBACI,OAAO/pB,KAAKM,SAASkI,OAAO,CAACmX,EAAStf,IAC3B,IAAIsf,KAAYtf,EAAMoO,yBAC9B,YAAsBzO,OAE7B,sBAAsBJ,GAClB,OAAOI,KAAKM,SAASkI,OAAO,CAACwhB,EAAI3pB,IAAUA,EAAM4N,sBAAsB+b,GAAKpqB,GAEhF,gBAEI,OAAOI,KAAKM,SAAS4J,IAAI7J,IACrB,MAAM+G,EAAQ/G,EAAM+N,gBACdC,EAAQhO,EAAMiO,qBACdvI,EAAc1F,EAAMkO,0BAAyB,GACnD,OAAOzO,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,QAASrD,KAAMY,EAAM6e,QAAQ,UAAa9X,EAAQ,CAAEA,SAAU,IAAOiH,EAAQ,CAAEA,SAAU,IAAOtI,EAAc,CAAE+I,OAAQ,CAAEC,OAAQhJ,IAAkB,IAAM1F,EAAM2O,sB,iCC1DnP,8CAKA,MAAM6zD,EAAgB,CAClBtjD,IAAKC,GACuB,WAAjBA,EAAQ1c,MAAyC,WAApB0c,EAAQV,SAAwBU,EAAQtE,MAAyB,WAAjBsE,EAAQtE,KAEhGvN,MAAO,CAAC1M,EAAOue,EAASC,EAAQqjD,KAGvBA,EAAQ5iD,WACFV,EAAQW,OACd2iD,EAAQxjD,cACFE,EAAQF,OAEvBI,gBAAiB,CAACze,EAAOue,EAASG,KAC9B,MAAMlgB,EAAO+f,EAAQ/f,KACfqgB,EAAON,EAAQI,QACf1E,EAAOsE,EAAQtE,KACflR,EAAOwV,EAAQxV,MAAQwV,EAAQxV,KAAK,GACpC6mD,EAAQ,IAAQtxC,IAAIC,GAAW,2CAA6C,QAelF,OAdAM,EAAKD,MAAMve,QAAQ,CAAC6U,EAAG8I,KACnB,MAAM8jD,EAAS,eAAWtjE,KAAQ0W,EAAEjT,SAClByc,EAAQjR,OAAOwS,GAAKA,EAAEzhB,OAASsjE,GAClChiE,QACX4e,EAAQuZ,QAAQp5B,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,KAAMsjE,GAAW/4D,EAAO,CAAEA,KAAM,YAAaA,EAAKiV,KAAQ,CAAE3c,MAAO,OAAU,CAAE4d,GAAIV,EAAQW,OAC/H,CACE,CACIA,OAAQX,EAAQW,OAChBpR,sDAAuD,YAAoBoH,EAAEjT,MAAO2tD,cAG1F,GAAI31C,KAAMA,EAAK/E,EAAEjT,QAAUgY,EAAK/E,EAAE5U,UAAY2Z,OAGzDyE,GAEXA,QAAS,CAAC1e,EAAOue,EAASG,KACtB,MAAMlgB,EAAO+f,EAAQ/f,KACfqgB,EAAON,EAAQI,QACfjR,EAASgR,EAAQjR,OAAOwS,GAAKA,EAAEzhB,OAASA,EAAO,KAAO,GACtD85B,EAAS95B,EAAO,IAChB+L,EAASsU,EAAKD,MAAM3V,IAAIiM,GAAK,eAAW1W,KAAQ0W,EAAEjT,UAClDqI,EAAQC,EAAOtB,IAAIuK,MAAQA,cAAcpM,KAAK,QAMpD,OALImD,EAAOzK,SACP4N,EAAOI,UAAYxD,gBAAoBguB,eAAoB/tB,EAAOnD,KAAK,yBAEpEsG,EAAOrM,aACPqM,EAAOuR,GACPP,IAGA,O,iCCtDf,4BAGA,MACMqjD,EAAU,CACZzjD,IAAKC,GACuB,aAAjBA,EAAQ1c,MAAuB0c,EAAQwjD,QAElD32C,MAAO,CAACprB,EAAOue,EAAS6M,KACpB,MAAM,EAAE9f,EAAC,EAAEC,GAAMgT,EAAQI,QAAQL,IAC3B0X,EAAWh2B,EAAMmD,KACvB,GAAI,YAAW6yB,GAEX,OADA,IAAS,IAAYvhB,+BAA+BuhB,IAC7C5K,EAEX,MAAM42C,EAAU,CACZxjE,KAAMwB,EAAMie,QAbR,WAcJpc,KAAM,OACNqpB,KAAM,CAAEvsB,KAAMqB,EAAMie,QAAQ,UAC5BpQ,OAAQ,CACJC,OAAQjP,OAAOC,OAAO,CAAEmJ,KAAM,CAAE5G,MAAO,eAAiBmK,YAAa,CAAEnK,MAAO,KAAQ6G,OAAQ,CAAE7G,MAAO,eAAiB4gE,UAAW,CAAE5gE,OAAO,IAAU,YAAQrB,EAAO,CAAE25D,cAAc,MAEzLlrD,UAAW,CACP,CACI5M,KAAM,UACNyJ,EAAG,CAAEkF,KAAMlF,IAAOA,IAAMC,EAAK,qBAAuB,KACpDA,EAAG,CAAEiF,KAAMjF,IAAOD,IAAMC,EAAK,qBAAuB,KACpD7M,KAAM,CAACsB,EAAMmgB,iBAAiB,SAAUngB,EAAMmgB,iBAAiB,cAI3E,IAAIwf,EAAQ,EACRuiC,GAAS,EAab,OAZA92C,EAAM/qB,QAAQ,CAAC8C,EAAM6a,KACjB,MAAMxf,EAAO2E,EAAK3E,MAAQ,GACtBA,IAASwB,EAAMG,UAAUgD,KAAK,GAAG3E,KACjCmhC,EAAQ3hB,EAEHxf,EAAKohC,QAnCV,YAmC8B,IAC9BsiC,GAAS,KAGZA,GACD92C,EAAM8lC,OAAOvxB,EAAQ,EAAG,EAAGqiC,GAExB52C,IAGA,O,iCChDf,8DAGO,SAAS+2C,EAAqBniE,EAAOue,GACxC,MAAM/f,EAAO+f,EAAQ/f,KACf+zD,EAAW/zD,EAAO,IAClBqgB,EAAON,EAAQI,QACfixC,EAAQ,2CACRrlD,EAASsU,EAAKD,MACf3V,IAAIiM,IACL,MAAMtU,EAAWZ,EAAMY,SAASsU,EAAE5U,SAElC,OAAOM,GAAYA,EAASmB,QAClB,YAAoB/B,EAAM+P,QAAQmF,EAAE5U,QAAS,IAAKsvD,UACjD,YAAoB5vD,EAAM+P,QAAQmF,EAAE5U,QAAS,CAAEyG,UAAW,QAAU6oD,SACtE,YAAoB16C,EAAEjT,MAAO2tD,OAErCxoD,KAAK,MAQJ0G,WAAkB,YAAS9N,eAAmBuyD,YAepD,MAdgB,CACZ,CACI/zD,KAAMA,EAAO,IACbygB,GAAIV,EAAQW,OACN,CACE,CACIA,OAAQX,EAAQW,OAChBpR,uDAAwDA,OAAYvD,aACpEmW,OAAO,IAGb,KAKlB,MAAMmjC,EAAQ,CACVnlC,QAASyjD,EACTthD,WAAY,CAAC7gB,EAAOue,KAEhB,OADYA,EAAQ/f,KAAO,IACd,MAA4B,WAApB+f,EAAQV,QAAuB,iBAAmB,YAAS7d,SAGzE,O,iCCjDR,SAASoiE,EAAcniE,EAAUY,EAAQP,EAASqC,EAAQrB,GAE7D,MAAM+gE,EAAc,IACE,SAAd/gE,EAAuB,CAAC,YAAc,GAC9B,MAAZhB,EAAkB,QAAU,WAExBqC,EAAS,CAAC,OAASA,EAAOqQ,OAAO,EAAG,GAAGlC,cAAgBnO,EAAOqQ,OAAO,IAAM,GAC/E,QAEJ,IAAK,MAAMsvD,KAAcD,EACrB,GAAIxhE,EAAOyhE,SAAgDphE,IAAjCL,EAAOyhE,GAAYriE,GACzC,OAAOY,EAAOyhE,GAAYriE,GAXtC,mC,iCCAA,+CAqBO,SAASsiE,EAAmB5hC,GAC/B,MAAM6hC,EAAM,YAAM7hC,GACZ8hC,EAAa,IAAI/gC,IAQvB,OAPA8gC,EAAIE,MAAOvjE,IACW,qBAAdA,EAAK0C,MAVjB,SAAS8gE,EAAgBxjE,GACrB,MAAyB,qBAArBA,EAAKyjE,OAAO/gE,KACL8gE,EAAgBxjE,EAAKyjE,QAEJ,UAArBzjE,EAAKyjE,OAAOpkE,KAMyBmkE,CAAgBxjE,IACpDsjE,EAAWxuD,IAzBvB,SAASgK,EAAQ9e,GACb,MAAMX,EAAO,GACb,MAAkB,eAAdW,EAAK0C,KACE,CAAC1C,EAAKX,MAEC,YAAdW,EAAK0C,KACE,CAAC1C,EAAKkC,QAEC,qBAAdlC,EAAK0C,OACLrD,EAAKsI,QAAQmX,EAAQ9e,EAAKyjE,SAC1BpkE,EAAKsI,QAAQmX,EAAQ9e,EAAKc,YAEvBzB,GAagByf,CAAQ9e,GAClBomC,MAAM,GACNn+B,KAAK,QAGXq7D,I,iCC/BX,sEAWO,SAASt5C,EAAgBnpB,GAC5B,MAAM6iE,EAAuB7iE,EAAMG,UAAU+oB,QACvC45C,EAAiB,GACvB,IAAK,MAAMxiE,KAAW,YAAKuiE,GAAuB,CAC9C,MAAMlgD,EAAiB3iB,EAAMW,kBAAkBL,GACzCyiE,EAAa,YAAUpgD,EAAe/iB,IAAI,YAChD,GAAIkjE,EAAeC,GACf,IAAK,MAAMC,KAAyBF,EAAeC,GAAa,CAC7C,YAAqBC,EAAuBH,EAAqBviE,KAG5EwiE,EAAeC,GAAYj8D,KAAK+7D,EAAqBviE,SAK7DwiE,EAAeC,GAAc,CAACF,EAAqBviE,GAAS8mB,SAGpE,OAAO,YAAK07C,GACP//B,OACA95B,IAAKg6D,IACN,MAAMpoD,EAAKooD,EAAWjiD,WAAW,UAAEs3B,GAAcz9B,EAAInJ,EAAS,YAAOmJ,EAAI,CAAC,cAC1E,GAAInJ,EAAO7D,QAAU6D,EAAO7D,OAAO6oD,QAAS,CACxC,MAAMnd,EAAM7nC,EAAO7D,OAAO6oD,QAAQ5oD,QAC9ByrC,EAAItxC,MAA8B,gBAAtBsxC,EAAItxC,KAAY,OAAwBsxC,EAAIrxC,QAAWwJ,EAAOxJ,SAE1EqxC,EAAIrxC,OAAS,CAAE7G,MAAO,gBAEtBqQ,EAAOzJ,aAEAsxC,EAAItxC,KAGnB,QAAkB/G,IAAdo3C,EAAyB,CACzB,IAAI9nC,EAAO8nC,EACP5mC,EAAO7D,QACP6D,EAAO7D,OAAOia,QACdpW,EAAO7D,OAAOia,OAAOha,QACrB,YAAY4D,EAAO7D,OAAOia,OAAOha,OAAOjC,QACxC2E,EAAO8nC,EAAU7/B,QAAQ,cAAe/G,EAAO7D,OAAOia,OAAOha,OAAOjC,KAAK6B,SA/CzF,SAAyBgE,EAAQ+tB,EAAMkV,EAAQiH,GAC3ClqC,EAAO7D,OAAS6D,EAAO7D,QAAU,GACjC6D,EAAO7D,OAAO4xB,GAAQ/tB,EAAO7D,OAAO4xB,IAAS,GAC7C/tB,EAAO7D,OAAO4xB,GAAM3xB,OAAS4D,EAAO7D,OAAO4xB,GAAM3xB,QAAU,GAE3D4D,EAAO7D,OAAO4xB,GAAM3xB,OAAO6mC,GAAUiH,EA4C7BsnB,CAAgBxxD,EAAQ,SAAU,OAAQ,CAAEhE,OAAQ8C,IAExD,OAAOkB,M,iCCvDf,4KAaO,SAASyxD,EAAYnjE,GACpB,YAAYA,GACZA,EAAMG,UAAU+oB,QAMxB,SAAyBlpB,GACrB,MAAM,SAAEuF,GAAavF,EACrB,MAAO,CAAC,IAAO,IAAM,IAAQ,IAAa,IAAM,IAAO,IAAS,IAAa,KAAeuH,OAAO,CAAC67D,EAAiB9iE,KACjH,MAAMkI,EAAMjD,EAASjF,GAMrB,OALIN,EAAM0R,OAAOpR,KACbN,EAAMW,kBAAkBL,IACtB,YAAWkI,IAASlI,IAAY,KAASkI,EAAI3G,OAAS,MACxDuhE,EAAgB9iE,GA0BrB,SAA+BN,EAAOM,GACzC,MAAMM,EAAWZ,EAAMY,SAASN,GAC1BoR,EAAS1R,EAAM0R,OAAOpR,GACtB2iE,EAAa,IAAI,IAAgB,GAxB3C,SAA+BjjE,EAAOM,GAClC,MAAMsB,EAAQ5B,EAAMwgB,UAAU,KAC9B,GAAgB,UAAZlgB,EACA,OAAON,EAAM0B,QAAQqG,OAAS,CAAEE,KAAMrG,GAAU,CAAEsG,OAAQtG,GAE9D,MAAO,CAAE,CAACtB,GAAUN,EAAMwgB,UAAUlgB,IAmBO+iE,CAAsBrjE,EAAOM,IACxE,IAAK,MAAML,KAAY,IAA6B,CAChD,MAAMoB,EAAQiiE,EAAYrjE,EAAUyR,EAAQpR,EAASN,GACrD,QAAckB,IAAVG,EAAqB,CACrB,MAAM6gB,EAAWqhD,EAAWliE,EAAOpB,EAAUyR,EAAQ9Q,IACjDshB,QAA8ChhB,IAAlClB,EAAMa,OAAO6Q,OAAOzR,KAChCgjE,EAAW/+D,IAAIjE,EAAUoB,EAAO6gB,IAI5C,MAAMshD,EAAiB9xD,EAAOnM,UAAY,GACpCk+D,EAAe,CAAC,SAAU,SAAU,QAAS,UAAW,YAAYl8D,OAAO,CAACqY,EAAG6f,KACjF,MAAMikC,EAAqB,YAAiBF,EAAe/jC,IAAS,GAAIz/B,GAClEqB,EAAQ,EAAOo+B,GACf,EAAOA,GAAM7+B,EAAU8iE,EAAoB1jE,EAAOM,EAAS2iE,GAC3DS,EAIN,YAHcxiE,IAAVG,GAAuB,YAAKA,GAAOvB,OAAS,IAC5C8f,EAAE6f,GAAQ,CAAE3xB,OAAQzM,IAEjBue,GACR,IACC,YAAK6jD,GAAc3jE,OAAS,GAC5BmjE,EAAW/+D,IAAI,SAAUu/D,IAAgB/xD,EAAOnM,UAEpD,OAAO09D,EArD4BU,CAAsB3jE,EAAOM,IAErD8iE,GACR,IAhB2BQ,CAAgB5jE,GAG1CA,EAAMG,UAAU+oB,QAyHxB,SAA4BlpB,GACxB,MAAM,QAAEkpB,EAAO,QAAErL,GAAY7d,EAAMG,UACnC,IAAK,MAAMf,KAASY,EAAMX,SACtB8jE,EAAY/jE,GACZ,YAAKA,EAAMe,UAAU+oB,SAAS7oB,QAASC,IACnCud,EAAQnM,OAAOpR,GAAW,YAAkBN,EAAMG,UAAU0d,QAASvd,GACrC,WAA5Bud,EAAQnM,OAAOpR,KAGf4oB,EAAQ5oB,GAAWujE,EAAqB36C,EAAQ5oB,GAAUlB,EAAMe,UAAU+oB,QAAQ5oB,IAC7E4oB,EAAQ5oB,KAGTud,EAAQnM,OAAOpR,GAAW,qBACnB4oB,EAAQ5oB,OAiB/B,OAZA,YAAK4oB,GAAS7oB,QAASC,IACnB,IAAK,MAAMlB,KAASY,EAAMX,SACjBD,EAAMe,UAAU+oB,QAAQ5oB,IAIG,WAA5Bud,EAAQnM,OAAOpR,WAERlB,EAAMe,UAAU+oB,QAAQ5oB,KAIpC4oB,EAxJuB46C,CAAmB9jE,GAsBrD,SAASujE,EAAWliE,EAAOpB,EAAUyR,EAAQ9Q,GACzC,OAAQX,GACJ,IAAK,SAED,QAASyR,EAAOnH,OACpB,IAAK,QAED,GAAiB,UAAbtK,GAAwBoB,IAAUT,EAASuF,MAC3C,OAAO,EAInB,OAAO9E,IAAUqQ,EAAOzR,GA+B5B,SAASqjE,EAAYrjE,EAAUyR,EAAQpR,EAASN,GAC5C,MAAM,SAAEuF,EAAQ,KAAEpC,GAASnD,EACrBY,EAAW,YAAiB2E,EAASjF,IACrCu4C,EAAe74C,EAAMa,OAAO6Q,QAC5B,SAAE9O,GAAahC,EACfU,EAAYtB,EAAMW,kBAAkBL,GAASV,IAAI,QACvD,OAAQK,GAIJ,IAAK,YACD,OAAO,YAAU,CACbyR,SACAmnC,eACAj2C,WACAtC,UACAgB,cAER,IAAK,SAED,GAAI,YAAqBV,GACrB,OAEJ,OAAO,YAAaA,EAAU8Q,EAAOzK,OAAQjH,EAAMa,QACvD,IAAK,aAED,GAAI,YAAqBD,GACrB,OAEJ,OAAO8Q,EAAOrK,WAClB,IAAK,iBACD,OAAO,YAEPqK,EAAO2tD,eAAgBxmB,EAAawmB,eAEpC,IAAiC,CAC7Br/D,QACA0R,SACAmnC,eACAv4C,UACAgB,eAER,IAAK,eACD,OAAO,YAAgBoQ,EAAO+kC,aAAc,IAA+Bn1C,IAC/E,IAAK,aACD,OAAO,YAAgBoQ,EAAO8uD,WAAY,IAA6Br9D,EAAM7C,EAASiF,EAASkG,MAAOzL,EAAM0B,QAAQ+J,QACxH,IAAK,QACD,OAAQ,YAAc7K,EAAUZ,EAAMa,OAAQ,CAAE0F,gBAAgB,UAAWrF,EAC/E,IAAK,OACD,OAAO,YAAK,CAAEwQ,SAAQpR,UAASsC,WAAUtB,YAAWq3C,cAAc,IACtE,IAAK,SACD,OAAO,IAAkBjnC,EAAQ9Q,GAGzC,OAAO8Q,EAAOzR,GAmCX,SAAS4jE,EAAqBE,EAAcC,GAC/C,IAAKD,EACD,OAAOC,EAAY58C,QAEvB,MAAM68C,EAAeF,EAAat/D,gBAAgB,UAC5Cy/D,EAAcF,EAAYv/D,gBAAgB,UAChD,GAAIw/D,EAAa/hD,UAAYgiD,EAAYhiD,UAAY+hD,EAAa5iE,QAAU6iE,EAAY7iE,MAGpF,OAEJ,IAAI8iE,GAAa,EAEjB,IAAK,MAAMrtD,KAAQ,IAA6B,CAC5C,MAAMstD,EAA0B,YAAwBL,EAAat/D,gBAAgBqS,GAAOktD,EAAYv/D,gBAAgBqS,GAAOA,EAAM,SAErI,CAACpS,EAAIC,KACD,OAAQmS,GACJ,IAAK,aACD,OAAOutD,EAAgB3/D,EAAIC,GAC/B,IAAK,QACD,OAAO,YAAoBD,EAAIC,GACnC,IAAK,OAGD,OADAw/D,GAAa,EACN,YAAa,UAE5B,OAAO,YAAkBz/D,EAAIC,EAAImS,EAAM,YAE3CitD,EAAapkE,gBAAgBmX,EAAMstD,GAUvC,OARID,MACMJ,EAAa78C,UAAY,IAAIrZ,QAAU,IAAIkpD,UAC7C,YAAqBgN,EAAa78C,SAAU,CAAC,SAAU,eAErD68C,EAAa7hD,UAAY,IAAIrU,QAAU,IAAIkpD,UAC7C,YAAqBgN,EAAa7hD,SAAU,CAAC,SAAU,cAGxD6hD,EAEX,SAASM,EAAgBpgD,EAAKC,GAC1B,MAAkB,WAAdA,EAAI7iB,MAEG6iB,EAEJD,I,iCC1NX,qDAEO,SAASqgD,EAAiB/+D,EAAUvF,GACvC,OAAO,YAAKuF,GAAUgC,OAAO,CAACsG,EAAQvN,KAClC,MAAMikE,EAAWh/D,EAASjF,GAC1B,OAAOzB,OAAOC,OAAOD,OAAOC,OAAO,GAAI+O,GAAS,YAAc7N,EAAOukE,EAAUjkE,EAAUgL,IAAM,CAAGjK,MAAOiK,EAAEjK,WAC5G,M,iCCNP,6DAMO,MAAMmjE,UAA6B,IACtC,YAAYllE,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EACjB1P,KAAK0P,UAAY,YAAUA,GAC3B,MAAMg2D,EAAc1lE,KAAK0P,UAAU5H,IAAM,MAAC3F,OAAWA,GACrDnC,KAAK0P,UAAU5H,GAAK,CAAC49D,EAAY,IAAM,QAASA,EAAY,IAAM,WAEtE,QACI,OAAO,IAAID,EAAqB,KAAM,YAAUzlE,KAAK0P,YAEzD,kBACI,OAAO,IAAIizB,IAAI,CAAC3iC,KAAK0P,UAAUi2D,WAAa3lE,KAAK0P,UAAU5I,SAAW,KAE1E,iBACI,OAAO,IAAI67B,IAAI3iC,KAAK0P,UAAU5H,IAElC,OACI,0BAA2B,YAAK9H,KAAK0P,aAEzC,WACI,MAAMoM,EAAK9b,KAAK0P,WAAW,QAAEi2D,GAAY7pD,EAAIa,EAAO,YAAOb,EAAI,CAAC,YAEhE,OADehc,OAAOC,OAAO,CAAE+C,KAAM,MAAOI,MAAOyiE,GAAWhpD,M,iCC5BtE,6FAOO,MAAMipD,UAA0B,IACnC,YAAYrlE,EAAQmO,GAChB7O,MAAMU,GACNP,KAAK0O,OAASA,EAElB,QACI,OAAO,IAAIk3D,EAAkB,KAAM9lE,OAAOC,OAAO,GAAIC,KAAK0O,SAE9D,YAAYnO,EAAQU,GAChB,MAAM,OAAEa,EAAM,KAAEsC,EAAI,QAAEzB,GAAY1B,EAElC,GAAgB,WADA,YAAoB,UAAW0B,EAASb,GAEpD,OAAO,KAEX,MAAM4M,EAASzN,EAAMoiC,eAAe,CAACi3B,EAAYz4D,EAAUN,KACvD,MAAMqiB,EAAiB,YAAeriB,IAAYN,EAAMW,kBAAkBL,GAC1E,GAAIqiB,EAAgB,CAChB,MAAMrhB,EAAYqhB,EAAe/iB,IAAI,SAIjC,YAAoB0B,IAAeV,EAAS8E,WAAc,YAAWvC,KACrEk2D,EAAWz4D,EAASqB,OAASrB,GAGrC,OAAOy4D,GACR,IACH,OAAK,YAAK5rD,GAAQ3N,OAGX,IAAI6kE,EAAkBrlE,EAAQmO,GAF1B,KAIf,kBACI,OAAO,IAAIi0B,IAAI,YAAK3iC,KAAK0O,SAE7B,iBACI,OAAO,IAAIi0B,IAEf,OACI,uBAAwB,YAAK3iC,KAAK0O,UAKtC,WACI,MAAMmlD,EAAU,YAAK7zD,KAAK0O,QAAQlG,OAAO,CAACq9D,EAAa3iE,KACnD,MAAMrB,EAAW7B,KAAK0O,OAAOxL,GACvBgf,EAAM,YAASrgB,EAAU,CAAE4P,KAAM,UAKvC,OAJiB,OAAb5P,IACAgkE,EAAY99D,QAAQma,cACpB2jD,EAAY99D,eAAema,OAExB2jD,GACR,IACH,OAAOhS,EAAQ9yD,OAAS,EAClB,CACE+B,KAAM,SACN2O,KAAMoiD,EAAQxrD,KAAK,SAErB,Q,iCClEd,qDAKO,MAAMy9D,UAA6B,IACtC,YAAYvlE,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EACjB1P,KAAK0P,UAAY,YAAUA,GAC3B,MAAM,QAAEq2D,EAAO,GAAEj+D,EAAK,IAAO9H,KAAK0P,UAClC1P,KAAK0P,UAAU5H,GAAKi+D,EAAQ77D,IAAI,CAACN,EAAGqV,IAAMnX,EAAGmX,IAAMrV,GAEvD,QACI,OAAO,IAAIk8D,EAAqB9lE,KAAKO,OAAQ,YAAUP,KAAK0P,YAEhE,kBACI,OAAO,IAAIizB,IAAI3iC,KAAK0P,UAAUq2D,SAElC,iBACI,OAAO,IAAIpjC,IAAI3iC,KAAK0P,UAAU5H,IAElC,OACI,0BAA2B,YAAK9H,KAAK0P,aAEzC,WACI,MAAQq2D,QAASxsC,EAAM,GAAEzxB,GAAO9H,KAAK0P,UAMrC,MALe,CACX5M,KAAM,UACNy2B,SACAzxB,S,iCC9BZ,qDAKO,MAAMk+D,UAA0B,IACnC,YAAYzlE,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EACjB1P,KAAK0P,UAAY,YAAUA,GAC3B,MAAMg2D,EAAc1lE,KAAK0P,UAAU5H,IAAM,MAAC3F,OAAWA,GACrDnC,KAAK0P,UAAU5H,GAAK,CAAC49D,EAAY,IAAM,MAAOA,EAAY,IAAM,SAEpE,QACI,OAAO,IAAIM,EAAkB,KAAM,YAAUhmE,KAAK0P,YAEtD,kBACI,OAAO,IAAIizB,IAAI3iC,KAAK0P,UAAUu2D,MAElC,iBACI,OAAO,IAAItjC,IAAI3iC,KAAK0P,UAAU5H,IAElC,OACI,uBAAwB,YAAK9H,KAAK0P,aAEtC,WACI,MAAM,KAAEu2D,EAAI,GAAEn+D,GAAO9H,KAAK0P,UAM1B,MALe,CACX5M,KAAM,OACNy2B,OAAQ0sC,EACRn+D,S,iCC9BZ,oFAMO,MAAMo+D,UAAoB,IAC7B,YAAY3lE,EAAQg5B,EAAQ4sC,EAASx3D,GACjC9O,MAAMU,GACNP,KAAKu5B,OAASA,EACdv5B,KAAKmmE,QAAUA,EACfnmE,KAAK2O,OAASA,EAElB,QACI,OAAO,IAAIu3D,EAAY,KAAM,YAAUlmE,KAAKu5B,QAASv5B,KAAKmmE,QAASnmE,KAAK2O,QAE5E,gBAAgBpO,EAAQU,GACpB,GAAIA,EAAMG,UAAUyV,aAAe5V,EAAMG,UAAUyV,WAAWyM,MAC1D,OAAO/iB,EAEX,IAAI6lE,EAAiB,EAWrB,GAVA,CAAC,CAAC,IAAW,KAAW,CAAC,IAAY,MAAY9kE,QAAS+kE,IACtD,MAAMC,EAAOD,EAAYn8D,IAAI3I,GAAWN,EAAMsF,gBAAgBhF,GACxDN,EAAMY,SAASN,GAAS2B,MACxB,YAAWjC,EAAMuF,SAASjF,IACtB,CAAEkQ,KAAMxQ,EAAMuF,SAASjF,GAASe,MAAQ,SACxCH,IACNmkE,EAAK,IAAMA,EAAK,MAChB/lE,EAAS,IAAI2lE,EAAY3lE,EAAQ+lE,EAAM,KAAMrlE,EAAMie,mBAAmBknD,WAG1EnlE,EAAMsF,gBAAgB,KAAQ,CAC9B,MAAM1E,EAAWZ,EAAMY,SAAS,KAC5BA,EAASiB,OAAS,MAClBvC,EAAS,IAAI2lE,EAAY3lE,EAAQ,KAAMsB,EAASqB,MAAOjC,EAAMie,mBAAmBknD,SAGxF,OAAO7lE,EAEX,kBACI,OAAO,IAAIoiC,IAAI,IAAK3iC,KAAKmmE,QAAU,CAACnmE,KAAKmmE,SAAW,OAASnmE,KAAKu5B,QAAU,IAAI7qB,OAAO,OAE3F,iBACI,OAAO,IAAIi0B,IAEf,OACI,iBAAkB3iC,KAAKmmE,WAAWnmE,KAAK2O,UAAU,YAAK3O,KAAKu5B,UAE/D,WACI,OAAOz5B,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,WAAc9C,KAAKu5B,OAAS,CAAEA,OAAQv5B,KAAKu5B,QAAW,IAAOv5B,KAAKmmE,QAAU,CAAEA,QAASnmE,KAAKmmE,SAAY,IAAM,CAAEx3D,OAAQ3O,KAAK2O,Y,iCCjD9L,4EAKO,MAAM43D,UAAqB,IAC9B,YAAYhmE,EAAQsW,EAAY0iB,EAAQzxB,GACpCjI,MAAMU,GACNP,KAAK6W,WAAaA,EAClB7W,KAAKu5B,OAASA,EACdv5B,KAAK8H,GAAKA,EAEd,QACI,OAAO,IAAIy+D,EAAa,KAAMvmE,KAAK6W,WAAY,YAAU7W,KAAKu5B,QAAS,YAAUv5B,KAAK8H,KAE1F,gBAAgBvH,EAAQU,GACpB,OAAKA,EAAM2hB,kBAGX,CAAC,CAAC,IAAW,KAAW,CAAC,IAAY,MAAYthB,QAAS+kE,IACtD,MAAMC,EAAOD,EAAYn8D,IAAI3I,GAAWN,EAAMsF,gBAAgBhF,GACxDN,EAAMY,SAASN,GAAS2B,MACxB,YAAWjC,EAAMuF,SAASjF,IACtB,CAAEkQ,KAAMxQ,EAAMuF,SAASjF,GAASe,MAAQ,SACxCH,GACJ+O,EAASm1D,EAAY,KAAO,IAAa,IAAM,IACjDC,EAAK,IAAMA,EAAK,MAChB/lE,EAAS,IAAIgmE,EAAahmE,EAAQU,EAAM2hB,iBAAkB0jD,EAAM,CAC5DrlE,EAAMie,QAAQ,IAAMhO,GACpBjQ,EAAMie,QAAQ,IAAMhO,QAIzB3Q,GAhBIA,EAkBf,kBACI,OAAO,IAAIoiC,IAAI3iC,KAAKu5B,OAAO7qB,OAAO,MAEtC,iBACI,OAAO,IAAIi0B,IAAI3iC,KAAK8H,IAExB,OACI,kBAAmB9H,KAAK6W,cAAc,YAAK7W,KAAKu5B,WAAW,YAAKv5B,KAAK8H,MAEzE,WACI,MAAO,CACHhF,KAAM,WACN+T,WAAY7W,KAAK6W,WACjB0iB,OAAQv5B,KAAKu5B,OACbzxB,GAAI9H,KAAK8H,O,iCCjDrB,sRAwBO,SAAS0+D,EAAmB3kE,EAAUkB,EAAMuK,GAC/C,OAAO,YAAQvK,EAAMjD,OAAOC,OAAO,CAAEmR,aAAc,YAAQrP,MAAgByL,GAAO,KAE/E,MAAMm5D,UAAmB,IAC5B,YAAYh5D,EAAMlN,EAAQqe,EAAiBC,EAAU/c,GACjDjC,MAAM4N,EAAM,QAASlN,EAAQqe,EAAiB9c,EAAQ+c,EAAUpR,EAAKqR,SACrE9e,KAAKK,MAAQ,YAAWoN,EAAKA,KAAMzN,KAAMA,KAAKkf,QAAQ,cAAU/c,EAAW0c,EAAU/c,GACrF9B,KAAKM,SAAW,CAACN,KAAKK,OACtB,MAAMkb,EAAQ,YAAuB9N,EAAK8N,MAAOsD,GACjD7e,KAAKub,MAAQvb,KAAK0mE,UAAUnrD,GAEhC,UAAUA,GAEN,OAAK,YAAeA,GAGb,YAAOA,EAAO,CAACorD,EAAiB9kE,EAAUN,IACxC,YAAS,CAAC,IAAK,KAASA,QAKNY,IAAnBN,EAASqB,OACT,IAAS,IAAYmG,cAAcxH,EAAUN,IACtColE,IAGXA,EAAgBplE,GAAW,YAAUM,EAAUN,GACxColE,IATH,IAAS,IAAY79D,oBAAoBvH,EAAS,UAC3ColE,GASZ,IAfQ,CAAEprD,MAAO,YAAUA,EAAO,UAiBzC,gBAAgBha,GACZ,QAASvB,KAAKub,MAAMha,GAExB,SAASA,GACL,OAAOvB,KAAKub,MAAMha,GAEtB,YACIvB,KAAKoB,UAAUxB,KAAO,YAAUI,MAChCA,KAAKK,MAAMspB,YAEf,kBACI,YAAwB3pB,MAE5B,kBAIIA,KAAKK,MAAMupB,kBACX5pB,KAAKoB,UAAU6a,UAAYjc,KAAKK,MAAMe,UAAU6a,UAEpD,iBACIjc,KAAKK,MAAMwpB,iBAEf,sBACI7pB,KAAKK,MAAMusD,sBACX,YAAkB5sD,MAEtB,iCAAiC2f,GAC7B,OAAO3f,KAAKK,MAAM4O,iCAAiC0Q,GAEvD,kBAEI,OADA3f,KAAKK,MAAM0pB,kBACJ,GAEX,sBAAsBnqB,GAClB,OAAOI,KAAKK,MAAM4N,sBAAsBrO,GAE5C,wBACI,MAAMgnE,EAAe,GACrB,IAAK,MAAMrlE,KAAW,IAClB,IAAK,MAAMynB,KAAc,IAAc,CACnC,MAAM69C,EAAwB7mE,KAAKoB,UAAUynB,cAActnB,GACrD4mD,EAAkB0e,EAAsB79C,IACxC,cAAEC,GAAkB49C,EAC1B,GAAI59C,EAAe,CACf,MAAM+9B,EAAc,YAAkB,cAAe/9B,EAAejpB,KAAK8B,OAAQP,GACjF,GAAI,YAAS,CAAC,QAAS,UAAWylD,GAAc,CAC5C,MAAM59B,EAAgB,YAAiB7nB,EAASylD,GAChD4f,EAAaxtB,YAAcwtB,EAAaxtB,aAAe,GACvDwtB,EAAaxtB,YAAYhwB,GAAiB,OAGlD,GAAI++B,GAAmBA,EAAgB,GAAI,CAEvC,MAAM74C,EAAuB,QAAZ/N,EAAoB,SAAW,QAC1CulE,EAA0B,WAAf99C,EAA0B,aAAe,aAC1C,UAAZznB,GAAwBvB,KAAKK,MAAMe,UAAUgO,WAAWvO,IAAIyO,KAE5Ds3D,EAAaE,GAAYF,EAAaE,IAAa,GACnDF,EAAaE,GAAUvlE,GAAW,IAElCslE,EAAsBz/D,QACtBw/D,EAAa5oD,OAAS4oD,EAAa5oD,QAAU,GAC7C4oD,EAAa5oD,OAAmB,QAAZzc,EAAoB,WAAa,eAAiB,KAKtF,OAAOqlE,EAEX,wBACI,MAAM,OAAE5qD,EAAM,IAAED,GAAQ/b,KAAKub,MACvBD,EAAUU,EAAShc,KAAK+mE,uBAAyBhrD,EAAM,OAAI5Z,EACjE,IAAI+D,EAAQ,MASZ,OANK6V,GAA0C,gBAAnC/b,KAAKoB,UAAU0d,QAAQjc,MAAM0J,KAG/ByP,GAA6C,gBAAnChc,KAAKoB,UAAU0d,QAAQjc,MAAM2J,KAF7CtG,EAAQ,QAKLpG,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAIC,KAAKgnE,yBAA2B1rD,EAAU,CAAEA,WAAY,IAAM,CAAE+D,OAAQ,OAAQnZ,UAEzI,wBAEI,OAAOlG,KAAKK,MAAMoO,wBAEtB,uBACI,KAAIzO,KAAKO,QAAUP,KAAKO,kBAAkBkmE,GAMrC,CAGD,MAAO,CAAE93D,uBADmB3O,KAAKkf,QAAQ,wBAIjD,cAAcS,GACV,OAAI3f,KAAKO,QAAUP,KAAKO,kBAAkBkmE,EAI/B3mE,OAAOC,OAAOD,OAAOC,OAAO,GAAKC,KAAKuG,gBAAgB,UACvD,CACEuI,OAAQ,CACJC,OAAQ,CAGJuM,QAAS,CAAEpY,MAAO,YAAQlD,KAAKub,MAAMS,OAAQ,CAAE/K,OAAQ,iBAIjE,IAAMpR,MAAMmP,cAAc2Q,IAE7B9f,MAAMmP,cAAc2Q,GAK/B,kCACI,MAAM4Z,EAAS,GACTohB,EAAM,GACN7yC,EAAK,GACX,GAAI9H,KAAKK,iBAAiBomE,GACtB,GAAIzmE,KAAKK,MAAMkG,gBAAgB,UAAW,CACtC,MAAMrD,EAAQ,YAAQlD,KAAKK,MAAMkb,MAAMS,QACvCud,EAAOxxB,KAAK7E,GACZy3C,EAAI5yC,KAAK,YACTD,EAAGC,iBAAiB7E,WAIxB,IAAK,MAAM3B,IAAW,CAAC,IAAK,KAAM,CAC9B,MAAMu6C,EAAsB97C,KAAKK,MAAMe,UAAUC,OAAOE,GACxD,GAAIu6C,IAAwBA,EAAoB77C,OAAQ,CACpD,MAAM6C,EAAOg5C,EAAoBj7C,IAAI,QAC/BojB,EAAQ63B,EAAoBj7C,IAAI,SACtC,GAAI,YAAkBiC,IAAS,YAAcmhB,GAAQ,CACjD,MAAM/e,EAAS,YAAelF,KAAKK,MAAOkB,GACpC2B,EAAQ,YAAmBgC,GAC7BhC,GACAq2B,EAAOxxB,KAAK7E,GACZy3C,EAAI5yC,KAAK,YACTD,EAAGC,iBAAiB7E,MAGpB,IAAS,gEAM7B,MAAO,CAAEq2B,SAAQohB,MAAK7yC,MAE1B,gBACI,MAAM,KAAErI,EAAI,KAAEG,GAASI,KAAKoB,UAAUxB,KAAKmzC,WACrC,IAAEh3B,EAAG,OAAEC,GAAWhc,KAAKub,OACvB,OAAEge,EAAM,IAAEohB,EAAG,GAAE7yC,GAAO9H,KAAKinE,kCAC3BngE,EAAU,GAChB,IAAK,MAAMvF,KAAW,IAAgB,CAClC,MAAMM,EAAW7B,KAAKub,MAAMha,GAC5B,GAAIM,EAAU,CACViF,EAAQiB,KAAK,YAAQlG,IACrB,MAAM,IAAEmB,EAAG,KAAED,GAASlB,EAItB,GAHI,YAAUmB,IACV8D,EAAQiB,KAAK,YAAQlG,EAAU,CAAEmG,UAAW,SAE5C,YAAYjF,GAAO,CACnB,MAAM,MAAEG,EAAK,GAAEwE,EAAK,KAAoB3E,EAClCmkE,EAAaV,EAAmB3kE,EAAUkB,GAC5CgZ,GAAOC,GAIPud,EAAOxxB,KAAKm/D,GACZvsB,EAAI5yC,KAAK,OACTD,EAAGC,KAAKm/D,KAGR3tC,EAAOxxB,KAAK7E,GACZy3C,EAAI5yC,KAAKL,GACTI,EAAGC,KAAKm/D,SAGX,GAAI,YAAQnkE,GAAO,CACpB,MAAMmkE,EAAa,YAAoBrlE,EAAUN,GACjDg4B,EAAOxxB,KAAKm/D,GACZvsB,EAAI5yC,KAAK,OACTD,EAAGC,KAAKm/D,KAIpB,MAAMC,IAAUprD,KAASC,EACzB,OAAOlc,OAAOC,OAAO,CAAEN,OACnBG,OACAkH,WAAYqgE,GAAS5tC,EAAOx4B,OAC1B,CACE4F,UAAW7G,OAAOC,OAAOD,OAAOC,OAAO,GAAKonE,EAAQ,CAAEA,SAAU,IAAO5tC,EAAOx4B,OAAS,CAAEw4B,SAAQohB,MAAK7yC,MAAO,KAE/G,IAEV,gBAAgBvG,GACZ,MAAM,MAAEga,GAAUvb,KACZ6B,EAAW0Z,EAAMha,GACvB,OAAIM,EACI,YAAYA,EAASkB,MACd,CAACyjE,EAAmB3kE,EAAUA,EAASkB,KAAM,CAAE0O,KAAM,WAEvD,YAAQ5P,EAASkB,MACf,CAAC,YAAoBlB,EAAUN,EAAS,CAAEkQ,KAAM,WAEpD,CAAC,YAAQ5P,EAAU,CAAE4P,KAAM,WAE/B,GAEX,eAAelQ,GACX,MAAM,MAAEga,GAAUvb,KACZ6B,EAAW0Z,EAAMha,GACvB,GAAIM,EAAU,CACV,MAAM,KAAEkB,GAASlB,EAEjB,MAAO,EADQ,YAAYkB,GAAQA,EAAKoR,OAAS,YAAQpR,IAASA,IAAS,aAG/E,MAAO,GAEX,qBACI,MAAM,MAAEwY,EAAK,OAAEzZ,GAAW9B,KAC1B,GAAIub,EAAMA,MAEN,OAAO,YAAmBA,EAAMA,MAAO,QAASzZ,GAEpD,MAAMslE,EAAoB,CACtBrrD,IAAK,CAAC,MAAO,UACbC,OAAQ,CAAC,OAAQ,UAErB,IAAK,MAAMza,KAAW,IAClB,GAAIga,EAAMha,GAAU,CAChB,MAAMunB,EAAc,YAAkB,cAAevN,EAAMha,GAAUO,EAAQP,GAC7E,GAAI,YAAS6lE,EAAkB7lE,GAAUunB,GAErC,OAAO,YAAmBvN,EAAMha,GAAUA,EAASO,IAMnE,gBACI,MAAM,MAAEzB,GAAUL,KAGZ+yC,EAAY/yC,KAAKoB,UAAUxB,KAAKmzC,UAChCnzC,EAAO,YAAkBmzC,GACzBhtC,EAAc1F,EAAMkO,0BAAyB,GAC7CnH,EAAQpH,KAAKynD,sBAAwBpnD,EAAM+N,gBAC3CC,EAAQhO,EAAMiO,qBASpB,MAAO,CARWxO,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAEN,KAAMO,KAAKkf,QAAQ,QAASpc,KAAM,SAAYsE,EAAQ,CAAEA,SAAU,IAAOiH,EAAQ,CAAEA,SAAU,IAAM,CAAE8d,KAAM,CAC3M5Q,MAAOvb,KAAKqnE,iBAGhBtkE,KAAM,CACFG,MAAO,IAAegH,IAAI8C,GAAKhN,KAAKsnE,gBAAgBt6D,IAAIg3B,OACxD7vB,MAAO,IAAejK,IAAI8C,GAAKhN,KAAKunE,eAAev6D,IAAIg3B,UACpDpkC,EAAKmB,OAAS,EAAI,CAAEnB,KAAMA,GAAS,IAAOmG,EAAc,CAAE+I,OAAQ,CAAEC,OAAQhJ,IAAkB,IAAM1F,EAAM2O,cAAc,YAAqBhP,KAAM,OAGlK,aACI,OAAOA,KAAKub,S,iCCrUpB,kUA4BA,SAASisD,EAAa5nE,GAElB,IAAI6nE,EAAe,EAsInB,OAlIA,SAASC,EAAStnE,EAAMunE,GACpB,GAAIvnE,aAAgB,MAGXA,EAAKs/D,cAAgB,YAAUt/D,EAAKR,MAAO,CAC5CA,EAAKmI,KAAK4/D,GAMVA,EALgB,CACZloE,KAAM,KACN4iB,OAAQslD,EAAWloE,KACnBiQ,UAAW,IAiBvB,GAZItP,aAAgB,MACZA,EAAKG,kBAAkB,MAAeonE,EAAWtlD,QAEjDslD,EAAWz/D,OAASpI,OAAOC,OAAOD,OAAOC,OAAO,GAAK4nE,EAAWz/D,QAAU,IAAM,CAAEyF,MAAOvN,EAAKwnE,wBAE9FD,EAAWj4D,UAAU3H,QAAQ3H,EAAKynE,oBAAmB,KAIrDF,EAAWj4D,UAAU3H,QAAQ3H,EAAKynE,uBAGtCznE,aAAgB,IAahB,OAZKunE,EAAWloE,OACZkoE,EAAWloE,aAAegoE,QAEzBE,EAAWtlD,QAAUslD,EAAWj4D,UAAU3O,OAAS,GACpDnB,EAAKmI,KAAK4/D,GACVvnE,EAAKR,KAAO+nE,EAAWloE,MAGvBW,EAAKR,KAAO+nE,EAAWtlD,YAE3BjiB,EAAK0nE,WAAWxmE,QAAQR,GAAKlB,EAAKmI,KAAKjH,IA+B3C,IA3BIV,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,MAChBunE,EAAWj4D,UAAU3H,KAAK3H,EAAK0nE,aAE/B1nE,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,KAChBA,aAAgB,MAChBunE,EAAWj4D,UAAU3H,QAAQ3H,EAAK0nE,YAElC1nE,aAAgB,IAChB,GAAIunE,EAAWtlD,QAA0C,IAAhCslD,EAAWj4D,UAAU3O,OAC1CX,EAAKwuC,UAAU+4B,EAAWtlD,aAEzB,GAAIjiB,EAAKG,kBAAkB,IAG5BH,EAAKwuC,UAAU+4B,EAAWloE,WAU1B,GAPKkoE,EAAWloE,OACZkoE,EAAWloE,aAAegoE,OAI9BrnE,EAAKwuC,UAAU+4B,EAAWloE,MAEC,IAAvBW,EAAK8sC,cAAqB,CAC1BttC,EAAKmI,KAAK4/D,GAMVA,EALgB,CACZloE,KAAM,KACN4iB,OAAQslD,EAAWloE,KACnBiQ,UAAW,IAM3B,OAAQtP,EAAK8sC,eACT,KAAK,EAEG9sC,aAAgB,OAAgBunE,EAAWtlD,QAAUslD,EAAWj4D,UAAU3O,OAAS,IAEnFnB,EAAKmI,KAAK4/D,GAEd,MACJ,KAAK,EACDD,EAAStnE,EAAKE,SAAS,GAAIqnE,GAC3B,MACJ,QAAS,CACAA,EAAWloE,OACZkoE,EAAWloE,aAAegoE,OAE9B,IAAIplD,EAASslD,EAAWloE,MACnBkoE,EAAWtlD,QAAUslD,EAAWj4D,UAAU3O,OAAS,EACpDnB,EAAKmI,KAAK4/D,GAGVtlD,EAASslD,EAAWtlD,OAExBjiB,EAAKE,SAASgB,QAAQjB,IAMlBqnE,EAASrnE,EALO,CACZZ,KAAM,KACN4iB,OAAQA,EACR3S,UAAW,OAInB,SAST,SAASq4D,EAAkBC,GAC9B,MAAMpoE,EAAO,GACP8nE,EAAWF,EAAa5nE,GAM9B,OALAooE,EAAK1nE,SAASgB,QAAQjB,GAASqnE,EAASrnE,EAAO,CAC3CgiB,OAAQ2lD,EAAKvoE,KACbA,KAAM,KACNiQ,UAAW,MAER9P,EASJ,SAASqoE,EAAiBpiB,EAAeh4C,GAC5C,MAAMjO,EAAO,GAGP8nE,EAAWF,EAAa5nE,GAC9B,IAAIsoE,EAAc,EAClBriB,EAAczjC,QAAQ9gB,QAAQ0mE,IAErBA,EAAKt1B,YACNs1B,EAAKr1B,mBAAqBu1B,OAE9B,MAAMC,EAAUH,EAAKF,WACrBJ,EAASM,EAAMG,KAGnBvoE,EAAK0B,QAAQR,IACkB,IAAvBA,EAAE4O,UAAU3O,eACLD,EAAE4O,YAIjB,IAAI04D,EAAU,EACd,IAAK,MAAOnpD,EAAGne,KAAMlB,EAAKmvD,UACa,KAA9BjuD,EAAE4O,WAAa,IAAI3O,QAAiBD,EAAEuhB,QACvCziB,EAAKuyD,OAAOiW,IAAW,EAAGxoE,EAAKuyD,OAAOlzC,EAAG,GAAG,IAIpD,IAAK,MAAMne,KAAKlB,EACZ,IAAK,MAAM0uB,KAAKxtB,EAAE4O,WAAa,GACZ,WAAX4e,EAAExrB,OACFwrB,EAAEnC,KAAO05B,EAAchX,YAAYvgB,EAAEnC,MAAMwiB,aAKvD,IAAK,MAAM7tC,KAAKlB,EACRkB,EAAErB,QAAQoO,IACV/M,EAAE0K,OAASqC,EAAS/M,EAAErB,OAG9B,OAAOG,I,iCCnOX,6DAMO,MAAMyoE,UAA2B,IACpC,YAAY9nE,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EACjB1P,KAAK0P,UAAY,YAAUA,GAC3B,MAAMg2D,EAAc1lE,KAAK0P,UAAU5H,IAAM,MAAC3F,OAAWA,GACrDnC,KAAK0P,UAAU5H,GAAK,CAAC49D,EAAY,IAAMh2D,EAAUwQ,GAAIwlD,EAAY,IAAMh2D,EAAU44D,OAErF,QACI,OAAO,IAAID,EAAmB,KAAM,YAAUroE,KAAK0P,YAEvD,kBACI,OAAO,IAAIizB,IAAI,CAAC3iC,KAAK0P,UAAU44D,MAAOtoE,KAAK0P,UAAUwQ,MAAQlgB,KAAK0P,UAAU5I,SAAW,KAE3F,iBACI,OAAO,IAAI67B,IAAI3iC,KAAK0P,UAAU5H,IAElC,OACI,wBAAyB,YAAK9H,KAAK0P,aAEvC,WACI,MAAMoM,EAAK9b,KAAK0P,WAAW,MAAE44D,EAAK,GAAEpoD,GAAOpE,EAAIa,EAAO,YAAOb,EAAI,CAAC,QAAS,OAE3E,OADehc,OAAOC,OAAO,CAAE+C,KAAM,QAASyJ,EAAG2T,EAAI1T,EAAG87D,GAAS3rD,M,iCC5BzE,sFAMO,MAAM4rD,UAAmB,IAC5B,YAAYhoE,EAAQmP,EAAW84D,GAC3B3oE,MAAMU,GACNP,KAAK0P,UAAYA,EACjB1P,KAAKwoE,UAAYA,EAErB,QACI,OAAO,IAAID,EAAW,KAAM,YAAUvoE,KAAK0P,WAAY1P,KAAKwoE,WAEhE,YAAYjoE,EAAQU,EAAOyO,EAAWkuC,GAClC,MAAMx7B,EAAUnhB,EAAMG,UAAUxB,KAAKwiB,QACrC,IAAIqmD,EAAa,YAAW/4D,EAAUyc,KAAKvsB,KAAMwiB,GAC5CqmD,IACDA,EAAa,IAAI,IAAW/4D,EAAUyc,KAAKvsB,MAC3CwiB,EAAQra,KAAK0gE,IAEjB,MAAMC,EAAiBznE,EAAMie,kBAAkB0+B,KACzC+qB,EAAiB,IAAI,IAAWF,EAAYC,EAAgB,SAAUznE,EAAMG,UAAUxB,KAAKszC,qBAEjG,OADAjyC,EAAMG,UAAUxB,KAAKivC,YAAY65B,GAAkBC,EAC5C,IAAIJ,EAAWhoE,EAAQmP,EAAWi5D,EAAeh6B,aAE5D,kBACI,OAAO,IAAIhM,IAAI,CAAC3iC,KAAK0P,UAAUk5D,SAEnC,iBACI,OAAO,IAAIjmC,IAAI3iC,KAAK0P,UAAU5H,GAAK,YAAM9H,KAAK0P,UAAU5H,IAAM9H,KAAK0P,UAAUyc,KAAKoN,QAEtF,OACI,gBAAiB,YAAK,CAAE7pB,UAAW1P,KAAK0P,UAAW84D,UAAWxoE,KAAKwoE,cAEvE,WACI,IAAIK,EACJ,GAAI7oE,KAAK0P,UAAUyc,KAAKoN,OAEpBsvC,EAAU/oE,OAAOC,OAAO,CAAEyL,OAAQxL,KAAK0P,UAAUyc,KAAKoN,QAAWv5B,KAAK0P,UAAU5H,GAAK,CAAEA,GAAI,YAAM9H,KAAK0P,UAAU5H,KAAQ,QAEvH,CAED,IAAIghE,EAAS9oE,KAAK0P,UAAU5H,GACvB,YAASghE,KACV,IAAS,IAAYtyD,oBACrBsyD,EAAS,WAEbD,EAAU,CACN/gE,GAAI,CAACghE,IAGb,OAAOhpE,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,SAAUqpB,KAAMnsB,KAAKwoE,UAAWzrD,IAAK/c,KAAK0P,UAAUyc,KAAKpP,IAAKwc,OAAQ,CAACv5B,KAAK0P,UAAUk5D,SAAWC,GAAW7oE,KAAK0P,UAAUq5D,QAAU,CAAEA,QAAS/oE,KAAK0P,UAAUq5D,SAAY,O,iCCrD9N,6DAMO,MAAMC,UAAgC,IACzC,YAAYzoE,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EACjB1P,KAAK0P,UAAY,YAAUA,GAC3B,MAAMg2D,EAAc1lE,KAAK0P,UAAU5H,IAAM,MAAC3F,OAAWA,GACrDnC,KAAK0P,UAAU5H,GAAK,CAAC49D,EAAY,IAAMh2D,EAAUwQ,GAAIwlD,EAAY,IAAMh2D,EAAUu5D,YAErF,QACI,OAAO,IAAID,EAAwB,KAAM,YAAUhpE,KAAK0P,YAE5D,kBACI,OAAO,IAAIizB,IAAI,CAAC3iC,KAAK0P,UAAUu5D,WAAYjpE,KAAK0P,UAAUwQ,MAAQlgB,KAAK0P,UAAU5I,SAAW,KAEhG,iBACI,OAAO,IAAI67B,IAAI3iC,KAAK0P,UAAU5H,IAElC,OACI,6BAA8B,YAAK9H,KAAK0P,aAE5C,WACI,MAAMoM,EAAK9b,KAAK0P,WAAW,WAAEu5D,EAAU,GAAE/oD,GAAOpE,EAAIa,EAAO,YAAOb,EAAI,CAAC,aAAc,OAErF,OADehc,OAAOC,OAAO,CAAE+C,KAAM,aAAcyJ,EAAG2T,EAAI1T,EAAGy8D,GAActsD,M,iCC5BnF,qDAKO,MAAMusD,UAA2B,IACpC,YAAY3oE,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EAErB,QACI,OAAO,IAAIw5D,EAAmB,KAAM,YAAUlpE,KAAK0P,YAEvD,cAAc6pB,GACVv5B,KAAK0P,UAAU5I,QAAU,aAAQ9G,KAAK0P,UAAU5I,SAAW,IAAIkH,OAAOurB,GAASz4B,GAAKA,GAExF,kBAGA,kBACI,OAAO,IAAI6hC,IAAI,CAAC3iC,KAAK0P,UAAUy5D,MAAOnpE,KAAK0P,UAAUpN,SAAWtC,KAAK0P,UAAU5I,SAAW,KAE9F,OACI,wBAAyB,YAAK9G,KAAK0P,aAEvC,WACI,MAAM,MAAEy5D,EAAK,MAAE7mE,EAAK,QAAEwE,EAAO,MAAEsiE,EAAK,GAAE1hE,GAAO1H,KAAK0P,UAClD,OAAO5P,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,CAAE+C,KAAM,QAASI,MAAOimE,EAAO7mE,cAAoBH,IAAVinE,EAAsB,CAAEA,SAAU,SAAcjnE,IAAPuF,EAAmB,CAAEA,MAAO,SAAmBvF,IAAZ2E,EAAwB,CAAEA,WAAY,O,iCC3BpN,qDAKO,MAAMuiE,UAA4B,IACrC,YAAY9oE,EAAQmP,GAChB7P,MAAMU,GACNP,KAAK0P,UAAYA,EAErB,QACI,OAAO,IAAI25D,EAAoB,KAAM,YAAUrpE,KAAK0P,YAExD,kBACI,OAAO,IAAIizB,IAEf,iBACI,OAAO,IAAIA,IAEf,OACI,yBAA0B,YAAK3iC,KAAK0P,aAExC,WACI,MAAO,CACH5M,KAAM,SACNnD,KAAMK,KAAK0P,UAAU45D,W,iCCzBjC,yHAMO,SAASC,EAAuBhuD,EAAOsD,GAC1C,OAAI,YAAetD,GACRiuD,EAAgBjuD,EAAOsD,GAE3B4qD,EAA0BluD,EAAOsD,GAErC,SAAS6qD,EAA0BljE,EAAUqY,GAChD,OAAO2qD,EAAgBhjE,EAAUqY,GAKrC,SAAS8qD,EAAc7sD,EAAG+B,GACtB,OAAI,YAAY/B,EAAE5Z,OACV4Z,EAAE5Z,MAAMmY,UAAUwD,EAEX/e,OAAOC,OAAOD,OAAOC,OAAO,GAAI+c,GAAI,CAAE5Z,MAAO2b,EAAS/B,EAAE5Z,MAAMmY,eAGrE,IAAS,IAAYvF,oBAAoBgH,EAAE5Z,MAAMmY,SAIlDyB,EAKX,SAAS2sD,EAA0B5nE,EAAUgd,GAEzC,QAAiB1c,KADjBN,EAAW8nE,EAAc9nE,EAAUgd,IACnC,CAIK,GAAiB,OAAbhd,EACL,OAAO,KAEX,GAAI,YAAmBA,IAAa,YAAYA,EAASkB,MAAO,CAC5D,MAAMA,EAAO4mE,EAAc9nE,EAASkB,KAAM8b,GAC1Chd,EAAW/B,OAAOC,OAAOD,OAAOC,OAAO,GAAI8B,GAAYkB,EAAO,CAAEA,QAAS,IAE7E,OAAOlB,GAEX,SAAS+nE,EAA4BnjE,EAAYoY,GAC7C,IAAI,YAAWpY,GASV,CACD,GAAI,YAAuBA,GAAa,CACpC,MAAM0M,EAAKs2D,EAA0BhjE,EAAWiD,UAAWmV,GAC3D,GAAI1L,EACA,OAAOrT,OAAOC,OAAOD,OAAOC,OAAO,GAAI0G,GAAa,CAAEiD,UAAWyJ,IAEhE,CACD,MAAM,UAAEzJ,GAAcjD,EACtB,OAD+D,YAAOA,EAAY,CAAC,eAI3F,OAAOA,EApBiB,CACxB,MAAM0M,EAAKs2D,EAA0BhjE,EAAYoY,GACjD,GAAI1L,EACA,OAAOA,EAEN,GAAI,YAAiB1M,GACtB,MAAO,CAAEiD,UAAWjD,EAAWiD,YAkB3C,SAAS8/D,EAAgB7/D,EAASkV,GAC9B,MAAM27B,EAAM,GACZ,IAAK,MAAMj5C,KAAWoI,EAClB,GAAI,YAAeA,EAASpI,GAAU,CAClC,MAAMkF,EAAakD,EAAQpI,GAC3B,GAAI,YAAQkF,GAER+zC,EAAIj5C,GAAWkF,EAAWyD,IAAIikD,GAAMyb,EAA4Bzb,EAAItvC,IAAWnQ,OAAOy/C,GAAMA,OAE3F,CACD,MAAMA,EAAKyb,EAA4BnjE,EAAYoY,QACxC1c,IAAPgsD,IACA3T,EAAIj5C,GAAW4sD,IAK/B,OAAO3T,I,iCC3FX,uLAaO,SAASqvB,EAAc5oE,GAC1B,OAAO,IAAwBuH,OAAO,CAACL,EAAM5G,KACrCN,EAAMG,UAAUC,OAAOE,IAAYN,EAAMkH,KAAK5G,KAC9C4G,EAAK5G,GAAW,CAACuoE,EAAUvoE,EAASN,KAEjCkH,GACR,IAEP,MAAM4hE,EAAkB,CACpBlO,OAAQ,MACRF,IAAK,SACLH,KAAM,QACNC,MAAO,QAEJ,SAASuO,EAAe/oE,GAC3B,MAAM,KAAEkoB,EAAI,QAAErK,GAAY7d,EAAMG,UAC1B6oE,EAAY,CAAEtO,IAAK,EAAGE,OAAQ,EAAGJ,MAAO,EAAGD,KAAM,GACvD,IAAK,MAAMn7D,KAASY,EAAMX,SAAU,CAChCD,EAAMusD,sBACN,IAAK,MAAMrrD,KAAW,YAAKlB,EAAMe,UAAU+nB,MACvCrK,EAAQ3W,KAAK5G,GAAW,YAAkBN,EAAMG,UAAU0d,QAASvd,GACrC,WAA1Bud,EAAQ3W,KAAK5G,KAGb4nB,EAAK5nB,GAAW2oE,EAAoB/gD,EAAK5nB,GAAUlB,EAAMe,UAAU+nB,KAAK5nB,IACnE4nB,EAAK5nB,KAGNud,EAAQ3W,KAAK5G,GAAW,qBACjB4nB,EAAK5nB,KAM5B,IAAK,MAAMA,IAAW,CAAC,IAAG,KAAI,CAC1B,IAAK,MAAMlB,KAASY,EAAMX,SACtB,GAAKD,EAAMe,UAAU+nB,KAAK5nB,GAA1B,CAIA,GAA8B,gBAA1Bud,EAAQ3W,KAAK5G,GAA4B,CAEzC4nB,EAAK5nB,IAAY4nB,EAAK5nB,IAAY,IAAIyM,OAAO3N,EAAMe,UAAU+nB,KAAK5nB,IAElE,IAAK,MAAM+nB,KAAiBjpB,EAAMe,UAAU+nB,KAAK5nB,GAAU,CACvD,MAAQe,MAAOsB,EAAM,SAAEuf,GAAamG,EAAc5jB,gBAAgB,UAClE,GAAIukE,EAAUrmE,GAAU,IAAMuf,EAAU,CAEpC,MAAMgnD,EAAiBJ,EAAgBnmE,GACnCqmE,EAAUrmE,GAAUqmE,EAAUE,IAC9B7gD,EAAcnkB,IAAI,SAAUglE,GAAgB,GAGpDF,EAAUrmE,aAKXvD,EAAMe,UAAU+nB,KAAK5nB,GAGhC,GAA8B,gBAA1Bud,EAAQ3W,KAAK5G,IAA8B4nB,EAAK5nB,IAAY4nB,EAAK5nB,GAASR,OAAS,EACnF,IAAK,MAAMg8C,KAAY5zB,EAAK5nB,GAClBw7C,EAASl8C,IAAI,UAAYk8C,EAAS55B,SAAS8zB,OAC7C8F,EAAS50B,SAAS8uB,MAAO,IAM7C,SAASizB,EAAoBE,EAAiBC,GAC1C,IAAID,EA4BA,OAAOC,EAAengE,IAAIof,GAAiBA,EAAcjB,SA5BxC,CAEjB,GAAI+hD,EAAgBrpE,SAAWspE,EAAetpE,OAC1C,OAEJ,MAAMA,EAASqpE,EAAgBrpE,OAC/B,IAAK,IAAIke,EAAI,EAAGA,EAAIle,EAAQke,IAAK,CAC7B,MAAMhf,EAASmqE,EAAgBnrD,GACzB5e,EAAQgqE,EAAeprD,GAC7B,KAAMhf,KAAaI,EACf,OAEC,GAAIJ,GAAUI,EAAO,CACtB,MAAM6kE,EAAejlE,EAAOyF,gBAAgB,UACtCy/D,EAAc9kE,EAAMqF,gBAAgB,UAC1C,GAAIw/D,EAAa/hD,UAAYgiD,EAAYhiD,UAAY+hD,EAAa5iE,QAAU6iE,EAAY7iE,MAGpF,OAGA8nE,EAAgBnrD,GAAKqrD,EAAmBrqE,EAAQI,KAShE,OAAO+pE,EAEX,SAASE,EAAmBrqE,EAAQI,GAChC,IAAK,MAAM0X,KAAQ,IAA2B,CAC1C,MAAMstD,EAA0B,YAAwBplE,EAAOyF,gBAAgBqS,GAAO1X,EAAMqF,gBAAgBqS,GAAOA,EAAM,OAEzH,CAACpS,EAAIC,KACD,OAAQmS,GACJ,IAAK,QACD,OAAO,YAAoBpS,EAAIC,GACnC,IAAK,YACD,MAAO,CACHud,SAAUxd,EAAGwd,SACb7gB,MAAO,YAAgBqD,EAAGrD,MAAOsD,EAAGtD,QAGhD,OAAO,YAAkBqD,EAAIC,EAAImS,EAAM,UAE3C9X,EAAOW,gBAAgBmX,EAAMstD,GAEjC,OAAOplE,EAEX,SAASsqE,EAAiBtpE,EAAOM,GAC7B,MAAMmhD,EAAuB,MAAZnhD,EAAkB,KAAO,KACpCM,EAAWZ,EAAMY,SAASN,GAC1B4O,EAAYlP,EAAMY,SAAS6gD,GAC3Bsb,EAASn8D,EAAWA,EAASuF,WAAQjF,EACrC87D,EAAS9tD,EAAYA,EAAU/I,WAAQjF,EAC7C,OAAI67D,GAAUC,EACH,YAAWD,EAAQC,GAErBD,IAGAC,SAGW97D,IAAX67D,EAEEA,OAES77D,IAAX87D,EAEEA,OAFN,IA0BT,SAAS6L,EAAUvoE,EAASN,GACxB,MAAMkH,EAAOlH,EAAMkH,KAAK5G,GAClB+nB,EAAgB,IAAI,IAE1B,IAA0BhoB,QAAQJ,IAC9B,MAAMoB,EAoCd,SAAqBpB,EAAUwmC,EAAenmC,EAASN,GACnD,MAAMY,EAAWZ,EAAMY,SAASN,GAI1BkmC,EAAa,IAAsBxmC,EAAOymC,EAAenmC,EAASM,GAClE+B,EAAS,YAAgB8jC,EAAc9jC,OAAQ,IAAkBrC,KACjE,KAAE6C,EAAI,OAAEtC,GAAWb,EACzB,OAAQC,GACJ,IAAK,QACD,OAAOD,EAAMwgB,UAAUlgB,GAC3B,IAAK,YACD,OAAO,IAAqBN,EAAOM,GACvC,IAAK,SAED,GAAI,YAAqBM,GACrB,OAEJ,OAAO,YAAaA,EAAU6lC,EAAcx/B,OAAQpG,GACxD,IAAK,aAED,GAAI,YAAqBD,GACrB,OAEJ,OAAO6lC,EAAcp/B,WACzB,IAAK,OACD,GAAI,YAASrH,EAAMY,SAASN,GAASyB,KACjC,OAAO,EAEN,CACD,MAAMT,EAAYtB,EAAMW,kBAAkBL,GAASV,IAAI,QACvD,OAAO,YAAgB6mC,EAAcuP,KAAM,IAAuB10C,EAAWV,IAGrF,IAAK,aACD,OAAO,YAAgB6lC,EAAciO,WAAY,IAA6BlO,EAAY7jC,IAC9F,IAAK,aACD,OAAO6jC,EACX,IAAK,gBACD,OAAO,YAAgBC,EAAcmO,cAAe,IAAgCpO,EAAY7jC,IACpG,IAAK,aACD,OAAO,YAAgB8jC,EAAc6P,WAAY,IAA6B11C,EAAUN,IAC5F,IAAK,eAAgB,CACjB,MAAMgB,EAAYtB,EAAMW,kBAAkBL,GAASV,IAAI,QACvD,OAAO,YAAgB6mC,EAAcgQ,aAAc,IAA+B71C,EAAUU,IAEhG,IAAK,SACD,OAAOqB,EACX,IAAK,YAAa,CACd,MAAMrB,EAAYtB,EAAMW,kBAAkBL,GAASV,IAAI,QACjDyO,EAAuB,MAAZ/N,EAAkB,QAAsB,MAAZA,EAAkB,cAAWY,EACpExC,EAAO2P,EAAWrO,EAAMmgB,iBAAiB9R,QAAYnN,EAC3D,OAAO,YAAgBulC,EAAcmR,UAAW,IAA4B,CAAEh3C,WAAUU,YAAW5C,UAEvG,IAAK,QAAS,CACV,MAAM+iD,EAAuB,MAAZnhD,EAAkB,KAAO,KACpC4O,EAAYlP,EAAMY,SAAS6gD,GAGjC,OAAO,YAAgBhb,EAActgC,MAAOmjE,EAAiBtpE,EAAOM,GACpE,YAAoB,CAAC,YAAeM,IAAYsO,EAAY,CAAC,YAAeA,IAAc,KAE9F,IAAK,SACD,OAAO,IAAkBu3B,EAAezmC,EAAOY,GACnD,IAAK,SACD,OAAO,YAAgB6lC,EAAcoR,OAAQ,IAAyB10C,EAAMvC,IAGpF,OAAO,YAAeX,GAAYwmC,EAAcxmC,QAAYiB,EAxG1CoiE,CAAYrjE,EAAUiH,EAAM5G,EAASN,GACnD,QAAckB,IAAVG,EAAqB,CACrB,MAAM6gB,EA3BlB,SAAoB7gB,EAAOpB,EAAUiH,EAAMlH,EAAOM,GAC9C,OAAQL,GACJ,IAAK,aACL,IAAK,aACD,OAAOoB,IAAU,YAAe6F,EAAKjH,IACzC,IAAK,SACD,QAASiH,EAAKqD,OAElB,IAAK,SAED,QAASrD,EAAK3B,YAAc2B,EAAKs/B,WACrC,IAAK,QAED,GAAInlC,IAAUioE,EAAiBtpE,EAAOM,GAClC,OAAO,EAInB,OAAOe,IAAU6F,EAAKjH,GASGsjE,CAAWliE,EAAOpB,EAAUiH,EAAMlH,EAAOM,GACpDg4D,EAAc,YAAcr4D,EAAUD,EAAMa,OAAQP,EAAS+nB,EAAczoB,IAAI,UAAWI,EAAMW,kBAAkBL,GAASV,IAAI,SAEjIsiB,QAA4BhhB,IAAhBo3D,EAEZjwC,EAAcnkB,IAAIjE,EAAUoB,EAAO6gB,GAE9B,YAAS,CAAC,OAAQ,UAAWjiB,IAAaq4D,GAG/CjwC,EAAcnkB,IAAIjE,EAAUq4D,GAAa,MAKrD,MAAMiR,EAAeriE,EAAK3B,UAAY,GAChCikE,EAAa,IAAWjiE,OAAO,CAACqY,EAAG6f,KACrC,IAAKpX,EAAc8zB,YAAY1c,GAE3B,OAAO7f,EAEX,MAAM6pD,EAAmB,YAAiBF,EAAa9pC,IAAS,GAAIz/B,GAC9DqB,EAAiB,WAATo+B,EAAoB,IAAcz/B,EAAOM,EAASmpE,GAAoBA,EAIpF,YAHcvoE,IAAVG,GAAuB,YAAKA,GAAOvB,OAAS,IAC5C8f,EAAE6f,GAAQ,CAAE3xB,OAAQzM,IAEjBue,GACR,IAKH,OAHI,YAAK4pD,GAAY1pE,OAAS,GAC1BuoB,EAAcnkB,IAAI,SAAUslE,IAActiE,EAAK3B,eAAgCrE,IAApBgG,EAAKs/B,YAE7Dne,I,iCC7NX,sMAsBO,MAAMqhD,UAAkB,IAC3B,YAAYl9D,EAAMlN,EAAQqe,EAAiB8K,EAAkB,GAAI7K,EAAU/c,GACvEjC,MAAM4N,EAAM,OAAQlN,EAAQqe,EAAiB9c,EAAQ+c,OAAU1c,EAAWsL,EAAKmY,MAC/E5lB,KAAKyB,gBAAkB,GACvBzB,KAAK4qE,cAAgB,GACrB5qE,KAAK6qE,iBAAmB,GACxB7qE,KAAKN,oBAAsB,GAC3BM,KAAKic,UAAY,GACjBjc,KAAKM,SAAW,GAChB,MAAM8D,EAAO,YAAUqJ,EAAKrJ,MAAQqJ,EAAKrJ,KAAKtB,KAAO2K,EAAKrJ,KACpD0mE,EAA+B,YAA0Br9D,EAAKjH,UAAY,GAAIqY,GACpF7e,KAAK2C,QAAU,YAAiB8K,EAAKrJ,KAAM0mE,EAA8BhpE,EAAQ,CAC7E4oB,UAAWjd,EAAK7N,MAAQ,YAAqB6N,EAAK7N,QAEtD,MAAM4G,EAAYxG,KAAKwG,SAAW,YAAkBskE,EAA8B9qE,KAAK2C,SACvF3C,KAAKL,KAAO,YAAe,CACvB6G,WACA7G,KAAMG,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI2pB,GAAmBjc,EAAKzH,MAAQ,CAAEA,MAAOyH,EAAKzH,OAAU,IAAOyH,EAAKxH,OAAS,CAAEA,OAAQwH,EAAKxH,QAAW,MAG/JjG,KAAKie,MAAQ,YAAM7Z,EAAMoC,GACzBxG,KAAKyB,gBAAkBzB,KAAK+qE,WAAW3mE,EAAMoC,GAC7CxG,KAAK4qE,cAAgB5qE,KAAKgrE,SAASxkE,GACnCxG,KAAK6qE,iBAAmB7qE,KAAKirE,WAAWzkE,GACxCxG,KAAKN,oBAAsB+N,EAAKoJ,WAEhC7W,KAAKic,UAAYxO,EAAKwO,UAE1B,oBACI,MAAM,SAAEzV,GAAaxG,KACfkrE,EAAiBlrE,KAAKoE,OAAS,IAC/B+mE,EAAiB3kE,GAAY,IAAqBm/C,KAAKpkD,GAAW,YAAWiF,EAASjF,KAC5F,OAAO2pE,GAAkBC,EAM7B,YAAY5pE,GACR,MAAMsB,EAAQ7C,KAAKyB,gBAAgBF,GACnC,OAAOsB,EAAQA,EAAMqC,YAAS/C,EAElC,KAAKZ,GACD,OAAOvB,KAAK4qE,cAAcrpE,GAE9B,OAAOA,GACH,OAAOvB,KAAK6qE,iBAAiBtpE,GAEjC,WAAW6C,EAAMoC,GACb,OAAO,IAAegC,OAAO,CAACnH,EAAQE,KAClC,IAAIM,EACAL,EACJ,MAAMiF,EAAaD,EAASjF,GAa5B,OAZI,YAAWkF,IACX5E,EAAW4E,EACXjF,EAAiBiF,EAAW5D,OAEvB,YAAuB4D,KAE5B5E,EAAW4E,EAAWiD,UACtBlI,EAAiBiF,EAAWiD,UAAiB,OAE7C7H,IACAR,EAAOE,GAAWC,GAAkB,IAEjCH,GACR,IAEP,SAASmF,GACL,MAAO,CAAC,IAAG,KAAGgC,OAAO,CAAC4iE,EAAO7pE,KAGzB,MAAMkF,EAAaD,EAASjF,GAC5B,GAAI,YAAWkF,IACVlF,IAAY,KAAK,YAAWiF,EAASiY,KACrCld,IAAY,KAAK,YAAWiF,EAASkY,IAAM,CAC5C,MAAM2sD,EAAW,YAAW5kE,GAAcA,EAAW0B,KAAO,KAC3C,OAAbkjE,IACAD,EAAM7pE,GAAWzB,OAAOC,OAAO,GAAIsrE,IAG3C,OAAOD,GACR,IAEP,WAAW5kE,GACP,OAAO,IAA2BgC,OAAO,CAAC8iE,EAAS/pE,KAC/C,MAAMkF,EAAaD,EAASjF,GAC5B,GAAIkF,EAAY,CACZ,MAAMkM,EAAS,YAAWlM,GACpBA,EAAWkM,OACX,YAAuBlM,GACnBA,EAAWiD,UAAkB,OAC7B,KACK,OAAXiJ,IAA8B,IAAXA,GAAoB,YAAcpR,KACrD+pE,EAAQ/pE,GAAWzB,OAAOC,OAAO,GAAI4S,IAG7C,OAAO24D,GACR,IAEP,YACItrE,KAAKoB,UAAUxB,KAAO,YAAUI,MAEpC,kBACI,YAAoBA,MAExB,kBACIA,KAAKoB,UAAU6a,UAAY,YAAmBjc,KAAMA,KAAKic,WAE7D,iBACIjc,KAAKoB,UAAUgD,KAAO,YAAgBpE,MAE1C,sBACIA,KAAKoB,UAAU+nB,KAAO,YAAcnpB,MAExC,iCAAiC2f,GAC7B,OAAO,YAAwB3f,KAAM2f,GAEzC,kBACI,MAAO,IAAI,YAAoB3f,SAAU,YAA6BA,KAAM,KAEhF,sBAAsBJ,GAClB,OAAO,YAA0BI,KAAMJ,GAE3C,iBACI,OAAO,KAEX,wBACI,OAAO,YAAsBI,MAEjC,gBACI,IAAIqsB,EAAQrsB,KAAKoB,UAAUgD,MAAQ,GAOnC,OAHKpE,KAAKO,QAAW,YAAaP,KAAKO,UACnC8rB,EAAQ,YAA2BrsB,KAAMqsB,IAEtCA,EAAMniB,IAAIlK,KAAKssD,kBAE1B,aACI,OAAOtsD,KAAKwG,SAEhB,WACI,OAAOxG,KAAK2C,QAAQG,KAExB,gBAAgBvB,GACZ,OAAO,IAA2BvB,KAAKwG,SAAUjF,GAErD,SAASA,GACL,MAAMkF,EAAazG,KAAKwG,SAASjF,GACjC,OAAO,YAAiBkF,M,gCC7KhC,8hBAYA,SAAS8kE,EAAgC9wD,GACrC,MAAM,QAAElZ,EAAO,WAAEkF,EAAU,QAAE9D,EAAO,MAAEE,GAAU4X,EAC1CyH,EAAMspD,EAAS/wD,GAErB,OAEA,YAAWhU,KACN,YAAsBA,EAAWE,YAElC9D,GACA,YAAyBA,EAAMhC,IAAI,WACb,IAAtBgC,EAAMhC,IAAI,QACH4qE,EAAwB,CAC3B5pE,SAAU4E,EACVlF,UACAoB,UACAuf,QAGDA,EAEX,SAASupD,GAAwB,SAAE5pE,EAAQ,QAAEN,EAAO,QAAEoB,EAAO,IAAEuf,IAC3D,OAAK,YAAWvf,EAAQG,MAIjBof,EAFI,CAACwpD,EAAyB7pE,EAAUN,GAAU2gB,GAItD,SAASwpD,EAAyB7pE,EAAUN,GAC/C,MAAM47C,EAAOwuB,EAAsB9pE,GAAU,GAEvC+pE,EAA+B,MADjB,YAAoBrqE,GACG,CAAEe,MAAO,GAAM,CAAEY,MAAO,CAAEkpB,MAAO,WAC5E,OAAOtsB,OAAOC,OAAO,CAAEo9C,QAAQyuB,GAE5B,SAASD,EAAsBzoE,EAAOkhD,GAAU,GAInD,SAHAlhD,EAAQ,YAASA,GAASA,EAAQ,YAAQA,EAAO,CAAEuO,KAAM,aAE9C2yC,EAAU,MAAQ,cADlBA,EAAU,KAAO,QAEQA,EAAU,GAAK,YAAYlhD,KAO5D,SAAS20C,EAASp9B,GACrB,MAAM,QAAElZ,EAAO,WAAEkF,EAAU,UAAEgb,EAAS,MAAExD,EAAK,OAAED,GAAWvD,EAC1D,OAAI,YAAWhU,IAAewX,GAAS1c,IAAY0c,EAAMH,aACjD,YAAmBrX,SAAmCtE,IAApBsE,EAAW6J,KACtCu7D,EAA2B,CAC9BpqD,YACA5f,SAAU4E,EACVqlE,YAAa,QACbx7D,KAAM7J,EAAW6J,KACjB0N,OAAQ,IAITgjB,EAASv6B,EAAYgb,EAAW,CAAEvQ,OAAQ,OAAS,CAAE8M,WAEzDutD,EAAgC9wD,GAKpC,SAASsxD,GAAU,QAAExqE,EAAO,WAAEkF,EAAU,YAAE40D,EAAW,QAAE14D,EAAO,OAAEb,EAAM,UAAE2f,EAAS,MAAE5e,EAAK,MAAEob,EAAK,OAAED,EAAM,WAAEkP,IAC5G,OAAI,YAAWzmB,IACXwX,GAEA1c,EAAQ2S,OAAO,KAAO+J,EAAMH,aAAa5J,OAAO,GACzC8sB,EAASv6B,EAAYgb,EAAW,CAAEvQ,OAAQ,SAAW,CAAE8M,WAE3DutD,EAAgC,CACnChqE,UACAkF,WAAY40D,EACZ55C,YACA5e,QACAob,QACAtb,UACAb,SACAkc,SACAkP,eAGD,SAAS8+C,EAAUzqE,EAASoB,GAC/B,MAEMspE,EAAqBtpE,EAFJpB,EAAU,UAGjC,GAAI0qE,EACA,OAAOA,EAOR,SAASjpE,GAAI,QAAEzB,EAAO,SAAEM,EAAQ,UAAE4f,EAAS,QAAE9e,EAAO,KAAE2N,EAAI,OAAE0N,IAO/D,OAAOytD,EAAwB,CAC3B5pE,WACAN,UACAoB,UACAuf,IAVQ2pD,EAA2B,CACnCpqD,YACA5f,WACAyO,OACA0N,aASD,SAASgjB,EAASn/B,EAAU4f,EAAWnU,EAAK4+D,GAC/C,MAAMhqD,EAAMpiB,OAAOC,OAAOD,OAAOC,OAAO,GAAK0hB,EAAY,CAAE5e,MAAO4e,GAAc,IAAM,CAAEve,MAAO,YAAQrB,EAAUyL,KACjH,GAAI4+D,EAAQ,CACR,MAAM,OAAEluD,EAAM,KAAE1N,GAAS47D,EACzB,OAAOpsE,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAImiB,GAAOlE,EAAS,CAAEA,UAAW,IAAO1N,EAAO,CAAEA,QAAS,IAE/G,OAAO4R,EAEJ,SAASiqD,EAAQ1qD,EAAWnR,GAAO,GACtC,MAAO,CACHzN,MAAO4e,EACPnR,KAAMA,GAMd,SAASu7D,GAA2B,UAAEpqD,EAAS,SAAE5f,EAAQ,UAAEsO,EAAS,OAAE6N,EAAM,YAAE8tD,EAAW,KAAEx7D,EAAO,KAC9F,MAAMmB,EAAO,EAAInB,GAAQA,EAAO,EAAI,aAAUnO,EACxCi6C,EAAQ,YAAQv6C,EAAU,CAAE4P,OAAMP,OAAQ46D,IAC1C/qC,OAAoB5+B,IAAdgO,EAA0B,YAAQA,EAAW,CAAEsB,SAAU,YAAQ5P,EAAU,CAAEqP,OAAQ,MAAOO,SACxG,GAAa,IAATnB,EACA,OAAOxQ,OAAOC,OAAO,CAAE8C,MAAO4e,EAAWve,MAAOk5C,GAAUp+B,EAAS,CAAEA,UAAW,IAE/E,GAAa,IAAT1N,EACL,OAAOxQ,OAAOC,OAAO,CAAE8C,MAAO4e,EAAWve,MAAO69B,GAAQ/iB,EAAS,CAAEA,UAAW,IAE7E,CACD,MAAM6yC,KAAWvgD,OAAU8rC,OAAW,EAAI9rC,OAAUywB,IACpD,OAAOjhC,OAAOC,OAAO,CAAE4O,iBAAkB8S,OAAeovC,MAAa7yC,EAAS,CAAEA,UAAW,KAM5F,SAASwtD,GAAS,QAAEjqE,EAAO,WAAEkF,EAAU,YAAE40D,EAAW,QAAE14D,EAAO,OAAEb,EAAM,UAAE2f,EAAS,MAAE5e,EAAK,MAAEob,EAAK,OAAED,EAAM,WAAEkP,IAE3G,GAAIzmB,EAAY,CAEZ,GAAI,YAAWA,GAAa,CACxB,GAAI,YAAgBA,GAAa,CAC7B,MAAM6J,EAAO,YAAQ/O,EAASkF,EAAY40D,EAAa14D,EAASb,EAAQ,CAAEsO,YAAY,IACtF,GAAI,YAAU3J,EAAWzD,MAASsN,GAAQ7J,EAAW5C,SAGjD,OAAI,YAAS,CAAC,IAAG,KAAItC,IAAY,YAAS,CAAC,IAAc,KAAWkF,EAAW3D,MACvEmb,GAASA,EAAM8O,OAERiU,EAASv6B,EAAYgb,EAAW,CAAEzZ,UAAW,OAAS,CAAEgW,WAG5D6tD,EAA2B,CAAEpqD,YAAW5f,SAAU4E,EAAY6J,OAAM0N,WAExEgjB,EAASv6B,EAAYgb,EAAW,YAAiBhb,EAAYlF,GAAW,CAAEyG,UAAW,SAAY,GAAI,CACxGgW,WAGH,GAAI,YAASvX,EAAWzD,KAAM,CAC/B,GAAI,YAAWq4D,GACX,OAAOwQ,EAA2B,CAAEpqD,YAAW5f,SAAU4E,EAAY0J,UAAWkrD,EAAa/qD,OAAM0N,WAElG,CACD,MAAM0kC,EAAWnhD,IAAY,IAAI,IAAK,IACtC,IAAS,IAAY6Y,yBAAyBsoC,MAI1D,GAAI7/C,EAAO,CACP,MAAMN,EAAYM,EAAMhC,IAAI,QAC5B,GAAI,YAAkB0B,GAAY,CAC9B,GAAkB,SAAdA,EAAsB,CAGtB,OAAOy+B,EAASv6B,EAAYgb,EAAW,CAAEzZ,UAAW,SAAW,CAAEsI,KADpD,YAAgB,YAAmB7J,GAAcA,EAAW6J,UAAOnO,EAAW,IACpB6b,WAE3E,OAAOgjB,EAASv6B,EAAYgb,EAAW,CAAEzZ,UAAW,SAAW,CAAEgW,YAGzE,OAAOgjB,EAASv6B,EAAYgb,EAAW,GAAI,CAAEzD,WAE5C,GAAI,YAAWvX,GAAa,CAC7B,MAAMnE,EAAQmE,EAAWnE,MACnB8pE,EAAepuD,EAAS,CAAEA,UAAW,GAC3C,OAAOle,OAAOC,OAAOD,OAAOC,OAAO,GAAIssE,EAAW9qE,EAASe,IAAS8pE,IAK5E,OAAO,YAAWl/C,GAAcA,IAAeA,EAK5C,SAASm/C,EAAW9qE,EAASe,GAChC,OAAI,YAAS,CAAC,IAAK,MAAOf,IAAsB,UAAVe,EAC3B,CAAEY,MAAO,CAAEkpB,MAAO,UAEpB,YAAS,CAAC,IAAK,MAAO7qB,IAAsB,WAAVe,EAChC,CAAEY,MAAO,CAAEkpB,MAAO,WAEtB,CAAE9pB,SAEN,SAASgqE,EAAmB9lE,EAAU1E,GAAQ,aAAE84D,GAAiB,IACpE,MAAM2R,EAAY,GACZC,EAAU,GACVC,EAAS,GACTh7D,EAAOmpD,EAAe,cAAgB,QACtC8R,EAAgB,GACtB,SAASx3D,EAAIy3D,EAAMprE,GACf,MAAMwlC,EAAc,YAAoBxlC,GAClCM,EAAW,YAAgB8qE,GAC3BA,EACA7sE,OAAOC,OAAOD,OAAOC,OAAO,GAAI4sE,GAAO,CAAE7pE,KAAM0D,EAASugC,GAAajkC,OAErEia,EAAM,YAAMlb,EAAUC,EAAQ,CAAE0F,gBAAgB,IACtD,IAAIlF,EAAQwK,EAAKjL,EAAUC,EAAQ2P,GAAM9C,OACzC,GAAgB,MAAZpN,GAA+B,MAAZA,EAAiB,CACpC,MAAMmhD,EAAuB,MAAZnhD,EAAkB,KAAO,KACpC4O,EAAY,YAAY3J,EAASk8C,IACvC,GAAI,YAAS7gD,EAASmB,MAAQmN,EAAW,CACrC,MAAMozB,EAAa,YAAQ1hC,EAAU,CAAE4P,SACjC+xB,EAAW,YAAQrzB,EAAW,CAAEsB,SACtCnP,EAAQ,YAAoBihC,EAAYC,EAAU,YAAO3hC,GAAWC,GACpE2qE,EAAO/pB,IAAY,GAG3BgqB,EAAc3kE,KAAK,CAAExG,UAASwb,MAAKza,UAEvC,YAAQkE,EAAU,CAACC,EAAYlF,KACvB,YAAWkF,GACXyO,EAAIzO,EAAYlF,GAEX,YAAuBkF,IAC5ByO,EAAIzO,EAAWiD,UAAWnI,KAGlC,IAAK,MAAM,QAAEA,EAAO,IAAEwb,EAAG,MAAEza,KAAWoqE,EAC7BD,EAAOlrE,IAAairE,EAAQzvD,KAC7BwvD,EAAUxkE,QAAQ,YAAYgV,OAASza,KACvCkqE,EAAQzvD,IAAO,GAGvB,OAAOwvD,EAAUxrE,OAAS,CAAE4N,WAAY49D,EAAUlkE,KAAK,eAAalG,EAEjE,SAAS2K,EAAKrG,EAAY3E,EAAQ2P,EAAO,SAE5C,GAAIhL,EAAY,CACZ,GAAI,YAAWA,GACX,MAAO,CAAEnE,MAAOmE,EAAWnE,OAE/B,GAAI,YAAgBmE,GAChB,OAAO,YAAgBA,EAAY,YAAOA,GAAagL,EAAM3P,IAKlE,SAAS8qE,EAAIC,GAChB,OAAO/sE,OAAOC,OAAOD,OAAOC,OAAO,GAAI8sE,GAAU,CAAEC,KAAM,KAEtD,SAASC,GAAgB,QAAEpqE,EAAO,OAAEb,EAAM,WAAEorB,EAAU,QAAE3rB,EAAO,UAAEkgB,EAAS,MAAE5e,EAAK,KAAEuB,EAAMk3D,wBAAyB0R,IACrH,MAAO,KACH,MAAMjmC,EAAc,YAAoBxlC,GAClC0rE,EAAuB,YAAgBtqE,EAAQpB,GAAU,YAAcA,EAASoB,EAASb,IAC/F,QAA6BK,IAAzB8qE,EACA,OAAOZ,EAAW9qE,EAAS0rE,GAE/B,GAAI,YAAS//C,GAAa,CACtB,GAAIzL,EAAW,CACX,MAAMlf,EAAYM,EAAMhC,IAAI,QAC5B,GAAI,YAAS,CAAC,IAAU0nD,IAAK,IAAUhlD,KAAM,IAAUC,KAAMjB,IAKrDyqE,GAAkC,QAAT5oE,GAA2B,SAATA,GAC3C,IAAS,IAAY0S,+BAA+B1S,EAAM2iC,EAAa,CAAExkC,mBAG5E,CACD,GAAIM,EAAMqqE,+BACN,MAAO,CACHrqE,MAAO4e,EACPnf,MAAO,IAGX0qE,GAAkC,QAAT5oE,GAA2B,SAATA,GAC3C,IAAS,IAAY0S,+BAA+B1S,EAAM2iC,EAAa,CAAEhwB,WAAmC,IAAxBlU,EAAMsgB,SAASne,SAI/G,MAAmB,cAAfkoB,EACuB,MAAhB6Z,EAAsB,CAAEzkC,MAAO,GAAM,CAAEY,MAAO,CAAEkpB,MAAO,WAIvC,MAAhB2a,EAAsB,CAAE7jC,MAAO,CAAEkpB,MAAO,UAAc,CAAE9pB,MAAO,GAG9E,OAAO4qB,K,iCChUf,oEAAO,MAAMigD,EAAuB,CAAC,mBACxBC,EAAwB,CACjC,8BACA,8BACA,4BACA,8B,iCCLJ,gGAGA,MAAMC,EAAkCvtE,OAAOC,OAAOD,OAAOC,OAAO,GAAI,KAA+B,CAAEw5C,UAAW,EAEhH1sC,QAAS,EAAGH,MAAO,EAAGvD,OAAQ,EAAGD,KAAM,EAAGvJ,KAAM,EAAG8M,YAAa,EAAG6gE,WAAY,EAE/Ex+D,OAAQ,IACCy+D,EAA8B,YAAKF,GACzC,MAAMG,UAAwB,O,iCCTrC,gGAMA,MAAMC,EAAkC3tE,OAAOC,OAAOD,OAAOC,OAAO,CAAEwnC,UAAW,EAAG1kC,MAAO,GAAK,KAA+B,CAAE02C,UAAW,EAAGzqC,OAAQ,IAC1I4+D,EAA4B,YAAKD,GACvC,MAAME,UAAsB,IAC/B,YAAYxqD,EAAW,GAAIgF,EAAW,GAAIqB,GAAgB,GACtD3pB,QACAG,KAAKmjB,SAAWA,EAChBnjB,KAAKmoB,SAAWA,EAChBnoB,KAAKwpB,cAAgBA,EAEzB,QACI,OAAO,IAAImkD,EAAc,YAAU3tE,KAAKmjB,UAAW,YAAUnjB,KAAKmoB,UAAWnoB,KAAKwpB,eAEtF,YAAYkX,GAER,MAAa,SAATA,IAIS,SAATA,GAA4B,UAATA,IACV1gC,KAAKa,IAAI6/B,MArBb,KADMjsB,EAyBOzU,KAAKa,IAAI6/B,KAxBP,OAANjsB,IAD1B,IAAuBA,K,iCCHvB,0HAEA,SAAS1O,EAAY9E,EAAO2sE,GACxB,MAAM,OAAE9rE,EAAM,MAAEkE,EAAK,OAAEC,GAAWhF,EAClC,OAAOnB,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAOD,OAAOC,OAAO,GAAI,IAAuBkB,EAAO,CAC3GiF,MAAO,SACPC,SAAU,SACVC,MAAO,UACPzG,KAAM,UACNiE,OAAQ,YACP,IAAqB,IAAK3C,EAAO,IAAQ+E,KAAU,IAAqB,IAAK/E,EAAO,IAAQgF,KAAW,IAAmB,OAAQhF,IAEpI,SAAqBA,EAAOa,EAAQ8rE,GACvC,GAAIA,EACA,MAAO,CAAElhE,MAAO,CAAEpK,MAAOsrE,IAE7B,OAAO,IAAmB,QAAS3sE,GAN6G4sE,CAAY5sE,EAAOa,EAAQ8rE,IAQxK,MAAM3wD,EAAQ,CACjBnX,OAAQ,SACRC,YAAc9E,GACH8E,EAAY9E,IAGdsqB,EAAS,CAClBzlB,OAAQ,SACRC,YAAc9E,GACH8E,EAAY9E,EAAO,WAGrB2qB,EAAS,CAClB9lB,OAAQ,SACRC,YAAc9E,GACH8E,EAAY9E,EAAO,Y,gCCjClC,8NAEO,SAAS6sE,EAAYhxD,GACxB,QAASA,EAAU,OAEhB,SAASixD,EAAc9pD,GAC1B,QAASA,EAAY,KAElB,SAAS+pD,EAAuB9oE,GACnC,OAAK,YAAQA,KACF,WAAYA,KAAY,SAAUA,IAI1C,SAAS+oE,EAAsB/oE,GAClC,OAAK,YAAQA,KACF,WAAYA,GAAU,SAAUA,GAIxC,SAASgpE,EAAgBhpE,GAC5B,OAAK,YAAQA,KACF,UAAWA,GAAU,SAAUA,GAI9C,MAqDaipE,EAAkB,YArDF,CACzBthE,QAAS,EACT3D,KAAM,EACNyD,YAAa,EACbxD,OAAQ,EACRilE,UAAW,EACX3hE,YAAa,EACbG,cAAe,EACf0gE,WAAY,EACZe,iBAAkB,EAClBC,WAAY,EACZC,iBAAkB,EAClB5uE,KAAM,EACN+M,MAAO,EACPpJ,YAAa,EACb8zD,QAAS,EACTxzD,OAAQ,EACRsC,MAAO,EACPC,SAAU,EACV2G,KAAM,EACN0hE,IAAK,EACLC,GAAI,EACJC,GAAI,EACJC,SAAU,EACVvF,MAAO,EACPwF,OAAQ,EACRC,MAAO,EACPlnC,MAAO,EACPmnC,KAAM,EACNC,SAAU,EACVC,WAAY,EACZC,UAAW,EACX9jD,OAAQ,EACRC,KAAM,EACNwG,QAAS,EACTwuC,aAAc,EACd7zD,EAAG,EACHC,EAAG,EACHiS,GAAI,EACJC,GAAI,EACJ1Y,MAAO,EACPC,OAAQ,EACRipE,OAAQ,K,gCCpEZ,8OAEO,MAAMC,EAAa,CACtBC,aAAc,EACd/lB,QAAS,EACTgmB,SAAU,EACVC,QAAS,EACTnJ,QAAS,GAKN,MAAMoJ,EAAe,eACfxmB,EAAU,UACVymB,EAAW,WACXC,EAAU,UACVC,EAAU,UAMhB,SAASC,EAAY7sE,GACxB,GAAIA,EAEA,OADAA,EAAOA,EAAKwuC,eAER,IAAK,IACL,KAAKi+B,EACD,MAAO,eACX,IAAK,IACL,KAAKC,EACD,MAAO,WACX,IAAK,IACL,KAAKzmB,EACD,MAAO,UACX,IAAK,IACL,KAAK0mB,EACD,MAAO,UACX,KAAKC,EACD,MAAO","file":"vega-lite.js","sourcesContent":["import { Split } from '../split';\nexport class ProjectionComponent extends Split {\n    constructor(name, specifiedProjection, size, data) {\n        super(Object.assign({}, specifiedProjection), // all explicit properties of projection\n        { name } // name as initial implicit property\n        );\n        this.specifiedProjection = specifiedProjection;\n        this.size = size;\n        this.data = data;\n        this.merged = false;\n    }\n    /**\n     * Whether the projection parameters should fit provided data.\n     */\n    get isFit() {\n        return !!this.data;\n    }\n}\n//# sourceMappingURL=component.js.map","import { entries, uniqueId } from './../../util';\nimport { SourceNode } from './source';\n/**\n * Print debug information for dataflow tree.\n */\nexport function debug(node) {\n    console.log(`${node.constructor.name}${node.debugName ? `(${node.debugName})` : ''} -> ${node.children.map(c => {\n        return `${c.constructor.name}${c.debugName ? ` (${c.debugName})` : ''}`;\n    })}`);\n    console.log(node);\n    node.children.forEach(debug);\n}\n/**\n * Print the dataflow tree as graphviz.\n *\n * Render the output in http://viz-js.com/.\n */\nexport function draw(roots) {\n    // check the graph before printing it since the logic below assumes a consistent graph\n    checkLinks(roots);\n    const nodes = {};\n    const edges = [];\n    function getId(node) {\n        let id = node['__uniqueid'];\n        if (id === undefined) {\n            id = uniqueId();\n            node['__uniqueid'] = id;\n        }\n        return id;\n    }\n    function getLabel(node) {\n        const out = [node.constructor.name.slice(0, -4)];\n        if (node.debugName) {\n            out.push(`<i>${node.debugName}</i>`);\n        }\n        else if (node instanceof SourceNode) {\n            if (node.data.name || node.data.url) {\n                out.push(`<i>${node.data.name || node.data.url}</i>`);\n            }\n        }\n        const dep = node.dependentFields();\n        if (dep && dep.size) {\n            out.push(`<font color=\"grey\" point-size=\"10\">IN:</font> ${[...node.dependentFields()].join(', ')}`);\n        }\n        const prod = node.producedFields();\n        if (prod && prod.size) {\n            out.push(`<font color=\"grey\" point-size=\"10\">OUT:</font> ${[...node.producedFields()].join(', ')}`);\n        }\n        return out.join('<br/>');\n    }\n    function collector(node) {\n        const id = getId(node);\n        nodes[id] = {\n            id: id,\n            label: getLabel(node),\n            hash: node instanceof SourceNode\n                ? node.data.url || node.data.name || node.debugName\n                : String(node.hash()).replace(/\"/g, '')\n        };\n        for (const child of node.children) {\n            edges.push([id, getId(child)]);\n            collector(child);\n        }\n    }\n    roots.forEach(n => collector(n));\n    const dot = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n  ${entries(nodes)\n        .map(({ key, value }) => `  \"${key}\" [\n    label = <${value.label}>;\n    tooltip = \"[${value.id}]&#010;${value.hash}\"\n  ]`)\n        .join('\\n')}\n\n  ${edges.map(([source, target]) => `\"${source}\" -> \"${target}\"`).join(' ')}\n}`;\n    console.log(dot);\n    return dot;\n}\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\nexport function checkLinks(nodes) {\n    for (const node of nodes) {\n        for (const child of node.children) {\n            if (child.parent !== node) {\n                console.error('Dataflow graph is inconsistent.', node, child);\n                return false;\n            }\n        }\n        if (!checkLinks(node.children)) {\n            return false;\n        }\n    }\n    return true;\n}\n//# sourceMappingURL=debug.js.map","import { isArray } from 'vega-util';\nimport { some } from '../../util';\nimport { Split } from '../split';\nexport class ScaleComponent extends Split {\n    constructor(name, typeWithExplicit) {\n        super({}, // no initial explicit property\n        { name } // name as initial implicit property\n        );\n        this.merged = false;\n        this.setWithExplicit('type', typeWithExplicit);\n    }\n    /**\n     * Whether the scale definitely includes zero in the domain\n     */\n    domainDefinitelyIncludesZero() {\n        if (this.get('zero') !== false) {\n            return true;\n        }\n        return some(this.get('domains'), d => isArray(d) && d.length === 2 && d[0] <= 0 && d[1] >= 0);\n    }\n}\n//# sourceMappingURL=component.js.map","import { isArray } from 'vega-util';\nimport { isBinned, isBinning, isBinParams } from '../../bin';\nimport { COLOR, FILL, STROKE, X, Y } from '../../channel';\nimport * as log from '../../log';\nimport { channelScalePropertyIncompatability, hasContinuousDomain, isContinuousToContinuous, isContinuousToDiscrete, ScaleType, scaleTypeSupportProperty } from '../../scale';\nimport * as util from '../../util';\nimport { contains, getFirstDefined, keys } from '../../util';\nimport { getBinSignalName } from '../data/bin';\nimport { isUnitModel } from '../model';\nimport { mergeValuesWithExplicit, tieBreakByComparing } from '../split';\nimport { SignalRefWrapper } from './../signal';\nimport { parseUnitScaleRange } from './range';\nexport function parseScaleProperty(model, property) {\n    if (isUnitModel(model)) {\n        parseUnitScaleProperty(model, property);\n    }\n    else {\n        parseNonUnitScaleProperty(model, property);\n    }\n}\nfunction parseUnitScaleProperty(model, property) {\n    const localScaleComponents = model.component.scales;\n    keys(localScaleComponents).forEach((channel) => {\n        const specifiedScale = model.specifiedScales[channel];\n        const localScaleCmpt = localScaleComponents[channel];\n        const mergedScaleCmpt = model.getScaleComponent(channel);\n        const fieldDef = model.fieldDef(channel);\n        const config = model.config;\n        const specifiedValue = specifiedScale[property];\n        const sType = mergedScaleCmpt.get('type');\n        const supportedByScaleType = scaleTypeSupportProperty(sType, property);\n        const channelIncompatability = channelScalePropertyIncompatability(channel, property);\n        if (specifiedValue !== undefined) {\n            // If there is a specified value, check if it is compatible with scale type and channel\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(sType, property, channel));\n            }\n            else if (channelIncompatability) {\n                // channel\n                log.warn(channelIncompatability);\n            }\n        }\n        if (supportedByScaleType && channelIncompatability === undefined) {\n            if (specifiedValue !== undefined) {\n                // copyKeyFromObject ensures type safety\n                localScaleCmpt.copyKeyFromObject(property, specifiedScale);\n            }\n            else {\n                const value = getDefaultValue(property, model, channel, fieldDef, mergedScaleCmpt.get('type'), mergedScaleCmpt.get('padding'), mergedScaleCmpt.get('paddingInner'), specifiedScale.domain, model.markDef, config);\n                if (value !== undefined) {\n                    localScaleCmpt.set(property, value, false);\n                }\n            }\n        }\n    });\n}\n// Note: This method is used in Voyager.\nexport function getDefaultValue(property, model, channel, fieldDef, scaleType, scalePadding, scalePaddingInner, specifiedDomain, markDef, config) {\n    const scaleConfig = config.scale;\n    const { type, sort } = fieldDef;\n    // If we have default rule-base, determine default value first\n    switch (property) {\n        case 'bins':\n            return bins(model, fieldDef);\n        case 'interpolate':\n            return interpolate(channel, type);\n        case 'nice':\n            return nice(scaleType, channel, fieldDef);\n        case 'padding':\n            return padding(channel, scaleType, scaleConfig, fieldDef, markDef, config.bar);\n        case 'paddingInner':\n            return paddingInner(scalePadding, channel, markDef.type, scaleConfig);\n        case 'paddingOuter':\n            return paddingOuter(scalePadding, channel, scaleType, markDef.type, scalePaddingInner, scaleConfig);\n        case 'reverse':\n            return reverse(scaleType, sort);\n        case 'zero':\n            return zero(channel, fieldDef, specifiedDomain, markDef, scaleType);\n    }\n    // Otherwise, use scale config\n    return scaleConfig[property];\n}\n// This method is here rather than in range.ts to avoid circular dependency.\nexport function parseScaleRange(model) {\n    if (isUnitModel(model)) {\n        parseUnitScaleRange(model);\n    }\n    else {\n        parseNonUnitScaleProperty(model, 'range');\n    }\n}\nexport function parseNonUnitScaleProperty(model, property) {\n    const localScaleComponents = model.component.scales;\n    for (const child of model.children) {\n        if (property === 'range') {\n            parseScaleRange(child);\n        }\n        else {\n            parseScaleProperty(child, property);\n        }\n    }\n    keys(localScaleComponents).forEach((channel) => {\n        let valueWithExplicit;\n        for (const child of model.children) {\n            const childComponent = child.component.scales[channel];\n            if (childComponent) {\n                const childValueWithExplicit = childComponent.getWithExplicit(property);\n                valueWithExplicit = mergeValuesWithExplicit(valueWithExplicit, childValueWithExplicit, property, 'scale', tieBreakByComparing((v1, v2) => {\n                    switch (property) {\n                        case 'range':\n                            // For step, prefer larger step\n                            if (v1.step && v2.step) {\n                                return v1.step - v2.step;\n                            }\n                            return 0;\n                        // TODO: precedence rule for other properties\n                    }\n                    return 0;\n                }));\n            }\n        }\n        localScaleComponents[channel].setWithExplicit(property, valueWithExplicit);\n    });\n}\nexport function bins(model, fieldDef) {\n    const bin = fieldDef.bin;\n    if (isBinning(bin)) {\n        const binSignal = getBinSignalName(model, fieldDef.field, bin);\n        return new SignalRefWrapper(() => {\n            return model.getSignalName(binSignal);\n        });\n    }\n    else if (isBinned(bin) && isBinParams(bin) && bin.step !== undefined) {\n        // start and stop will be determined from the scale domain\n        return {\n            step: bin.step\n        };\n    }\n    return undefined;\n}\nexport function interpolate(channel, type) {\n    if (contains([COLOR, FILL, STROKE], channel) && type !== 'nominal') {\n        return 'hcl';\n    }\n    return undefined;\n}\nexport function nice(scaleType, channel, fieldDef) {\n    if (fieldDef.bin || util.contains([ScaleType.TIME, ScaleType.UTC], scaleType)) {\n        return undefined;\n    }\n    return util.contains([X, Y], channel) ? true : undefined;\n}\nexport function padding(channel, scaleType, scaleConfig, fieldDef, markDef, barConfig) {\n    if (util.contains([X, Y], channel)) {\n        if (isContinuousToContinuous(scaleType)) {\n            if (scaleConfig.continuousPadding !== undefined) {\n                return scaleConfig.continuousPadding;\n            }\n            const { type, orient } = markDef;\n            if (type === 'bar' && !fieldDef.bin && !fieldDef.timeUnit) {\n                if ((orient === 'vertical' && channel === 'x') || (orient === 'horizontal' && channel === 'y')) {\n                    return barConfig.continuousBandSize;\n                }\n            }\n        }\n        if (scaleType === ScaleType.POINT) {\n            return scaleConfig.pointPadding;\n        }\n    }\n    return undefined;\n}\nexport function paddingInner(paddingValue, channel, mark, scaleConfig) {\n    if (paddingValue !== undefined) {\n        // If user has already manually specified \"padding\", no need to add default paddingInner.\n        return undefined;\n    }\n    if (util.contains([X, Y], channel)) {\n        // Padding is only set for X and Y by default.\n        // Basically it doesn't make sense to add padding for color and size.\n        // paddingOuter would only be called if it's a band scale, just return the default for bandScale.\n        const { bandPaddingInner, barBandPaddingInner, rectBandPaddingInner } = scaleConfig;\n        return getFirstDefined(bandPaddingInner, mark === 'bar' ? barBandPaddingInner : rectBandPaddingInner);\n    }\n    return undefined;\n}\nexport function paddingOuter(paddingValue, channel, scaleType, mark, paddingInnerValue, scaleConfig) {\n    if (paddingValue !== undefined) {\n        // If user has already manually specified \"padding\", no need to add default paddingOuter.\n        return undefined;\n    }\n    if (util.contains([X, Y], channel)) {\n        // Padding is only set for X and Y by default.\n        // Basically it doesn't make sense to add padding for color and size.\n        if (scaleType === ScaleType.BAND) {\n            const { bandPaddingOuter } = scaleConfig;\n            return getFirstDefined(bandPaddingOuter, \n            /* By default, paddingOuter is paddingInner / 2. The reason is that\n              size (width/height) = step * (cardinality - paddingInner + 2 * paddingOuter).\n              and we want the width/height to be integer by default.\n              Note that step (by default) and cardinality are integers.) */\n            paddingInnerValue / 2);\n        }\n    }\n    return undefined;\n}\nexport function reverse(scaleType, sort) {\n    if (hasContinuousDomain(scaleType) && sort === 'descending') {\n        // For continuous domain scales, Vega does not support domain sort.\n        // Thus, we reverse range instead if sort is descending\n        return true;\n    }\n    return undefined;\n}\nexport function zero(channel, fieldDef, specifiedDomain, markDef, scaleType) {\n    // If users explicitly provide a domain range, we should not augment zero as that will be unexpected.\n    const hasCustomDomain = !!specifiedDomain && specifiedDomain !== 'unaggregated';\n    if (hasCustomDomain) {\n        if (hasContinuousDomain(scaleType)) {\n            if (isArray(specifiedDomain)) {\n                const first = specifiedDomain[0];\n                const last = specifiedDomain[specifiedDomain.length - 1];\n                if (first <= 0 && last >= 0) {\n                    // if the domain includes zero, make zero remains true\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    // If there is no custom domain, return true only for the following cases:\n    // 1) using quantitative field with size\n    // While this can be either ratio or interval fields, our assumption is that\n    // ratio are more common. However, if the scaleType is discretizing scale, we want to return\n    // false so that range doesn't start at zero\n    if (channel === 'size' && fieldDef.type === 'quantitative' && !isContinuousToDiscrete(scaleType)) {\n        return true;\n    }\n    // 2) non-binned, quantitative x-scale or y-scale\n    // (For binning, we should not include zero by default because binning are calculated without zero.)\n    if (!fieldDef.bin && util.contains([X, Y], channel)) {\n        const { orient, type } = markDef;\n        if (contains(['bar', 'area', 'line', 'trail'], type)) {\n            if ((orient === 'horizontal' && channel === 'y') || (orient === 'vertical' && channel === 'x')) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n//# sourceMappingURL=properties.js.map","import * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const line = {\n    vgMark: 'line',\n    encodeEntry: (model) => {\n        const { width, height } = model;\n        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            size: 'ignore',\n            orient: 'ignore'\n        })), mixins.pointPosition('x', model, ref.mid(width))), mixins.pointPosition('y', model, ref.mid(height))), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth' // VL's line size is strokeWidth\n        })), mixins.defined(model));\n    }\n};\nexport const trail = {\n    vgMark: 'trail',\n    encodeEntry: (model) => {\n        const { width, height } = model;\n        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            size: 'include',\n            orient: 'ignore'\n        })), mixins.pointPosition('x', model, ref.mid(width))), mixins.pointPosition('y', model, ref.mid(height))), mixins.nonPosition('size', model)), mixins.defined(model));\n    }\n};\n//# sourceMappingURL=line.js.map","import { __rest } from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { isArgmaxDef, isArgminDef } from './aggregate';\nimport { isBinned, isBinning } from './bin';\nimport { CHANNELS, isChannel, isNonPositionScaleChannel, isSecondaryRangeChannel, supportMark } from './channel';\nimport { binRequiresRange, getFieldDef, getGuide, getTypedFieldDef, hasConditionalFieldDef, isConditionalDef, isFieldDef, isTypedFieldDef, isValueDef, normalize, normalizeFieldDef, title, vgField } from './channeldef';\nimport * as log from './log';\nimport { getDateTimeComponents } from './timeunit';\nimport { TEMPORAL } from './type';\nimport { keys, some } from './util';\nexport function channelHasField(encoding, channel) {\n    const channelDef = encoding && encoding[channel];\n    if (channelDef) {\n        if (isArray(channelDef)) {\n            return some(channelDef, fieldDef => !!fieldDef.field);\n        }\n        else {\n            return isFieldDef(channelDef) || hasConditionalFieldDef(channelDef);\n        }\n    }\n    return false;\n}\nexport function isAggregate(encoding) {\n    return some(CHANNELS, channel => {\n        if (channelHasField(encoding, channel)) {\n            const channelDef = encoding[channel];\n            if (isArray(channelDef)) {\n                return some(channelDef, fieldDef => !!fieldDef.aggregate);\n            }\n            else {\n                const fieldDef = getFieldDef(channelDef);\n                return fieldDef && !!fieldDef.aggregate;\n            }\n        }\n        return false;\n    });\n}\nexport function extractTransformsFromEncoding(oldEncoding, config) {\n    const groupby = [];\n    const bins = [];\n    const timeUnits = [];\n    const aggregate = [];\n    const encoding = {};\n    forEach(oldEncoding, (channelDef, channel) => {\n        // Extract potential embedded transformations along with remaining properties\n        if (isFieldDef(channelDef)) {\n            const { field, aggregate: aggOp, timeUnit, bin } = channelDef, remaining = __rest(channelDef, [\"field\", \"aggregate\", \"timeUnit\", \"bin\"]);\n            if (aggOp || timeUnit || bin) {\n                const guide = getGuide(channelDef);\n                const isTitleDefined = guide && guide.title;\n                let newField = vgField(channelDef, { forAs: true });\n                const newFieldDef = Object.assign(Object.assign(Object.assign({}, (isTitleDefined ? [] : { title: title(channelDef, config, { allowDisabling: true }) })), remaining), { \n                    // Always overwrite field\n                    field: newField });\n                const isPositionChannel = channel === 'x' || channel === 'y';\n                if (aggOp) {\n                    let op;\n                    if (isArgmaxDef(aggOp)) {\n                        op = 'argmax';\n                        newField = vgField({ op: 'argmax', field: aggOp.argmax }, { forAs: true });\n                        newFieldDef.field = `${newField}.${field}`;\n                    }\n                    else if (isArgminDef(aggOp)) {\n                        op = 'argmin';\n                        newField = vgField({ op: 'argmin', field: aggOp.argmin }, { forAs: true });\n                        newFieldDef.field = `${newField}.${field}`;\n                    }\n                    else if (aggOp !== 'boxplot' && aggOp !== 'errorbar' && aggOp !== 'errorband') {\n                        op = aggOp;\n                    }\n                    if (op) {\n                        const aggregateEntry = {\n                            op,\n                            as: newField\n                        };\n                        if (field) {\n                            aggregateEntry.field = field;\n                        }\n                        aggregate.push(aggregateEntry);\n                    }\n                }\n                else {\n                    groupby.push(newField);\n                    if (isTypedFieldDef(channelDef) && isBinning(bin)) {\n                        bins.push({ bin, field, as: newField });\n                        // Add additional groupbys for range and end of bins\n                        groupby.push(vgField(channelDef, { binSuffix: 'end' }));\n                        if (binRequiresRange(channelDef, channel)) {\n                            groupby.push(vgField(channelDef, { binSuffix: 'range' }));\n                        }\n                        // Create accompanying 'x2' or 'y2' field if channel is 'x' or 'y' respectively\n                        if (isPositionChannel) {\n                            const secondaryChannel = {\n                                field: newField + '_end'\n                            };\n                            encoding[channel + '2'] = secondaryChannel;\n                        }\n                        newFieldDef.bin = 'binned';\n                        if (!isSecondaryRangeChannel(channel)) {\n                            newFieldDef['type'] = 'quantitative';\n                        }\n                    }\n                    else if (timeUnit) {\n                        timeUnits.push({ timeUnit, field, as: newField });\n                        // Add formatting to appropriate property based on the type of channel we're processing\n                        const format = getDateTimeComponents(timeUnit, config.axis.shortTimeLabels).join(' ');\n                        const formatType = isTypedFieldDef(channelDef) && channelDef.type !== TEMPORAL && 'time';\n                        if (channel === 'text' || channel === 'tooltip') {\n                            newFieldDef['format'] = newFieldDef['format'] || format;\n                            if (formatType) {\n                                newFieldDef['formatType'] = formatType;\n                            }\n                        }\n                        else if (isNonPositionScaleChannel(channel)) {\n                            newFieldDef['legend'] = Object.assign(Object.assign({ format }, (formatType ? { formatType } : {})), newFieldDef['legend']);\n                        }\n                        else if (isPositionChannel) {\n                            newFieldDef['axis'] = Object.assign(Object.assign({ format }, (formatType ? { formatType } : {})), newFieldDef['axis']);\n                        }\n                    }\n                }\n                // now the field should refer to post-transformed field instead\n                encoding[channel] = newFieldDef;\n            }\n            else {\n                groupby.push(field);\n                encoding[channel] = oldEncoding[channel];\n            }\n        }\n        else {\n            // For value def, just copy\n            encoding[channel] = oldEncoding[channel];\n        }\n    });\n    return {\n        bins,\n        timeUnits,\n        aggregate,\n        groupby,\n        encoding\n    };\n}\nexport function markChannelCompatible(encoding, channel, mark) {\n    const markSupported = supportMark(channel, mark);\n    if (!markSupported) {\n        return false;\n    }\n    else if (markSupported === 'binned') {\n        const primaryFieldDef = encoding[channel === 'x2' ? 'x' : 'y'];\n        // circle, point, square and tick only support x2/y2 when their corresponding x/y fieldDef\n        // has \"binned\" data and thus need x2/y2 to specify the bin-end field.\n        if (isFieldDef(primaryFieldDef) && isFieldDef(encoding[channel]) && isBinned(primaryFieldDef.bin)) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    return true;\n}\nexport function normalizeEncoding(encoding, markDef) {\n    const mark = markDef.type;\n    return keys(encoding).reduce((normalizedEncoding, channel) => {\n        if (!isChannel(channel)) {\n            // Drop invalid channel\n            log.warn(log.message.invalidEncodingChannel(channel));\n            return normalizedEncoding;\n        }\n        if (!markChannelCompatible(encoding, channel, mark)) {\n            // Drop unsupported channel\n            log.warn(log.message.incompatibleChannel(channel, mark));\n            return normalizedEncoding;\n        }\n        // Drop line's size if the field is aggregated.\n        if (channel === 'size' && mark === 'line') {\n            const fieldDef = getTypedFieldDef(encoding[channel]);\n            if (fieldDef && fieldDef.aggregate) {\n                log.warn(log.message.LINE_WITH_VARYING_SIZE);\n                return normalizedEncoding;\n            }\n        }\n        // Drop color if either fill or stroke is specified\n        if (channel === 'color' && (markDef.filled ? 'fill' in encoding : 'stroke' in encoding)) {\n            log.warn(log.message.droppingColor('encoding', { fill: 'fill' in encoding, stroke: 'stroke' in encoding }));\n            return normalizedEncoding;\n        }\n        const channelDef = encoding[channel];\n        if (channel === 'detail' ||\n            (channel === 'order' && !isArray(channelDef) && !isValueDef(channelDef)) ||\n            (channel === 'tooltip' && isArray(channelDef))) {\n            if (channelDef) {\n                // Array of fieldDefs for detail channel (or production rule)\n                normalizedEncoding[channel] = (isArray(channelDef) ? channelDef : [channelDef]).reduce((defs, fieldDef) => {\n                    if (!isFieldDef(fieldDef)) {\n                        log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                    }\n                    else {\n                        defs.push(normalizeFieldDef(fieldDef, channel));\n                    }\n                    return defs;\n                }, []);\n            }\n        }\n        else {\n            if (channel === 'tooltip' && channelDef === null) {\n                // Preserve null so we can use it to disable tooltip\n                normalizedEncoding[channel] = null;\n            }\n            else if (!isFieldDef(channelDef) && !isValueDef(channelDef) && !isConditionalDef(channelDef)) {\n                log.warn(log.message.emptyFieldDef(channelDef, channel));\n                return normalizedEncoding;\n            }\n            normalizedEncoding[channel] = normalize(channelDef, channel);\n        }\n        return normalizedEncoding;\n    }, {});\n}\nexport function fieldDefs(encoding) {\n    const arr = [];\n    for (const channel of keys(encoding)) {\n        if (channelHasField(encoding, channel)) {\n            const channelDef = encoding[channel];\n            const channelDefArray = isArray(channelDef) ? channelDef : [channelDef];\n            for (const def of channelDefArray) {\n                if (isFieldDef(def)) {\n                    arr.push(def);\n                }\n                else if (hasConditionalFieldDef(def)) {\n                    arr.push(def.condition);\n                }\n            }\n        }\n    }\n    return arr;\n}\nexport function forEach(mapping, f, thisArg) {\n    if (!mapping) {\n        return;\n    }\n    for (const channel of keys(mapping)) {\n        const el = mapping[channel];\n        if (isArray(el)) {\n            el.forEach((channelDef) => {\n                f.call(thisArg, channelDef, channel);\n            });\n        }\n        else {\n            f.call(thisArg, el, channel);\n        }\n    }\n}\nexport function reduce(mapping, f, init, thisArg) {\n    if (!mapping) {\n        return init;\n    }\n    return keys(mapping).reduce((r, channel) => {\n        const map = mapping[channel];\n        if (isArray(map)) {\n            return map.reduce((r1, channelDef) => {\n                return f.call(thisArg, r1, channelDef, channel);\n            }, r);\n        }\n        else {\n            return f.call(thisArg, r, map, channel);\n        }\n    }, init);\n}\n/**\n * Returns list of path grouping fields for the given encoding\n */\nexport function pathGroupingFields(mark, encoding) {\n    return keys(encoding).reduce((details, channel) => {\n        switch (channel) {\n            // x, y, x2, y2, lat, long, lat1, long2, order, tooltip, href, cursor should not cause lines to group\n            case 'x':\n            case 'y':\n            case 'href':\n            case 'url':\n            case 'x2':\n            case 'y2':\n            // falls through\n            case 'latitude':\n            case 'longitude':\n            case 'latitude2':\n            case 'longitude2':\n            // TODO: case 'cursor':\n            // text, shape, shouldn't be a part of line/trail/area [falls through]\n            case 'text':\n            case 'shape':\n            // falls through\n            // tooltip fields should not be added to group by [falls through]\n            case 'tooltip':\n                return details;\n            case 'order':\n                // order should not group line / trail\n                if (mark === 'line' || mark === 'trail') {\n                    return details;\n                }\n            // but order should group area for stacking (falls through)\n            case 'detail':\n            case 'key': {\n                const channelDef = encoding[channel];\n                if (isArray(channelDef) || isFieldDef(channelDef)) {\n                    (isArray(channelDef) ? channelDef : [channelDef]).forEach(fieldDef => {\n                        if (!fieldDef.aggregate) {\n                            details.push(vgField(fieldDef, {}));\n                        }\n                    });\n                }\n                return details;\n            }\n            case 'size':\n                if (mark === 'trail') {\n                    // For trail, size should not group trail lines.\n                    return details;\n                }\n            // For line, size should group lines.\n            // falls through\n            case 'color':\n            case 'fill':\n            case 'stroke':\n            case 'opacity':\n            case 'fillOpacity':\n            case 'strokeOpacity':\n            case 'strokeWidth': {\n                // TODO strokeDashOffset:\n                // falls through\n                const fieldDef = getTypedFieldDef(encoding[channel]);\n                if (fieldDef && !fieldDef.aggregate) {\n                    details.push(vgField(fieldDef, {}));\n                }\n                return details;\n            }\n        }\n    }, []);\n}\n//# sourceMappingURL=encoding.js.map","import { isString, toSet } from 'vega-util';\nimport { contains, keys } from './util';\nconst AGGREGATE_OP_INDEX = {\n    argmax: 1,\n    argmin: 1,\n    average: 1,\n    count: 1,\n    distinct: 1,\n    max: 1,\n    mean: 1,\n    median: 1,\n    min: 1,\n    missing: 1,\n    q1: 1,\n    q3: 1,\n    ci0: 1,\n    ci1: 1,\n    stderr: 1,\n    stdev: 1,\n    stdevp: 1,\n    sum: 1,\n    valid: 1,\n    values: 1,\n    variance: 1,\n    variancep: 1\n};\nexport const MULTIDOMAIN_SORT_OP_INDEX = {\n    count: 1,\n    min: 1,\n    max: 1\n};\nexport function isArgminDef(a) {\n    return !!a && !!a['argmin'];\n}\nexport function isArgmaxDef(a) {\n    return !!a && !!a['argmax'];\n}\nexport const AGGREGATE_OPS = keys(AGGREGATE_OP_INDEX);\nexport function isAggregateOp(a) {\n    return isString(a) && !!AGGREGATE_OP_INDEX[a];\n}\nexport const COUNTING_OPS = ['count', 'valid', 'missing', 'distinct'];\nexport function isCountingAggregateOp(aggregate) {\n    return aggregate && isString(aggregate) && contains(COUNTING_OPS, aggregate);\n}\nexport function isMinMaxOp(aggregate) {\n    return aggregate && isString(aggregate) && contains(['min', 'max'], aggregate);\n}\n/** Additive-based aggregation operations.  These can be applied to stack. */\nexport const SUM_OPS = ['count', 'sum', 'distinct', 'valid', 'missing'];\n/**\n * Aggregation operators that always produce values within the range [domainMin, domainMax].\n */\nexport const SHARED_DOMAIN_OPS = ['mean', 'average', 'median', 'q1', 'q3', 'min', 'max'];\nexport const SHARED_DOMAIN_OP_INDEX = toSet(SHARED_DOMAIN_OPS);\n//# sourceMappingURL=aggregate.js.map","import { isArray } from 'vega-util';\nexport const DEFAULT_SORT_OP = 'mean';\nconst SORT_BY_CHANNEL_INDEX = {\n    x: 1,\n    y: 1,\n    color: 1,\n    fill: 1,\n    stroke: 1,\n    strokeWidth: 1,\n    size: 1,\n    shape: 1,\n    fillOpacity: 1,\n    strokeOpacity: 1,\n    opacity: 1,\n    text: 1\n};\nexport function isSortByChannel(c) {\n    return !!SORT_BY_CHANNEL_INDEX[c];\n}\nexport function isSortByEncoding(sort) {\n    return !!sort && !!sort['encoding'];\n}\nexport function isSortField(sort) {\n    return !!sort && (sort['op'] === 'count' || !!sort['field']);\n}\nexport function isSortArray(sort) {\n    return !!sort && isArray(sort);\n}\n//# sourceMappingURL=sort.js.map","import * as vlFieldDef from '../channeldef';\nimport { initConfig, stripAndRedirectConfig } from '../config';\nimport * as log from '../log';\nimport { normalize } from '../normalize/index';\nimport { extractTopLevelProperties, getFitType, normalizeAutoSize } from '../spec/toplevel';\nimport { keys, mergeDeep } from '../util';\nimport { buildModel } from './buildmodel';\nimport { assembleRootData } from './data/assemble';\n// import {draw} from './data/debug';\nimport { optimizeDataflow } from './data/optimize';\nimport { getPositionScaleChannel } from '../channel';\nimport { isFitType } from '../spec/toplevel';\n/**\n * Vega-Lite's main function, for compiling Vega-lite spec into Vega spec.\n *\n * At a high-level, we make the following transformations in different phases:\n *\n * Input spec\n *     |\n *     |  (Normalization)\n *     v\n * Normalized Spec (Row/Column channels in single-view specs becomes faceted specs, composite marks becomes layered specs.)\n *     |\n *     |  (Build Model)\n *     v\n * A model tree of the spec\n *     |\n *     |  (Parse)\n *     v\n * A model tree with parsed components (intermediate structure of visualization primitives in a format that can be easily merged)\n *     |\n *     | (Optimize)\n *     v\n * A model tree with parsed components with the data component optimized\n *     |\n *     | (Assemble)\n *     v\n * Vega spec\n */\nexport function compile(inputSpec, opt = {}) {\n    // 0. Augment opt with default opts\n    if (opt.logger) {\n        // set the singleton logger to the provided logger\n        log.set(opt.logger);\n    }\n    if (opt.fieldTitle) {\n        // set the singleton field title formatter\n        vlFieldDef.setTitleFormatter(opt.fieldTitle);\n    }\n    try {\n        // 1. Initialize config by deep merging default config with the config provided via option and the input spec.\n        const config = initConfig(mergeDeep({}, opt.config, inputSpec.config));\n        // 2. Normalize: Convert input spec -> normalized spec\n        // - Decompose all extended unit specs into composition of unit spec.  For example, a box plot get expanded into multiple layers of bars, ticks, and rules. The shorthand row/column channel is also expanded to a facet spec.\n        const spec = normalize(inputSpec, config);\n        // - Normalize autosize to be a autosize properties object.\n        const autosize = normalizeAutoSize(inputSpec, config);\n        // 3. Build Model: normalized spec -> Model (a tree structure)\n        // This phases instantiates the models with default config by doing a top-down traversal. This allows us to pass properties that child models derive from their parents via their constructors.\n        // See the abstract `Model` class and its children (UnitModel, LayerModel, FacetModel, RepeatModel, ConcatModel) for different types of models.\n        const model = buildModel(spec, null, '', undefined, undefined, config);\n        // 4 Parse: Model --> Model with components\n        // Note that components = intermediate representations that are equivalent to Vega specs.\n        // We need these intermediate representation because we need to merge many visualization \"components\" like projections, scales, axes, and legends.\n        // We will later convert these components into actual Vega specs in the assemble phase.\n        // In this phase, we do a bottom-up traversal over the whole tree to\n        // parse for each type of components once (e.g., data, layout, mark, scale).\n        // By doing bottom-up traversal, we start parsing components of unit specs and\n        // then merge child components of parent composite specs.\n        //\n        // Please see inside model.parse() for order of different components parsed.\n        model.parse();\n        // draw(model.component.data.sources);\n        // 5. Optimize the dataflow.  This will modify the data component of the model.\n        optimizeDataflow(model.component.data, model);\n        // 6. Assemble: convert model components --> Vega Spec.\n        return assembleTopLevelModel(model, getTopLevelProperties(inputSpec, config, autosize, model), inputSpec.datasets, inputSpec.usermeta);\n    }\n    finally {\n        // Reset the singleton logger if a logger is provided\n        if (opt.logger) {\n            log.reset();\n        }\n        // Reset the singleton field title formatter if provided\n        if (opt.fieldTitle) {\n            vlFieldDef.resetTitleFormatter();\n        }\n    }\n}\nfunction getTopLevelProperties(topLevelSpec, config, autosize, model) {\n    const width = model.component.layoutSize.get('width');\n    const height = model.component.layoutSize.get('height');\n    if (width && height && isFitType(autosize.type)) {\n        if (width === 'step' && height === 'step') {\n            log.warn(log.message.droppingFit());\n            autosize.type = 'pad';\n        }\n        else if (width === 'step' || height === 'step') {\n            // effectively XOR, because else if\n            // get step dimension\n            const sizeType = width === 'step' ? 'width' : 'height';\n            // log that we're dropping fit for respective channel\n            log.warn(log.message.droppingFit(getPositionScaleChannel(sizeType)));\n            // setting type to inverse fit (so if we dropped fit-x, type is now fit-y)\n            const inverseSizeType = sizeType === 'width' ? 'height' : 'width';\n            autosize.type = getFitType(inverseSizeType);\n        }\n    }\n    return Object.assign(Object.assign({ autosize: keys(autosize).length === 1 && autosize.type ? autosize.type : autosize }, extractTopLevelProperties(config)), extractTopLevelProperties(topLevelSpec));\n}\n/*\n * Assemble the top-level model.\n *\n * Note: this couldn't be `model.assemble()` since the top-level model\n * needs some special treatment to generate top-level properties.\n */\nfunction assembleTopLevelModel(model, topLevelProperties, datasets = {}, usermeta) {\n    // Config with Vega-Lite only config removed.\n    const vgConfig = model.config ? stripAndRedirectConfig(model.config) : undefined;\n    const data = [].concat(model.assembleSelectionData([]), \n    // only assemble data in the root\n    assembleRootData(model.component.data, datasets));\n    const projections = model.assembleProjections();\n    const title = model.assembleTitle();\n    const style = model.assembleGroupStyle();\n    const encodeEntry = model.assembleGroupEncodeEntry(true);\n    let layoutSignals = model.assembleLayoutSignals();\n    // move width and height signals with values to top level\n    layoutSignals = layoutSignals.filter(signal => {\n        if ((signal.name === 'width' || signal.name === 'height') && signal.value !== undefined) {\n            topLevelProperties[signal.name] = +signal.value;\n            return false;\n        }\n        return true;\n    });\n    const output = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ $schema: 'https://vega.github.io/schema/vega/v5.json' }, (model.description ? { description: model.description } : {})), topLevelProperties), (title ? { title } : {})), (style ? { style } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), { data }), (projections.length > 0 ? { projections: projections } : {})), model.assembleGroup([...layoutSignals, ...model.assembleSelectionTopLevelSignals([])])), (vgConfig ? { config: vgConfig } : {})), (usermeta ? { usermeta } : {}));\n    return {\n        spec: output\n        // TODO: add warning / errors here\n    };\n}\n//# sourceMappingURL=compile.js.map","import { extractTransformsFromEncoding } from './encoding';\nimport { SpecMapper } from './spec/map';\nclass TransformExtractMapper extends SpecMapper {\n    mapUnit(spec, { config }) {\n        if (spec.encoding) {\n            const { encoding: oldEncoding, transform: oldTransforms } = spec;\n            const { bins, timeUnits, aggregate, groupby, encoding } = extractTransformsFromEncoding(oldEncoding, config);\n            const transform = [\n                ...(oldTransforms ? oldTransforms : []),\n                ...bins,\n                ...timeUnits,\n                ...(!aggregate.length ? [] : [{ aggregate, groupby }])\n            ];\n            return Object.assign(Object.assign(Object.assign({}, spec), (transform.length > 0 ? { transform } : {})), { encoding });\n        }\n        else {\n            return spec;\n        }\n    }\n}\nconst extractor = new TransformExtractMapper();\n/**\n * Modifies spec extracting transformations from encoding and moving them to the transforms array\n */\nexport function extractTransforms(spec, config) {\n    return extractor.map(spec, { config });\n}\n//# sourceMappingURL=transformextract.js.map","import { isArray, isBoolean, isNumber, isString } from 'vega-util';\nimport { isAggregateOp, isArgmaxDef, isArgminDef, isCountingAggregateOp } from './aggregate';\nimport { autoMaxBins, binToString, isBinned, isBinning } from './bin';\nimport { isScaleChannel, isSecondaryRangeChannel, POSITION_SCALE_CHANNELS, rangeType } from './channel';\nimport { getMarkConfig } from './compile/common';\nimport { dateTimeExpr, isDateTime } from './datetime';\nimport * as log from './log';\nimport { isRectBasedMark } from './mark';\nimport { isSortByChannel } from './sort';\nimport { isFacetFieldDef } from './spec/facet';\nimport { getLocalTimeUnit, getTimeUnitParts, isLocalSingleTimeUnit, isUtcSingleTimeUnit, normalizeTimeUnit } from './timeunit';\nimport { getFullName, QUANTITATIVE } from './type';\nimport { contains, flatAccessWithDatum, getFirstDefined, internalField, replacePathInField, titlecase } from './util';\nexport function isConditionalSelection(c) {\n    return c['selection'];\n}\nexport function isRepeatRef(field) {\n    return field && !isString(field) && 'repeat' in field;\n}\nexport function toFieldDefBase(fieldDef) {\n    const { field, timeUnit, bin, aggregate } = fieldDef;\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, (timeUnit ? { timeUnit } : {})), (bin ? { bin } : {})), (aggregate ? { aggregate } : {})), { field });\n}\nexport function isSortableFieldDef(fieldDef) {\n    return isTypedFieldDef(fieldDef) && !!fieldDef['sort'];\n}\nexport function getBand(channel, fieldDef, fieldDef2, mark, config, { isMidPoint } = {}) {\n    const { timeUnit, bin } = fieldDef;\n    if (contains(['x', 'y'], channel)) {\n        if (isPositionFieldDef(fieldDef) && fieldDef.band !== undefined) {\n            return fieldDef.band;\n        }\n        else if (timeUnit && !fieldDef2) {\n            if (isMidPoint) {\n                return getMarkConfig('timeUnitBandPosition', mark, config);\n            }\n            else {\n                return isRectBasedMark(mark.type) ? getMarkConfig('timeUnitBand', mark, config) : 0;\n            }\n        }\n        else if (isBinning(bin)) {\n            return isRectBasedMark(mark.type) && !isMidPoint ? 1 : 0.5;\n        }\n    }\n    return undefined;\n}\nexport function hasBand(channel, fieldDef, fieldDef2, mark, config) {\n    if (isBinning(fieldDef.bin) || (fieldDef.timeUnit && isTypedFieldDef(fieldDef) && fieldDef.type === 'temporal')) {\n        return !!getBand(channel, fieldDef, fieldDef2, mark, config);\n    }\n    return false;\n}\nexport function isConditionalDef(channelDef) {\n    return !!channelDef && !!channelDef.condition;\n}\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nexport function hasConditionalFieldDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && !isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\nexport function hasConditionalValueDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && (isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\nexport function isFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\nexport function isTypedFieldDef(channelDef) {\n    return !!channelDef && ((!!channelDef['field'] && !!channelDef['type']) || channelDef['aggregate'] === 'count');\n}\nexport function isStringFieldDef(channelDef) {\n    return isFieldDef(channelDef) && isString(channelDef.field);\n}\nexport function isValueDef(channelDef) {\n    return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\nexport function isScaleFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\nexport function isPositionFieldDef(channelDef) {\n    return (!!channelDef &&\n        (!!channelDef['axis'] || !!channelDef['stack'] || !!channelDef['impute'] || channelDef['band'] !== undefined));\n}\nexport function isMarkPropFieldDef(channelDef) {\n    return !!channelDef && !!channelDef['legend'];\n}\nexport function isTextFieldDef(channelDef) {\n    return !!channelDef && !!channelDef['format'];\n}\nfunction isOpFieldDef(fieldDef) {\n    return !!fieldDef['op'];\n}\n/**\n * Get a Vega field reference from a Vega-Lite field def.\n */\nexport function vgField(fieldDef, opt = {}) {\n    let field = fieldDef.field;\n    const prefix = opt.prefix;\n    let suffix = opt.suffix;\n    let argAccessor = ''; // for accessing argmin/argmax field at the end without getting escaped\n    if (isCount(fieldDef)) {\n        field = internalField('count');\n    }\n    else {\n        let fn;\n        if (!opt.nofn) {\n            if (isOpFieldDef(fieldDef)) {\n                fn = fieldDef.op;\n            }\n            else {\n                const { bin, aggregate, timeUnit } = fieldDef;\n                if (isBinning(bin)) {\n                    fn = binToString(bin);\n                    suffix = (opt.binSuffix || '') + (opt.suffix || '');\n                }\n                else if (aggregate) {\n                    if (isArgmaxDef(aggregate)) {\n                        argAccessor = `.${field}`;\n                        field = `argmax_${aggregate.argmax}`;\n                    }\n                    else if (isArgminDef(aggregate)) {\n                        argAccessor = `.${field}`;\n                        field = `argmin_${aggregate.argmin}`;\n                    }\n                    else {\n                        fn = String(aggregate);\n                    }\n                }\n                else if (timeUnit) {\n                    fn = String(timeUnit);\n                    suffix = ((!contains(['range', 'mid'], opt.binSuffix) && opt.binSuffix) || '') + (opt.suffix || '');\n                }\n            }\n        }\n        if (fn) {\n            field = field ? `${fn}_${field}` : fn;\n        }\n    }\n    if (suffix) {\n        field = `${field}_${suffix}`;\n    }\n    if (prefix) {\n        field = `${prefix}_${field}`;\n    }\n    if (opt.forAs) {\n        return field;\n    }\n    else if (opt.expr) {\n        // Expression to access flattened field. No need to escape dots.\n        return flatAccessWithDatum(field, opt.expr) + argAccessor;\n    }\n    else {\n        // We flattened all fields so paths should have become dot.\n        return replacePathInField(field) + argAccessor;\n    }\n}\nexport function isDiscrete(fieldDef) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n        case 'geojson':\n            return true;\n        case 'quantitative':\n            return !!fieldDef.bin;\n        case 'temporal':\n            return false;\n    }\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\nexport function isContinuous(fieldDef) {\n    return !isDiscrete(fieldDef);\n}\nexport function isCount(fieldDef) {\n    return fieldDef.aggregate === 'count';\n}\nexport function verbalTitleFormatter(fieldDef, config) {\n    const { field, bin, timeUnit, aggregate } = fieldDef;\n    if (aggregate === 'count') {\n        return config.countTitle;\n    }\n    else if (isBinning(bin)) {\n        return `${field} (binned)`;\n    }\n    else if (timeUnit) {\n        const units = getTimeUnitParts(timeUnit).join('-');\n        return `${field} (${units})`;\n    }\n    else if (aggregate) {\n        if (isArgmaxDef(aggregate)) {\n            return `${field} for max ${aggregate.argmax}`;\n        }\n        else if (isArgminDef(aggregate)) {\n            return `${field} for min ${aggregate.argmin}`;\n        }\n        else {\n            return `${titlecase(aggregate)} of ${field}`;\n        }\n    }\n    return field;\n}\nexport function functionalTitleFormatter(fieldDef) {\n    const { aggregate, bin, timeUnit, field } = fieldDef;\n    if (isArgmaxDef(aggregate)) {\n        return `${field} for argmax(${aggregate.argmax})`;\n    }\n    else if (isArgminDef(aggregate)) {\n        return `${field} for argmin(${aggregate.argmin})`;\n    }\n    const fn = aggregate || timeUnit || (isBinning(bin) && 'bin');\n    if (fn) {\n        return fn.toUpperCase() + '(' + field + ')';\n    }\n    else {\n        return field;\n    }\n}\nexport const defaultTitleFormatter = (fieldDef, config) => {\n    switch (config.fieldTitle) {\n        case 'plain':\n            return fieldDef.field;\n        case 'functional':\n            return functionalTitleFormatter(fieldDef);\n        default:\n            return verbalTitleFormatter(fieldDef, config);\n    }\n};\nlet titleFormatter = defaultTitleFormatter;\nexport function setTitleFormatter(formatter) {\n    titleFormatter = formatter;\n}\nexport function resetTitleFormatter() {\n    setTitleFormatter(defaultTitleFormatter);\n}\nexport function title(fieldDef, config, { allowDisabling, includeDefault = true }) {\n    const guide = getGuide(fieldDef) || {};\n    const guideTitle = guide.title;\n    const def = includeDefault ? defaultTitle(fieldDef, config) : undefined;\n    if (allowDisabling) {\n        return getFirstDefined(guideTitle, fieldDef.title, def);\n    }\n    else {\n        return guideTitle || fieldDef.title || def;\n    }\n}\nexport function getGuide(fieldDef) {\n    if (isPositionFieldDef(fieldDef) && fieldDef.axis) {\n        return fieldDef.axis;\n    }\n    else if (isMarkPropFieldDef(fieldDef) && fieldDef.legend) {\n        return fieldDef.legend;\n    }\n    else if (isFacetFieldDef(fieldDef) && fieldDef.header) {\n        return fieldDef.header;\n    }\n    return undefined;\n}\nexport function defaultTitle(fieldDef, config) {\n    return titleFormatter(fieldDef, config);\n}\nexport function format(fieldDef) {\n    if (isTextFieldDef(fieldDef) && fieldDef.format) {\n        return fieldDef.format;\n    }\n    else {\n        const guide = getGuide(fieldDef) || {};\n        return guide.format;\n    }\n}\nexport function defaultType(fieldDef, channel) {\n    if (fieldDef.timeUnit) {\n        return 'temporal';\n    }\n    if (isBinning(fieldDef.bin)) {\n        return 'quantitative';\n    }\n    switch (rangeType(channel)) {\n        case 'continuous':\n            return 'quantitative';\n        case 'discrete':\n            return 'nominal';\n        case 'flexible': // color\n            return 'nominal';\n        default:\n            return 'quantitative';\n    }\n}\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\nexport function getFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n        return channelDef;\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return channelDef.condition;\n    }\n    return undefined;\n}\nexport function getTypedFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n        return channelDef;\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return channelDef.condition;\n    }\n    return undefined;\n}\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nexport function normalize(channelDef, channel) {\n    if (isString(channelDef) || isNumber(channelDef) || isBoolean(channelDef)) {\n        const primitiveType = isString(channelDef) ? 'string' : isNumber(channelDef) ? 'number' : 'boolean';\n        log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n        return { value: channelDef };\n    }\n    // If a fieldDef contains a field, we need type.\n    if (isFieldDef(channelDef)) {\n        return normalizeFieldDef(channelDef, channel);\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return Object.assign(Object.assign({}, channelDef), { \n            // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n            condition: normalizeFieldDef(channelDef.condition, channel) });\n    }\n    return channelDef;\n}\nexport function normalizeFieldDef(fd, channel) {\n    const { aggregate, timeUnit, bin, field } = fd;\n    const fieldDef = Object.assign({}, fd);\n    // Drop invalid aggregate\n    if (aggregate && !isAggregateOp(aggregate) && !isArgmaxDef(aggregate) && !isArgminDef(aggregate)) {\n        log.warn(log.message.invalidAggregate(aggregate));\n        delete fieldDef.aggregate;\n    }\n    // Normalize Time Unit\n    if (timeUnit) {\n        fieldDef.timeUnit = normalizeTimeUnit(timeUnit);\n    }\n    if (field) {\n        fieldDef.field = `${field}`;\n    }\n    // Normalize bin\n    if (isBinning(bin)) {\n        fieldDef.bin = normalizeBin(bin, channel);\n    }\n    if (isBinned(bin) && !contains(POSITION_SCALE_CHANNELS, channel)) {\n        log.warn(`Channel ${channel} should not be used with \"binned\" bin`);\n    }\n    // Normalize Type\n    if (isTypedFieldDef(fieldDef)) {\n        const { type } = fieldDef;\n        const fullType = getFullName(type);\n        if (type !== fullType) {\n            // convert short type to full type\n            fieldDef.type = fullType;\n        }\n        if (type !== 'quantitative') {\n            if (isCountingAggregateOp(aggregate)) {\n                log.warn(log.message.invalidFieldTypeForCountAggregate(type, aggregate));\n                fieldDef.type = 'quantitative';\n            }\n        }\n    }\n    else if (!isSecondaryRangeChannel(channel)) {\n        // If type is empty / invalid, then augment with default type\n        const newType = defaultType(fieldDef, channel);\n        log.warn(log.message.missingFieldType(channel, newType));\n        fieldDef['type'] = newType;\n    }\n    if (isTypedFieldDef(fieldDef)) {\n        const { compatible, warning } = channelCompatibility(fieldDef, channel);\n        if (!compatible) {\n            log.warn(warning);\n        }\n    }\n    if (isSortableFieldDef(fieldDef) && isString(fieldDef.sort)) {\n        const { sort } = fieldDef;\n        if (isSortByChannel(sort)) {\n            return Object.assign(Object.assign({}, fieldDef), { sort: { encoding: sort } });\n        }\n        const sub = sort.substr(1);\n        if (sort.charAt(0) === '-' && isSortByChannel(sub)) {\n            return Object.assign(Object.assign({}, fieldDef), { sort: { encoding: sub, order: 'descending' } });\n        }\n    }\n    return fieldDef;\n}\nexport function normalizeBin(bin, channel) {\n    if (isBoolean(bin)) {\n        return { maxbins: autoMaxBins(channel) };\n    }\n    else if (bin === 'binned') {\n        return {\n            binned: true\n        };\n    }\n    else if (!bin.maxbins && !bin.step) {\n        return Object.assign(Object.assign({}, bin), { maxbins: autoMaxBins(channel) });\n    }\n    else {\n        return bin;\n    }\n}\nconst COMPATIBLE = { compatible: true };\nexport function channelCompatibility(fieldDef, channel) {\n    const type = fieldDef.type;\n    if (type === 'geojson' && channel !== 'shape') {\n        return {\n            compatible: false,\n            warning: `Channel ${channel} should not be used with a geojson data.`\n        };\n    }\n    switch (channel) {\n        case 'row':\n        case 'column':\n        case 'facet':\n            if (isContinuous(fieldDef)) {\n                return {\n                    compatible: false,\n                    warning: log.message.facetChannelShouldBeDiscrete(channel)\n                };\n            }\n            return COMPATIBLE;\n        case 'x':\n        case 'y':\n        case 'color':\n        case 'fill':\n        case 'stroke':\n        case 'text':\n        case 'detail':\n        case 'key':\n        case 'tooltip':\n        case 'href':\n        case 'url':\n            return COMPATIBLE;\n        case 'longitude':\n        case 'longitude2':\n        case 'latitude':\n        case 'latitude2':\n            if (type !== QUANTITATIVE) {\n                return {\n                    compatible: false,\n                    warning: `Channel ${channel} should be used with a quantitative field only, not ${fieldDef.type} field.`\n                };\n            }\n            return COMPATIBLE;\n        case 'opacity':\n        case 'fillOpacity':\n        case 'strokeOpacity':\n        case 'strokeWidth':\n        case 'size':\n        case 'x2':\n        case 'y2':\n            if (type === 'nominal' && !fieldDef['sort']) {\n                return {\n                    compatible: false,\n                    warning: `Channel ${channel} should not be used with an unsorted discrete field.`\n                };\n            }\n            return COMPATIBLE;\n        case 'shape':\n            if (!contains(['ordinal', 'nominal', 'geojson'], fieldDef.type)) {\n                return {\n                    compatible: false,\n                    warning: 'Shape channel should be used with only either discrete or geojson data.'\n                };\n            }\n            return COMPATIBLE;\n        case 'order':\n            if (fieldDef.type === 'nominal' && !('sort' in fieldDef)) {\n                return {\n                    compatible: false,\n                    warning: `Channel order is inappropriate for nominal field, which has no inherent order.`\n                };\n            }\n            return COMPATIBLE;\n    }\n    throw new Error('channelCompatability not implemented for channel ' + channel);\n}\n/**\n * Check if the field def uses a time format or does not use any format but is temporal\n * (this does not cover field defs that are temporal but use a number format).\n */\nexport function isTimeFormatFieldDef(fieldDef) {\n    const guide = getGuide(fieldDef);\n    const formatType = (guide && guide.formatType) || (isTextFieldDef(fieldDef) && fieldDef.formatType);\n    return formatType === 'time' || (!formatType && isTimeFieldDef(fieldDef));\n}\n/**\n * Check if field def has tye `temporal`. If you want to also cover field defs that use a time format, use `isTimeFormatFieldDef`.\n */\nexport function isTimeFieldDef(fieldDef) {\n    return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\n/**\n * Getting a value associated with a fielddef.\n * Convert the value to Vega expression if applicable (for datetime object, or string if the field def is temporal or has timeUnit)\n */\nexport function valueExpr(v, { timeUnit, type, time, undefinedIfExprNotRequired }) {\n    let expr;\n    if (isDateTime(v)) {\n        expr = dateTimeExpr(v, true);\n    }\n    else if (isString(v) || isNumber(v)) {\n        if (timeUnit || type === 'temporal') {\n            if (isLocalSingleTimeUnit(timeUnit)) {\n                expr = dateTimeExpr({ [timeUnit]: v }, true);\n            }\n            else if (isUtcSingleTimeUnit(timeUnit)) {\n                // FIXME is this really correct?\n                expr = valueExpr(v, { timeUnit: getLocalTimeUnit(timeUnit) });\n            }\n            else {\n                // just pass the string to date function (which will call JS Date.parse())\n                expr = `datetime(${JSON.stringify(v)})`;\n            }\n        }\n    }\n    if (expr) {\n        return time ? `time(${expr})` : expr;\n    }\n    // number or boolean or normal string\n    return undefinedIfExprNotRequired ? undefined : JSON.stringify(v);\n}\n/**\n * Standardize value array -- convert each value to Vega expression if applicable\n */\nexport function valueArray(fieldDef, values) {\n    const { timeUnit, type } = fieldDef;\n    return values.map(v => {\n        const expr = valueExpr(v, { timeUnit, type, undefinedIfExprNotRequired: true });\n        // return signal for the expression if we need an expression\n        if (expr !== undefined) {\n            return { signal: expr };\n        }\n        // otherwise just return the original value\n        return v;\n    });\n}\n/**\n * Checks whether a fieldDef for a particular channel requires a computed bin range.\n */\nexport function binRequiresRange(fieldDef, channel) {\n    if (!isBinning(fieldDef.bin)) {\n        console.warn('Only use this method with binned field defs');\n        return false;\n    }\n    // We need the range only when the user explicitly forces a binned field to be use discrete scale. In this case, bin range is used in axis and legend labels.\n    // We could check whether the axis or legend exists (not disabled) but that seems overkill.\n    return isScaleChannel(channel) && contains(['ordinal', 'nominal'], fieldDef.type);\n}\n//# sourceMappingURL=channeldef.js.map","import { keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { BOXPLOT, BOXPLOT_PARTS, normalizeBoxPlot } from './boxplot';\nimport { ERRORBAND, ERRORBAND_PARTS, normalizeErrorBand } from './errorband';\nimport { ERRORBAR, ERRORBAR_PARTS, normalizeErrorBar } from './errorbar';\n/**\n * Registry index for all composite mark's normalizer\n */\nconst compositeMarkRegistry = {};\nexport function add(mark, run, parts) {\n    const normalizer = new CompositeMarkNormalizer(mark, run);\n    compositeMarkRegistry[mark] = { normalizer, parts };\n}\nexport function remove(mark) {\n    delete compositeMarkRegistry[mark];\n}\nexport function getAllCompositeMarks() {\n    return keys(compositeMarkRegistry);\n}\nadd(BOXPLOT, normalizeBoxPlot, BOXPLOT_PARTS);\nadd(ERRORBAR, normalizeErrorBar, ERRORBAR_PARTS);\nadd(ERRORBAND, normalizeErrorBand, ERRORBAND_PARTS);\n//# sourceMappingURL=index.js.map","import { getSizeType } from '../channel';\nimport { stringify } from '../util';\n/**\n * Collection of all Vega-Lite Error Messages\n */\nexport function invalidSpec(spec) {\n    return `Invalid specification ${JSON.stringify(spec)}.  Make sure the specification includes at least one of the following properties: \"mark\", \"layer\", \"facet\", \"hconcat\", \"vconcat\", \"concat\", or \"repeat\".`;\n}\n// FIT\nexport const FIT_NON_SINGLE = 'Autosize \"fit\" only works for single views and layered views.';\nexport function droppingFit(channel) {\n    return channel\n        ? `Dropping \"fit-${channel}\" because spec has discrete ${getSizeType(channel)}.`\n        : `Dropping \"fit\" because spec has discrete size.`;\n}\n// SELECTION\nexport function cannotProjectOnChannelWithoutField(channel) {\n    return `Cannot project a selection on encoding channel \"${channel}\", which has no field.`;\n}\nexport function nearestNotSupportForContinuous(mark) {\n    return `The \"nearest\" transform is not supported for ${mark} marks.`;\n}\nexport function selectionNotSupported(mark) {\n    return `Selection not supported for ${mark} yet.`;\n}\nexport function selectionNotFound(name) {\n    return `Cannot find a selection named \"${name}\".`;\n}\nexport const SCALE_BINDINGS_CONTINUOUS = 'Scale bindings are currently only supported for scales with unbinned, continuous domains.';\n// REPEAT\nexport function noSuchRepeatedValue(field) {\n    return `Unknown repeated value \"${field}\".`;\n}\nexport function columnsNotSupportByRowCol(type) {\n    return `The \"columns\" property cannot be used when \"${type}\" has nested row/column.`;\n}\n// CONCAT\nexport const CONCAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in concatenated views yet (https://github.com/vega/vega-lite/issues/2415).';\n// REPEAT\nexport const REPEAT_CANNOT_SHARE_AXIS = 'Axes cannot be shared in repeated views yet (https://github.com/vega/vega-lite/issues/2415).';\n// DATA\nexport function unrecognizedParse(p) {\n    return `Unrecognized parse \"${p}\".`;\n}\nexport function differentParse(field, local, ancestor) {\n    return `An ancestor parsed field \"${field}\" as ${ancestor} but a child wants to parse the field as ${local}.`;\n}\n// TRANSFORMS\nexport function invalidTransformIgnored(transform) {\n    return `Ignoring an invalid transform: ${stringify(transform)}.`;\n}\nexport const NO_FIELDS_NEEDS_AS = 'If \"from.fields\" is not specified, \"as\" has to be a string that specifies the key to be used for the data from the secondary source.';\n// ENCODING & FACET\nexport function encodingOverridden(channels) {\n    return `Layer's shared ${channels.join(',')} channel ${channels.length === 1 ? 'is' : 'are'} overriden.`;\n}\nexport function projectionOverridden(opt) {\n    const { parentProjection, projection } = opt;\n    return `Layer's shared projection ${stringify(parentProjection)} is overridden by a child projection ${stringify(projection)}.`;\n}\nexport function primitiveChannelDef(channel, type, value) {\n    return `Channel ${channel} is a ${type}. Converted to {value: ${stringify(value)}}.`;\n}\nexport function invalidFieldType(type) {\n    return `Invalid field type \"${type}\".`;\n}\nexport function nonZeroScaleUsedWithLengthMark(mark, channel, opt) {\n    const scaleText = opt.scaleType\n        ? `${opt.scaleType} scale`\n        : opt.zeroFalse\n            ? 'scale with zero=false'\n            : 'scale with custom domain that excludes zero';\n    return `A ${scaleText} is used to encode ${mark}'s ${channel}. This can be misleading as the ${channel === 'x' ? 'width' : 'height'} of the ${mark} can be arbitrary based on the scale domain. You may want to use point mark instead.`;\n}\nexport function invalidFieldTypeForCountAggregate(type, aggregate) {\n    return `Invalid field type \"${type}\" for aggregate: \"${aggregate}\", using \"quantitative\" instead.`;\n}\nexport function invalidAggregate(aggregate) {\n    return `Invalid aggregation operator \"${aggregate}\".`;\n}\nexport function missingFieldType(channel, newType) {\n    return `Missing type for channel \"${channel}\", using \"${newType}\" instead.`;\n}\nexport function droppingColor(type, opt) {\n    const { fill, stroke } = opt;\n    return `Dropping color ${type} as the plot also has ${fill && stroke ? 'fill and stroke' : fill ? 'fill' : 'stroke'}.`;\n}\nexport function emptyFieldDef(fieldDef, channel) {\n    return `Dropping ${stringify(fieldDef)} from channel \"${channel}\" since it does not contain data field or value.`;\n}\nexport function latLongDeprecated(channel, type, newChannel) {\n    return `${channel}-encoding with type ${type} is deprecated. Replacing with ${newChannel}-encoding.`;\n}\nexport const LINE_WITH_VARYING_SIZE = 'Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.';\nexport function incompatibleChannel(channel, markOrFacet, when) {\n    return `${channel} dropped as it is incompatible with \"${markOrFacet}\"${when ? ` when ${when}` : ''}.`;\n}\nexport function invalidEncodingChannel(channel) {\n    return `${channel}-encoding is dropped as ${channel} is not a valid encoding channel.`;\n}\nexport function facetChannelShouldBeDiscrete(channel) {\n    return `${channel} encoding should be discrete (ordinal / nominal / binned).`;\n}\nexport function facetChannelDropped(channels) {\n    return `Facet encoding dropped as ${channels.join(' and ')} ${channels.length > 1 ? 'are' : 'is'} also specified.`;\n}\nexport function discreteChannelCannotEncode(channel, type) {\n    return `Using discrete channel \"${channel}\" to encode \"${type}\" field can be misleading as it does not encode ${type === 'ordinal' ? 'order' : 'magnitude'}.`;\n}\n// Mark\nexport function lineWithRange(hasX2, hasY2) {\n    const channels = hasX2 && hasY2 ? 'x2 and y2' : hasX2 ? 'x2' : 'y2';\n    return `Line mark is for continuous lines and thus cannot be used with ${channels}. We will use the rule mark (line segments) instead.`;\n}\nexport function orientOverridden(original, actual) {\n    return `Specified orient \"${original}\" overridden with \"${actual}\".`;\n}\n// SCALE\nexport const CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN = 'Custom domain scale cannot be unioned with default field-based domain.';\nexport const RANGE_STEP_DEPRECATED = `Scale's \"rangeStep\" is deprecated and will be removed in Vega-Lite 5.0. Please use \"width\"/\"height\": {\"step\": ...} instead. See https://vega.github.io/vega-lite/docs/size.html.`;\nexport function cannotUseScalePropertyWithNonColor(prop) {\n    return `Cannot use the scale property \"${prop}\" with non-color channel.`;\n}\nexport function unaggregateDomainHasNoEffectForRawField(fieldDef) {\n    return `Using unaggregated domain with raw field has no effect (${stringify(fieldDef)}).`;\n}\nexport function unaggregateDomainWithNonSharedDomainOp(aggregate) {\n    return `Unaggregated domain not applicable for \"${aggregate}\" since it produces values outside the origin domain of the source data.`;\n}\nexport function unaggregatedDomainWithLogScale(fieldDef) {\n    return `Unaggregated domain is currently unsupported for log scale (${stringify(fieldDef)}).`;\n}\nexport function cannotApplySizeToNonOrientedMark(mark) {\n    return `Cannot apply size to non-oriented mark \"${mark}\".`;\n}\nexport function scaleTypeNotWorkWithChannel(channel, scaleType, defaultScaleType) {\n    return `Channel \"${channel}\" does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n}\nexport function scaleTypeNotWorkWithFieldDef(scaleType, defaultScaleType) {\n    return `FieldDef does not work with \"${scaleType}\" scale. We are using \"${defaultScaleType}\" scale instead.`;\n}\nexport function scalePropertyNotWorkWithScaleType(scaleType, propName, channel) {\n    return `${channel}-scale's \"${propName}\" is dropped as it does not work with ${scaleType} scale.`;\n}\nexport function scaleTypeNotWorkWithMark(mark, scaleType) {\n    return `Scale type \"${scaleType}\" does not work with mark \"${mark}\".`;\n}\nexport function stepDropped(channel) {\n    return `The step for \"${channel}\" is dropped because the ${channel === 'width' ? 'x' : 'y'} is continuous.`;\n}\nexport function mergeConflictingProperty(property, propertyOf, v1, v2) {\n    return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(v2)}). Using ${stringify(v1)}.`;\n}\nexport function mergeConflictingDomainProperty(property, propertyOf, v1, v2) {\n    return `Conflicting ${propertyOf.toString()} property \"${property.toString()}\" (${stringify(v1)} and ${stringify(v2)}). Using the union of the two domains.`;\n}\nexport function independentScaleMeansIndependentGuide(channel) {\n    return `Setting the scale to be independent for \"${channel}\" means we also have to set the guide (axis or legend) to be independent.`;\n}\nexport function domainSortDropped(sort) {\n    return `Dropping sort property ${stringify(sort)} as unioned domains only support boolean or op \"count\", \"min\", and \"max\".`;\n}\nexport const UNABLE_TO_MERGE_DOMAINS = 'Unable to merge domains.';\nexport const MORE_THAN_ONE_SORT = 'Domains that should be unioned has conflicting sort properties. Sort will be set to true.';\n// AXIS\nexport const INVALID_CHANNEL_FOR_AXIS = 'Invalid channel for axis.';\n// STACK\nexport function cannotStackRangedMark(channel) {\n    return `Cannot stack \"${channel}\" if there is already \"${channel}2\".`;\n}\nexport function cannotStackNonLinearScale(scaleType) {\n    return `Cannot stack non-linear scale (${scaleType}).`;\n}\nexport function stackNonSummativeAggregate(aggregate) {\n    return `Stacking is applied even though the aggregate function is non-summative (\"${aggregate}\").`;\n}\n// TIMEUNIT\nexport function invalidTimeUnit(unitName, value) {\n    return `Invalid ${unitName}: ${stringify(value)}.`;\n}\nexport function dayReplacedWithDate(fullTimeUnit) {\n    return `Time unit \"${fullTimeUnit}\" is not supported. We are replacing it with ${fullTimeUnit.replace('day', 'date')}.`;\n}\nexport function droppedDay(d) {\n    return `Dropping day from datetime ${stringify(d)} as day cannot be combined with other units.`;\n}\nexport function errorBarCenterAndExtentAreNotNeeded(center, extent) {\n    return `${extent ? 'extent ' : ''}${extent && center ? 'and ' : ''}${center ? 'center ' : ''}${extent && center ? 'are ' : 'is '}not needed when data are aggregated.`;\n}\nexport function errorBarCenterIsUsedWithWrongExtent(center, extent, mark) {\n    return `${center} is not usually used with ${extent} for ${mark}.`;\n}\nexport function errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark) {\n    return `Continuous axis should not have customized aggregation function ${aggregate}; ${compositeMark} already agregates the axis.`;\n}\nexport function errorBarCenterIsNotNeeded(extent, mark) {\n    return `Center is not needed to be specified in ${mark} when extent is ${extent}.`;\n}\nexport function errorBand1DNotSupport(property) {\n    return `1D error band does not support ${property}.`;\n}\n// CHANNEL\nexport function channelRequiredForBinned(channel) {\n    return `Channel ${channel} is required for \"binned\" bin.`;\n}\nexport function domainRequiredForThresholdScale(channel) {\n    return `Domain for ${channel} is required for threshold scale.`;\n}\n//# sourceMappingURL=message.js.map","import { __rest } from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { COLUMN, FACET, ROW } from '../channel';\nimport { boxPlotNormalizer } from '../compositemark/boxplot';\nimport { errorBandNormalizer } from '../compositemark/errorband';\nimport { errorBarNormalizer } from '../compositemark/errorbar';\nimport { channelHasField } from '../encoding';\nimport * as log from '../log';\nimport { isFacetMapping } from '../spec/facet';\nimport { SpecMapper } from '../spec/map';\nimport { isUnitSpec } from '../spec/unit';\nimport { keys, omit } from '../util';\nimport { PathOverlayNormalizer } from './pathoverlay';\nimport { RangeStepNormalizer } from './rangestep';\nimport { RuleForRangedLineNormalizer } from './ruleforrangedline';\nexport class CoreNormalizer extends SpecMapper {\n    constructor() {\n        super(...arguments);\n        this.nonFacetUnitNormalizers = [\n            boxPlotNormalizer,\n            errorBarNormalizer,\n            errorBandNormalizer,\n            new PathOverlayNormalizer(),\n            new RuleForRangedLineNormalizer(),\n            new RangeStepNormalizer()\n        ];\n    }\n    map(spec, params) {\n        // Special handling for a faceted unit spec as it can return a facet spec, not just a layer or unit spec like a normal unit spec.\n        if (isUnitSpec(spec)) {\n            const hasRow = channelHasField(spec.encoding, ROW);\n            const hasColumn = channelHasField(spec.encoding, COLUMN);\n            const hasFacet = channelHasField(spec.encoding, FACET);\n            if (hasRow || hasColumn || hasFacet) {\n                return this.mapFacetedUnit(spec, params);\n            }\n        }\n        return super.map(spec, params);\n    }\n    // This is for normalizing non-facet unit\n    mapUnit(spec, params) {\n        const { parentEncoding, parentProjection } = params;\n        if (parentEncoding || parentProjection) {\n            return this.mapUnitWithParentEncodingOrProjection(spec, params);\n        }\n        const normalizeLayerOrUnit = this.mapLayerOrUnit.bind(this);\n        for (const unitNormalizer of this.nonFacetUnitNormalizers) {\n            if (unitNormalizer.hasMatchingType(spec, params.config)) {\n                return unitNormalizer.run(spec, params, normalizeLayerOrUnit);\n            }\n        }\n        return spec;\n    }\n    mapRepeat(spec, params) {\n        const { repeat } = spec;\n        if (!isArray(repeat) && spec.columns) {\n            // is repeat with row/column\n            spec = omit(spec, ['columns']);\n            log.warn(log.message.columnsNotSupportByRowCol('repeat'));\n        }\n        return Object.assign(Object.assign({}, spec), { spec: this.map(spec.spec, params) });\n    }\n    mapFacet(spec, params) {\n        const { facet } = spec;\n        if (isFacetMapping(facet) && spec.columns) {\n            // is facet with row/column\n            spec = omit(spec, ['columns']);\n            log.warn(log.message.columnsNotSupportByRowCol('facet'));\n        }\n        return super.mapFacet(spec, params);\n    }\n    mapUnitWithParentEncodingOrProjection(spec, params) {\n        const { encoding, projection } = spec;\n        const { parentEncoding, parentProjection, config } = params;\n        const mergedProjection = mergeProjection({ parentProjection, projection });\n        const mergedEncoding = mergeEncoding({ parentEncoding, encoding });\n        return this.mapUnit(Object.assign(Object.assign(Object.assign({}, spec), (mergedProjection ? { projection: mergedProjection } : {})), (mergedEncoding ? { encoding: mergedEncoding } : {})), { config });\n    }\n    mapFacetedUnit(spec, params) {\n        // New encoding in the inside spec should not contain row / column\n        // as row/column should be moved to facet\n        const _a = spec.encoding, { row, column, facet } = _a, encoding = __rest(_a, [\"row\", \"column\", \"facet\"]);\n        // Mark and encoding should be moved into the inner spec\n        const { mark, width, projection, height, selection, encoding: _ } = spec, outerSpec = __rest(spec, [\"mark\", \"width\", \"projection\", \"height\", \"selection\", \"encoding\"]);\n        const { facetMapping, layout } = this.getFacetMappingAndLayout({ row, column, facet });\n        return this.mapFacet(Object.assign(Object.assign(Object.assign({}, outerSpec), layout), { \n            // row / column has higher precedence than facet\n            facet: facetMapping, spec: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (projection ? { projection } : {})), { mark }), (width ? { width } : {})), (height ? { height } : {})), { encoding }), (selection ? { selection } : {})) }), params);\n    }\n    getFacetMappingAndLayout(facets) {\n        const { row, column, facet } = facets;\n        if (row || column) {\n            if (facet) {\n                log.warn(log.message.facetChannelDropped([...(row ? [ROW] : []), ...(column ? [COLUMN] : [])]));\n            }\n            const facetMapping = {};\n            const layout = {};\n            for (const channel of [ROW, COLUMN]) {\n                const def = facets[channel];\n                if (def) {\n                    const { align, center, spacing, columns } = def, defWithoutLayout = __rest(def, [\"align\", \"center\", \"spacing\", \"columns\"]);\n                    facetMapping[channel] = defWithoutLayout;\n                    for (const prop of ['align', 'center', 'spacing']) {\n                        if (def[prop] !== undefined) {\n                            layout[prop] = layout[prop] || {};\n                            layout[prop][channel] = def[prop];\n                        }\n                    }\n                }\n            }\n            return { facetMapping, layout };\n        }\n        else {\n            const { align, center, spacing, columns } = facet, facetMapping = __rest(facet, [\"align\", \"center\", \"spacing\", \"columns\"]);\n            return {\n                facetMapping,\n                layout: Object.assign(Object.assign(Object.assign(Object.assign({}, (align ? { align } : {})), (center ? { center } : {})), (spacing ? { spacing } : {})), (columns ? { columns } : {}))\n            };\n        }\n    }\n    mapLayer(spec, _a) {\n        // Special handling for extended layer spec\n        var { parentEncoding, parentProjection } = _a, otherParams = __rest(_a, [\"parentEncoding\", \"parentProjection\"]);\n        const { encoding, projection } = spec, rest = __rest(spec, [\"encoding\", \"projection\"]);\n        const params = Object.assign(Object.assign({}, otherParams), { parentEncoding: mergeEncoding({ parentEncoding, encoding }), parentProjection: mergeProjection({ parentProjection, projection }) });\n        return super.mapLayer(rest, params);\n    }\n}\nfunction mergeEncoding(opt) {\n    const { parentEncoding, encoding } = opt;\n    if (parentEncoding && encoding) {\n        const overriden = keys(parentEncoding).reduce((o, key) => {\n            if (encoding[key]) {\n                o.push(key);\n            }\n            return o;\n        }, []);\n        if (overriden.length > 0) {\n            log.warn(log.message.encodingOverridden(overriden));\n        }\n    }\n    const merged = Object.assign(Object.assign({}, (parentEncoding || {})), (encoding || {}));\n    return keys(merged).length > 0 ? merged : undefined;\n}\nfunction mergeProjection(opt) {\n    const { parentProjection, projection } = opt;\n    if (parentProjection && projection) {\n        log.warn(log.message.projectionOverridden({ parentProjection, projection }));\n    }\n    return projection || parentProjection;\n}\n//# sourceMappingURL=core.js.map","import { __rest } from \"tslib\";\nimport { isObject } from 'vega-util';\nimport { isMarkDef } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nimport { stack } from '../stack';\nimport { keys, omit, pick } from '../util';\nfunction dropLineAndPoint(markDef) {\n    const { point: _point, line: _line } = markDef, mark = __rest(markDef, [\"point\", \"line\"]);\n    return keys(mark).length > 1 ? mark : mark.type;\n}\nfunction dropLineAndPointFromConfig(config) {\n    for (const mark of ['line', 'area', 'rule', 'trail']) {\n        if (config[mark]) {\n            config = Object.assign(Object.assign({}, config), { \n                // TODO: remove as any\n                [mark]: omit(config[mark], ['point', 'line']) });\n        }\n    }\n    return config;\n}\nfunction getPointOverlay(markDef, markConfig = {}, encoding) {\n    if (markDef.point === 'transparent') {\n        return { opacity: 0 };\n    }\n    else if (markDef.point) {\n        // truthy : true or object\n        return isObject(markDef.point) ? markDef.point : {};\n    }\n    else if (markDef.point !== undefined) {\n        // false or null\n        return null;\n    }\n    else {\n        // undefined (not disabled)\n        if (markConfig.point || encoding.shape) {\n            // enable point overlay if config[mark].point is truthy or if encoding.shape is provided\n            return isObject(markConfig.point) ? markConfig.point : {};\n        }\n        // markDef.point is defined as falsy\n        return undefined;\n    }\n}\nfunction getLineOverlay(markDef, markConfig = {}) {\n    if (markDef.line) {\n        // true or object\n        return markDef.line === true ? {} : markDef.line;\n    }\n    else if (markDef.line !== undefined) {\n        // false or null\n        return null;\n    }\n    else {\n        // undefined (not disabled)\n        if (markConfig.line) {\n            // enable line overlay if config[mark].line is truthy\n            return markConfig.line === true ? {} : markConfig.line;\n        }\n        // markDef.point is defined as falsy\n        return undefined;\n    }\n}\nexport class PathOverlayNormalizer {\n    constructor() {\n        this.name = 'path-overlay';\n    }\n    hasMatchingType(spec, config) {\n        if (isUnitSpec(spec)) {\n            const { mark, encoding } = spec;\n            const markDef = isMarkDef(mark) ? mark : { type: mark };\n            switch (markDef.type) {\n                case 'line':\n                case 'rule':\n                case 'trail':\n                    return !!getPointOverlay(markDef, config[markDef.type], encoding);\n                case 'area':\n                    return (\n                    // false / null are also included as we want to remove the properties\n                    !!getPointOverlay(markDef, config[markDef.type], encoding) ||\n                        !!getLineOverlay(markDef, config[markDef.type]));\n            }\n        }\n        return false;\n    }\n    run(spec, params, normalize) {\n        const { config } = params;\n        const { selection, projection, encoding, mark } = spec, outerSpec = __rest(spec, [\"selection\", \"projection\", \"encoding\", \"mark\"]);\n        const markDef = isMarkDef(mark) ? mark : { type: mark };\n        const pointOverlay = getPointOverlay(markDef, config[markDef.type], encoding);\n        const lineOverlay = markDef.type === 'area' && getLineOverlay(markDef, config[markDef.type]);\n        const layer = [\n            Object.assign(Object.assign({}, (selection ? { selection } : {})), { \n                // Do not include point / line overlay in the normalize spec\n                mark: dropLineAndPoint(Object.assign(Object.assign({}, markDef), (markDef.type === 'area' ? { opacity: 0.7 } : {}))), \n                // drop shape from encoding as this might be used to trigger point overlay\n                encoding: omit(encoding, ['shape']) })\n        ];\n        // FIXME: determine rules for applying selections.\n        // Need to copy stack config to overlayed layer\n        const stackProps = stack(markDef, encoding);\n        let overlayEncoding = encoding;\n        if (stackProps) {\n            const { fieldChannel: stackFieldChannel, offset } = stackProps;\n            overlayEncoding = Object.assign(Object.assign({}, encoding), { [stackFieldChannel]: Object.assign(Object.assign({}, encoding[stackFieldChannel]), (offset ? { stack: offset } : {})) });\n        }\n        if (lineOverlay) {\n            layer.push(Object.assign(Object.assign({}, (projection ? { projection } : {})), { mark: Object.assign(Object.assign({ type: 'line' }, pick(markDef, ['clip', 'interpolate', 'tension', 'tooltip'])), lineOverlay), encoding: overlayEncoding }));\n        }\n        if (pointOverlay) {\n            layer.push(Object.assign(Object.assign({}, (projection ? { projection } : {})), { mark: Object.assign(Object.assign({ type: 'point', opacity: 1, filled: true }, pick(markDef, ['clip', 'tooltip'])), pointOverlay), encoding: overlayEncoding }));\n        }\n        return normalize(Object.assign(Object.assign({}, outerSpec), { layer }), Object.assign(Object.assign({}, params), { config: dropLineAndPointFromConfig(config) }));\n    }\n}\n//# sourceMappingURL=pathoverlay.js.map","import { __rest } from \"tslib\";\nimport { getSizeType, POSITION_SCALE_CHANNELS } from '../channel';\nimport { isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nimport { keys } from '../util';\nexport class RangeStepNormalizer {\n    constructor() {\n        this.name = 'RangeStep';\n    }\n    hasMatchingType(spec) {\n        if (isUnitSpec(spec) && spec.encoding) {\n            for (const channel of POSITION_SCALE_CHANNELS) {\n                const def = spec.encoding[channel];\n                if (def && isFieldDef(def)) {\n                    if (def && def.scale && def.scale['rangeStep']) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    run(spec) {\n        const sizeMixins = {};\n        let encoding = Object.assign({}, spec.encoding);\n        for (const channel of POSITION_SCALE_CHANNELS) {\n            const sizeType = getSizeType(channel);\n            const def = encoding[channel];\n            if (def && isFieldDef(def)) {\n                if (def && def.scale && def.scale['rangeStep']) {\n                    const { scale } = def, defWithoutScale = __rest(def, [\"scale\"]);\n                    const _a = scale, { rangeStep } = _a, scaleWithoutRangeStep = __rest(_a, [\"rangeStep\"]);\n                    sizeMixins[sizeType] = { step: scale['rangeStep'] };\n                    log.warn(log.message.RANGE_STEP_DEPRECATED);\n                    encoding = Object.assign(Object.assign({}, encoding), { [channel]: Object.assign(Object.assign({}, defWithoutScale), (keys(scaleWithoutRangeStep).length ? { scale: scaleWithoutRangeStep } : {})) });\n                }\n            }\n        }\n        return Object.assign(Object.assign(Object.assign({}, sizeMixins), spec), { encoding });\n    }\n}\n//# sourceMappingURL=rangestep.js.map","import { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isUnitSpec } from '../spec/unit';\nexport class RuleForRangedLineNormalizer {\n    constructor() {\n        this.name = 'RuleForRangedLine';\n    }\n    hasMatchingType(spec) {\n        if (isUnitSpec(spec)) {\n            const { encoding, mark } = spec;\n            if (mark === 'line') {\n                for (const channel of SECONDARY_RANGE_CHANNEL) {\n                    const mainChannel = getMainRangeChannel(channel);\n                    const mainChannelDef = encoding[mainChannel];\n                    if (!!encoding[channel] && isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    run(spec, params, normalize) {\n        const { encoding } = spec;\n        log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n        return normalize(Object.assign(Object.assign({}, spec), { mark: 'rule' }), params);\n    }\n}\n//# sourceMappingURL=ruleforrangedline.js.map","import * as log from '../log';\nimport { isHConcatSpec, isVConcatSpec } from '../spec';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseConcatLayoutSize } from './layoutsize/parse';\nexport class ConcatModel extends BaseConcatModel {\n    constructor(spec, parent, parentGivenName, repeater, config) {\n        super(spec, 'concat', parent, parentGivenName, config, repeater, spec.resolve);\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.CONCAT_CANNOT_SHARE_AXIS);\n        }\n        this.concatType = isVConcatSpec(spec) ? 'vconcat' : isHConcatSpec(spec) ? 'hconcat' : 'concat';\n        this.children = this.getChildren(spec).map((child, i) => {\n            return buildModel(child, this, this.getName('concat_' + i), undefined, repeater, config);\n        });\n    }\n    getChildren(spec) {\n        if (isVConcatSpec(spec)) {\n            return spec.vconcat;\n        }\n        else if (isHConcatSpec(spec)) {\n            return spec.hconcat;\n        }\n        return spec.concat;\n    }\n    parseLayoutSize() {\n        parseConcatLayoutSize(this);\n    }\n    parseAxisGroup() {\n        return null;\n    }\n    assembleDefaultLayout() {\n        return Object.assign(Object.assign({}, (this.concatType === 'vconcat' ? { columns: 1 } : {})), { bounds: 'full', \n            // Use align each so it can work with multiple plots with different size\n            align: 'each' });\n    }\n}\n//# sourceMappingURL=concat.js.map","import { selector as parseSelector } from 'vega-event-selector';\nimport { isString } from 'vega-util';\nimport { TUPLE } from '..';\nimport { varName } from '../../../util';\nimport inputBindings from './inputs';\nimport toggle, { TOGGLE } from './toggle';\nconst clear = {\n    has: selCmpt => {\n        return selCmpt.clear !== undefined && selCmpt.clear !== false;\n    },\n    parse: (model, selCmpt, selDef) => {\n        if (selDef.clear) {\n            selCmpt.clear = isString(selDef.clear) ? parseSelector(selDef.clear, 'scope') : selDef.clear;\n        }\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n        if (inputBindings.has(selCmpt)) {\n            selCmpt.project.items.forEach(proj => {\n                const idx = signals.findIndex(n => n.name === varName(`${selCmpt.name}_${proj.field}`));\n                if (idx !== -1) {\n                    signals[idx].on.push({ events: selCmpt.clear, update: 'null' });\n                }\n            });\n        }\n        return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n        function addClear(idx, update) {\n            if (idx !== -1 && signals[idx].on) {\n                signals[idx].on.push({ events: selCmpt.clear, update });\n            }\n        }\n        // Be as minimalist as possible when adding clear triggers to minimize dataflow execution.\n        if (selCmpt.type === 'interval') {\n            selCmpt.project.items.forEach(proj => {\n                const vIdx = signals.findIndex(n => n.name === proj.signals.visual);\n                addClear(vIdx, '[0, 0]');\n                if (vIdx === -1) {\n                    const dIdx = signals.findIndex(n => n.name === proj.signals.data);\n                    addClear(dIdx, 'null');\n                }\n            });\n        }\n        else {\n            let tIdx = signals.findIndex(n => n.name === selCmpt.name + TUPLE);\n            addClear(tIdx, 'null');\n            if (toggle.has(selCmpt)) {\n                tIdx = signals.findIndex(n => n.name === selCmpt.name + TOGGLE);\n                addClear(tIdx, 'false');\n            }\n        }\n        return signals;\n    }\n};\nexport default clear;\n//# sourceMappingURL=clear.js.map","import { selector as parseSelector } from 'vega-event-selector';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport scalesCompiler, { domain } from './scales';\nconst ANCHOR = '_translate_anchor';\nconst DELTA = '_translate_delta';\nconst translate = {\n    has: selCmpt => {\n        return selCmpt.type === 'interval' && selCmpt.translate;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const hasScales = scalesCompiler.has(selCmpt);\n        const anchor = name + ANCHOR;\n        const { x, y } = selCmpt.project.has;\n        let events = parseSelector(selCmpt.translate, 'scope');\n        if (!hasScales) {\n            events = events.map(e => ((e.between[0].markname = name + INTERVAL_BRUSH), e));\n        }\n        signals.push({\n            name: anchor,\n            value: {},\n            on: [\n                {\n                    events: events.map(e => e.between[0]),\n                    update: '{x: x(unit), y: y(unit)' +\n                        (x !== undefined ? ', extent_x: ' + (hasScales ? domain(model, X) : `slice(${x.signals.visual})`) : '') +\n                        (y !== undefined ? ', extent_y: ' + (hasScales ? domain(model, Y) : `slice(${y.signals.visual})`) : '') +\n                        '}'\n                }\n            ]\n        }, {\n            name: name + DELTA,\n            value: {},\n            on: [\n                {\n                    events: events,\n                    update: `{x: ${anchor}.x - x(unit), y: ${anchor}.y - y(unit)}`\n                }\n            ]\n        });\n        if (x !== undefined) {\n            onDelta(model, selCmpt, x, 'width', signals);\n        }\n        if (y !== undefined) {\n            onDelta(model, selCmpt, y, 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default translate;\nfunction onDelta(model, selCmpt, proj, size, signals) {\n    const name = selCmpt.name;\n    const anchor = name + ANCHOR;\n    const delta = name + DELTA;\n    const channel = proj.channel;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\n    const sizeSg = model.getSizeSignalRef(size).signal;\n    const scaleCmpt = model.getScaleComponent(channel);\n    const scaleType = scaleCmpt.get('type');\n    const sign = hasScales && channel === X ? '-' : ''; // Invert delta when panning x-scales.\n    const extent = `${anchor}.extent_${channel}`;\n    const offset = `${sign}${delta}.${channel} / ` + (hasScales ? `${sizeSg}` : `span(${extent})`);\n    const panFn = !hasScales\n        ? 'panLinear'\n        : scaleType === 'log'\n            ? 'panLog'\n            : scaleType === 'pow'\n                ? 'panPow'\n                : 'panLinear';\n    const update = `${panFn}(${extent}, ${offset}` +\n        (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +\n        ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n    });\n}\n//# sourceMappingURL=translate.js.map","import { selector as parseSelector } from 'vega-event-selector';\nimport { stringValue } from 'vega-util';\nimport { X, Y } from '../../../channel';\nimport { BRUSH as INTERVAL_BRUSH } from '../interval';\nimport { default as scalesCompiler, domain } from './scales';\nconst ANCHOR = '_zoom_anchor';\nconst DELTA = '_zoom_delta';\nconst zoom = {\n    has: selCmpt => {\n        return selCmpt.type === 'interval' && selCmpt.zoom;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const hasScales = scalesCompiler.has(selCmpt);\n        const delta = name + DELTA;\n        const { x, y } = selCmpt.project.has;\n        const sx = stringValue(model.scaleName(X));\n        const sy = stringValue(model.scaleName(Y));\n        let events = parseSelector(selCmpt.zoom, 'scope');\n        if (!hasScales) {\n            events = events.map(e => ((e.markname = name + INTERVAL_BRUSH), e));\n        }\n        signals.push({\n            name: name + ANCHOR,\n            on: [\n                {\n                    events: events,\n                    update: !hasScales\n                        ? `{x: x(unit), y: y(unit)}`\n                        : '{' +\n                            [sx ? `x: invert(${sx}, x(unit))` : '', sy ? `y: invert(${sy}, y(unit))` : '']\n                                .filter(expr => !!expr)\n                                .join(', ') +\n                            '}'\n                }\n            ]\n        }, {\n            name: delta,\n            on: [\n                {\n                    events: events,\n                    force: true,\n                    update: 'pow(1.001, event.deltaY * pow(16, event.deltaMode))'\n                }\n            ]\n        });\n        if (x !== undefined) {\n            onDelta(model, selCmpt, x, 'width', signals);\n        }\n        if (y !== undefined) {\n            onDelta(model, selCmpt, y, 'height', signals);\n        }\n        return signals;\n    }\n};\nexport default zoom;\nfunction onDelta(model, selCmpt, proj, size, signals) {\n    const name = selCmpt.name;\n    const channel = proj.channel;\n    const hasScales = scalesCompiler.has(selCmpt);\n    const signal = signals.filter(s => s.name === proj.signals[hasScales ? 'data' : 'visual'])[0];\n    const sizeSg = model.getSizeSignalRef(size).signal;\n    const scaleCmpt = model.getScaleComponent(channel);\n    const scaleType = scaleCmpt.get('type');\n    const base = hasScales ? domain(model, channel) : signal.name;\n    const delta = name + DELTA;\n    const anchor = `${name}${ANCHOR}.${channel}`;\n    const zoomFn = !hasScales\n        ? 'zoomLinear'\n        : scaleType === 'log'\n            ? 'zoomLog'\n            : scaleType === 'pow'\n                ? 'zoomPow'\n                : 'zoomLinear';\n    const update = `${zoomFn}(${base}, ${anchor}, ${delta}` +\n        (hasScales && scaleType === 'pow' ? `, ${scaleCmpt.get('exponent') || 1}` : '') +\n        ')';\n    signal.on.push({\n        events: { signal: delta },\n        update: hasScales ? update : `clampRange(${update}, 0, ${sizeSg})`\n    });\n}\n//# sourceMappingURL=zoom.js.map","import { TUPLE, unitName } from '.';\nimport { singleOrMultiSignals } from './multi';\nconst single = {\n    signals: singleOrMultiSignals,\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n    }\n};\nexport default single;\n//# sourceMappingURL=single.js.map","import { __rest } from \"tslib\";\nimport { contains } from '../../util';\nimport { isSignalRef } from '../../vega.schema';\nimport { isConcatModel, isLayerModel, isRepeatModel } from '../model';\nexport function assembleProjections(model) {\n    if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n        return assembleProjectionsForModelAndChildren(model);\n    }\n    else {\n        return assembleProjectionForModel(model);\n    }\n}\nexport function assembleProjectionsForModelAndChildren(model) {\n    return model.children.reduce((projections, child) => {\n        return projections.concat(child.assembleProjections());\n    }, assembleProjectionForModel(model));\n}\nexport function assembleProjectionForModel(model) {\n    const component = model.component.projection;\n    if (!component || component.merged) {\n        return [];\n    }\n    const projection = component.combine();\n    const { name } = projection, rest = __rest(projection, [\"name\"]); // we need to extract name so that it is always present in the output and pass TS type validation\n    if (!component.data) {\n        // generate custom projection, no automatic fitting\n        return [\n            Object.assign(Object.assign({ name }, { translate: { signal: '[width / 2, height / 2]' } }), rest)\n        ];\n    }\n    else {\n        // generate projection that uses extent fitting\n        const size = {\n            signal: `[${component.size.map(ref => ref.signal).join(', ')}]`\n        };\n        const fit = component.data.reduce((sources, data) => {\n            const source = isSignalRef(data) ? data.signal : `data('${model.lookupDataSource(data)}')`;\n            if (!contains(sources, source)) {\n                // build a unique list of sources\n                sources.push(source);\n            }\n            return sources;\n        }, []);\n        if (fit.length <= 0) {\n            throw new Error(\"Projection's fit didn't find any data sources\");\n        }\n        return [\n            Object.assign({ name,\n                size, fit: {\n                    signal: fit.length > 1 ? `[${fit.join(', ')}]` : fit[0]\n                } }, rest)\n        ];\n    }\n}\n//# sourceMappingURL=assemble.js.map","import { hasOwnProperty } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { MAIN } from '../../data';\nimport { PROJECTION_PROPERTIES } from '../../projection';\nimport { GEOJSON } from '../../type';\nimport { duplicate, every, stringify } from '../../util';\nimport { isUnitModel } from '../model';\nimport { ProjectionComponent } from './component';\nexport function parseProjection(model) {\n    model.component.projection = isUnitModel(model) ? parseUnitProjection(model) : parseNonUnitProjections(model);\n}\nfunction parseUnitProjection(model) {\n    if (model.hasProjection) {\n        const proj = model.specifiedProjection;\n        const fit = !(proj && (proj.scale != null || proj.translate != null));\n        const size = fit ? [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')] : undefined;\n        const data = fit ? gatherFitData(model) : undefined;\n        return new ProjectionComponent(model.projectionName(true), Object.assign(Object.assign({}, (model.config.projection || {})), (proj || {})), size, data);\n    }\n    return undefined;\n}\nfunction gatherFitData(model) {\n    const data = [];\n    [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach(posssiblePair => {\n        if (model.channelHasField(posssiblePair[0]) || model.channelHasField(posssiblePair[1])) {\n            data.push({\n                signal: model.getName(`geojson_${data.length}`)\n            });\n        }\n    });\n    if (model.channelHasField(SHAPE) && model.fieldDef(SHAPE).type === GEOJSON) {\n        data.push({\n            signal: model.getName(`geojson_${data.length}`)\n        });\n    }\n    if (data.length === 0) {\n        // main source is geojson, so we can just use that\n        data.push(model.requestDataName(MAIN));\n    }\n    return data;\n}\nfunction mergeIfNoConflict(first, second) {\n    const allPropertiesShared = every(PROJECTION_PROPERTIES, prop => {\n        // neither has the property\n        if (!hasOwnProperty(first.explicit, prop) && !hasOwnProperty(second.explicit, prop)) {\n            return true;\n        }\n        // both have property and an equal value for property\n        if (hasOwnProperty(first.explicit, prop) &&\n            hasOwnProperty(second.explicit, prop) &&\n            // some properties might be signals or objects and require hashing for comparison\n            stringify(first.get(prop)) === stringify(second.get(prop))) {\n            return true;\n        }\n        return false;\n    });\n    const size = stringify(first.size) === stringify(second.size);\n    if (size) {\n        if (allPropertiesShared) {\n            return first;\n        }\n        else if (stringify(first.explicit) === stringify({})) {\n            return second;\n        }\n        else if (stringify(second.explicit) === stringify({})) {\n            return first;\n        }\n    }\n    // if all properties don't match, let each unit spec have its own projection\n    return null;\n}\nfunction parseNonUnitProjections(model) {\n    if (model.children.length === 0) {\n        return undefined;\n    }\n    let nonUnitProjection;\n    // parse all children first\n    model.children.forEach(child => parseProjection(child));\n    // analyze parsed projections, attempt to merge\n    const mergable = every(model.children, child => {\n        const projection = child.component.projection;\n        if (!projection) {\n            // child layer does not use a projection\n            return true;\n        }\n        else if (!nonUnitProjection) {\n            // cached 'projection' is null, cache this one\n            nonUnitProjection = projection;\n            return true;\n        }\n        else {\n            const merge = mergeIfNoConflict(nonUnitProjection, projection);\n            if (merge) {\n                nonUnitProjection = merge;\n            }\n            return !!merge;\n        }\n    });\n    // if cached one and all other children share the same projection,\n    if (nonUnitProjection && mergable) {\n        // so we can elevate it to the layer level\n        const name = model.projectionName(true);\n        const modelProjection = new ProjectionComponent(name, nonUnitProjection.specifiedProjection, nonUnitProjection.size, duplicate(nonUnitProjection.data));\n        // rename and assign all others as merged\n        model.children.forEach(child => {\n            const projection = child.component.projection;\n            if (projection) {\n                if (projection.isFit) {\n                    modelProjection.data.push(...child.component.projection.data);\n                }\n                child.renameProjection(projection.get('name'), name);\n                projection.merged = true;\n            }\n        });\n        return modelProjection;\n    }\n    return undefined;\n}\n//# sourceMappingURL=parse.js.map","export const PROJECTION_PROPERTIES = [\n    'type',\n    'clipAngle',\n    'clipExtent',\n    'center',\n    'rotate',\n    'precision',\n    'reflectX',\n    'reflectY',\n    'coefficient',\n    'distance',\n    'fraction',\n    'lobes',\n    'parallel',\n    'radius',\n    'ratio',\n    'spacing',\n    'tilt'\n];\n//# sourceMappingURL=projection.js.map","import { __rest } from \"tslib\";\nimport { keys } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { isConcatModel, isLayerModel, isRepeatModel } from '../model';\nimport { isRawSelectionDomain } from '../selection';\nimport { assembleSelectionScaleDomain } from '../selection/assemble';\nimport { assembleDomain } from './domain';\nexport function assembleScales(model) {\n    if (isLayerModel(model) || isConcatModel(model) || isRepeatModel(model)) {\n        // For concat / layer / repeat, include scales of children too\n        return model.children.reduce((scales, child) => {\n            return scales.concat(assembleScales(child));\n        }, assembleScalesForModel(model));\n    }\n    else {\n        // For facet, child scales would not be included in the parent's scope.\n        // For unit, there is no child.\n        return assembleScalesForModel(model);\n    }\n}\nexport function assembleScalesForModel(model) {\n    return keys(model.component.scales).reduce((scales, channel) => {\n        const scaleComponent = model.component.scales[channel];\n        if (scaleComponent.merged) {\n            // Skipped merged scales\n            return scales;\n        }\n        const scale = scaleComponent.combine();\n        // need to separate const and non const object destruction\n        let { domainRaw } = scale;\n        const { name, type, domains: _d, domainRaw: _dr, range: _r } = scale, otherScaleProps = __rest(scale, [\"name\", \"type\", \"domains\", \"domainRaw\", \"range\"]);\n        const range = assembleScaleRange(scale.range, name, channel);\n        // As scale parsing occurs before selection parsing, a temporary signal\n        // is used for domainRaw. Here, we detect if this temporary signal\n        // is set, and replace it with the correct domainRaw signal.\n        // For more information, see isRawSelectionDomain in selection.ts.\n        if (domainRaw && isRawSelectionDomain(domainRaw)) {\n            domainRaw = assembleSelectionScaleDomain(model, domainRaw);\n        }\n        const domain = assembleDomain(model, channel);\n        scales.push(Object.assign(Object.assign(Object.assign(Object.assign({ name,\n            type }, (domain ? { domain } : {})), (domainRaw ? { domainRaw } : {})), { range: range }), otherScaleProps));\n        return scales;\n    }, []);\n}\nexport function assembleScaleRange(scaleRange, scaleName, channel) {\n    // add signals to x/y range\n    if (channel === 'x' || channel === 'y') {\n        if (isVgRangeStep(scaleRange)) {\n            // For width/height step, use a signal created in layout assemble instead of a constant step.\n            return {\n                step: { signal: scaleName + '_step' }\n            };\n        }\n    }\n    return scaleRange;\n}\n//# sourceMappingURL=assemble.js.map","import { SCALE_CHANNELS, SHAPE } from '../../channel';\nimport { hasConditionalFieldDef, isFieldDef } from '../../channeldef';\nimport { GEOSHAPE } from '../../mark';\nimport { NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES, scaleCompatible, scaleTypePrecedence } from '../../scale';\nimport { GEOJSON } from '../../type';\nimport { keys } from '../../util';\nimport { isUnitModel } from '../model';\nimport { defaultScaleResolve } from '../resolve';\nimport { mergeValuesWithExplicit, tieBreakByComparing } from '../split';\nimport { ScaleComponent } from './component';\nimport { parseScaleDomain } from './domain';\nimport { parseScaleProperty, parseScaleRange } from './properties';\nimport { scaleType } from './type';\nexport function parseScales(model, { ignoreRange } = {}) {\n    parseScaleCore(model);\n    parseScaleDomain(model);\n    for (const prop of NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES) {\n        parseScaleProperty(model, prop);\n    }\n    if (!ignoreRange) {\n        // range depends on zero\n        parseScaleRange(model);\n    }\n}\nexport function parseScaleCore(model) {\n    if (isUnitModel(model)) {\n        model.component.scales = parseUnitScaleCore(model);\n    }\n    else {\n        model.component.scales = parseNonUnitScaleCore(model);\n    }\n}\n/**\n * Parse scales for all channels of a model.\n */\nfunction parseUnitScaleCore(model) {\n    const { encoding, mark } = model;\n    return SCALE_CHANNELS.reduce((scaleComponents, channel) => {\n        let fieldDef;\n        let specifiedScale;\n        const channelDef = encoding[channel];\n        // Don't generate scale for shape of geoshape\n        if (isFieldDef(channelDef) && mark === GEOSHAPE && channel === SHAPE && channelDef.type === GEOJSON) {\n            return scaleComponents;\n        }\n        if (isFieldDef(channelDef)) {\n            fieldDef = channelDef;\n            specifiedScale = channelDef.scale;\n        }\n        else if (hasConditionalFieldDef(channelDef)) {\n            // Need to specify generic for hasConditionalFieldDef as the value type can vary across channels\n            fieldDef = channelDef.condition;\n            specifiedScale = channelDef.condition['scale']; // We use ['scale'] since we know that channel here has scale for sure\n        }\n        if (fieldDef && specifiedScale !== null && specifiedScale !== false) {\n            specifiedScale = specifiedScale || {};\n            const sType = scaleType(specifiedScale, channel, fieldDef, mark);\n            scaleComponents[channel] = new ScaleComponent(model.scaleName(channel + '', true), {\n                value: sType,\n                explicit: specifiedScale.type === sType\n            });\n        }\n        return scaleComponents;\n    }, {});\n}\nconst scaleTypeTieBreaker = tieBreakByComparing((st1, st2) => scaleTypePrecedence(st1) - scaleTypePrecedence(st2));\nfunction parseNonUnitScaleCore(model) {\n    const scaleComponents = (model.component.scales = {});\n    const scaleTypeWithExplicitIndex = {};\n    const resolve = model.component.resolve;\n    // Parse each child scale and determine if a particular channel can be merged.\n    for (const child of model.children) {\n        parseScaleCore(child);\n        // Instead of always merging right away -- check if it is compatible to merge first!\n        keys(child.component.scales).forEach((channel) => {\n            // if resolve is undefined, set default first\n            resolve.scale[channel] = resolve.scale[channel] || defaultScaleResolve(channel, model);\n            if (resolve.scale[channel] === 'shared') {\n                const explicitScaleType = scaleTypeWithExplicitIndex[channel];\n                const childScaleType = child.component.scales[channel].getWithExplicit('type');\n                if (explicitScaleType) {\n                    if (scaleCompatible(explicitScaleType.value, childScaleType.value)) {\n                        // merge scale component if type are compatible\n                        scaleTypeWithExplicitIndex[channel] = mergeValuesWithExplicit(explicitScaleType, childScaleType, 'type', 'scale', scaleTypeTieBreaker);\n                    }\n                    else {\n                        // Otherwise, update conflicting channel to be independent\n                        resolve.scale[channel] = 'independent';\n                        // Remove from the index so they don't get merged\n                        delete scaleTypeWithExplicitIndex[channel];\n                    }\n                }\n                else {\n                    scaleTypeWithExplicitIndex[channel] = childScaleType;\n                }\n            }\n        });\n    }\n    // Merge each channel listed in the index\n    keys(scaleTypeWithExplicitIndex).forEach((channel) => {\n        // Create new merged scale component\n        const name = model.scaleName(channel, true);\n        const typeWithExplicit = scaleTypeWithExplicitIndex[channel];\n        scaleComponents[channel] = new ScaleComponent(name, typeWithExplicit);\n        // rename each child and mark them as merged\n        for (const child of model.children) {\n            const childScale = child.component.scales[channel];\n            if (childScale) {\n                child.renameScale(childScale.get('name'), name);\n                childScale.merged = true;\n            }\n        }\n    });\n    return scaleComponents;\n}\n//# sourceMappingURL=parse.js.map","import { isArray, isNumber } from 'vega-util';\nimport { isBinning } from '../../bin';\nimport { COLOR, FILL, FILLOPACITY, OPACITY, SCALE_CHANNELS, SHAPE, SIZE, STROKE, STROKEOPACITY, STROKEWIDTH, X, Y } from '../../channel';\nimport { getViewConfigDiscreteSize, getViewConfigDiscreteStep } from '../../config';\nimport * as log from '../../log';\nimport { channelScalePropertyIncompatability, hasContinuousDomain, hasDiscreteDomain, isContinuousToDiscrete, isExtendedScheme, scaleTypeSupportProperty } from '../../scale';\nimport { isStep } from '../../spec/base';\nimport * as util from '../../util';\nimport { isSignalRef } from '../../vega.schema';\nimport { getBinSignalName } from '../data/bin';\nimport { SignalRefWrapper } from '../signal';\nimport { makeExplicit, makeImplicit } from '../split';\nexport const RANGE_PROPERTIES = ['range', 'scheme'];\nfunction getSizeType(channel) {\n    return channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n}\nexport function parseUnitScaleRange(model) {\n    const localScaleComponents = model.component.scales;\n    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n    SCALE_CHANNELS.forEach((channel) => {\n        const localScaleCmpt = localScaleComponents[channel];\n        if (!localScaleCmpt) {\n            return;\n        }\n        const rangeWithExplicit = parseRangeForChannel(channel, model);\n        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    });\n}\nfunction getBinStepSignal(model, channel) {\n    const fieldDef = model.fieldDef(channel);\n    if (fieldDef && fieldDef.bin && isBinning(fieldDef.bin)) {\n        const binSignal = getBinSignalName(model, fieldDef.field, fieldDef.bin);\n        // TODO: extract this to be range step signal\n        const sizeType = getSizeType(channel);\n        const sizeSignal = model.getName(sizeType);\n        return new SignalRefWrapper(() => {\n            const updatedName = model.getSignalName(binSignal);\n            const binCount = `(${updatedName}.stop - ${updatedName}.start) / ${updatedName}.step`;\n            return `${model.getSignalName(sizeSignal)} / (${binCount})`;\n        });\n    }\n    return undefined;\n}\n/**\n * Return mixins that includes one of the Vega range types (explicit range, range.step, range.scheme).\n */\nexport function parseRangeForChannel(channel, model) {\n    const specifiedScale = model.specifiedScales[channel];\n    const { size } = model;\n    const mergedScaleCmpt = model.getScaleComponent(channel);\n    const scaleType = mergedScaleCmpt.get('type');\n    // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n    for (const property of RANGE_PROPERTIES) {\n        if (specifiedScale[property] !== undefined) {\n            const supportedByScaleType = scaleTypeSupportProperty(scaleType, property);\n            const channelIncompatability = channelScalePropertyIncompatability(channel, property);\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n            }\n            else if (channelIncompatability) {\n                // channel\n                log.warn(channelIncompatability);\n            }\n            else {\n                switch (property) {\n                    case 'range':\n                        return makeExplicit(specifiedScale[property]);\n                    case 'scheme':\n                        return makeExplicit(parseScheme(specifiedScale[property]));\n                }\n            }\n        }\n    }\n    if (channel === X || channel === Y) {\n        const sizeChannel = channel === X ? 'width' : 'height';\n        const sizeValue = size[sizeChannel];\n        if (isStep(sizeValue)) {\n            if (hasDiscreteDomain(scaleType)) {\n                return makeExplicit({ step: sizeValue.step });\n            }\n            else {\n                log.warn(log.message.stepDropped(sizeChannel));\n            }\n        }\n    }\n    return makeImplicit(defaultRange(channel, model));\n}\nfunction parseScheme(scheme) {\n    if (isExtendedScheme(scheme)) {\n        return Object.assign({ scheme: scheme.name }, util.omit(scheme, ['name']));\n    }\n    return { scheme: scheme };\n}\nfunction defaultRange(channel, model) {\n    const { size, config, mark } = model;\n    const getSignalName = model.getSignalName.bind(model);\n    const { type } = model.fieldDef(channel);\n    const mergedScaleCmpt = model.getScaleComponent(channel);\n    const scaleType = mergedScaleCmpt.get('type');\n    const { domain } = model.specifiedScales[channel];\n    switch (channel) {\n        case X:\n        case Y: {\n            // If there is no explicit width/height for discrete x/y scales\n            if (util.contains(['point', 'band'], scaleType)) {\n                if (channel === X && !size.width) {\n                    const w = getViewConfigDiscreteSize(config.view, 'width');\n                    if (isStep(w)) {\n                        return w;\n                    }\n                }\n                else if (channel === Y && !size.height) {\n                    const h = getViewConfigDiscreteSize(config.view, 'height');\n                    if (isStep(h)) {\n                        return h;\n                    }\n                }\n            }\n            // If step is null, use zero to width or height.\n            // Note that these range signals are temporary\n            // as they can be merged and renamed.\n            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n            // We will later replace these temporary names with\n            // the final name in assembleScaleRange()\n            const sizeType = getSizeType(channel);\n            const sizeSignal = model.getName(sizeType);\n            if (channel === Y && hasContinuousDomain(scaleType)) {\n                // For y continuous scale, we have to start from the height as the bottom part has the max value.\n                return [SignalRefWrapper.fromName(getSignalName, sizeSignal), 0];\n            }\n            else {\n                return [0, SignalRefWrapper.fromName(getSignalName, sizeSignal)];\n            }\n        }\n        case SIZE: {\n            // TODO: support custom rangeMin, rangeMax\n            const zero = model.component.scales[channel].get('zero');\n            const rangeMin = sizeRangeMin(mark, zero, config);\n            const rangeMax = sizeRangeMax(mark, size, model, config);\n            if (isContinuousToDiscrete(scaleType)) {\n                return interpolateRange(rangeMin, rangeMax, defaultContinuousToDiscreteCount(scaleType, config, domain, channel));\n            }\n            else {\n                return [rangeMin, rangeMax];\n            }\n        }\n        case STROKEWIDTH:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minStrokeWidth, config.scale.maxStrokeWidth];\n        case SHAPE:\n            return 'symbol';\n        case COLOR:\n        case FILL:\n        case STROKE:\n            if (scaleType === 'ordinal') {\n                // Only nominal data uses ordinal scale by default\n                return type === 'nominal' ? 'category' : 'ordinal';\n            }\n            else {\n                return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n            }\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n    throw new Error(`Scale range undefined for channel ${channel}`);\n}\nexport function defaultContinuousToDiscreteCount(scaleType, config, domain, channel) {\n    switch (scaleType) {\n        case 'quantile':\n            return config.scale.quantileCount;\n        case 'quantize':\n            return config.scale.quantizeCount;\n        case 'threshold':\n            if (domain !== undefined && isArray(domain)) {\n                return domain.length + 1;\n            }\n            else {\n                log.warn(log.message.domainRequiredForThresholdScale(channel));\n                // default threshold boundaries for threshold scale since domain has cardinality of 2\n                return 3;\n            }\n    }\n}\n/**\n * Returns the linear interpolation of the range according to the cardinality\n *\n * @param rangeMin start of the range\n * @param rangeMax end of the range\n * @param cardinality number of values in the output range\n */\nexport function interpolateRange(rangeMin, rangeMax, cardinality) {\n    // always return a signal since it's better to compute the sequence in Vega later\n    const f = () => {\n        const rMax = isSignalRef(rangeMax) ? rangeMax.signal : rangeMax;\n        const step = `(${rMax} - ${rangeMin}) / (${cardinality} - 1)`;\n        return `sequence(${rangeMin}, ${rangeMax} + ${step}, ${step})`;\n    };\n    if (isSignalRef(rangeMax)) {\n        return new SignalRefWrapper(f);\n    }\n    else {\n        return { signal: f() };\n    }\n}\nfunction sizeRangeMin(mark, zero, config) {\n    if (zero) {\n        return 0;\n    }\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            return config.scale.minBandSize;\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.minStrokeWidth;\n        case 'text':\n            return config.scale.minFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\nexport const MAX_SIZE_RANGE_STEP_RATIO = 0.95;\nfunction sizeRangeMax(mark, size, model, config) {\n    const xyStepSignals = {\n        x: getBinStepSignal(model, 'x'),\n        y: getBinStepSignal(model, 'y')\n    };\n    switch (mark) {\n        case 'bar':\n        case 'tick': {\n            if (config.scale.maxBandSize !== undefined) {\n                return config.scale.maxBandSize;\n            }\n            const min = minXYStep(size, xyStepSignals, config.view);\n            if (isNumber(min)) {\n                return min - 1;\n            }\n            else {\n                return new SignalRefWrapper(() => `${min.signal} - 1`);\n            }\n        }\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return config.scale.maxStrokeWidth;\n        case 'text':\n            return config.scale.maxFontSize;\n        case 'point':\n        case 'square':\n        case 'circle': {\n            if (config.scale.maxSize) {\n                return config.scale.maxSize;\n            }\n            const pointStep = minXYStep(size, xyStepSignals, config.view);\n            if (isNumber(pointStep)) {\n                return Math.pow(MAX_SIZE_RANGE_STEP_RATIO * pointStep, 2);\n            }\n            else {\n                return new SignalRefWrapper(() => `pow(${MAX_SIZE_RANGE_STEP_RATIO} * ${pointStep.signal}, 2)`);\n            }\n        }\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYStep(size, xyStepSignals, viewConfig) {\n    const widthStep = isStep(size.width) ? size.width.step : getViewConfigDiscreteStep(viewConfig, 'width');\n    const heightStep = isStep(size.height) ? size.height.step : getViewConfigDiscreteStep(viewConfig, 'height');\n    if (xyStepSignals.x || xyStepSignals.y) {\n        return new SignalRefWrapper(() => {\n            const exprs = [\n                xyStepSignals.x ? xyStepSignals.x.signal : widthStep,\n                xyStepSignals.y ? xyStepSignals.y.signal : heightStep\n            ];\n            return `min(${exprs.join(', ')})`;\n        });\n    }\n    return Math.min(widthStep, heightStep);\n}\n//# sourceMappingURL=range.js.map","import { isBinning } from '../../bin';\nimport { isColorChannel, isScaleChannel, rangeType } from '../../channel';\nimport * as log from '../../log';\nimport { channelSupportScaleType, scaleTypeSupportDataType } from '../../scale';\nimport * as util from '../../util';\n/**\n * Determine if there is a specified scale type and if it is appropriate,\n * or determine default type if type is unspecified or inappropriate.\n */\n// NOTE: CompassQL uses this method.\nexport function scaleType(specifiedScale, channel, fieldDef, mark) {\n    const defaultScaleType = defaultType(channel, fieldDef, mark);\n    const { type } = specifiedScale;\n    if (!isScaleChannel(channel)) {\n        // There is no scale for these channels\n        return null;\n    }\n    if (type !== undefined) {\n        // Check if explicitly specified scale type is supported by the channel\n        if (!channelSupportScaleType(channel, type)) {\n            log.warn(log.message.scaleTypeNotWorkWithChannel(channel, type, defaultScaleType));\n            return defaultScaleType;\n        }\n        // Check if explicitly specified scale type is supported by the data type\n        if (!scaleTypeSupportDataType(type, fieldDef.type)) {\n            log.warn(log.message.scaleTypeNotWorkWithFieldDef(type, defaultScaleType));\n            return defaultScaleType;\n        }\n        return type;\n    }\n    return defaultScaleType;\n}\n/**\n * Determine appropriate default scale type.\n */\n// NOTE: Voyager uses this method.\nfunction defaultType(channel, fieldDef, mark) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n            if (isColorChannel(channel) || rangeType(channel) === 'discrete') {\n                if (channel === 'shape' && fieldDef.type === 'ordinal') {\n                    log.warn(log.message.discreteChannelCannotEncode(channel, 'ordinal'));\n                }\n                return 'ordinal';\n            }\n            if (util.contains(['x', 'y'], channel)) {\n                if (util.contains(['rect', 'bar', 'image', 'rule'], mark)) {\n                    // The rect/bar mark should fit into a band.\n                    // For rule, using band scale to make rule align with axis ticks better https://github.com/vega/vega-lite/issues/3429\n                    return 'band';\n                }\n            }\n            // Otherwise, use ordinal point scale so we can easily get center positions of the marks.\n            return 'point';\n        case 'temporal':\n            if (isColorChannel(channel)) {\n                return 'time';\n            }\n            else if (rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'temporal'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            return 'time';\n        case 'quantitative':\n            if (isColorChannel(channel)) {\n                if (isBinning(fieldDef.bin)) {\n                    return 'bin-ordinal';\n                }\n                return 'linear';\n            }\n            else if (rangeType(channel) === 'discrete') {\n                log.warn(log.message.discreteChannelCannotEncode(channel, 'quantitative'));\n                // TODO: consider using quantize (equivalent to binning) once we have it\n                return 'ordinal';\n            }\n            return 'linear';\n        case 'geojson':\n            return undefined;\n    }\n    /* istanbul ignore next: should never reach this */\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\n//# sourceMappingURL=type.js.map","import { Split } from '../split';\n/**\n * Class to track interesting properties (see https://15721.courses.cs.cmu.edu/spring2016/papers/graefe-ieee1995.pdf)\n * about how fields have been parsed or whether they have been derived in a transform. We use this to not parse the\n * same field again (or differently).\n */\nexport class AncestorParse extends Split {\n    constructor(explicit = {}, implicit = {}, parseNothing = false) {\n        super(explicit, implicit);\n        this.explicit = explicit;\n        this.implicit = implicit;\n        this.parseNothing = parseNothing;\n    }\n    clone() {\n        const clone = super.clone();\n        clone.parseNothing = this.parseNothing;\n        return clone;\n    }\n}\n//# sourceMappingURL=index.js.map","import { vgField } from '../../channeldef';\nimport { DEFAULT_SORT_OP, isSortField } from '../../sort';\nimport { facetSortFieldName } from '../facet';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nexport function makeJoinAggregateFromFacet(parent, facet) {\n    const { row, column } = facet;\n    if (row && column) {\n        let newParent = null;\n        // only need to make one for crossed facet\n        for (const fieldDef of [row, column]) {\n            if (isSortField(fieldDef.sort)) {\n                const { field, op = DEFAULT_SORT_OP } = fieldDef.sort;\n                parent = newParent = new JoinAggregateTransformNode(parent, {\n                    joinaggregate: [\n                        {\n                            op,\n                            field,\n                            as: facetSortFieldName(fieldDef, fieldDef.sort, { forAs: true })\n                        }\n                    ],\n                    groupby: [vgField(fieldDef)]\n                });\n            }\n        }\n        return newParent;\n    }\n    return null;\n}\n//# sourceMappingURL=joinaggregatefacet.js.map","import { FACET_CHANNELS } from '../../channel';\nimport { title as fieldDefTitle } from '../../channeldef';\nimport { contains, getFirstDefined } from '../../util';\nimport { assembleAxis } from '../axis/assemble';\nimport { parseGuideResolve } from '../resolve';\nimport { getHeaderProperty } from './common';\nexport function getHeaderType(orient) {\n    if (orient === 'top' || orient === 'left') {\n        return 'header';\n    }\n    return 'footer';\n}\nexport function parseFacetHeaders(model) {\n    for (const channel of FACET_CHANNELS) {\n        parseFacetHeader(model, channel);\n    }\n    mergeChildAxis(model, 'x');\n    mergeChildAxis(model, 'y');\n}\nfunction parseFacetHeader(model, channel) {\n    if (model.channelHasField(channel)) {\n        const fieldDef = model.facet[channel];\n        const titleConfig = getHeaderProperty('title', null, model.config, channel);\n        let title = fieldDefTitle(fieldDef, model.config, {\n            allowDisabling: true,\n            includeDefault: titleConfig === undefined || !!titleConfig\n        });\n        if (model.child.component.layoutHeaders[channel].title) {\n            // merge title with child to produce \"Title / Subtitle / Sub-subtitle\"\n            title += ' / ' + model.child.component.layoutHeaders[channel].title;\n            model.child.component.layoutHeaders[channel].title = null;\n        }\n        const labelOrient = getHeaderProperty('labelOrient', fieldDef, model.config, channel);\n        const header = fieldDef.header || {};\n        const labels = getFirstDefined(header.labels, true);\n        const headerType = contains(['bottom', 'right'], labelOrient) ? 'footer' : 'header';\n        model.component.layoutHeaders[channel] = {\n            title,\n            facetFieldDef: fieldDef,\n            [headerType]: channel === 'facet' ? [] : [makeHeaderComponent(model, channel, labels)]\n        };\n    }\n}\nfunction makeHeaderComponent(model, channel, labels) {\n    const sizeType = channel === 'row' ? 'height' : 'width';\n    return {\n        labels,\n        sizeSignal: model.child.component.layoutSize.get(sizeType) ? model.child.getSizeSignalRef(sizeType) : undefined,\n        axes: []\n    };\n}\nfunction mergeChildAxis(model, channel) {\n    const { child } = model;\n    if (child.component.axes[channel]) {\n        const { layoutHeaders, resolve } = model.component;\n        resolve.axis[channel] = parseGuideResolve(resolve, channel);\n        if (resolve.axis[channel] === 'shared') {\n            // For shared axis, move the axes to facet's header or footer\n            const headerChannel = channel === 'x' ? 'column' : 'row';\n            const layoutHeader = layoutHeaders[headerChannel];\n            for (const axisComponent of child.component.axes[channel]) {\n                const headerType = getHeaderType(axisComponent.get('orient'));\n                layoutHeader[headerType] = layoutHeader[headerType] || [makeHeaderComponent(model, headerChannel, false)];\n                // FIXME: assemble shouldn't be called here, but we do it this way so we only extract the main part of the axes\n                const mainAxis = assembleAxis(axisComponent, 'main', model.config, { header: true });\n                // LayoutHeader no longer keep track of property precedence, thus let's combine.\n                layoutHeader[headerType][0].axes.push(mainAxis);\n                axisComponent.mainExtracted = true;\n            }\n        }\n        else {\n            // Otherwise do nothing for independent axes\n        }\n    }\n}\n//# sourceMappingURL=parse.js.map","import * as log from '../log';\nimport { isLayerSpec, isUnitSpec } from '../spec';\nimport { keys } from '../util';\nimport { assembleAxisSignals } from './axis/assemble';\nimport { parseLayerAxes } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { parseLayerLayoutSize } from './layoutsize/parse';\nimport { assembleLegends } from './legend/assemble';\nimport { Model } from './model';\nimport { assembleLayerSelectionMarks } from './selection/assemble';\nimport { UnitModel } from './unit';\nexport class LayerModel extends Model {\n    constructor(spec, parent, parentGivenName, parentGivenSize, repeater, config) {\n        super(spec, 'layer', parent, parentGivenName, config, repeater, spec.resolve, spec.view);\n        const layoutSize = Object.assign(Object.assign(Object.assign({}, parentGivenSize), (spec.width ? { width: spec.width } : {})), (spec.height ? { height: spec.height } : {}));\n        this.children = spec.layer.map((layer, i) => {\n            if (isLayerSpec(layer)) {\n                return new LayerModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config);\n            }\n            else if (isUnitSpec(layer)) {\n                return new UnitModel(layer, this, this.getName('layer_' + i), layoutSize, repeater, config);\n            }\n            throw new Error(log.message.invalidSpec(layer));\n        });\n    }\n    parseData() {\n        this.component.data = parseData(this);\n        for (const child of this.children) {\n            child.parseData();\n        }\n    }\n    parseLayoutSize() {\n        parseLayerLayoutSize(this);\n    }\n    parseSelections() {\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        for (const child of this.children) {\n            child.parseSelections();\n            keys(child.component.selection).forEach(key => {\n                this.component.selection[key] = child.component.selection[key];\n            });\n        }\n    }\n    parseMarkGroup() {\n        for (const child of this.children) {\n            child.parseMarkGroup();\n        }\n    }\n    parseAxesAndHeaders() {\n        parseLayerAxes(this);\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n    }\n    // TODO: Support same named selections across children.\n    assembleSignals() {\n        return this.children.reduce((signals, child) => {\n            return signals.concat(child.assembleSignals());\n        }, assembleAxisSignals(this));\n    }\n    assembleLayoutSignals() {\n        return this.children.reduce((signals, child) => {\n            return signals.concat(child.assembleLayoutSignals());\n        }, assembleLayoutSignals(this));\n    }\n    assembleSelectionData(data) {\n        return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n    }\n    assembleTitle() {\n        let title = super.assembleTitle();\n        if (title) {\n            return title;\n        }\n        // If title does not provide layer, look into children\n        for (const child of this.children) {\n            title = child.assembleTitle();\n            if (title) {\n                return title;\n            }\n        }\n        return undefined;\n    }\n    assembleLayout() {\n        return null;\n    }\n    assembleMarks() {\n        return assembleLayerSelectionMarks(this, this.children.flatMap(child => {\n            return child.assembleMarks();\n        }));\n    }\n    assembleLegends() {\n        return this.children.reduce((legends, child) => {\n            return legends.concat(child.assembleLegends());\n        }, assembleLegends(this));\n    }\n}\n//# sourceMappingURL=layer.js.map","import { isTimeFormatFieldDef } from '../../channeldef';\nimport { ScaleType } from '../../scale';\nimport { keys } from '../../util';\nimport { timeFormatExpression } from '../common';\nexport function labels(model, channel, specifiedLabelsSpec) {\n    const fieldDef = model.fieldDef(channel) ||\n        (channel === 'x' ? model.fieldDef('x2') : channel === 'y' ? model.fieldDef('y2') : undefined);\n    const axis = model.axis(channel);\n    const config = model.config;\n    let labelsSpec = {};\n    // We use a label encoding instead of setting the `format` property because Vega does not let us determine how the format should be interpreted.\n    if (isTimeFormatFieldDef(fieldDef)) {\n        const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n        const expr = timeFormatExpression('datum.value', fieldDef.timeUnit, axis.format, config.axis.shortTimeLabels, null, isUTCScale);\n        if (expr) {\n            labelsSpec.text = { signal: expr };\n        }\n    }\n    labelsSpec = Object.assign(Object.assign({}, labelsSpec), specifiedLabelsSpec);\n    return keys(labelsSpec).length === 0 ? undefined : labelsSpec;\n}\n//# sourceMappingURL=encode.js.map","import { getSizeType, POSITION_SCALE_CHANNELS } from '../../channel';\nimport { getFieldDef, isContinuous } from '../../channeldef';\nimport * as log from '../../log';\nimport { isStep } from '../../spec/base';\nexport function initLayoutSize({ encoding, size }) {\n    for (const channel of POSITION_SCALE_CHANNELS) {\n        const sizeType = getSizeType(channel);\n        const fieldDef = getFieldDef(encoding[channel]);\n        if (isStep(size[sizeType])) {\n            if (fieldDef) {\n                if (isContinuous(fieldDef)) {\n                    delete size[sizeType];\n                    log.warn(log.message.stepDropped(sizeType));\n                }\n            }\n        }\n    }\n    return size;\n}\n//# sourceMappingURL=init.js.map","import { isBinned, isBinning } from '../../bin';\nimport { isContinuous, isFieldDef } from '../../channeldef';\nimport { isAggregate } from '../../encoding';\nimport * as log from '../../log';\nimport { AREA, BAR, CIRCLE, IMAGE, isMarkDef, LINE, POINT, RECT, RULE, SQUARE, TEXT, TICK } from '../../mark';\nimport { QUANTITATIVE, TEMPORAL } from '../../type';\nimport { contains, getFirstDefined } from '../../util';\nimport { getMarkConfig } from '../common';\nexport function normalizeMarkDef(mark, encoding, config, { graticule }) {\n    const markDef = isMarkDef(mark) ? Object.assign({}, mark) : { type: mark };\n    // set orient, which can be overridden by rules as sometimes the specified orient is invalid.\n    const specifiedOrient = markDef.orient || getMarkConfig('orient', markDef, config);\n    markDef.orient = orient(markDef.type, encoding, specifiedOrient);\n    if (specifiedOrient !== undefined && specifiedOrient !== markDef.orient) {\n        log.warn(log.message.orientOverridden(markDef.orient, specifiedOrient));\n    }\n    // set opacity and filled if not specified in mark config\n    const specifiedOpacity = getFirstDefined(markDef.opacity, getMarkConfig('opacity', markDef, config));\n    if (specifiedOpacity === undefined) {\n        markDef.opacity = opacity(markDef.type, encoding);\n    }\n    const specifiedFilled = markDef.filled;\n    if (specifiedFilled === undefined) {\n        markDef.filled = graticule ? false : filled(markDef, config);\n    }\n    // set cursor, which should be pointer if href channel is present unless otherwise specified\n    const specifiedCursor = markDef.cursor || getMarkConfig('cursor', markDef, config);\n    if (specifiedCursor === undefined) {\n        markDef.cursor = cursor(markDef, encoding, config);\n    }\n    return markDef;\n}\nfunction cursor(markDef, encoding, config) {\n    if (encoding.href || markDef.href || getMarkConfig('href', markDef, config)) {\n        return 'pointer';\n    }\n    return markDef.cursor;\n}\nfunction opacity(mark, encoding) {\n    if (contains([POINT, TICK, CIRCLE, SQUARE], mark)) {\n        // point-based marks\n        if (!isAggregate(encoding)) {\n            return 0.7;\n        }\n    }\n    return undefined;\n}\nfunction filled(markDef, config) {\n    const filledConfig = getMarkConfig('filled', markDef, config);\n    const mark = markDef.type;\n    return getFirstDefined(filledConfig, mark !== POINT && mark !== LINE && mark !== RULE);\n}\nfunction orient(mark, encoding, specifiedOrient) {\n    switch (mark) {\n        case POINT:\n        case CIRCLE:\n        case SQUARE:\n        case TEXT:\n        case RECT:\n        case IMAGE:\n            // orient is meaningless for these marks.\n            return undefined;\n    }\n    const { x, y, x2, y2 } = encoding;\n    switch (mark) {\n        case BAR:\n            if (isFieldDef(x) && (isBinned(x.bin) || (isFieldDef(y) && y.aggregate && !x.aggregate))) {\n                return 'vertical';\n            }\n            if (isFieldDef(y) && (isBinned(y.bin) || (isFieldDef(x) && x.aggregate && !y.aggregate))) {\n                return 'horizontal';\n            }\n            if (y2 || x2) {\n                // Ranged bar does not always have clear orientation, so we allow overriding\n                if (specifiedOrient) {\n                    return specifiedOrient;\n                }\n                // If y is range and x is non-range, non-bin Q, y is likely a prebinned field\n                if (!x2 && isFieldDef(x) && x.type === QUANTITATIVE && !isBinning(x.bin)) {\n                    return 'horizontal';\n                }\n                // If x is range and y is non-range, non-bin Q, x is likely a prebinned field\n                if (!y2 && isFieldDef(y) && y.type === QUANTITATIVE && !isBinning(y.bin)) {\n                    return 'vertical';\n                }\n            }\n        // falls through\n        case RULE:\n            // return undefined for line segment rule and bar with both axis ranged\n            if (x2 && y2) {\n                return undefined;\n            }\n        // falls through\n        case AREA:\n            // If there are range for both x and y, y (vertical) has higher precedence.\n            if (y2) {\n                if (isFieldDef(y) && isBinned(y.bin)) {\n                    return 'horizontal';\n                }\n                else {\n                    return 'vertical';\n                }\n            }\n            else if (x2) {\n                if (isFieldDef(x) && isBinned(x.bin)) {\n                    return 'vertical';\n                }\n                else {\n                    return 'horizontal';\n                }\n            }\n            else if (mark === RULE) {\n                if (x && !y) {\n                    return 'vertical';\n                }\n                else if (y && !x) {\n                    return 'horizontal';\n                }\n            }\n        // falls through\n        case LINE:\n        case TICK: {\n            // Tick is opposite to bar, line, area and never have ranged mark.\n            const xIsContinuous = isFieldDef(x) && isContinuous(x);\n            const yIsContinuous = isFieldDef(y) && isContinuous(y);\n            if (xIsContinuous && !yIsContinuous) {\n                return mark !== 'tick' ? 'horizontal' : 'vertical';\n            }\n            else if (!xIsContinuous && yIsContinuous) {\n                return mark !== 'tick' ? 'vertical' : 'horizontal';\n            }\n            else if (xIsContinuous && yIsContinuous) {\n                const xDef = x; // we can cast here since they are surely fieldDef\n                const yDef = y;\n                const xIsTemporal = xDef.type === TEMPORAL;\n                const yIsTemporal = yDef.type === TEMPORAL;\n                // temporal without timeUnit is considered continuous, but better serves as dimension\n                if (xIsTemporal && !yIsTemporal) {\n                    return mark !== 'tick' ? 'vertical' : 'horizontal';\n                }\n                else if (!xIsTemporal && yIsTemporal) {\n                    return mark !== 'tick' ? 'horizontal' : 'vertical';\n                }\n                if (!xDef.aggregate && yDef.aggregate) {\n                    return mark !== 'tick' ? 'vertical' : 'horizontal';\n                }\n                else if (xDef.aggregate && !yDef.aggregate) {\n                    return mark !== 'tick' ? 'horizontal' : 'vertical';\n                }\n                if (specifiedOrient) {\n                    // When ambiguous, use user specified one.\n                    return specifiedOrient;\n                }\n                return 'vertical';\n            }\n            else {\n                // Discrete x Discrete case\n                if (specifiedOrient) {\n                    // When ambiguous, use user specified one.\n                    return specifiedOrient;\n                }\n                return undefined;\n            }\n        }\n    }\n    return 'vertical';\n}\n//# sourceMappingURL=init.js.map","import { isArray } from 'vega-util';\nimport { isFieldDef, isValueDef, vgField } from '../../channeldef';\nimport { MAIN } from '../../data';\nimport { isAggregate, pathGroupingFields } from '../../encoding';\nimport { AREA, isPathMark, LINE, TRAIL } from '../../mark';\nimport { isSortByEncoding, isSortField } from '../../sort';\nimport { contains, getFirstDefined, isNullOrFalse } from '../../util';\nimport { getMarkConfig, getStyles, sortParams } from '../common';\nimport { area } from './area';\nimport { bar } from './bar';\nimport { geoshape } from './geoshape';\nimport { image } from './image';\nimport { line, trail } from './line';\nimport { circle, point, square } from './point';\nimport { rect } from './rect';\nimport { rule } from './rule';\nimport { text } from './text';\nimport { tick } from './tick';\nconst markCompiler = {\n    area,\n    bar,\n    circle,\n    geoshape,\n    image,\n    line,\n    point,\n    rect,\n    rule,\n    square,\n    text,\n    tick,\n    trail\n};\nexport function parseMarkGroups(model) {\n    if (contains([LINE, AREA, TRAIL], model.mark)) {\n        return parsePathMark(model);\n    }\n    else {\n        return getMarkGroups(model);\n    }\n}\nconst FACETED_PATH_PREFIX = 'faceted_path_';\nfunction parsePathMark(model) {\n    const details = pathGroupingFields(model.mark, model.encoding);\n    const pathMarks = getMarkGroups(model, {\n        // If has subfacet for line/area group, need to use faceted data from below.\n        fromPrefix: details.length > 0 ? FACETED_PATH_PREFIX : ''\n    });\n    if (details.length > 0) {\n        // have level of details - need to facet line into subgroups\n        // TODO: for non-stacked plot, map order to zindex. (Maybe rename order for layer to zindex?)\n        return [\n            {\n                name: model.getName('pathgroup'),\n                type: 'group',\n                from: {\n                    facet: {\n                        name: FACETED_PATH_PREFIX + model.requestDataName(MAIN),\n                        data: model.requestDataName(MAIN),\n                        groupby: details\n                    }\n                },\n                encode: {\n                    update: {\n                        width: { field: { group: 'width' } },\n                        height: { field: { group: 'height' } }\n                    }\n                },\n                marks: pathMarks\n            }\n        ];\n    }\n    else {\n        return pathMarks;\n    }\n}\nexport function getSort(model) {\n    const { encoding, stack, mark, markDef, config } = model;\n    const order = encoding.order;\n    if ((!isArray(order) && isValueDef(order) && isNullOrFalse(order.value)) ||\n        ((!order && isNullOrFalse(markDef.order)) || isNullOrFalse(getMarkConfig('order', markDef, config)))) {\n        return undefined;\n    }\n    else if ((isArray(order) || isFieldDef(order)) && !stack) {\n        // Sort by the order field if it is specified and the field is not stacked. (For stacked field, order specify stack order.)\n        return sortParams(order, { expr: 'datum' });\n    }\n    else if (isPathMark(mark)) {\n        // For both line and area, we sort values based on dimension by default\n        const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';\n        const dimensionChannelDef = encoding[dimensionChannel];\n        if (isFieldDef(dimensionChannelDef)) {\n            const s = dimensionChannelDef.sort;\n            if (isArray(s)) {\n                return {\n                    field: vgField(dimensionChannelDef, { prefix: dimensionChannel, suffix: 'sort_index', expr: 'datum' })\n                };\n            }\n            else if (isSortField(s)) {\n                return {\n                    field: vgField({\n                        // FIXME: this op might not already exist?\n                        // FIXME: what if dimensionChannel (x or y) contains custom domain?\n                        aggregate: isAggregate(model.encoding) ? s.op : undefined,\n                        field: s.field\n                    }, { expr: 'datum' })\n                };\n            }\n            else if (isSortByEncoding(s)) {\n                const fieldDefToSort = model.fieldDef(s.encoding);\n                return {\n                    field: vgField(fieldDefToSort, { expr: 'datum' }),\n                    order: s.order\n                };\n            }\n            else {\n                return {\n                    field: vgField(dimensionChannelDef, {\n                        // For stack with imputation, we only have bin_mid\n                        binSuffix: model.stack && model.stack.impute ? 'mid' : undefined,\n                        expr: 'datum'\n                    })\n                };\n            }\n        }\n        return undefined;\n    }\n    return undefined;\n}\nfunction getMarkGroups(model, opt = { fromPrefix: '' }) {\n    const mark = model.mark;\n    const clip = getFirstDefined(model.markDef.clip, scaleClip(model), projectionClip(model));\n    const style = getStyles(model.markDef);\n    const key = model.encoding.key;\n    const sort = getSort(model);\n    const postEncodingTransform = markCompiler[mark].postEncodingTransform\n        ? markCompiler[mark].postEncodingTransform(model)\n        : null;\n    return [\n        Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: model.getName('marks'), type: markCompiler[mark].vgMark }, (clip ? { clip: true } : {})), (style ? { style } : {})), (key ? { key: key.field } : {})), (sort ? { sort } : {})), { from: { data: opt.fromPrefix + model.requestDataName(MAIN) }, encode: {\n                update: markCompiler[mark].encodeEntry(model)\n            } }), (postEncodingTransform\n            ? {\n                transform: postEncodingTransform\n            }\n            : {}))\n    ];\n}\n/**\n * If scales are bound to interval selections, we want to automatically clip\n * marks to account for panning/zooming interactions. We identify bound scales\n * by the domainRaw property, which gets added during scale parsing.\n */\nfunction scaleClip(model) {\n    const xScale = model.getScaleComponent('x');\n    const yScale = model.getScaleComponent('y');\n    return (xScale && xScale.get('domainRaw')) || (yScale && yScale.get('domainRaw')) ? true : undefined;\n}\n/**\n * If we use a custom projection with auto-fitting to the geodata extent,\n * we need to clip to ensure the chart size doesn't explode.\n */\nfunction projectionClip(model) {\n    const projection = model.component.projection;\n    return projection && !projection.isFit ? true : undefined;\n}\n//# sourceMappingURL=mark.js.map","import * as mixins from './mixins';\nexport const area = {\n    vgMark: 'area',\n    encodeEntry: (model) => {\n        return Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            orient: 'include',\n            size: 'ignore'\n        })), mixins.pointOrRangePosition('x', model, {\n            defaultRef: 'zeroOrMin',\n            defaultRef2: 'zeroOrMin',\n            range: model.markDef.orient === 'horizontal'\n        })), mixins.pointOrRangePosition('y', model, {\n            defaultRef: 'zeroOrMin',\n            defaultRef2: 'zeroOrMin',\n            range: model.markDef.orient === 'vertical'\n        })), mixins.defined(model));\n    }\n};\n//# sourceMappingURL=area.js.map","import * as mixins from './mixins';\nimport { rectPosition } from './rect';\nexport const bar = {\n    vgMark: 'rect',\n    encodeEntry: (model) => {\n        return Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            orient: 'ignore',\n            size: 'ignore'\n        })), rectPosition(model, 'x', 'bar')), rectPosition(model, 'y', 'bar'));\n    }\n};\n//# sourceMappingURL=bar.js.map","import { isFieldDef, vgField } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport * as mixins from './mixins';\nexport const geoshape = {\n    vgMark: 'shape',\n    encodeEntry: (model) => {\n        return Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            size: 'ignore',\n            orient: 'ignore'\n        }));\n    },\n    postEncodingTransform: (model) => {\n        const { encoding } = model;\n        const shapeDef = encoding.shape;\n        const transform = Object.assign({ type: 'geoshape', projection: model.projectionName() }, (shapeDef && isFieldDef(shapeDef) && shapeDef.type === GEOJSON\n            ? { field: vgField(shapeDef, { expr: 'datum' }) }\n            : {}));\n        return [transform];\n    }\n};\n//# sourceMappingURL=geoshape.js.map","import * as mixins from './mixins';\nimport { rectPosition } from './rect';\nexport const image = {\n    vgMark: 'image',\n    encodeEntry: (model) => {\n        return Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'ignore',\n            orient: 'ignore',\n            size: 'ignore'\n        })), rectPosition(model, 'x', 'image')), rectPosition(model, 'y', 'image')), mixins.text(model, 'url'));\n    }\n};\n//# sourceMappingURL=image.js.map","import * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const rule = {\n    vgMark: 'rule',\n    encodeEntry: (model) => {\n        const { markDef, width, height } = model;\n        const orient = markDef.orient;\n        if (!model.encoding.x && !model.encoding.y && !model.encoding.latitude && !model.encoding.longitude) {\n            // Show nothing if we have none of x, y, lat, and long.\n            return {};\n        }\n        return Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            orient: 'ignore',\n            size: 'ignore'\n        })), mixins.pointOrRangePosition('x', model, {\n            defaultRef: orient === 'horizontal' ? 'zeroOrMin' : ref.mid(width),\n            defaultRef2: 'zeroOrMax',\n            range: orient !== 'vertical' // include x2 for horizontal or line segment rule\n        })), mixins.pointOrRangePosition('y', model, {\n            defaultRef: orient === 'vertical' ? 'zeroOrMin' : ref.mid(height),\n            defaultRef2: 'zeroOrMax',\n            range: orient !== 'horizontal' // include y2 for vertical or line segment rule\n        })), mixins.nonPosition('size', model, {\n            vgChannel: 'strokeWidth' // VL's rule size is strokeWidth\n        }));\n    }\n};\n//# sourceMappingURL=rule.js.map","import { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const text = {\n    vgMark: 'text',\n    encodeEntry: (model) => {\n        const { config, encoding, width, height } = model;\n        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'include',\n            baseline: 'include',\n            color: 'include',\n            size: 'ignore',\n            orient: 'ignore'\n        })), mixins.pointPosition('x', model, ref.mid(width))), mixins.pointPosition('y', model, ref.mid(height))), mixins.text(model)), mixins.nonPosition('size', model, {\n            vgChannel: 'fontSize' // VL's text size is fontSize\n        })), mixins.valueIfDefined('align', align(model.markDef, encoding, config))), mixins.valueIfDefined('baseline', baseline(model.markDef, encoding, config)));\n    }\n};\nfunction align(markDef, encoding, config) {\n    const a = markDef.align || getMarkConfig('align', markDef, config);\n    if (a === undefined) {\n        return 'center';\n    }\n    // If there is a config, Vega-parser will process this already.\n    return undefined;\n}\nfunction baseline(markDef, encoding, config) {\n    const b = markDef.baseline || getMarkConfig('baseline', markDef, config);\n    if (b === undefined) {\n        return 'middle';\n    }\n    // If there is a config, Vega-parser will process this already.\n    return undefined;\n}\n//# sourceMappingURL=text.js.map","import { isNumber } from 'vega-util';\nimport { getViewConfigDiscreteStep } from '../../config';\nimport { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const tick = {\n    vgMark: 'rect',\n    encodeEntry: (model) => {\n        const { config, markDef, width, height } = model;\n        const orient = markDef.orient;\n        const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n        const vgThicknessChannel = orient === 'horizontal' ? 'height' : 'width';\n        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            orient: 'ignore',\n            size: 'ignore'\n        })), mixins.pointPosition('x', model, ref.mid(width), { vgChannel: 'xc' })), mixins.pointPosition('y', model, ref.mid(height), { vgChannel: 'yc' })), mixins.nonPosition('size', model, {\n            defaultValue: defaultSize(model),\n            vgChannel: vgSizeChannel\n        })), { [vgThicknessChannel]: { value: getFirstDefined(markDef.thickness, config.tick.thickness) } });\n    }\n};\nfunction defaultSize(model) {\n    const { config, markDef } = model;\n    const { orient } = markDef;\n    const vgSizeChannel = orient === 'horizontal' ? 'width' : 'height';\n    const scale = model.getScaleComponent(orient === 'horizontal' ? 'x' : 'y');\n    const markPropOrConfig = getFirstDefined(markDef[vgSizeChannel], markDef.size, getMarkConfig('size', markDef, config, { vgChannel: vgSizeChannel }), config.tick.bandSize);\n    if (markPropOrConfig !== undefined) {\n        return markPropOrConfig;\n    }\n    else {\n        const scaleRange = scale ? scale.get('range') : undefined;\n        if (scaleRange && isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n            return (scaleRange.step * 3) / 4;\n        }\n        const defaultViewStep = getViewConfigDiscreteStep(config.view, vgSizeChannel);\n        return (defaultViewStep * 3) / 4;\n    }\n}\n//# sourceMappingURL=tick.js.map","import { isArray } from 'vega-util';\nimport * as log from '../log';\nimport { BaseConcatModel } from './baseconcat';\nimport { buildModel } from './buildmodel';\nimport { parseRepeatLayoutSize } from './layoutsize/parse';\nexport class RepeatModel extends BaseConcatModel {\n    constructor(spec, parent, parentGivenName, repeatValues, config) {\n        super(spec, 'repeat', parent, parentGivenName, config, repeatValues, spec.resolve);\n        if (spec.resolve && spec.resolve.axis && (spec.resolve.axis.x === 'shared' || spec.resolve.axis.y === 'shared')) {\n            log.warn(log.message.REPEAT_CANNOT_SHARE_AXIS);\n        }\n        this.repeat = spec.repeat;\n        this.children = this._initChildren(spec, this.repeat, repeatValues, config);\n    }\n    _initChildren(spec, repeat, repeater, config) {\n        const children = [];\n        const row = (!isArray(repeat) && repeat.row) || [repeater ? repeater.row : null];\n        const column = (!isArray(repeat) && repeat.column) || [repeater ? repeater.column : null];\n        const repeatValues = (isArray(repeat) && repeat) || [repeater ? repeater.repeat : null];\n        // cross product\n        for (const repeatValue of repeatValues) {\n            for (const rowValue of row) {\n                for (const columnValue of column) {\n                    const name = (repeatValue ? `__repeat_repeat_${repeatValue}` : '') +\n                        (rowValue ? `__repeat_row_${rowValue}` : '') +\n                        (columnValue ? `__repeat_column_${columnValue}` : '');\n                    const childRepeat = {\n                        repeat: repeatValue,\n                        row: rowValue,\n                        column: columnValue\n                    };\n                    children.push(buildModel(spec.spec, this, this.getName('child' + name), undefined, childRepeat, config));\n                }\n            }\n        }\n        return children;\n    }\n    parseLayoutSize() {\n        parseRepeatLayoutSize(this);\n    }\n    assembleDefaultLayout() {\n        const { repeat } = this;\n        const columns = isArray(repeat) ? undefined : repeat.column ? repeat.column.length : 1;\n        return Object.assign(Object.assign({}, (columns ? { columns } : {})), { bounds: 'full', align: 'all' });\n    }\n}\n//# sourceMappingURL=repeat.js.map","import { normalizeLogicalOperand } from './logical';\nimport { normalizePredicate } from './predicate';\nexport function isFilter(t) {\n    return t['filter'] !== undefined;\n}\nexport function isImputeSequence(t) {\n    return t && t['stop'] !== undefined;\n}\nexport function isPivot(t) {\n    return t['pivot'] !== undefined;\n}\nexport function isDensity(t) {\n    return t['density'] !== undefined;\n}\nexport function isRegression(t) {\n    return t['regression'] !== undefined;\n}\nexport function isLoess(t) {\n    return t['loess'] !== undefined;\n}\nexport function isLookup(t) {\n    return t['lookup'] !== undefined;\n}\nexport function isSample(t) {\n    return t['sample'] !== undefined;\n}\nexport function isWindow(t) {\n    return t['window'] !== undefined;\n}\nexport function isJoinAggregate(t) {\n    return t['joinaggregate'] !== undefined;\n}\nexport function isFlatten(t) {\n    return t['flatten'] !== undefined;\n}\nexport function isCalculate(t) {\n    return t['calculate'] !== undefined;\n}\nexport function isBin(t) {\n    return !!t['bin'];\n}\nexport function isImpute(t) {\n    return t['impute'] !== undefined;\n}\nexport function isTimeUnit(t) {\n    return t['timeUnit'] !== undefined;\n}\nexport function isAggregate(t) {\n    return t['aggregate'] !== undefined;\n}\nexport function isStack(t) {\n    return t['stack'] !== undefined;\n}\nexport function isFold(t) {\n    return t['fold'] !== undefined;\n}\nexport function normalizeTransform(transform) {\n    return transform.map(t => {\n        if (isFilter(t)) {\n            return {\n                filter: normalizeLogicalOperand(t.filter, normalizePredicate)\n            };\n        }\n        return t;\n    });\n}\n//# sourceMappingURL=transform.js.map","/*\n * Constants and utilities for encoding channels (Visual variables)\n * such as 'x', 'y', 'color'.\n */\nimport { __rest } from \"tslib\";\nimport { keys } from './util';\n// Facet\nexport const ROW = 'row';\nexport const COLUMN = 'column';\nexport const FACET = 'facet';\n// Position\nexport const X = 'x';\nexport const Y = 'y';\nexport const X2 = 'x2';\nexport const Y2 = 'y2';\n// Geo Position\nexport const LATITUDE = 'latitude';\nexport const LONGITUDE = 'longitude';\nexport const LATITUDE2 = 'latitude2';\nexport const LONGITUDE2 = 'longitude2';\n// Mark property with scale\nexport const COLOR = 'color';\nexport const FILL = 'fill';\nexport const STROKE = 'stroke';\nexport const SHAPE = 'shape';\nexport const SIZE = 'size';\nexport const OPACITY = 'opacity';\nexport const FILLOPACITY = 'fillOpacity';\nexport const STROKEOPACITY = 'strokeOpacity';\nexport const STROKEWIDTH = 'strokeWidth';\n// Non-scale channel\nexport const TEXT = 'text';\nexport const ORDER = 'order';\nexport const DETAIL = 'detail';\nexport const KEY = 'key';\nexport const TOOLTIP = 'tooltip';\nexport const HREF = 'href';\nexport const URL = 'url';\nconst POSITION_CHANNEL_INDEX = {\n    x: 1,\n    y: 1,\n    x2: 1,\n    y2: 1\n};\nexport function isPositionChannel(c) {\n    return c in POSITION_CHANNEL_INDEX;\n}\nexport function getPositionChannelFromLatLong(channel) {\n    switch (channel) {\n        case LATITUDE:\n            return 'y';\n        case LATITUDE2:\n            return 'y2';\n        case LONGITUDE:\n            return 'x';\n        case LONGITUDE2:\n            return 'x2';\n    }\n}\nconst GEOPOSITION_CHANNEL_INDEX = {\n    longitude: 1,\n    longitude2: 1,\n    latitude: 1,\n    latitude2: 1\n};\nexport function isGeoPositionChannel(c) {\n    return c in GEOPOSITION_CHANNEL_INDEX;\n}\nexport const GEOPOSITION_CHANNELS = keys(GEOPOSITION_CHANNEL_INDEX);\nconst UNIT_CHANNEL_INDEX = Object.assign(Object.assign(Object.assign({}, POSITION_CHANNEL_INDEX), GEOPOSITION_CHANNEL_INDEX), { \n    // color\n    color: 1, fill: 1, stroke: 1, \n    // other non-position with scale\n    opacity: 1, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, size: 1, shape: 1, \n    // channels without scales\n    order: 1, text: 1, detail: 1, key: 1, tooltip: 1, href: 1, url: 1 });\nexport function isColorChannel(channel) {\n    return channel === 'color' || channel === 'fill' || channel === 'stroke';\n}\nconst FACET_CHANNEL_INDEX = {\n    row: 1,\n    column: 1,\n    facet: 1\n};\nexport const FACET_CHANNELS = keys(FACET_CHANNEL_INDEX);\nconst CHANNEL_INDEX = Object.assign(Object.assign({}, UNIT_CHANNEL_INDEX), FACET_CHANNEL_INDEX);\nexport const CHANNELS = keys(CHANNEL_INDEX);\nconst { order: _o, detail: _d, tooltip: _tt1 } = CHANNEL_INDEX, SINGLE_DEF_CHANNEL_INDEX = __rest(CHANNEL_INDEX, [\"order\", \"detail\", \"tooltip\"]);\nconst { row: _r, column: _c, facet: _f } = SINGLE_DEF_CHANNEL_INDEX, SINGLE_DEF_UNIT_CHANNEL_INDEX = __rest(SINGLE_DEF_CHANNEL_INDEX, [\"row\", \"column\", \"facet\"]);\n/**\n * Channels that cannot have an array of channelDef.\n * model.fieldDef, getFieldDef only work for these channels.\n *\n * (The only two channels that can have an array of channelDefs are \"detail\" and \"order\".\n * Since there can be multiple fieldDefs for detail and order, getFieldDef/model.fieldDef\n * are not applicable for them.  Similarly, selection projection won't work with \"detail\" and \"order\".)\n */\nexport const SINGLE_DEF_CHANNELS = keys(SINGLE_DEF_CHANNEL_INDEX);\nexport const SINGLE_DEF_UNIT_CHANNELS = keys(SINGLE_DEF_UNIT_CHANNEL_INDEX);\nexport function isSingleDefUnitChannel(str) {\n    return !!SINGLE_DEF_UNIT_CHANNEL_INDEX[str];\n}\nexport function isChannel(str) {\n    return !!CHANNEL_INDEX[str];\n}\nexport const SECONDARY_RANGE_CHANNEL = ['x2', 'y2', 'latitude2', 'longitude2'];\nexport function isSecondaryRangeChannel(c) {\n    const main = getMainRangeChannel(c);\n    return main !== c;\n}\n/**\n * Get the main channel for a range channel. E.g. `x` for `x2`.\n */\nexport function getMainRangeChannel(channel) {\n    switch (channel) {\n        case 'x2':\n            return 'x';\n        case 'y2':\n            return 'y';\n        case 'latitude2':\n            return 'latitude';\n        case 'longitude2':\n            return 'longitude';\n    }\n    return channel;\n}\n/**\n * Get the main channel for a range channel. E.g. `x` for `x2`.\n */\nexport function getSecondaryRangeChannel(channel) {\n    switch (channel) {\n        case 'x':\n            return 'x2';\n        case 'y':\n            return 'y2';\n        case 'latitude':\n            return 'latitude2';\n        case 'longitude':\n            return 'longitude2';\n    }\n    return undefined;\n}\n// CHANNELS without COLUMN, ROW\nexport const UNIT_CHANNELS = keys(UNIT_CHANNEL_INDEX);\n// NONPOSITION_CHANNELS = UNIT_CHANNELS without X, Y, X2, Y2;\nconst { x: _x, y: _y, \n// x2 and y2 share the same scale as x and y\nx2: _x2, y2: _y2, latitude: _latitude, longitude: _longitude, latitude2: _latitude2, longitude2: _longitude2 } = UNIT_CHANNEL_INDEX, \n// The rest of unit channels then have scale\nNONPOSITION_CHANNEL_INDEX = __rest(UNIT_CHANNEL_INDEX, [\"x\", \"y\", \"x2\", \"y2\", \"latitude\", \"longitude\", \"latitude2\", \"longitude2\"]);\nexport const NONPOSITION_CHANNELS = keys(NONPOSITION_CHANNEL_INDEX);\n// POSITION_SCALE_CHANNELS = X and Y;\nconst POSITION_SCALE_CHANNEL_INDEX = { x: 1, y: 1 };\nexport const POSITION_SCALE_CHANNELS = keys(POSITION_SCALE_CHANNEL_INDEX);\nexport function getSizeType(channel) {\n    return channel === 'x' ? 'width' : 'height';\n}\nexport function getPositionScaleChannel(sizeType) {\n    return sizeType === 'width' ? 'x' : 'y';\n}\n// NON_POSITION_SCALE_CHANNEL = SCALE_CHANNELS without X, Y\nconst { \n// x2 and y2 share the same scale as x and y\n// text and tooltip have format instead of scale,\n// href has neither format, nor scale\ntext: _t, tooltip: _tt, href: _hr, url: _u, \n// detail and order have no scale\ndetail: _dd, key: _k, order: _oo } = NONPOSITION_CHANNEL_INDEX, NONPOSITION_SCALE_CHANNEL_INDEX = __rest(NONPOSITION_CHANNEL_INDEX, [\"text\", \"tooltip\", \"href\", \"url\", \"detail\", \"key\", \"order\"]);\nexport const NONPOSITION_SCALE_CHANNELS = keys(NONPOSITION_SCALE_CHANNEL_INDEX);\nexport function isNonPositionScaleChannel(channel) {\n    return !!NONPOSITION_CHANNEL_INDEX[channel];\n}\n/**\n * @returns whether Vega supports legends for a particular channel\n */\nexport function supportLegend(channel) {\n    switch (channel) {\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case SIZE:\n        case SHAPE:\n        case OPACITY:\n        case STROKEWIDTH:\n            return true;\n        case FILLOPACITY:\n        case STROKEOPACITY:\n            return false;\n    }\n}\n// Declare SCALE_CHANNEL_INDEX\nconst SCALE_CHANNEL_INDEX = Object.assign(Object.assign({}, POSITION_SCALE_CHANNEL_INDEX), NONPOSITION_SCALE_CHANNEL_INDEX);\n/** List of channels with scales */\nexport const SCALE_CHANNELS = keys(SCALE_CHANNEL_INDEX);\nexport function isScaleChannel(channel) {\n    return !!SCALE_CHANNEL_INDEX[channel];\n}\n/**\n * Return whether a channel supports a particular mark type.\n * @param channel  channel name\n * @param mark the mark type\n * @return whether the mark supports the channel\n */\nexport function supportMark(channel, mark) {\n    return getSupportedMark(channel)[mark];\n}\nconst ALL_MARKS = {\n    // all marks\n    area: 'always',\n    bar: 'always',\n    circle: 'always',\n    geoshape: 'always',\n    image: 'always',\n    line: 'always',\n    rule: 'always',\n    point: 'always',\n    rect: 'always',\n    square: 'always',\n    trail: 'always',\n    text: 'always',\n    tick: 'always'\n};\nconst { geoshape: _g } = ALL_MARKS, ALL_MARKS_EXCEPT_GEOSHAPE = __rest(ALL_MARKS, [\"geoshape\"]);\n/**\n * Return a dictionary showing whether a channel supports mark type.\n * @param channel\n * @return A dictionary mapping mark types to 'always', 'binned', or undefined\n */\nfunction getSupportedMark(channel) {\n    switch (channel) {\n        case COLOR:\n        case FILL:\n        case STROKE:\n        // falls through\n        case DETAIL:\n        case KEY:\n        case TOOLTIP:\n        case HREF:\n        case ORDER: // TODO: revise (order might not support rect, which is not stackable?)\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n        case STROKEWIDTH:\n        // falls through\n        case FACET:\n        case ROW: // falls through\n        case COLUMN:\n            return ALL_MARKS;\n        case X:\n        case Y:\n        case LATITUDE:\n        case LONGITUDE:\n            // all marks except geoshape. geoshape does not use X, Y -- it uses a projection\n            return ALL_MARKS_EXCEPT_GEOSHAPE;\n        case X2:\n        case Y2:\n        case LATITUDE2:\n        case LONGITUDE2:\n            return {\n                area: 'always',\n                bar: 'always',\n                image: 'always',\n                rect: 'always',\n                rule: 'always',\n                circle: 'binned',\n                point: 'binned',\n                square: 'binned',\n                tick: 'binned',\n                line: 'binned',\n                trail: 'binned'\n            };\n        case SIZE:\n            return {\n                point: 'always',\n                tick: 'always',\n                rule: 'always',\n                circle: 'always',\n                square: 'always',\n                bar: 'always',\n                text: 'always',\n                line: 'always',\n                trail: 'always'\n            };\n        case SHAPE:\n            return { point: 'always', geoshape: 'always' };\n        case TEXT:\n            return { text: 'always' };\n        case URL:\n            return { image: 'always' };\n    }\n}\nexport function rangeType(channel) {\n    switch (channel) {\n        case X:\n        case Y:\n        case SIZE:\n        case STROKEWIDTH:\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n        // X2 and Y2 use X and Y scales, so they similarly have continuous range. [falls through]\n        case X2:\n        case Y2:\n            return undefined;\n        case FACET:\n        case ROW:\n        case COLUMN:\n        case SHAPE:\n        // TEXT, TOOLTIP, URL, and HREF have no scale but have discrete output [falls through]\n        case TEXT:\n        case TOOLTIP:\n        case HREF:\n        case URL:\n            return 'discrete';\n        // Color can be either continuous or discrete, depending on scale type.\n        case COLOR:\n        case FILL:\n        case STROKE:\n            return 'flexible';\n        // No scale, no range type.\n        case LATITUDE:\n        case LONGITUDE:\n        case LATITUDE2:\n        case LONGITUDE2:\n        case DETAIL:\n        case KEY:\n        case ORDER:\n            return undefined;\n    }\n}\n//# sourceMappingURL=channel.js.map","import { isObject } from 'vega-util';\nimport { getAllCompositeMarks } from './compositemark';\nimport { VL_ONLY_GUIDE_CONFIG, VL_ONLY_LEGEND_CONFIG } from './guide';\nimport { defaultLegendConfig } from './legend';\nimport * as mark from './mark';\nimport { PRIMITIVE_MARKS, VL_ONLY_MARK_CONFIG_PROPERTIES, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX } from './mark';\nimport { defaultScaleConfig } from './scale';\nimport { defaultConfig as defaultSelectionConfig } from './selection';\nimport { DEFAULT_SPACING, isStep } from './spec/base';\nimport { extractTitleConfig } from './title';\nimport { duplicate, getFirstDefined, keys, mergeDeep } from './util';\nexport function getViewConfigContinuousSize(viewConfig, channel) {\n    return viewConfig[channel === 'width' ? 'continuousWidth' : 'continuousHeight'];\n}\nexport function getViewConfigDiscreteStep(viewConfig, channel) {\n    const size = getViewConfigDiscreteSize(viewConfig, channel);\n    return isStep(size) ? size.step : DEFAULT_STEP;\n}\nexport function getViewConfigDiscreteSize(viewConfig, channel) {\n    const size = viewConfig[channel === 'width' ? 'discreteWidth' : 'discreteHeight'];\n    return getFirstDefined(size, { step: viewConfig.step });\n}\nexport const DEFAULT_STEP = 20;\nexport const defaultViewConfig = {\n    continuousWidth: 200,\n    continuousHeight: 200,\n    step: DEFAULT_STEP\n};\nexport function isVgScheme(rangeConfig) {\n    return rangeConfig && !!rangeConfig['scheme'];\n}\nexport const defaultConfig = {\n    padding: 5,\n    timeFormat: '%b %d, %Y',\n    countTitle: 'Count of Records',\n    view: defaultViewConfig,\n    mark: mark.defaultMarkConfig,\n    area: {},\n    bar: mark.defaultBarConfig,\n    circle: {},\n    geoshape: {},\n    image: {},\n    line: {},\n    point: {},\n    rect: mark.defaultRectConfig,\n    rule: { color: 'black' },\n    square: {},\n    text: { color: 'black' },\n    tick: mark.defaultTickConfig,\n    trail: {},\n    boxplot: {\n        size: 14,\n        extent: 1.5,\n        box: {},\n        median: { color: 'white' },\n        outliers: {},\n        rule: {},\n        ticks: null\n    },\n    errorbar: {\n        center: 'mean',\n        rule: true,\n        ticks: false\n    },\n    errorband: {\n        band: {\n            opacity: 0.3\n        },\n        borders: false\n    },\n    scale: defaultScaleConfig,\n    projection: {},\n    axis: {},\n    axisX: {},\n    axisY: {},\n    axisLeft: {},\n    axisRight: {},\n    axisTop: {},\n    axisBottom: {},\n    axisBand: {},\n    legend: defaultLegendConfig,\n    header: { titlePadding: 10, labelPadding: 10 },\n    headerColumn: {},\n    headerRow: {},\n    headerFacet: {},\n    selection: defaultSelectionConfig,\n    style: {},\n    title: {},\n    facet: { spacing: DEFAULT_SPACING },\n    repeat: { spacing: DEFAULT_SPACING },\n    concat: { spacing: DEFAULT_SPACING }\n};\nexport function initConfig(config) {\n    return mergeDeep(duplicate(defaultConfig), config);\n}\nconst MARK_STYLES = ['view', ...PRIMITIVE_MARKS];\nconst VL_ONLY_CONFIG_PROPERTIES = [\n    'padding',\n    'facet',\n    'concat',\n    'repeat',\n    'numberFormat',\n    'timeFormat',\n    'countTitle',\n    'header',\n    'scale',\n    'selection',\n    'overlay' // FIXME: Redesign and unhide this\n];\nconst VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = Object.assign({ view: ['continuousWidth', 'continuousHeight', 'discreteWidth', 'discreteHeight', 'step'] }, VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX);\nexport function stripAndRedirectConfig(config) {\n    config = duplicate(config);\n    for (const prop of VL_ONLY_CONFIG_PROPERTIES) {\n        delete config[prop];\n    }\n    // Remove Vega-Lite only axis/legend config\n    if (config.axis) {\n        for (const prop of VL_ONLY_GUIDE_CONFIG) {\n            delete config.axis[prop];\n        }\n    }\n    if (config.legend) {\n        for (const prop of VL_ONLY_GUIDE_CONFIG) {\n            delete config.legend[prop];\n        }\n        for (const prop of VL_ONLY_LEGEND_CONFIG) {\n            delete config.legend[prop];\n        }\n    }\n    // Remove Vega-Lite only generic mark config\n    if (config.mark) {\n        for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n            delete config.mark[prop];\n        }\n    }\n    for (const markType of MARK_STYLES) {\n        // Remove Vega-Lite-only mark config\n        for (const prop of VL_ONLY_MARK_CONFIG_PROPERTIES) {\n            delete config[markType][prop];\n        }\n        // Remove Vega-Lite only mark-specific config\n        const vlOnlyMarkSpecificConfigs = VL_ONLY_ALL_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX[markType];\n        if (vlOnlyMarkSpecificConfigs) {\n            for (const prop of vlOnlyMarkSpecificConfigs) {\n                delete config[markType][prop];\n            }\n        }\n        // Redirect mark config to config.style so that mark config only affect its own mark type\n        // without affecting other marks that share the same underlying Vega marks.\n        // For example, config.rect should not affect bar marks.\n        redirectConfig(config, markType);\n    }\n    for (const m of getAllCompositeMarks()) {\n        // Clean up the composite mark config as we don't need them in the output specs anymore\n        delete config[m];\n    }\n    // Redirect config.title -- so that title config do not\n    // affect header labels, which also uses `title` directive to implement.\n    redirectConfig(config, 'title', 'group-title');\n    // Remove empty config objects\n    for (const prop in config) {\n        if (isObject(config[prop]) && keys(config[prop]).length === 0) {\n            delete config[prop];\n        }\n    }\n    return keys(config).length > 0 ? config : undefined;\n}\nfunction redirectConfig(config, prop, // string = composite mark\ntoProp, compositeMarkPart) {\n    const propConfig = prop === 'title'\n        ? extractTitleConfig(config.title).mark\n        : compositeMarkPart\n            ? config[prop][compositeMarkPart]\n            : config[prop];\n    if (prop === 'view') {\n        toProp = 'cell'; // View's default style is \"cell\"\n    }\n    const style = Object.assign(Object.assign({}, propConfig), config.style[prop]);\n    // set config.style if it is not an empty object\n    if (keys(style).length > 0) {\n        config.style[toProp || prop] = style;\n    }\n    if (!compositeMarkPart) {\n        // For composite mark, so don't delete the whole config yet as we have to do multiple redirections.\n        delete config[prop];\n    }\n}\n//# sourceMappingURL=config.js.map","import { isArray, isNumber, isObject } from 'vega-util';\nimport { keys } from '../util';\nimport { isConcatSpec } from './concat';\nimport { isFacetMapping, isFacetSpec } from './facet';\nimport { isRepeatSpec } from './repeat';\nexport function isStep(size) {\n    return isObject(size) && size['step'] !== undefined;\n}\nexport const DEFAULT_SPACING = 20;\nconst COMPOSITION_LAYOUT_INDEX = {\n    align: 1,\n    bounds: 1,\n    center: 1,\n    columns: 1,\n    spacing: 1\n};\nconst COMPOSITION_LAYOUT_PROPERTIES = keys(COMPOSITION_LAYOUT_INDEX);\nexport function extractCompositionLayout(spec, specType, config) {\n    const compositionConfig = config[specType];\n    const layout = {};\n    // Apply config first\n    const { spacing: spacingConfig, columns } = compositionConfig;\n    if (spacingConfig !== undefined) {\n        layout.spacing = spacingConfig;\n    }\n    if (columns !== undefined) {\n        if ((isFacetSpec(spec) && !isFacetMapping(spec.facet)) ||\n            (isRepeatSpec(spec) && isArray(spec.repeat)) ||\n            isConcatSpec(spec)) {\n            layout.columns = columns;\n        }\n    }\n    // Then copy properties from the spec\n    for (const prop of COMPOSITION_LAYOUT_PROPERTIES) {\n        if (spec[prop] !== undefined) {\n            if (prop === 'spacing') {\n                const spacing = spec[prop];\n                layout[prop] = isNumber(spacing)\n                    ? spacing\n                    : {\n                        row: spacing.row || spacingConfig,\n                        column: spacing.column || spacingConfig\n                    };\n            }\n            else {\n                layout[prop] = spec[prop];\n            }\n        }\n    }\n    return layout;\n}\n//# sourceMappingURL=base.js.map","/**\n * Vega-Lite's singleton logger utility.\n */\nimport { logger, Warn } from 'vega-util';\nimport * as message_ from './message';\nexport const message = message_;\n/**\n * Main (default) Vega Logger instance for Vega-Lite.\n */\nconst main = logger(Warn);\nlet current = main;\n/**\n * Logger tool for checking if the code throws correct warning.\n */\nexport class LocalLogger {\n    constructor() {\n        this.warns = [];\n        this.infos = [];\n        this.debugs = [];\n    }\n    level() {\n        return this;\n    }\n    warn(...args) {\n        this.warns.push(...args);\n        return this;\n    }\n    info(...args) {\n        this.infos.push(...args);\n        return this;\n    }\n    debug(...args) {\n        this.debugs.push(...args);\n        return this;\n    }\n    error(...args) {\n        throw Error(...args);\n        return this; // @ts-ignore\n    }\n}\nexport function wrap(f) {\n    return () => {\n        current = new LocalLogger();\n        f(current);\n        reset();\n    };\n}\n/**\n * Set the singleton logger to be a custom logger.\n */\nexport function set(newLogger) {\n    current = newLogger;\n    return current;\n}\n/**\n * Reset the main logger to use the default Vega Logger.\n */\nexport function reset() {\n    current = main;\n    return current;\n}\nexport function warn(...args) {\n    current.warn(...args);\n}\nexport function info(...args) {\n    current.info(...args);\n}\nexport function debug(...args) {\n    current.debug(...args);\n}\n//# sourceMappingURL=index.js.map","/**\n * Definition for specifications in Vega-Lite.  In general, there are 3 variants of specs for each type of specs:\n * - Generic specs are generic versions of specs and they are parameterized differently for internal and external specs.\n * - The external specs (no prefix) would allow composite marks, row/column encodings, and mark macros like point/line overlay.\n * - The internal specs (with `Normalized` prefix) would only support primitive marks and support no macros/shortcuts.\n */\nexport { isAnyConcatSpec, isHConcatSpec, isVConcatSpec } from './concat';\nexport { isFacetSpec } from './facet';\nexport { isLayerSpec } from './layer';\nexport { isRepeatSpec } from './repeat';\nexport { isUnitSpec } from './unit';\n//# sourceMappingURL=index.js.map","export function isFacetMapping(f) {\n    return !!f['row'] || !!f['column'];\n}\nexport function isFacetFieldDef(channelDef) {\n    return !!channelDef && !!channelDef['header'];\n}\nexport function isFacetSpec(spec) {\n    return spec['facet'] !== undefined;\n}\n//# sourceMappingURL=facet.js.map","import { __rest } from \"tslib\";\nimport { selector as parseSelector } from 'vega-event-selector';\nimport { identity, isArray, stringValue } from 'vega-util';\nimport { forEachSelection, MODIFY, SELECTION_DOMAIN, STORE, unitName, VL_SELECTION_RESOLVE } from '.';\nimport { dateTimeExpr, isDateTime } from '../../datetime';\nimport { warn } from '../../log';\nimport { accessPathWithDatum, keys, varName } from '../../util';\nimport { isUnitModel } from '../model';\nimport { forEachTransform } from './transforms/transforms';\nexport function assembleInit(init, isExpr = true, wrap = identity) {\n    if (isArray(init)) {\n        const assembled = init.map(v => assembleInit(v, isExpr, wrap));\n        return isExpr ? `[${assembled.join(', ')}]` : assembled;\n    }\n    else if (isDateTime(init)) {\n        return wrap(dateTimeExpr(init, false, !isExpr));\n    }\n    return isExpr ? wrap(JSON.stringify(init)) : init;\n}\nexport function assembleUnitSelectionSignals(model, signals) {\n    forEachSelection(model, (selCmpt, selCompiler) => {\n        const name = selCmpt.name;\n        let modifyExpr = selCompiler.modifyExpr(model, selCmpt);\n        signals.push(...selCompiler.signals(model, selCmpt));\n        forEachTransform(selCmpt, txCompiler => {\n            if (txCompiler.signals) {\n                signals = txCompiler.signals(model, selCmpt, signals);\n            }\n            if (txCompiler.modifyExpr) {\n                modifyExpr = txCompiler.modifyExpr(model, selCmpt, modifyExpr);\n            }\n        });\n        signals.push({\n            name: name + MODIFY,\n            update: `modify(${stringValue(selCmpt.name + STORE)}, ${modifyExpr})`\n        });\n    });\n    return cleanupEmptyOnArray(signals);\n}\nexport function assembleFacetSignals(model, signals) {\n    if (model.component.selection && keys(model.component.selection).length) {\n        const name = stringValue(model.getName('cell'));\n        signals.unshift({\n            name: 'facet',\n            value: {},\n            on: [\n                {\n                    events: parseSelector('mousemove', 'scope'),\n                    update: `isTuple(facet) ? facet : group(${name}).datum`\n                }\n            ]\n        });\n    }\n    return cleanupEmptyOnArray(signals);\n}\nexport function assembleTopLevelSignals(model, signals) {\n    let hasSelections = false;\n    forEachSelection(model, (selCmpt, selCompiler) => {\n        const name = selCmpt.name;\n        const store = stringValue(name + STORE);\n        const hasSg = signals.filter(s => s.name === name);\n        if (!hasSg.length) {\n            signals.push({\n                name: selCmpt.name,\n                update: `${VL_SELECTION_RESOLVE}(${store}` +\n                    (selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`)\n            });\n        }\n        hasSelections = true;\n        if (selCompiler.topLevelSignals) {\n            signals = selCompiler.topLevelSignals(model, selCmpt, signals);\n        }\n        forEachTransform(selCmpt, txCompiler => {\n            if (txCompiler.topLevelSignals) {\n                signals = txCompiler.topLevelSignals(model, selCmpt, signals);\n            }\n        });\n    });\n    if (hasSelections) {\n        const hasUnit = signals.filter(s => s.name === 'unit');\n        if (!hasUnit.length) {\n            signals.unshift({\n                name: 'unit',\n                value: {},\n                on: [{ events: 'mousemove', update: 'isTuple(group()) ? group() : unit' }]\n            });\n        }\n    }\n    return cleanupEmptyOnArray(signals);\n}\nexport function assembleUnitSelectionData(model, data) {\n    forEachSelection(model, selCmpt => {\n        const init = { name: selCmpt.name + STORE };\n        if (selCmpt.init) {\n            const fields = selCmpt.project.items.map(proj => {\n                const { signals } = proj, rest = __rest(proj, [\"signals\"]);\n                return rest;\n            });\n            const insert = selCmpt.init.map(i => assembleInit(i, false));\n            init.values =\n                selCmpt.type === 'interval'\n                    ? [{ unit: unitName(model, { escape: false }), fields, values: insert }]\n                    : insert.map(i => ({ unit: unitName(model, { escape: false }), fields, values: i }));\n        }\n        const contains = data.filter(d => d.name === selCmpt.name + STORE);\n        if (!contains.length) {\n            data.push(init);\n        }\n    });\n    return data;\n}\nexport function assembleUnitSelectionMarks(model, marks) {\n    forEachSelection(model, (selCmpt, selCompiler) => {\n        marks = selCompiler.marks ? selCompiler.marks(model, selCmpt, marks) : marks;\n        forEachTransform(selCmpt, txCompiler => {\n            if (txCompiler.marks) {\n                marks = txCompiler.marks(model, selCmpt, marks);\n            }\n        });\n    });\n    return marks;\n}\nexport function assembleLayerSelectionMarks(model, marks) {\n    for (const child of model.children) {\n        if (isUnitModel(child)) {\n            marks = assembleUnitSelectionMarks(child, marks);\n        }\n    }\n    return marks;\n}\n// Selections are parsed _after_ scales. If a scale domain is set to\n// use a selection, the SELECTION_DOMAIN constant is used as the\n// domainRaw.signal during scale.parse and then replaced with the necessary\n// selection expression function during scale.assemble. To not pollute the\n// type signatures to account for this setup, the selection domain definition\n// is coerced to a string and appended to SELECTION_DOMAIN.\nexport function assembleSelectionScaleDomain(model, domainRaw) {\n    const selDomain = JSON.parse(domainRaw.signal.replace(SELECTION_DOMAIN, ''));\n    const name = varName(selDomain.selection);\n    const encoding = selDomain.encoding;\n    let field = selDomain.field;\n    let selCmpt = model.component.selection && model.component.selection[name];\n    if (selCmpt) {\n        warn('Use \"bind\": \"scales\" to setup a binding for scales and selections within the same view.');\n    }\n    else {\n        selCmpt = model.getSelectionComponent(name, selDomain.selection);\n        if (!encoding && !field) {\n            field = selCmpt.project.items[0].field;\n            if (selCmpt.project.items.length > 1) {\n                warn('A \"field\" or \"encoding\" must be specified when using a selection as a scale domain. ' +\n                    `Using \"field\": ${stringValue(field)}.`);\n            }\n        }\n        else if (encoding && !field) {\n            const encodings = selCmpt.project.items.filter(p => p.channel === encoding);\n            if (!encodings.length || encodings.length > 1) {\n                field = selCmpt.project.items[0].field;\n                warn((!encodings.length ? 'No ' : 'Multiple ') +\n                    `matching ${stringValue(encoding)} encoding found for selection ${stringValue(selDomain.selection)}. ` +\n                    `Using \"field\": ${stringValue(field)}.`);\n            }\n            else {\n                field = encodings[0].field;\n            }\n        }\n        return { signal: accessPathWithDatum(field, name) };\n    }\n    return { signal: 'null' };\n}\nfunction cleanupEmptyOnArray(signals) {\n    return signals.map(s => {\n        if (s.on && !s.on.length)\n            delete s.on;\n        return s;\n    });\n}\n//# sourceMappingURL=assemble.js.map","export function isUnitSpec(spec) {\n    return !!spec['mark'];\n}\n//# sourceMappingURL=unit.js.map","import { dateTimeExpr } from './datetime';\nimport * as log from './log';\nimport { accessPathWithDatum, keys } from './util';\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit.YEAR = 'year';\n    TimeUnit.MONTH = 'month';\n    TimeUnit.DAY = 'day';\n    TimeUnit.DATE = 'date';\n    TimeUnit.HOURS = 'hours';\n    TimeUnit.MINUTES = 'minutes';\n    TimeUnit.SECONDS = 'seconds';\n    TimeUnit.MILLISECONDS = 'milliseconds';\n    TimeUnit.YEARMONTH = 'yearmonth';\n    TimeUnit.YEARMONTHDATE = 'yearmonthdate';\n    TimeUnit.YEARMONTHDATEHOURS = 'yearmonthdatehours';\n    TimeUnit.YEARMONTHDATEHOURSMINUTES = 'yearmonthdatehoursminutes';\n    TimeUnit.YEARMONTHDATEHOURSMINUTESSECONDS = 'yearmonthdatehoursminutesseconds';\n    // MONTHDATE and MONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n    TimeUnit.MONTHDATE = 'monthdate';\n    TimeUnit.MONTHDATEHOURS = 'monthdatehours';\n    TimeUnit.HOURSMINUTES = 'hoursminutes';\n    TimeUnit.HOURSMINUTESSECONDS = 'hoursminutesseconds';\n    TimeUnit.MINUTESSECONDS = 'minutesseconds';\n    TimeUnit.SECONDSMILLISECONDS = 'secondsmilliseconds';\n    TimeUnit.QUARTER = 'quarter';\n    TimeUnit.YEARQUARTER = 'yearquarter';\n    TimeUnit.QUARTERMONTH = 'quartermonth';\n    TimeUnit.YEARQUARTERMONTH = 'yearquartermonth';\n    TimeUnit.UTCYEAR = 'utcyear';\n    TimeUnit.UTCMONTH = 'utcmonth';\n    TimeUnit.UTCDAY = 'utcday';\n    TimeUnit.UTCDATE = 'utcdate';\n    TimeUnit.UTCHOURS = 'utchours';\n    TimeUnit.UTCMINUTES = 'utcminutes';\n    TimeUnit.UTCSECONDS = 'utcseconds';\n    TimeUnit.UTCMILLISECONDS = 'utcmilliseconds';\n    TimeUnit.UTCYEARMONTH = 'utcyearmonth';\n    TimeUnit.UTCYEARMONTHDATE = 'utcyearmonthdate';\n    TimeUnit.UTCYEARMONTHDATEHOURS = 'utcyearmonthdatehours';\n    TimeUnit.UTCYEARMONTHDATEHOURSMINUTES = 'utcyearmonthdatehoursminutes';\n    TimeUnit.UTCYEARMONTHDATEHOURSMINUTESSECONDS = 'utcyearmonthdatehoursminutesseconds';\n    // UTCMONTHDATE and UTCMONTHDATEHOURS always include 29 February since we use year 0th (which is a leap year);\n    TimeUnit.UTCMONTHDATE = 'utcmonthdate';\n    TimeUnit.UTCMONTHDATEHOURS = 'utcmonthdatehours';\n    TimeUnit.UTCHOURSMINUTES = 'utchoursminutes';\n    TimeUnit.UTCHOURSMINUTESSECONDS = 'utchoursminutesseconds';\n    TimeUnit.UTCMINUTESSECONDS = 'utcminutesseconds';\n    TimeUnit.UTCSECONDSMILLISECONDS = 'utcsecondsmilliseconds';\n    TimeUnit.UTCQUARTER = 'utcquarter';\n    TimeUnit.UTCYEARQUARTER = 'utcyearquarter';\n    TimeUnit.UTCQUARTERMONTH = 'utcquartermonth';\n    TimeUnit.UTCYEARQUARTERMONTH = 'utcyearquartermonth';\n})(TimeUnit || (TimeUnit = {}));\n/** Time Unit that only corresponds to only one part of Date objects. */\nconst LOCAL_SINGLE_TIMEUNIT_INDEX = {\n    year: 1,\n    quarter: 1,\n    month: 1,\n    day: 1,\n    date: 1,\n    hours: 1,\n    minutes: 1,\n    seconds: 1,\n    milliseconds: 1\n};\nexport const TIMEUNIT_PARTS = keys(LOCAL_SINGLE_TIMEUNIT_INDEX);\nexport function isLocalSingleTimeUnit(timeUnit) {\n    return !!LOCAL_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nconst UTC_SINGLE_TIMEUNIT_INDEX = {\n    utcyear: 1,\n    utcquarter: 1,\n    utcmonth: 1,\n    utcday: 1,\n    utcdate: 1,\n    utchours: 1,\n    utcminutes: 1,\n    utcseconds: 1,\n    utcmilliseconds: 1\n};\nexport function isUtcSingleTimeUnit(timeUnit) {\n    return !!UTC_SINGLE_TIMEUNIT_INDEX[timeUnit];\n}\nconst LOCAL_MULTI_TIMEUNIT_INDEX = {\n    yearquarter: 1,\n    yearquartermonth: 1,\n    yearmonth: 1,\n    yearmonthdate: 1,\n    yearmonthdatehours: 1,\n    yearmonthdatehoursminutes: 1,\n    yearmonthdatehoursminutesseconds: 1,\n    quartermonth: 1,\n    monthdate: 1,\n    monthdatehours: 1,\n    hoursminutes: 1,\n    hoursminutesseconds: 1,\n    minutesseconds: 1,\n    secondsmilliseconds: 1\n};\nconst UTC_MULTI_TIMEUNIT_INDEX = {\n    utcyearquarter: 1,\n    utcyearquartermonth: 1,\n    utcyearmonth: 1,\n    utcyearmonthdate: 1,\n    utcyearmonthdatehours: 1,\n    utcyearmonthdatehoursminutes: 1,\n    utcyearmonthdatehoursminutesseconds: 1,\n    utcquartermonth: 1,\n    utcmonthdate: 1,\n    utcmonthdatehours: 1,\n    utchoursminutes: 1,\n    utchoursminutesseconds: 1,\n    utcminutesseconds: 1,\n    utcsecondsmilliseconds: 1\n};\nconst UTC_TIMEUNIT_INDEX = Object.assign(Object.assign({}, UTC_SINGLE_TIMEUNIT_INDEX), UTC_MULTI_TIMEUNIT_INDEX);\nexport function isUTCTimeUnit(t) {\n    return !!UTC_TIMEUNIT_INDEX[t];\n}\nexport function getLocalTimeUnit(t) {\n    return t.substr(3);\n}\nconst TIMEUNIT_INDEX = Object.assign(Object.assign(Object.assign(Object.assign({}, LOCAL_SINGLE_TIMEUNIT_INDEX), UTC_SINGLE_TIMEUNIT_INDEX), LOCAL_MULTI_TIMEUNIT_INDEX), UTC_MULTI_TIMEUNIT_INDEX);\nexport const TIMEUNITS = keys(TIMEUNIT_INDEX);\nexport function isTimeUnit(t) {\n    return !!TIMEUNIT_INDEX[t];\n}\nconst SET_DATE_METHOD = {\n    year: 'setFullYear',\n    month: 'setMonth',\n    date: 'setDate',\n    hours: 'setHours',\n    minutes: 'setMinutes',\n    seconds: 'setSeconds',\n    milliseconds: 'setMilliseconds',\n    // Day and quarter have their own special cases\n    quarter: null,\n    day: null\n};\n/**\n * Converts a date to only have the measurements relevant to the specified unit\n * i.e. ('yearmonth', '2000-12-04 07:58:14') -> '2000-12-01 00:00:00'\n * Note: the base date is Jan 01 1900 00:00:00\n */\nexport function convert(unit, date) {\n    const isUTC = isUTCTimeUnit(unit);\n    const result = isUTC\n        ? // start with uniform date\n            new Date(Date.UTC(1972, 0, 1, 0, 0, 0, 0)) // 1972 is the first leap year after 1970, the start of unix time\n        : new Date(1972, 0, 1, 0, 0, 0, 0);\n    for (const timeUnitPart of TIMEUNIT_PARTS) {\n        if (containsTimeUnit(unit, timeUnitPart)) {\n            switch (timeUnitPart) {\n                case TimeUnit.DAY:\n                    throw new Error(\"Cannot convert to TimeUnits containing 'day'\");\n                case TimeUnit.QUARTER: {\n                    const { getDateMethod, setDateMethod } = dateMethods('month', isUTC);\n                    // indicate quarter by setting month to be the first of the quarter i.e. may (4) -> april (3)\n                    result[setDateMethod](Math.floor(date[getDateMethod]() / 3) * 3);\n                    break;\n                }\n                default: {\n                    const { getDateMethod, setDateMethod } = dateMethods(timeUnitPart, isUTC);\n                    result[setDateMethod](date[getDateMethod]());\n                }\n            }\n        }\n    }\n    return result;\n}\nfunction dateMethods(singleUnit, isUtc) {\n    const rawSetDateMethod = SET_DATE_METHOD[singleUnit];\n    const setDateMethod = isUtc ? 'setUTC' + rawSetDateMethod.substr(3) : rawSetDateMethod;\n    const getDateMethod = 'get' + (isUtc ? 'UTC' : '') + rawSetDateMethod.substr(3);\n    return { setDateMethod, getDateMethod };\n}\nexport function getTimeUnitParts(timeUnit) {\n    return TIMEUNIT_PARTS.reduce((parts, part) => {\n        if (containsTimeUnit(timeUnit, part)) {\n            return [...parts, part];\n        }\n        return parts;\n    }, []);\n}\n/** Returns true if fullTimeUnit contains the timeUnit, false otherwise. */\nexport function containsTimeUnit(fullTimeUnit, timeUnit) {\n    const index = fullTimeUnit.indexOf(timeUnit);\n    return (index > -1 && (timeUnit !== TimeUnit.SECONDS || index === 0 || fullTimeUnit.charAt(index - 1) !== 'i') // exclude milliseconds\n    );\n}\n/**\n * Returns Vega expresssion for a given timeUnit and fieldRef\n */\nexport function fieldExpr(fullTimeUnit, field, { end } = { end: false }) {\n    const fieldRef = accessPathWithDatum(field);\n    const utc = isUTCTimeUnit(fullTimeUnit) ? 'utc' : '';\n    function func(timeUnit) {\n        if (timeUnit === TimeUnit.QUARTER) {\n            // quarter starting at 0 (0,3,6,9).\n            return `(${utc}quarter(${fieldRef})-1)`;\n        }\n        else {\n            return `${utc}${timeUnit}(${fieldRef})`;\n        }\n    }\n    let lastTimeUnit;\n    const d = TIMEUNIT_PARTS.reduce((dateExpr, tu) => {\n        if (containsTimeUnit(fullTimeUnit, tu)) {\n            dateExpr[tu] = func(tu);\n            lastTimeUnit = tu;\n        }\n        return dateExpr;\n    }, {});\n    if (end) {\n        d[lastTimeUnit] += '+1';\n    }\n    return dateTimeExpr(d);\n}\nexport function getDateTimeComponents(timeUnit, shortTimeLabels) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    const dateComponents = [];\n    const hasYear = containsTimeUnit(timeUnit, TimeUnit.YEAR);\n    if (containsTimeUnit(timeUnit, TimeUnit.MONTH)) {\n        // By default use short month name\n        dateComponents.push(shortTimeLabels !== false ? '%b' : '%B');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.DAY)) {\n        dateComponents.push(shortTimeLabels ? '%a' : '%A');\n    }\n    else if (containsTimeUnit(timeUnit, TimeUnit.DATE)) {\n        dateComponents.push('%d' + (hasYear ? ',' : '')); // add comma if there is year\n    }\n    if (hasYear) {\n        dateComponents.push(shortTimeLabels ? '%y' : '%Y');\n    }\n    const timeComponents = [];\n    if (containsTimeUnit(timeUnit, TimeUnit.HOURS)) {\n        timeComponents.push('%H');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MINUTES)) {\n        timeComponents.push('%M');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.SECONDS)) {\n        timeComponents.push('%S');\n    }\n    if (containsTimeUnit(timeUnit, TimeUnit.MILLISECONDS)) {\n        timeComponents.push('%L');\n    }\n    const dateTimeComponents = [];\n    if (dateComponents.length > 0) {\n        dateTimeComponents.push(dateComponents.join(' '));\n    }\n    if (timeComponents.length > 0) {\n        dateTimeComponents.push(timeComponents.join(':'));\n    }\n    return dateTimeComponents;\n}\n/**\n * returns the signal expression used for axis labels for a time unit\n */\nexport function formatExpression(timeUnit, field, shortTimeLabels, isUTCScale) {\n    if (!timeUnit) {\n        return undefined;\n    }\n    const dateTimeComponents = getDateTimeComponents(timeUnit, shortTimeLabels);\n    let expression = '';\n    if (containsTimeUnit(timeUnit, TimeUnit.QUARTER)) {\n        // special expression for quarter as prefix\n        expression = `'Q' + quarter(${field})`;\n    }\n    if (dateTimeComponents.length > 0) {\n        if (expression) {\n            // Add space between quarter and main time format\n            expression += ` + ' ' + `;\n        }\n        // We only use utcFormat for utc scale\n        // For utc time units, the data is already converted as a part of timeUnit transform.\n        // Thus, utc time units should use timeFormat to avoid shifting the time twice.\n        if (isUTCScale) {\n            expression += `utcFormat(${field}, '${dateTimeComponents.join(' ')}')`;\n        }\n        else {\n            expression += `timeFormat(${field}, '${dateTimeComponents.join(' ')}')`;\n        }\n    }\n    // If expression is still an empty string, return undefined instead.\n    return expression || undefined;\n}\nexport function normalizeTimeUnit(timeUnit) {\n    if (timeUnit !== 'day' && timeUnit.indexOf('day') >= 0) {\n        log.warn(log.message.dayReplacedWithDate(timeUnit));\n        return timeUnit.replace('day', 'date');\n    }\n    return timeUnit;\n}\n//# sourceMappingURL=timeunit.js.map","import { contains, getFirstDefined } from '../../util';\n/**\n * Get header channel, which can be different from facet channel when orient is specified or when the facet channel is facet.\n */\nexport function getHeaderChannel(channel, orient) {\n    if (contains(['top', 'bottom'], orient)) {\n        return 'column';\n    }\n    else if (contains(['left', 'right'], orient)) {\n        return 'row';\n    }\n    return channel === 'row' ? 'row' : 'column';\n}\nexport function getHeaderProperty(prop, facetFieldDef, config, channel) {\n    const headerSpecificConfig = channel === 'row' ? config.headerRow : channel === 'column' ? config.headerColumn : config.headerFacet;\n    return getFirstDefined(facetFieldDef && facetFieldDef.header ? facetFieldDef.header[prop] : undefined, headerSpecificConfig[prop], config.header[prop]);\n}\nexport function getHeaderProperties(properties, facetFieldDef, config, channel) {\n    const props = {};\n    for (const prop of properties) {\n        const value = getHeaderProperty(prop, facetFieldDef, config, channel);\n        if (value !== undefined) {\n            props[prop] = value;\n        }\n    }\n    return props;\n}\n//# sourceMappingURL=common.js.map","import { isScaleFieldDef, vgField } from '../../channeldef';\nimport { fieldFilterExpression } from '../../predicate';\nimport { isSortArray } from '../../sort';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport class CalculateNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this._dependentFields = getDependentFields(this.transform.calculate);\n    }\n    clone() {\n        return new CalculateNode(null, duplicate(this.transform));\n    }\n    static parseAllForSortIndex(parent, model) {\n        // get all the encoding with sort fields from model\n        model.forEachFieldDef((fieldDef, channel) => {\n            if (!isScaleFieldDef(fieldDef)) {\n                return;\n            }\n            if (isSortArray(fieldDef.sort)) {\n                const { field, timeUnit } = fieldDef;\n                const sort = fieldDef.sort;\n                // generate `datum[\"a\"] === val0 ? 0 : datum[\"a\"] === val1 ? 1 : ... : n` via FieldEqualPredicate\n                const calculate = sort\n                    .map((sortValue, i) => {\n                    return `${fieldFilterExpression({ field, timeUnit, equal: sortValue })} ? ${i} : `;\n                })\n                    .join('') + sort.length;\n                parent = new CalculateNode(parent, {\n                    calculate,\n                    as: sortArrayIndexField(fieldDef, channel, { forAs: true })\n                });\n            }\n        });\n        return parent;\n    }\n    producedFields() {\n        return new Set([this.transform.as]);\n    }\n    dependentFields() {\n        return this._dependentFields;\n    }\n    assemble() {\n        return {\n            type: 'formula',\n            expr: this.transform.calculate,\n            as: this.transform.as\n        };\n    }\n    hash() {\n        return `Calculate ${hash(this.transform)}`;\n    }\n}\nexport function sortArrayIndexField(fieldDef, channel, opt) {\n    return vgField(fieldDef, Object.assign({ prefix: channel, suffix: 'sort_index' }, (opt || {})));\n}\n//# sourceMappingURL=calculate.js.map","import { isString } from 'vega-util';\nimport { binToString, isBinning } from '../../bin';\nimport { binRequiresRange, isTypedFieldDef, normalizeBin, vgField } from '../../channeldef';\nimport { duplicate, hash, keys, replacePathInField, unique, vals } from '../../util';\nimport { binFormatExpression } from '../common';\nimport { isUnitModel } from '../model';\nimport { DataFlowNode } from './dataflow';\nfunction rangeFormula(model, fieldDef, channel, config) {\n    if (binRequiresRange(fieldDef, channel)) {\n        // read format from axis or legend, if there is no format then use config.numberFormat\n        const guide = isUnitModel(model) ? model.axis(channel) || model.legend(channel) || {} : {};\n        const startField = vgField(fieldDef, { expr: 'datum' });\n        const endField = vgField(fieldDef, { expr: 'datum', binSuffix: 'end' });\n        return {\n            formulaAs: vgField(fieldDef, { binSuffix: 'range', forAs: true }),\n            formula: binFormatExpression(startField, endField, guide.format, config)\n        };\n    }\n    return {};\n}\nfunction binKey(bin, field) {\n    return `${binToString(bin)}_${field}`;\n}\nfunction getSignalsFromModel(model, key) {\n    return {\n        signal: model.getName(`${key}_bins`),\n        extentSignal: model.getName(`${key}_extent`)\n    };\n}\nexport function getBinSignalName(model, field, bin) {\n    const normalizedBin = normalizeBin(bin, undefined) || {};\n    const key = binKey(normalizedBin, field);\n    return model.getName(`${key}_bins`);\n}\nfunction isBinTransform(t) {\n    return 'as' in t;\n}\nfunction createBinComponent(t, bin, model) {\n    let as;\n    if (isBinTransform(t)) {\n        as = isString(t.as) ? [t.as, `${t.as}_end`] : [t.as[0], t.as[1]];\n    }\n    else {\n        as = [vgField(t, { forAs: true }), vgField(t, { binSuffix: 'end', forAs: true })];\n    }\n    const normalizedBin = normalizeBin(bin, undefined) || {};\n    const key = binKey(normalizedBin, t.field);\n    const { signal, extentSignal } = getSignalsFromModel(model, key);\n    const binComponent = Object.assign(Object.assign({ bin: normalizedBin, field: t.field, as: [as] }, (signal ? { signal } : {})), (extentSignal ? { extentSignal } : {}));\n    return { key, binComponent };\n}\nexport class BinNode extends DataFlowNode {\n    constructor(parent, bins) {\n        super(parent);\n        this.bins = bins;\n    }\n    clone() {\n        return new BinNode(null, duplicate(this.bins));\n    }\n    static makeFromEncoding(parent, model) {\n        const bins = model.reduceFieldDef((binComponentIndex, fieldDef, channel) => {\n            if (isTypedFieldDef(fieldDef) && isBinning(fieldDef.bin)) {\n                const { key, binComponent } = createBinComponent(fieldDef, fieldDef.bin, model);\n                binComponentIndex[key] = Object.assign(Object.assign(Object.assign({}, binComponent), binComponentIndex[key]), rangeFormula(model, fieldDef, channel, model.config));\n            }\n            return binComponentIndex;\n        }, {});\n        if (keys(bins).length === 0) {\n            return null;\n        }\n        return new BinNode(parent, bins);\n    }\n    /**\n     * Creates a bin node from BinTransform.\n     * The optional parameter should provide\n     */\n    static makeFromTransform(parent, t, model) {\n        const { key, binComponent } = createBinComponent(t, t.bin, model);\n        return new BinNode(parent, {\n            [key]: binComponent\n        });\n    }\n    /**\n     * Merge bin nodes. This method either integrates the bin config from the other node\n     * or if this node already has a bin config, renames the corresponding signal in the model.\n     */\n    merge(other, renameSignal) {\n        for (const key of keys(other.bins)) {\n            if (key in this.bins) {\n                renameSignal(other.bins[key].signal, this.bins[key].signal);\n                // Ensure that we don't have duplicate names for signal pairs\n                this.bins[key].as = unique([...this.bins[key].as, ...other.bins[key].as], hash);\n            }\n            else {\n                this.bins[key] = other.bins[key];\n            }\n        }\n        for (const child of other.children) {\n            other.removeChild(child);\n            child.parent = this;\n        }\n        other.remove();\n    }\n    producedFields() {\n        return new Set(vals(this.bins)\n            .map(c => c.as)\n            .flat(2));\n    }\n    dependentFields() {\n        return new Set(vals(this.bins).map(c => c.field));\n    }\n    hash() {\n        return `Bin ${hash(this.bins)}`;\n    }\n    assemble() {\n        return vals(this.bins).flatMap(bin => {\n            const transform = [];\n            const [binAs, ...remainingAs] = bin.as;\n            const binTrans = Object.assign({ type: 'bin', field: replacePathInField(bin.field), as: binAs, signal: bin.signal }, bin.bin);\n            if (!bin.bin.extent && bin.extentSignal) {\n                transform.push({\n                    type: 'extent',\n                    field: replacePathInField(bin.field),\n                    signal: bin.extentSignal\n                });\n                binTrans.extent = { signal: bin.extentSignal };\n            }\n            transform.push(binTrans);\n            for (const as of remainingAs) {\n                for (let i = 0; i < 2; i++) {\n                    transform.push({\n                        type: 'formula',\n                        expr: vgField({ field: binAs[i] }, { expr: 'datum' }),\n                        as: as[i]\n                    });\n                }\n            }\n            if (bin.formula) {\n                transform.push({\n                    type: 'formula',\n                    expr: bin.formula,\n                    as: bin.formulaAs\n                });\n            }\n            return transform;\n        });\n    }\n}\n//# sourceMappingURL=bin.js.map","import { stringValue } from 'vega-util';\nimport { VL_SELECTION_RESOLVE } from '..';\nimport { isScaleChannel, X, Y } from '../../../channel';\nimport * as log from '../../../log';\nimport { hasContinuousDomain } from '../../../scale';\nimport { accessPathWithDatum, varName } from '../../../util';\nimport { isLayerModel } from '../../model';\nconst scaleBindings = {\n    has: selCmpt => {\n        return selCmpt.type === 'interval' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind === 'scales';\n    },\n    parse: (model, selCmpt) => {\n        const name = varName(selCmpt.name);\n        const bound = (selCmpt.scales = []);\n        for (const proj of selCmpt.project.items) {\n            const channel = proj.channel;\n            if (!isScaleChannel(channel)) {\n                continue;\n            }\n            const scale = model.getScaleComponent(channel);\n            const scaleType = scale ? scale.get('type') : undefined;\n            if (!scale || !hasContinuousDomain(scaleType)) {\n                log.warn(log.message.SCALE_BINDINGS_CONTINUOUS);\n                continue;\n            }\n            scale.set('domainRaw', { signal: accessPathWithDatum(proj.field, name) }, true);\n            bound.push(proj);\n            // Bind both x/y for diag plot of repeated views.\n            if (model.repeater && model.repeater.row === model.repeater.column) {\n                const scale2 = model.getScaleComponent(channel === X ? Y : X);\n                scale2.set('domainRaw', { signal: accessPathWithDatum(proj.field, name) }, true);\n            }\n        }\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n        const bound = selCmpt.scales.filter(proj => !signals.filter(s => s.name === proj.signals.data).length);\n        // Top-level signals are only needed for multiview displays and if this\n        // view's top-level signals haven't already been generated.\n        if (!model.parent || isTopLevelLayer(model) || !bound.length) {\n            return signals;\n        }\n        // vlSelectionResolve does not account for the behavior of bound scales in\n        // multiview displays. Each unit view adds a tuple to the store, but the\n        // state of the selection is the unit selection most recently updated. This\n        // state is captured by the top-level signals that we insert and \"push\n        // outer\" to from within the units. We need to reassemble this state into\n        // the top-level named signal, except no single selCmpt has a global view.\n        const namedSg = signals.filter(s => s.name === selCmpt.name)[0];\n        let update = namedSg.update;\n        if (update.indexOf(VL_SELECTION_RESOLVE) >= 0) {\n            namedSg.update = `{${bound.map(proj => `${stringValue(proj.field)}: ${proj.signals.data}`).join(', ')}}`;\n        }\n        else {\n            for (const proj of bound) {\n                const mapping = `${stringValue(proj.field)}: ${proj.signals.data}`;\n                if (update.indexOf(mapping) < 0) {\n                    update = `${update.substring(0, update.length - 1)}, ${mapping}}`;\n                }\n            }\n            namedSg.update = update;\n        }\n        return signals.concat(bound.map(proj => ({ name: proj.signals.data })));\n    },\n    signals: (model, selCmpt, signals) => {\n        // Nested signals need only push to top-level signals with multiview displays.\n        if (model.parent && !isTopLevelLayer(model)) {\n            for (const proj of selCmpt.scales) {\n                const signal = signals.filter(s => s.name === proj.signals.data)[0];\n                signal.push = 'outer';\n                delete signal.value;\n                delete signal.update;\n            }\n        }\n        return signals;\n    }\n};\nexport default scaleBindings;\nexport function domain(model, channel) {\n    const scale = stringValue(model.scaleName(channel));\n    return `domain(${scale})`;\n}\nfunction isTopLevelLayer(model) {\n    return model.parent && isLayerModel(model.parent) && (!model.parent.parent || isTopLevelLayer(model.parent.parent));\n}\n//# sourceMappingURL=scales.js.map","import { __rest } from \"tslib\";\nimport { isArray, isBoolean, isString } from 'vega-util';\nimport { isContinuous, isFieldDef } from '../channeldef';\nimport { fieldDefs } from '../encoding';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nexport function filterTooltipWithAggregatedField(oldEncoding) {\n    const { tooltip } = oldEncoding, filteredEncoding = __rest(oldEncoding, [\"tooltip\"]);\n    if (!tooltip) {\n        return { filteredEncoding: oldEncoding };\n    }\n    let customTooltipWithAggregatedField;\n    let customTooltipWithoutAggregatedField;\n    if (isArray(tooltip)) {\n        tooltip.forEach((t) => {\n            if (t.aggregate) {\n                if (!customTooltipWithAggregatedField) {\n                    customTooltipWithAggregatedField = [];\n                }\n                customTooltipWithAggregatedField.push(t);\n            }\n            else {\n                if (!customTooltipWithoutAggregatedField) {\n                    customTooltipWithoutAggregatedField = [];\n                }\n                customTooltipWithoutAggregatedField.push(t);\n            }\n        });\n        if (customTooltipWithAggregatedField) {\n            filteredEncoding.tooltip = customTooltipWithAggregatedField;\n        }\n    }\n    else {\n        if (tooltip['aggregate']) {\n            filteredEncoding.tooltip = tooltip;\n        }\n        else {\n            customTooltipWithoutAggregatedField = tooltip;\n        }\n    }\n    if (isArray(customTooltipWithoutAggregatedField) && customTooltipWithoutAggregatedField.length === 1) {\n        customTooltipWithoutAggregatedField = customTooltipWithoutAggregatedField[0];\n    }\n    return { customTooltipWithoutAggregatedField, filteredEncoding };\n}\nexport function getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, withFieldName = true) {\n    if ('tooltip' in encodingWithoutContinuousAxis) {\n        return { tooltip: encodingWithoutContinuousAxis.tooltip };\n    }\n    const fiveSummaryTooltip = tooltipSummary.map(({ fieldPrefix, titlePrefix }) => ({\n        field: fieldPrefix + continuousAxisChannelDef.field,\n        type: continuousAxisChannelDef.type,\n        title: titlePrefix + (withFieldName ? ' of ' + continuousAxisChannelDef.field : '')\n    }));\n    return {\n        tooltip: [\n            ...fiveSummaryTooltip,\n            // need to cast because TextFieldDef support fewer types of bin\n            ...fieldDefs(encodingWithoutContinuousAxis)\n        ]\n    };\n}\nexport function makeCompositeAggregatePartFactory(compositeMarkDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, compositeMarkConfig) {\n    const { scale, axis } = continuousAxisChannelDef;\n    return ({ partName, mark, positionPrefix, endPositionPrefix = undefined, extraEncoding = {} }) => {\n        const title = axis && axis.title !== undefined\n            ? undefined\n            : continuousAxisChannelDef.title !== undefined\n                ? continuousAxisChannelDef.title\n                : continuousAxisChannelDef.field;\n        return partLayerMixins(compositeMarkDef, partName, compositeMarkConfig, {\n            mark,\n            encoding: Object.assign(Object.assign(Object.assign({ [continuousAxis]: Object.assign(Object.assign(Object.assign({ field: positionPrefix + '_' + continuousAxisChannelDef.field, type: continuousAxisChannelDef.type }, (title ? { title } : {})), (scale ? { scale } : {})), (axis ? { axis } : {})) }, (isString(endPositionPrefix)\n                ? {\n                    [continuousAxis + '2']: {\n                        field: endPositionPrefix + '_' + continuousAxisChannelDef.field,\n                        type: continuousAxisChannelDef.type\n                    }\n                }\n                : {})), sharedEncoding), extraEncoding)\n        });\n    };\n}\nexport function partLayerMixins(markDef, part, compositeMarkConfig, partBaseSpec) {\n    const { clip, color, opacity } = markDef;\n    const mark = markDef.type;\n    if (markDef[part] || (markDef[part] === undefined && compositeMarkConfig[part])) {\n        return [\n            Object.assign(Object.assign({}, partBaseSpec), { mark: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, compositeMarkConfig[part]), (clip ? { clip } : {})), (color ? { color } : {})), (opacity ? { opacity } : {})), (isMarkDef(partBaseSpec.mark) ? partBaseSpec.mark : { type: partBaseSpec.mark })), { style: `${mark}-${part}` }), (isBoolean(markDef[part]) ? {} : markDef[part])) })\n        ];\n    }\n    return [];\n}\nexport function compositeMarkContinuousAxis(spec, orient, compositeMark) {\n    const { encoding } = spec;\n    const continuousAxis = orient === 'vertical' ? 'y' : 'x';\n    const continuousAxisChannelDef = encoding[continuousAxis]; // Safe to cast because if x is not continuous fielddef, the orient would not be horizontal.\n    const continuousAxisChannelDef2 = encoding[continuousAxis + '2'];\n    const continuousAxisChannelDefError = encoding[continuousAxis + 'Error'];\n    const continuousAxisChannelDefError2 = encoding[continuousAxis + 'Error2'];\n    return {\n        continuousAxisChannelDef: filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark),\n        continuousAxisChannelDef2: filterAggregateFromChannelDef(continuousAxisChannelDef2, compositeMark),\n        continuousAxisChannelDefError: filterAggregateFromChannelDef(continuousAxisChannelDefError, compositeMark),\n        continuousAxisChannelDefError2: filterAggregateFromChannelDef(continuousAxisChannelDefError2, compositeMark),\n        continuousAxis\n    };\n}\nfunction filterAggregateFromChannelDef(continuousAxisChannelDef, compositeMark) {\n    if (continuousAxisChannelDef && continuousAxisChannelDef.aggregate) {\n        const { aggregate } = continuousAxisChannelDef, continuousAxisWithoutAggregate = __rest(continuousAxisChannelDef, [\"aggregate\"]);\n        if (aggregate !== compositeMark) {\n            log.warn(log.message.errorBarContinuousAxisHasCustomizedAggregate(aggregate, compositeMark));\n        }\n        return continuousAxisWithoutAggregate;\n    }\n    else {\n        return continuousAxisChannelDef;\n    }\n}\nexport function compositeMarkOrient(spec, compositeMark) {\n    const { mark, encoding } = spec;\n    if (isFieldDef(encoding.x) && isContinuous(encoding.x)) {\n        // x is continuous\n        if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n            // both x and y are continuous\n            if (encoding.x.aggregate === undefined && encoding.y.aggregate === compositeMark) {\n                return 'vertical';\n            }\n            else if (encoding.y.aggregate === undefined && encoding.x.aggregate === compositeMark) {\n                return 'horizontal';\n            }\n            else if (encoding.x.aggregate === compositeMark && encoding.y.aggregate === compositeMark) {\n                throw new Error('Both x and y cannot have aggregate');\n            }\n            else {\n                if (isMarkDef(mark) && mark.orient) {\n                    return mark.orient;\n                }\n                // default orientation = vertical\n                return 'vertical';\n            }\n        }\n        // x is continuous but y is not\n        return 'horizontal';\n    }\n    else if (isFieldDef(encoding.y) && isContinuous(encoding.y)) {\n        // y is continuous but x is not\n        return 'vertical';\n    }\n    else {\n        // Neither x nor y is continuous.\n        throw new Error('Need a valid continuous axis for ' + compositeMark + 's');\n    }\n}\n//# sourceMappingURL=common.js.map","import { isNumber, isString } from 'vega-util';\nimport { isMinMaxOp } from '../../aggregate';\nimport { getMainRangeChannel } from '../../channel';\nimport { isFieldDef, isScaleFieldDef, isTimeFormatFieldDef, isTypedFieldDef } from '../../channeldef';\nimport { isGenerator } from '../../data';\nimport { isDateTime } from '../../datetime';\nimport * as log from '../../log';\nimport { forEachLeaf } from '../../logical';\nimport { isPathMark } from '../../mark';\nimport { isFieldEqualPredicate, isFieldOneOfPredicate, isFieldPredicate, isFieldRangePredicate } from '../../predicate';\nimport { isSortField } from '../../sort';\nimport { accessPathDepth, accessPathWithDatum, duplicate, hash, keys, removePathFromField } from '../../util';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { Split } from '../split';\nimport { DataFlowNode } from './dataflow';\n/**\n * Remove quotes from a string.\n */\nfunction unquote(pattern) {\n    if ((pattern[0] === \"'\" && pattern[pattern.length - 1] === \"'\") ||\n        (pattern[0] === '\"' && pattern[pattern.length - 1] === '\"')) {\n        return pattern.slice(1, -1);\n    }\n    return pattern;\n}\n/**\n * @param field The field.\n * @param parse What to parse the field as.\n */\nfunction parseExpression(field, parse) {\n    const f = accessPathWithDatum(field);\n    if (parse === 'number') {\n        return `toNumber(${f})`;\n    }\n    else if (parse === 'boolean') {\n        return `toBoolean(${f})`;\n    }\n    else if (parse === 'string') {\n        return `toString(${f})`;\n    }\n    else if (parse === 'date') {\n        return `toDate(${f})`;\n    }\n    else if (parse === 'flatten') {\n        return f;\n    }\n    else if (parse.indexOf('date:') === 0) {\n        const specifier = unquote(parse.slice(5, parse.length));\n        return `timeParse(${f},'${specifier}')`;\n    }\n    else if (parse.indexOf('utc:') === 0) {\n        const specifier = unquote(parse.slice(4, parse.length));\n        return `utcParse(${f},'${specifier}')`;\n    }\n    else {\n        log.warn(log.message.unrecognizedParse(parse));\n        return null;\n    }\n}\nexport class ParseNode extends DataFlowNode {\n    constructor(parent, parse) {\n        super(parent);\n        this._parse = parse;\n    }\n    clone() {\n        return new ParseNode(null, duplicate(this._parse));\n    }\n    hash() {\n        return `Parse ${hash(this._parse)}`;\n    }\n    /**\n     * Creates a parse node from a data.format.parse and updates ancestorParse.\n     */\n    static makeExplicit(parent, model, ancestorParse) {\n        // Custom parse\n        let explicit = {};\n        const data = model.data;\n        if (!isGenerator(data) && data && data.format && data.format.parse) {\n            explicit = data.format.parse;\n        }\n        return this.makeWithAncestors(parent, explicit, {}, ancestorParse);\n    }\n    static makeImplicitFromFilterTransform(parent, transform, ancestorParse) {\n        const parse = {};\n        forEachLeaf(transform.filter, filter => {\n            if (isFieldPredicate(filter)) {\n                // Automatically add a parse node for filters with filter objects\n                let val = null;\n                // For EqualFilter, just use the equal property.\n                // For RangeFilter and OneOfFilter, all array members should have\n                // the same type, so we only use the first one.\n                if (isFieldEqualPredicate(filter)) {\n                    val = filter.equal;\n                }\n                else if (isFieldRangePredicate(filter)) {\n                    val = filter.range[0];\n                }\n                else if (isFieldOneOfPredicate(filter)) {\n                    val = (filter.oneOf || filter['in'])[0];\n                } // else -- for filter expression, we can't infer anything\n                if (val) {\n                    if (isDateTime(val)) {\n                        parse[filter.field] = 'date';\n                    }\n                    else if (isNumber(val)) {\n                        parse[filter.field] = 'number';\n                    }\n                    else if (isString(val)) {\n                        parse[filter.field] = 'string';\n                    }\n                }\n                if (filter.timeUnit) {\n                    parse[filter.field] = 'date';\n                }\n            }\n        });\n        if (keys(parse).length === 0) {\n            return null;\n        }\n        return this.makeWithAncestors(parent, {}, parse, ancestorParse);\n    }\n    /**\n     * Creates a parse node for implicit parsing from a model and updates ancestorParse.\n     */\n    static makeImplicitFromEncoding(parent, model, ancestorParse) {\n        const implicit = {};\n        function add(fieldDef) {\n            if (isTimeFormatFieldDef(fieldDef)) {\n                implicit[fieldDef.field] = 'date';\n            }\n            else if (fieldDef.type === 'quantitative' &&\n                isMinMaxOp(fieldDef.aggregate) // we need to parse numbers to support correct min and max\n            ) {\n                implicit[fieldDef.field] = 'number';\n            }\n            else if (accessPathDepth(fieldDef.field) > 1) {\n                // For non-date/non-number (strings and booleans), derive a flattened field for a referenced nested field.\n                // (Parsing numbers / dates already flattens numeric and temporal fields.)\n                if (!(fieldDef.field in implicit)) {\n                    implicit[fieldDef.field] = 'flatten';\n                }\n            }\n            else if (isScaleFieldDef(fieldDef) && isSortField(fieldDef.sort) && accessPathDepth(fieldDef.sort.field) > 1) {\n                // Flatten fields that we sort by but that are not otherwise flattened.\n                if (!(fieldDef.sort.field in implicit)) {\n                    implicit[fieldDef.sort.field] = 'flatten';\n                }\n            }\n        }\n        if (isUnitModel(model) || isFacetModel(model)) {\n            // Parse encoded fields\n            model.forEachFieldDef((fieldDef, channel) => {\n                if (isTypedFieldDef(fieldDef)) {\n                    add(fieldDef);\n                }\n                else {\n                    const mainChannel = getMainRangeChannel(channel);\n                    const mainFieldDef = model.fieldDef(mainChannel);\n                    add(Object.assign(Object.assign({}, fieldDef), { type: mainFieldDef.type }));\n                }\n            });\n        }\n        // Parse quantitative dimension fields of path marks as numbers so that we sort them correctly.\n        if (isUnitModel(model)) {\n            const { mark, markDef, encoding } = model;\n            if (isPathMark(mark) &&\n                // No need to sort by dimension if we have a connected scatterplot (order channel is present)\n                !model.encoding.order) {\n                const dimensionChannel = markDef.orient === 'horizontal' ? 'y' : 'x';\n                const dimensionChannelDef = encoding[dimensionChannel];\n                if (isFieldDef(dimensionChannelDef) &&\n                    dimensionChannelDef.type === 'quantitative' &&\n                    !(dimensionChannelDef.field in implicit)) {\n                    implicit[dimensionChannelDef.field] = 'number';\n                }\n            }\n        }\n        return this.makeWithAncestors(parent, {}, implicit, ancestorParse);\n    }\n    /**\n     * Creates a parse node from \"explicit\" parse and \"implicit\" parse and updates ancestorParse.\n     */\n    static makeWithAncestors(parent, explicit, implicit, ancestorParse) {\n        // We should not parse what has already been parsed in a parent (explicitly or implicitly) or what has been derived (maked as \"derived\"). We also don't need to flatten a field that has already been parsed.\n        for (const field of keys(implicit)) {\n            const parsedAs = ancestorParse.getWithExplicit(field);\n            if (parsedAs.value !== undefined) {\n                // We always ignore derived fields even if they are implicitly defined because we expect users to create the right types.\n                if (parsedAs.explicit ||\n                    parsedAs.value === implicit[field] ||\n                    parsedAs.value === 'derived' ||\n                    implicit[field] === 'flatten') {\n                    delete implicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, implicit[field], parsedAs.value));\n                }\n            }\n        }\n        for (const field of keys(explicit)) {\n            const parsedAs = ancestorParse.get(field);\n            if (parsedAs !== undefined) {\n                // Don't parse a field again if it has been parsed with the same type already.\n                if (parsedAs === explicit[field]) {\n                    delete explicit[field];\n                }\n                else {\n                    log.warn(log.message.differentParse(field, explicit[field], parsedAs));\n                }\n            }\n        }\n        const parse = new Split(explicit, implicit);\n        // add the format parse from this model so that children don't parse the same field again\n        ancestorParse.copyAll(parse);\n        // copy only non-null parses\n        const p = {};\n        for (const key of keys(parse.combine())) {\n            const val = parse.get(key);\n            if (val !== null) {\n                p[key] = val;\n            }\n        }\n        if (keys(p).length === 0 || ancestorParse.parseNothing) {\n            return null;\n        }\n        return new ParseNode(parent, p);\n    }\n    get parse() {\n        return this._parse;\n    }\n    merge(other) {\n        this._parse = Object.assign(Object.assign({}, this._parse), other.parse);\n        other.remove();\n    }\n    /**\n     * Assemble an object for Vega's format.parse property.\n     */\n    assembleFormatParse() {\n        const formatParse = {};\n        for (const field of keys(this._parse)) {\n            const p = this._parse[field];\n            if (accessPathDepth(field) === 1) {\n                formatParse[field] = p;\n            }\n        }\n        return formatParse;\n    }\n    // format parse depends and produces all fields in its parse\n    producedFields() {\n        return new Set(keys(this._parse));\n    }\n    dependentFields() {\n        return new Set(keys(this._parse));\n    }\n    assembleTransforms(onlyNested = false) {\n        return keys(this._parse)\n            .filter(field => (onlyNested ? accessPathDepth(field) > 1 : true))\n            .map(field => {\n            const expr = parseExpression(field, this._parse[field]);\n            if (!expr) {\n                return null;\n            }\n            const formula = {\n                type: 'formula',\n                expr,\n                as: removePathFromField(field) // Vega output is always flattened\n            };\n            return formula;\n        })\n            .filter(t => t !== null);\n    }\n}\n//# sourceMappingURL=formatparse.js.map","import { isBinning } from '../../bin';\nimport { X, Y } from '../../channel';\nimport { isDiscrete, valueArray } from '../../channeldef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain } from '../../scale';\nimport { NOMINAL, ORDINAL } from '../../type';\nimport { contains, normalizeAngle } from '../../util';\nimport { getAxisConfig } from './config';\n// TODO: we need to refactor this method after we take care of config refactoring\n/**\n * Default rules for whether to show a grid should be shown for a channel.\n * If `grid` is unspecified, the default value is `true` for ordinal scales that are not binned\n */\nexport function defaultGrid(scaleType, fieldDef) {\n    return !hasDiscreteDomain(scaleType) && !isBinning(fieldDef.bin);\n}\nexport function gridScale(model, channel) {\n    const gridChannel = channel === 'x' ? 'y' : 'x';\n    if (model.getScaleComponent(gridChannel)) {\n        return model.scaleName(gridChannel);\n    }\n    return undefined;\n}\nexport function labelAngle(model, specifiedAxis, channel, fieldDef) {\n    // try axis value\n    if (specifiedAxis.labelAngle !== undefined) {\n        return normalizeAngle(specifiedAxis.labelAngle);\n    }\n    else {\n        // try axis config value\n        const angle = getAxisConfig('labelAngle', model.config, channel, orient(channel), model.getScaleComponent(channel).get('type'));\n        if (angle !== undefined) {\n            return normalizeAngle(angle);\n        }\n        else {\n            // get default value\n            if (channel === X && contains([NOMINAL, ORDINAL], fieldDef.type)) {\n                return 270;\n            }\n            // no default\n            return undefined;\n        }\n    }\n}\nexport function defaultLabelBaseline(angle, axisOrient) {\n    if (angle !== undefined) {\n        angle = normalizeAngle(angle);\n        if (axisOrient === 'top' || axisOrient === 'bottom') {\n            if (angle <= 45 || 315 <= angle) {\n                return axisOrient === 'top' ? 'bottom' : 'top';\n            }\n            else if (135 <= angle && angle <= 225) {\n                return axisOrient === 'top' ? 'top' : 'bottom';\n            }\n            else {\n                return 'middle';\n            }\n        }\n        else {\n            if (angle <= 45 || 315 <= angle || (135 <= angle && angle <= 225)) {\n                return 'middle';\n            }\n            else if (45 <= angle && angle <= 135) {\n                return axisOrient === 'left' ? 'top' : 'bottom';\n            }\n            else {\n                return axisOrient === 'left' ? 'bottom' : 'top';\n            }\n        }\n    }\n    return undefined;\n}\nexport function defaultLabelAlign(angle, axisOrient) {\n    if (angle !== undefined) {\n        angle = normalizeAngle(angle);\n        if (axisOrient === 'top' || axisOrient === 'bottom') {\n            if (angle % 180 === 0) {\n                return 'center';\n            }\n            else if (0 < angle && angle < 180) {\n                return axisOrient === 'top' ? 'right' : 'left';\n            }\n            else {\n                return axisOrient === 'top' ? 'left' : 'right';\n            }\n        }\n        else {\n            if ((angle + 90) % 180 === 0) {\n                return 'center';\n            }\n            else if (90 <= angle && angle < 270) {\n                return axisOrient === 'left' ? 'left' : 'right';\n            }\n            else {\n                return axisOrient === 'left' ? 'right' : 'left';\n            }\n        }\n    }\n    return undefined;\n}\nexport function defaultLabelFlush(fieldDef, channel) {\n    if (channel === 'x' && contains(['quantitative', 'temporal'], fieldDef.type)) {\n        return true;\n    }\n    return undefined;\n}\nexport function defaultLabelOverlap(fieldDef, scaleType) {\n    // do not prevent overlap for nominal data because there is no way to infer what the missing labels are\n    if (fieldDef.type !== 'nominal') {\n        if (scaleType === 'log') {\n            return 'greedy';\n        }\n        return true;\n    }\n    return undefined;\n}\nexport function orient(channel) {\n    switch (channel) {\n        case X:\n            return 'bottom';\n        case Y:\n            return 'left';\n    }\n    /* istanbul ignore next: This should never happen. */\n    throw new Error(log.message.INVALID_CHANNEL_FOR_AXIS);\n}\nexport function defaultTickCount({ fieldDef, scaleType, size }) {\n    if (!hasDiscreteDomain(scaleType) &&\n        scaleType !== 'log' &&\n        !contains(['month', 'hours', 'day', 'quarter'], fieldDef.timeUnit)) {\n        if (isBinning(fieldDef.bin)) {\n            // for binned data, we don't want more ticks than maxbins\n            return { signal: `ceil(${size.signal}/10)` };\n        }\n        return { signal: `ceil(${size.signal}/40)` };\n    }\n    return undefined;\n}\nexport function values(specifiedAxis, model, fieldDef) {\n    const vals = specifiedAxis.values;\n    if (vals) {\n        return valueArray(fieldDef, vals);\n    }\n    return undefined;\n}\nexport function defaultZindex(mark, fieldDef) {\n    if (mark === 'rect' && isDiscrete(fieldDef)) {\n        return 1;\n    }\n    return 0;\n}\n//# sourceMappingURL=properties.js.map","import { SourceNode } from './source';\nimport { GraticuleNode } from './graticule';\nimport { SequenceNode } from './sequence';\n/**\n * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.\n */\nexport function isDataSourceNode(node) {\n    return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;\n}\n/**\n * Abstract base class for BottomUpOptimizer and TopDownOptimizer.\n * Contains only mutation handling logic. Subclasses need to implement iteration logic.\n */\nclass OptimizerBase {\n    constructor() {\n        this._mutated = false;\n    }\n    // Once true, _mutated is never set to false\n    setMutated() {\n        this._mutated = true;\n    }\n    get mutatedFlag() {\n        return this._mutated;\n    }\n}\n/**\n * Starts from a node and runs the optimization function(the \"run\" method) upwards to the root,\n * depending on the continueFlag and mutatedFlag values returned by the optimization function.\n */\nexport class BottomUpOptimizer extends OptimizerBase {\n    constructor() {\n        super();\n        this._continue = false;\n    }\n    setContinue() {\n        this._continue = true;\n    }\n    get continueFlag() {\n        return this._continue;\n    }\n    get flags() {\n        return { continueFlag: this.continueFlag, mutatedFlag: this.mutatedFlag };\n    }\n    set flags({ continueFlag, mutatedFlag }) {\n        if (continueFlag) {\n            this.setContinue();\n        }\n        if (mutatedFlag) {\n            this.setMutated();\n        }\n    }\n    /**\n     * Reset the state of the optimizer after it has completed a run from the bottom of the tree to the top.\n     */\n    reset() {\n        // do nothing\n    }\n    optimizeNextFromLeaves(node) {\n        if (isDataSourceNode(node)) {\n            return false;\n        }\n        const next = node.parent;\n        const { continueFlag } = this.run(node);\n        if (continueFlag) {\n            this.optimizeNextFromLeaves(next);\n        }\n        return this.mutatedFlag;\n    }\n}\n/**\n * The optimizer function( the \"run\" method), is invoked on the given node and then continues recursively.\n */\nexport class TopDownOptimizer extends OptimizerBase {\n}\n//# sourceMappingURL=optimizer.js.map","import { __rest } from \"tslib\";\nimport { isObject, isString } from 'vega-util';\nimport { isAggregateOp, isArgmaxDef, isArgminDef, SHARED_DOMAIN_OP_INDEX, MULTIDOMAIN_SORT_OP_INDEX as UNIONDOMAIN_SORT_OP_INDEX } from '../../aggregate';\nimport { isBinning } from '../../bin';\nimport { getSecondaryRangeChannel, isScaleChannel } from '../../channel';\nimport { binRequiresRange, hasBand, valueExpr, vgField } from '../../channeldef';\nimport { MAIN, RAW } from '../../data';\nimport * as log from '../../log';\nimport { hasDiscreteDomain, isSelectionDomain } from '../../scale';\nimport { DEFAULT_SORT_OP, isSortArray, isSortByEncoding, isSortField } from '../../sort';\nimport * as util from '../../util';\nimport { isDataRefDomain, isDataRefUnionedDomain, isFieldRefUnionDomain } from '../../vega.schema';\nimport { getBinSignalName } from '../data/bin';\nimport { sortArrayIndexField } from '../data/calculate';\nimport { FACET_SCALE_PREFIX } from '../data/optimize';\nimport { isFacetModel, isUnitModel } from '../model';\nimport { SELECTION_DOMAIN } from '../selection';\nimport { SignalRefWrapper } from '../signal';\nimport { makeExplicit, makeImplicit, mergeValuesWithExplicit } from '../split';\nexport function parseScaleDomain(model) {\n    if (isUnitModel(model)) {\n        parseUnitScaleDomain(model);\n    }\n    else {\n        parseNonUnitScaleDomain(model);\n    }\n}\nfunction parseUnitScaleDomain(model) {\n    const scales = model.specifiedScales;\n    const localScaleComponents = model.component.scales;\n    util.keys(localScaleComponents).forEach((channel) => {\n        const specifiedScale = scales[channel];\n        const specifiedDomain = specifiedScale ? specifiedScale.domain : undefined;\n        const domains = parseDomainForChannel(model, channel);\n        const localScaleCmpt = localScaleComponents[channel];\n        localScaleCmpt.setWithExplicit('domains', domains);\n        if (isSelectionDomain(specifiedDomain)) {\n            // As scale parsing occurs before selection parsing, we use a temporary\n            // signal here and append the scale.domain definition. This is replaced\n            // with the correct domainRaw signal during scale assembly.\n            // For more information, see isRawSelectionDomain in selection.ts.\n            // FIXME: replace this with a special property in the scaleComponent\n            localScaleCmpt.set('domainRaw', {\n                signal: SELECTION_DOMAIN + util.hash(specifiedDomain)\n            }, true);\n        }\n        if (model.component.data.isFaceted) {\n            // get resolve from closest facet parent as this decides whether we need to refer to cloned subtree or not\n            let facetParent = model;\n            while (!isFacetModel(facetParent) && facetParent.parent) {\n                facetParent = facetParent.parent;\n            }\n            const resolve = facetParent.component.resolve.scale[channel];\n            if (resolve === 'shared') {\n                for (const domain of domains.value) {\n                    // Replace the scale domain with data output from a cloned subtree after the facet.\n                    if (isDataRefDomain(domain)) {\n                        // use data from cloned subtree (which is the same as data but with a prefix added once)\n                        domain.data = FACET_SCALE_PREFIX + domain.data.replace(FACET_SCALE_PREFIX, '');\n                    }\n                }\n            }\n        }\n    });\n}\nfunction parseNonUnitScaleDomain(model) {\n    for (const child of model.children) {\n        parseScaleDomain(child);\n    }\n    const localScaleComponents = model.component.scales;\n    util.keys(localScaleComponents).forEach((channel) => {\n        let domains;\n        let domainRaw = null;\n        for (const child of model.children) {\n            const childComponent = child.component.scales[channel];\n            if (childComponent) {\n                if (domains === undefined) {\n                    domains = childComponent.getWithExplicit('domains');\n                }\n                else {\n                    domains = mergeValuesWithExplicit(domains, childComponent.getWithExplicit('domains'), 'domains', 'scale', domainsTieBreaker);\n                }\n                const dr = childComponent.get('domainRaw');\n                if (domainRaw && dr && domainRaw.signal !== dr.signal) {\n                    log.warn('The same selection must be used to override scale domains in a layered view.');\n                }\n                domainRaw = dr;\n            }\n        }\n        localScaleComponents[channel].setWithExplicit('domains', domains);\n        if (domainRaw) {\n            localScaleComponents[channel].set('domainRaw', domainRaw, true);\n        }\n    });\n}\n/**\n * Remove unaggregated domain if it is not applicable\n * Add unaggregated domain if domain is not specified and config.scale.useUnaggregatedDomain is true.\n */\nfunction normalizeUnaggregatedDomain(domain, fieldDef, scaleType, scaleConfig) {\n    if (domain === 'unaggregated') {\n        const { valid, reason } = canUseUnaggregatedDomain(fieldDef, scaleType);\n        if (!valid) {\n            log.warn(reason);\n            return undefined;\n        }\n    }\n    else if (domain === undefined && scaleConfig.useUnaggregatedDomain) {\n        // Apply config if domain is not specified.\n        const { valid } = canUseUnaggregatedDomain(fieldDef, scaleType);\n        if (valid) {\n            return 'unaggregated';\n        }\n    }\n    return domain;\n}\nexport function parseDomainForChannel(model, channel) {\n    const scaleType = model.getScaleComponent(channel).get('type');\n    const domain = normalizeUnaggregatedDomain(model.scaleDomain(channel), model.fieldDef(channel), scaleType, model.config.scale);\n    if (domain !== model.scaleDomain(channel)) {\n        model.specifiedScales[channel] = Object.assign(Object.assign({}, model.specifiedScales[channel]), { domain });\n    }\n    // If channel is either X or Y then union them with X2 & Y2 if they exist\n    if (channel === 'x' && model.channelHasField('x2')) {\n        if (model.channelHasField('x')) {\n            return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'x'), parseSingleChannelDomain(scaleType, domain, model, 'x2'), 'domain', 'scale', domainsTieBreaker);\n        }\n        else {\n            return parseSingleChannelDomain(scaleType, domain, model, 'x2');\n        }\n    }\n    else if (channel === 'y' && model.channelHasField('y2')) {\n        if (model.channelHasField('y')) {\n            return mergeValuesWithExplicit(parseSingleChannelDomain(scaleType, domain, model, 'y'), parseSingleChannelDomain(scaleType, domain, model, 'y2'), 'domain', 'scale', domainsTieBreaker);\n        }\n        else {\n            return parseSingleChannelDomain(scaleType, domain, model, 'y2');\n        }\n    }\n    return parseSingleChannelDomain(scaleType, domain, model, channel);\n}\nfunction mapDomainToDataSignal(domain, type, timeUnit) {\n    return domain.map(v => {\n        const data = valueExpr(v, { timeUnit, type });\n        return { signal: `{data: ${data}}` };\n    });\n}\nfunction parseSingleChannelDomain(scaleType, domain, model, channel) {\n    const fieldDef = model.fieldDef(channel);\n    if (domain && domain !== 'unaggregated' && !isSelectionDomain(domain)) {\n        // explicit value\n        const { type, timeUnit } = fieldDef;\n        if (type === 'temporal' || timeUnit) {\n            return makeExplicit(mapDomainToDataSignal(domain, type, timeUnit));\n        }\n        return makeExplicit([domain]);\n    }\n    const stack = model.stack;\n    if (stack && channel === stack.fieldChannel) {\n        if (stack.offset === 'normalize') {\n            return makeImplicit([[0, 1]]);\n        }\n        const data = model.requestDataName(MAIN);\n        return makeImplicit([\n            {\n                data,\n                field: model.vgField(channel, { suffix: 'start' })\n            },\n            {\n                data,\n                field: model.vgField(channel, { suffix: 'end' })\n            }\n        ]);\n    }\n    const sort = isScaleChannel(channel)\n        ? domainSort(model, channel, scaleType)\n        : undefined;\n    if (domain === 'unaggregated') {\n        const data = model.requestDataName(MAIN);\n        const { field } = fieldDef;\n        return makeImplicit([\n            {\n                data,\n                field: vgField({ field, aggregate: 'min' })\n            },\n            {\n                data,\n                field: vgField({ field, aggregate: 'max' })\n            }\n        ]);\n    }\n    else if (isBinning(fieldDef.bin)) {\n        if (hasDiscreteDomain(scaleType)) {\n            if (scaleType === 'bin-ordinal') {\n                // we can omit the domain as it is inferred from the `bins` property\n                return makeImplicit([]);\n            }\n            // ordinal bin scale takes domain from bin_range, ordered by bin start\n            // This is useful for both axis-based scale (x/y) and legend-based scale (other channels).\n            return makeImplicit([\n                {\n                    // If sort by aggregation of a specified sort field, we need to use RAW table,\n                    // so we can aggregate values for the scale independently from the main aggregation.\n                    data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n                    // Use range if we added it and the scale does not support computing a range as a signal.\n                    field: model.vgField(channel, binRequiresRange(fieldDef, channel) ? { binSuffix: 'range' } : {}),\n                    // we have to use a sort object if sort = true to make the sort correct by bin start\n                    sort: sort === true || !isObject(sort)\n                        ? {\n                            field: model.vgField(channel, {}),\n                            op: 'min' // min or max doesn't matter since we sort by the start of the bin range\n                        }\n                        : sort\n                }\n            ]);\n        }\n        else {\n            // continuous scales\n            const { bin } = fieldDef;\n            if (isBinning(bin)) {\n                const binSignal = getBinSignalName(model, fieldDef.field, bin);\n                return makeImplicit([\n                    new SignalRefWrapper(() => {\n                        const signal = model.getSignalName(binSignal);\n                        return `[${signal}.start, ${signal}.stop]`;\n                    })\n                ]);\n            }\n            else {\n                return makeImplicit([\n                    {\n                        data: model.requestDataName(MAIN),\n                        field: model.vgField(channel, {})\n                    }\n                ]);\n            }\n        }\n    }\n    else if (fieldDef.timeUnit &&\n        util.contains(['time', 'utc'], scaleType) &&\n        hasBand(channel, fieldDef, isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined, model.markDef, model.config)) {\n        const data = model.requestDataName(MAIN);\n        return makeImplicit([\n            {\n                data,\n                field: model.vgField(channel)\n            },\n            {\n                data,\n                field: model.vgField(channel, { suffix: 'end' })\n            }\n        ]);\n    }\n    else if (sort) {\n        return makeImplicit([\n            {\n                // If sort by aggregation of a specified sort field, we need to use RAW table,\n                // so we can aggregate values for the scale independently from the main aggregation.\n                data: util.isBoolean(sort) ? model.requestDataName(MAIN) : model.requestDataName(RAW),\n                field: model.vgField(channel),\n                sort: sort\n            }\n        ]);\n    }\n    else {\n        return makeImplicit([\n            {\n                data: model.requestDataName(MAIN),\n                field: model.vgField(channel)\n            }\n        ]);\n    }\n}\nfunction normalizeSortField(sort, isStacked) {\n    const { op, field, order } = sort;\n    return Object.assign(Object.assign({ \n        // Apply default op\n        op: op || (isStacked ? 'sum' : DEFAULT_SORT_OP) }, (field ? { field: util.replacePathInField(field) } : {})), (order ? { order } : {}));\n}\nexport function domainSort(model, channel, scaleType) {\n    if (!hasDiscreteDomain(scaleType)) {\n        return undefined;\n    }\n    // save to cast as the only exception is the geojson type for shape, which would not generate a scale\n    const fieldDef = model.fieldDef(channel);\n    const sort = fieldDef.sort;\n    // if the sort is specified with array, use the derived sort index field\n    if (isSortArray(sort)) {\n        return {\n            op: 'min',\n            field: sortArrayIndexField(fieldDef, channel),\n            order: 'ascending'\n        };\n    }\n    const isStacked = model.stack !== null;\n    // Sorted based on an aggregate calculation over a specified sort field (only for ordinal scale)\n    if (isSortField(sort)) {\n        return normalizeSortField(sort, isStacked);\n    }\n    else if (isSortByEncoding(sort)) {\n        const { encoding, order } = sort;\n        const fieldDefToSortBy = model.fieldDef(encoding);\n        const { aggregate, field } = fieldDefToSortBy;\n        if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {\n            return normalizeSortField({\n                field: vgField(fieldDefToSortBy),\n                order\n            }, isStacked);\n        }\n        else if (isAggregateOp(aggregate) || !aggregate) {\n            return normalizeSortField({\n                op: aggregate,\n                field,\n                order\n            }, isStacked);\n        }\n    }\n    else if (sort === 'descending') {\n        return {\n            op: 'min',\n            field: model.vgField(channel),\n            order: 'descending'\n        };\n    }\n    else if (util.contains(['ascending', undefined /* default =ascending*/], sort)) {\n        return true;\n    }\n    // sort == null\n    return undefined;\n}\n/**\n * Determine if a scale can use unaggregated domain.\n * @return {Boolean} Returns true if all of the following conditions apply:\n * 1. `scale.domain` is `unaggregated`\n * 2. Aggregation function is not `count` or `sum`\n * 3. The scale is quantitative or time scale.\n */\nexport function canUseUnaggregatedDomain(fieldDef, scaleType) {\n    const { aggregate, type } = fieldDef;\n    if (!aggregate) {\n        return {\n            valid: false,\n            reason: log.message.unaggregateDomainHasNoEffectForRawField(fieldDef)\n        };\n    }\n    if (isString(aggregate) && !SHARED_DOMAIN_OP_INDEX[aggregate]) {\n        return {\n            valid: false,\n            reason: log.message.unaggregateDomainWithNonSharedDomainOp(aggregate)\n        };\n    }\n    if (type === 'quantitative') {\n        if (scaleType === 'log') {\n            return {\n                valid: false,\n                reason: log.message.unaggregatedDomainWithLogScale(fieldDef)\n            };\n        }\n    }\n    return { valid: true };\n}\n/**\n * Tie breaker for mergeValuesWithExplicit for domains. We concat the specified values.\n */\nfunction domainsTieBreaker(v1, v2, property, propertyOf) {\n    if (v1.explicit && v2.explicit) {\n        log.warn(log.message.mergeConflictingDomainProperty(property, propertyOf, v1.value, v2.value));\n    }\n    // If equal score, concat the domains so that we union them later.\n    return { explicit: v1.explicit, value: [...v1.value, ...v2.value] };\n}\n/**\n * Converts an array of domains to a single Vega scale domain.\n */\nexport function mergeDomains(domains) {\n    const uniqueDomains = util.unique(domains.map(domain => {\n        // ignore sort property when computing the unique domains\n        if (isDataRefDomain(domain)) {\n            const { sort: _s } = domain, domainWithoutSort = __rest(domain, [\"sort\"]);\n            return domainWithoutSort;\n        }\n        return domain;\n    }), util.hash);\n    const sorts = util.unique(domains\n        .map(d => {\n        if (isDataRefDomain(d)) {\n            const s = d.sort;\n            if (s !== undefined && !util.isBoolean(s)) {\n                if (s.op === 'count') {\n                    // let's make sure that if op is count, we don't use a field\n                    delete s.field;\n                }\n                if (s.order === 'ascending') {\n                    // drop order: ascending as it is the default\n                    delete s.order;\n                }\n            }\n            return s;\n        }\n        return undefined;\n    })\n        .filter(s => s !== undefined), util.hash);\n    if (uniqueDomains.length === 0) {\n        return undefined;\n    }\n    else if (uniqueDomains.length === 1) {\n        const domain = domains[0];\n        if (isDataRefDomain(domain) && sorts.length > 0) {\n            let sort = sorts[0];\n            if (sorts.length > 1) {\n                log.warn(log.message.MORE_THAN_ONE_SORT);\n                sort = true;\n            }\n            return Object.assign(Object.assign({}, domain), { sort });\n        }\n        return domain;\n    }\n    // only keep sort properties that work with unioned domains\n    const unionDomainSorts = util.unique(sorts.map(s => {\n        if (util.isBoolean(s) || s.op in UNIONDOMAIN_SORT_OP_INDEX) {\n            return s;\n        }\n        log.warn(log.message.domainSortDropped(s));\n        return true;\n    }), util.hash);\n    let sort;\n    if (unionDomainSorts.length === 1) {\n        sort = unionDomainSorts[0];\n    }\n    else if (unionDomainSorts.length > 1) {\n        log.warn(log.message.MORE_THAN_ONE_SORT);\n        sort = true;\n    }\n    const allData = util.unique(domains.map(d => {\n        if (isDataRefDomain(d)) {\n            return d.data;\n        }\n        return null;\n    }), x => x);\n    if (allData.length === 1 && allData[0] !== null) {\n        // create a union domain of different fields with a single data source\n        const domain = Object.assign({ data: allData[0], fields: uniqueDomains.map(d => d.field) }, (sort ? { sort } : {}));\n        return domain;\n    }\n    return Object.assign({ fields: uniqueDomains }, (sort ? { sort } : {}));\n}\n/**\n * Return a field if a scale single field.\n * Return `undefined` otherwise.\n *\n */\nexport function getFieldFromDomain(domain) {\n    if (isDataRefDomain(domain) && isString(domain.field)) {\n        return domain.field;\n    }\n    else if (isDataRefUnionedDomain(domain)) {\n        let field;\n        for (const nonUnionDomain of domain.fields) {\n            if (isDataRefDomain(nonUnionDomain) && isString(nonUnionDomain.field)) {\n                if (!field) {\n                    field = nonUnionDomain.field;\n                }\n                else if (field !== nonUnionDomain.field) {\n                    log.warn('Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect.');\n                    return field;\n                }\n            }\n        }\n        log.warn('Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect.');\n        return field;\n    }\n    else if (isFieldRefUnionDomain(domain)) {\n        log.warn('Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.');\n        const field = domain.fields[0];\n        return isString(field) ? field : undefined;\n    }\n    return undefined;\n}\nexport function assembleDomain(model, channel) {\n    const scaleComponent = model.component.scales[channel];\n    const domains = scaleComponent.get('domains').map((domain) => {\n        // Correct references to data as the original domain's data was determined\n        // in parseScale, which happens before parseData. Thus the original data\n        // reference can be incorrect.\n        if (isDataRefDomain(domain)) {\n            domain.data = model.lookupDataSource(domain.data);\n        }\n        return domain;\n    });\n    // domains is an array that has to be merged into a single vega domain\n    return mergeDomains(domains);\n}\n//# sourceMappingURL=domain.js.map","import { isGenerator, isInlineData, isNamedData, isSphereGenerator, isUrlData } from '../../data';\nimport { contains, keys, omit } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class SourceNode extends DataFlowNode {\n    constructor(data) {\n        super(null); // source cannot have parent\n        data = data || { name: 'source' };\n        let format;\n        if (!isGenerator(data)) {\n            format = data.format ? Object.assign({}, omit(data.format, ['parse'])) : {};\n        }\n        if (isInlineData(data)) {\n            this._data = { values: data.values };\n        }\n        else if (isUrlData(data)) {\n            this._data = { url: data.url };\n            if (!format.type) {\n                // Extract extension from URL using snippet from\n                // http://stackoverflow.com/questions/680929/how-to-extract-extension-from-filename-string-in-javascript\n                let defaultExtension = /(?:\\.([^.]+))?$/.exec(data.url)[1];\n                if (!contains(['json', 'csv', 'tsv', 'dsv', 'topojson'], defaultExtension)) {\n                    defaultExtension = 'json';\n                }\n                // defaultExtension has type string but we ensure that it is DataFormatType above\n                format.type = defaultExtension;\n            }\n        }\n        else if (isSphereGenerator(data)) {\n            // hardwire GeoJSON sphere data into output specification\n            this._data = { values: [{ type: 'Sphere' }] };\n        }\n        else if (isNamedData(data) || isGenerator(data)) {\n            this._data = {};\n        }\n        // set flag to check if generator\n        this._generator = isGenerator(data);\n        // any dataset can be named\n        if (data.name) {\n            this._name = data.name;\n        }\n        if (format && keys(format).length > 0) {\n            this._data.format = format;\n        }\n    }\n    dependentFields() {\n        return new Set();\n    }\n    producedFields() {\n        return undefined; // we don't know what this source produces\n    }\n    get data() {\n        return this._data;\n    }\n    hasName() {\n        return !!this._name;\n    }\n    get isGenerator() {\n        return this._generator;\n    }\n    get dataName() {\n        return this._name;\n    }\n    set dataName(name) {\n        this._name = name;\n    }\n    set parent(parent) {\n        throw new Error('Source nodes have to be roots.');\n    }\n    remove() {\n        throw new Error('Source nodes are roots and cannot be removed.');\n    }\n    hash() {\n        throw new Error('Cannot hash sources');\n    }\n    assemble() {\n        return Object.assign(Object.assign({ name: this._name }, this._data), { transform: [] });\n    }\n}\n//# sourceMappingURL=source.js.map","import { isArray } from 'vega-util';\nimport { valueExpr, vgField } from './channeldef';\nimport { fieldExpr as timeUnitFieldExpr, normalizeTimeUnit } from './timeunit';\nexport function isSelectionPredicate(predicate) {\n    return predicate && predicate['selection'];\n}\nexport function isFieldEqualPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.equal !== undefined;\n}\nexport function isFieldLTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lt !== undefined;\n}\nexport function isFieldLTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.lte !== undefined;\n}\nexport function isFieldGTPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gt !== undefined;\n}\nexport function isFieldGTEPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.gte !== undefined;\n}\nexport function isFieldRangePredicate(predicate) {\n    if (predicate && predicate.field) {\n        if (isArray(predicate.range) && predicate.range.length === 2) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function isFieldOneOfPredicate(predicate) {\n    return (predicate && !!predicate.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility\n    );\n}\nexport function isFieldValidPredicate(predicate) {\n    return predicate && !!predicate.field && predicate.valid !== undefined;\n}\nexport function isFieldPredicate(predicate) {\n    return (isFieldOneOfPredicate(predicate) ||\n        isFieldEqualPredicate(predicate) ||\n        isFieldRangePredicate(predicate) ||\n        isFieldLTPredicate(predicate) ||\n        isFieldGTPredicate(predicate) ||\n        isFieldLTEPredicate(predicate) ||\n        isFieldGTEPredicate(predicate));\n}\nfunction predicateValueExpr(v, timeUnit) {\n    return valueExpr(v, { timeUnit, time: true });\n}\nfunction predicateValuesExpr(vals, timeUnit) {\n    return vals.map(v => predicateValueExpr(v, timeUnit));\n}\n// This method is used by Voyager.  Do not change its behavior without changing Voyager.\nexport function fieldFilterExpression(predicate, useInRange = true) {\n    const { field, timeUnit } = predicate;\n    const fieldExpr = timeUnit\n        ? // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n            // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n            // TODO: support utc\n            'time(' + timeUnitFieldExpr(timeUnit, field) + ')'\n        : vgField(predicate, { expr: 'datum' });\n    if (isFieldEqualPredicate(predicate)) {\n        return fieldExpr + '===' + predicateValueExpr(predicate.equal, timeUnit);\n    }\n    else if (isFieldLTPredicate(predicate)) {\n        const upper = predicate.lt;\n        return `${fieldExpr}<${predicateValueExpr(upper, timeUnit)}`;\n    }\n    else if (isFieldGTPredicate(predicate)) {\n        const lower = predicate.gt;\n        return `${fieldExpr}>${predicateValueExpr(lower, timeUnit)}`;\n    }\n    else if (isFieldLTEPredicate(predicate)) {\n        const upper = predicate.lte;\n        return `${fieldExpr}<=${predicateValueExpr(upper, timeUnit)}`;\n    }\n    else if (isFieldGTEPredicate(predicate)) {\n        const lower = predicate.gte;\n        return `${fieldExpr}>=${predicateValueExpr(lower, timeUnit)}`;\n    }\n    else if (isFieldOneOfPredicate(predicate)) {\n        return `indexof([${predicateValuesExpr(predicate.oneOf, timeUnit).join(',')}], ${fieldExpr}) !== -1`;\n    }\n    else if (isFieldValidPredicate(predicate)) {\n        return predicate.valid ? `${fieldExpr}!==null&&!isNaN(${fieldExpr})` : `${fieldExpr}===null||isNaN(${fieldExpr})`;\n    }\n    else if (isFieldRangePredicate(predicate)) {\n        const lower = predicate.range[0];\n        const upper = predicate.range[1];\n        if (lower !== null && upper !== null && useInRange) {\n            return ('inrange(' +\n                fieldExpr +\n                ', [' +\n                predicateValueExpr(lower, timeUnit) +\n                ', ' +\n                predicateValueExpr(upper, timeUnit) +\n                '])');\n        }\n        const exprs = [];\n        if (lower !== null) {\n            exprs.push(`${fieldExpr} >= ${predicateValueExpr(lower, timeUnit)}`);\n        }\n        if (upper !== null) {\n            exprs.push(`${fieldExpr} <= ${predicateValueExpr(upper, timeUnit)}`);\n        }\n        return exprs.length > 0 ? exprs.join(' && ') : 'true';\n    }\n    /* istanbul ignore next: it should never reach here */\n    throw new Error(`Invalid field predicate: ${JSON.stringify(predicate)}`);\n}\nexport function normalizePredicate(f) {\n    if (isFieldPredicate(f) && f.timeUnit) {\n        return Object.assign(Object.assign({}, f), { timeUnit: normalizeTimeUnit(f.timeUnit) });\n    }\n    return f;\n}\n//# sourceMappingURL=predicate.js.map","/**\n * A class that behaves like a SignalRef but lazily generates the signal.\n * The provided generator function should use `Model.getSignalName` to use the correct signal name.\n */\nexport class SignalRefWrapper {\n    constructor(exprGenerator) {\n        Object.defineProperty(this, 'signal', {\n            enumerable: true,\n            get: exprGenerator\n        });\n    }\n    static fromName(rename, signalName) {\n        return new SignalRefWrapper(() => rename(signalName));\n    }\n}\n//# sourceMappingURL=signal.js.map","import { MAIN } from '../../data';\nimport { fieldIntersection, hash, hasIntersection, keys, some } from '../../util';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { OutputNode } from './dataflow';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { ParseNode } from './formatparse';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { FACET_SCALE_PREFIX } from './optimize';\nimport { BottomUpOptimizer, isDataSourceNode, TopDownOptimizer } from './optimizer';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\n/**\n * Move parse nodes up to forks.\n */\nexport class MoveParseUp extends BottomUpOptimizer {\n    run(node) {\n        const parent = node.parent;\n        // Move parse up by merging or swapping.\n        if (node instanceof ParseNode) {\n            if (isDataSourceNode(parent)) {\n                return this.flags;\n            }\n            if (parent.numChildren() > 1) {\n                // Don't move parse further up but continue with parent.\n                this.setContinue();\n                return this.flags;\n            }\n            if (parent instanceof ParseNode) {\n                this.setMutated();\n                parent.merge(node);\n            }\n            else {\n                // Don't swap with nodes that produce something that the parse node depends on (e.g. lookup).\n                if (fieldIntersection(parent.producedFields(), node.dependentFields())) {\n                    this.setContinue();\n                    return this.flags;\n                }\n                this.setMutated();\n                node.swapWithParent();\n            }\n        }\n        this.setContinue();\n        return this.flags;\n    }\n}\n/**\n * Merge identical nodes at forks by comparing hashes.\n *\n * Does not need to iterate from leaves so we implement this with recursion as it's a bit simpler.\n */\nexport class MergeIdenticalNodes extends TopDownOptimizer {\n    mergeNodes(parent, nodes) {\n        const mergedNode = nodes.shift();\n        for (const node of nodes) {\n            parent.removeChild(node);\n            node.parent = mergedNode;\n            node.remove();\n        }\n    }\n    run(node) {\n        const hashes = node.children.map(x => x.hash());\n        const buckets = {};\n        for (let i = 0; i < hashes.length; i++) {\n            if (buckets[hashes[i]] === undefined) {\n                buckets[hashes[i]] = [node.children[i]];\n            }\n            else {\n                buckets[hashes[i]].push(node.children[i]);\n            }\n        }\n        for (const k of keys(buckets)) {\n            if (buckets[k].length > 1) {\n                this.setMutated();\n                this.mergeNodes(node, buckets[k]);\n            }\n        }\n        for (const child of node.children) {\n            this.run(child);\n        }\n        return this.mutatedFlag;\n    }\n}\n/**\n * Repeatedly remove leaf nodes that are not output or facet nodes.\n * The reason is that we don't need subtrees that don't have any output nodes.\n * Facet nodes are needed for the row or column domains.\n */\nexport class RemoveUnusedSubtrees extends BottomUpOptimizer {\n    run(node) {\n        if (node instanceof OutputNode || node.numChildren() > 0 || node instanceof FacetNode) {\n            // no need to continue with parent because it is output node or will have children (there was a fork)\n            return this.flags;\n        }\n        else {\n            this.setMutated();\n            node.remove();\n        }\n        return this.flags;\n    }\n}\n/**\n * Removes duplicate time unit nodes (as determined by the name of the\n * output field) that may be generated due to selections projected over\n * time units.\n */\nexport class RemoveDuplicateTimeUnits extends BottomUpOptimizer {\n    constructor() {\n        super(...arguments);\n        this.fields = new Set();\n    }\n    run(node) {\n        this.setContinue();\n        if (node instanceof TimeUnitNode) {\n            const pfields = node.producedFields();\n            if (hasIntersection(pfields, this.fields)) {\n                this.setMutated();\n                node.remove();\n            }\n            else {\n                this.fields = new Set([...this.fields, ...pfields]);\n            }\n        }\n        return this.flags;\n    }\n    reset() {\n        this.fields.clear();\n    }\n}\n/**\n * Merge adjacent time unit nodes.\n */\nexport class MergeTimeUnits extends BottomUpOptimizer {\n    run(node) {\n        this.setContinue();\n        const parent = node.parent;\n        const timeUnitChildren = parent.children.filter(x => x instanceof TimeUnitNode);\n        const combination = timeUnitChildren.pop();\n        for (const timeUnit of timeUnitChildren) {\n            this.setMutated();\n            combination.merge(timeUnit);\n        }\n        return this.flags;\n    }\n}\n/**\n * Clones the subtree and ignores output nodes except for the leaves, which are renamed.\n */\nfunction cloneSubtree(facet) {\n    function clone(node) {\n        if (!(node instanceof FacetNode)) {\n            const copy = node.clone();\n            if (copy instanceof OutputNode) {\n                const newName = FACET_SCALE_PREFIX + copy.getSource();\n                copy.setSource(newName);\n                facet.model.component.data.outputNodes[newName] = copy;\n            }\n            else if (copy instanceof AggregateNode ||\n                copy instanceof StackNode ||\n                copy instanceof WindowTransformNode ||\n                copy instanceof JoinAggregateTransformNode) {\n                copy.addDimensions(facet.fields);\n            }\n            node.children.flatMap(clone).forEach((n) => (n.parent = copy));\n            return [copy];\n        }\n        return node.children.flatMap(clone);\n    }\n    return clone;\n}\n/**\n * Move facet nodes down to the next fork or output node. Also pull the main output with the facet node.\n * After moving down the facet node, make a copy of the subtree and make it a child of the main output.\n */\nexport function moveFacetDown(node) {\n    if (node instanceof FacetNode) {\n        if (node.numChildren() === 1 && !(node.children[0] instanceof OutputNode)) {\n            // move down until we hit a fork or output node\n            const child = node.children[0];\n            if (child instanceof AggregateNode ||\n                child instanceof StackNode ||\n                child instanceof WindowTransformNode ||\n                child instanceof JoinAggregateTransformNode) {\n                child.addDimensions(node.fields);\n            }\n            child.swapWithParent();\n            moveFacetDown(node);\n        }\n        else {\n            // move main to facet\n            const facetMain = node.model.component.data.main;\n            moveMainDownToFacet(facetMain);\n            // replicate the subtree and place it before the facet's main node\n            const cloner = cloneSubtree(node);\n            const copy = node.children.map(cloner).flat();\n            for (const c of copy) {\n                c.parent = facetMain;\n            }\n        }\n    }\n    else {\n        node.children.map(moveFacetDown);\n    }\n}\nfunction moveMainDownToFacet(node) {\n    if (node instanceof OutputNode && node.type === MAIN) {\n        if (node.numChildren() === 1) {\n            const child = node.children[0];\n            if (!(child instanceof FacetNode)) {\n                child.swapWithParent();\n                moveMainDownToFacet(node);\n            }\n        }\n    }\n}\n/**\n * Remove nodes that are not required starting from a root.\n */\nexport class RemoveUnnecessaryNodes extends TopDownOptimizer {\n    run(node) {\n        // remove output nodes that are not required\n        if (node instanceof OutputNode && !node.isRequired()) {\n            this.setMutated();\n            node.remove();\n        }\n        for (const child of node.children) {\n            this.run(child);\n        }\n        return this.mutatedFlag;\n    }\n}\n/**\n * Inserts an intermediate ParseNode containing all non-conflicting parse fields and removes the empty ParseNodes.\n *\n * We assume that dependent paths that do not have a parse node can be just merged.\n */\nexport class MergeParse extends BottomUpOptimizer {\n    run(node) {\n        const parent = node.parent;\n        const originalChildren = [...parent.children];\n        const parseChildren = parent.children.filter((child) => child instanceof ParseNode);\n        if (parent.numChildren() > 1 && parseChildren.length >= 1) {\n            const commonParse = {};\n            const conflictingParse = new Set();\n            for (const parseNode of parseChildren) {\n                const parse = parseNode.parse;\n                for (const k of keys(parse)) {\n                    if (!(k in commonParse)) {\n                        commonParse[k] = parse[k];\n                    }\n                    else if (commonParse[k] !== parse[k]) {\n                        conflictingParse.add(k);\n                    }\n                }\n            }\n            for (const field of conflictingParse) {\n                delete commonParse[field];\n            }\n            if (keys(commonParse).length !== 0) {\n                this.setMutated();\n                const mergedParseNode = new ParseNode(parent, commonParse);\n                for (const childNode of originalChildren) {\n                    if (childNode instanceof ParseNode) {\n                        for (const key of keys(commonParse)) {\n                            delete childNode.parse[key];\n                        }\n                    }\n                    parent.removeChild(childNode);\n                    childNode.parent = mergedParseNode;\n                    // remove empty parse nodes\n                    if (childNode instanceof ParseNode && keys(childNode.parse).length === 0) {\n                        childNode.remove();\n                    }\n                }\n            }\n        }\n        this.setContinue();\n        return this.flags;\n    }\n}\nexport class MergeAggregates extends BottomUpOptimizer {\n    run(node) {\n        const parent = node.parent;\n        const aggChildren = parent.children.filter((child) => child instanceof AggregateNode);\n        // Object which we'll use to map the fields which an aggregate is grouped by to\n        // the set of aggregates with that grouping. This is useful as only aggregates\n        // with the same group by can be merged\n        const groupedAggregates = {};\n        // Build groupedAggregates\n        for (const agg of aggChildren) {\n            const groupBys = hash(agg.groupBy);\n            if (!(groupBys in groupedAggregates)) {\n                groupedAggregates[groupBys] = [];\n            }\n            groupedAggregates[groupBys].push(agg);\n        }\n        // Merge aggregateNodes with same key in groupedAggregates\n        for (const group of keys(groupedAggregates)) {\n            const mergeableAggs = groupedAggregates[group];\n            if (mergeableAggs.length > 1) {\n                const mergedAggs = mergeableAggs.pop();\n                for (const agg of mergeableAggs) {\n                    if (mergedAggs.merge(agg)) {\n                        parent.removeChild(agg);\n                        agg.parent = mergedAggs;\n                        agg.remove();\n                        this.setMutated();\n                    }\n                }\n            }\n        }\n        this.setContinue();\n        return this.flags;\n    }\n}\n/**\n * Merge bin nodes and move them up through forks. Stop at filters and parse as we want them to stay before the bin node.\n */\nexport class MergeBins extends BottomUpOptimizer {\n    constructor(model) {\n        super();\n        this.model = model;\n    }\n    run(node) {\n        const parent = node.parent;\n        const moveBinsUp = !(isDataSourceNode(parent) || parent instanceof FilterNode || parent instanceof ParseNode);\n        const promotableBins = [];\n        const remainingBins = [];\n        for (const child of parent.children) {\n            if (child instanceof BinNode) {\n                if (moveBinsUp && !fieldIntersection(parent.producedFields(), child.dependentFields())) {\n                    promotableBins.push(child);\n                }\n                else {\n                    remainingBins.push(child);\n                }\n            }\n        }\n        if (promotableBins.length > 0) {\n            const promotedBin = promotableBins.pop();\n            for (const bin of promotableBins) {\n                promotedBin.merge(bin, this.model.renameSignal.bind(this.model));\n            }\n            this.setMutated();\n            if (parent instanceof BinNode) {\n                parent.merge(promotedBin, this.model.renameSignal.bind(this.model));\n            }\n            else {\n                promotedBin.swapWithParent();\n            }\n        }\n        if (remainingBins.length > 1) {\n            const remainingBin = remainingBins.pop();\n            for (const bin of remainingBins) {\n                remainingBin.merge(bin, this.model.renameSignal.bind(this.model));\n            }\n            this.setMutated();\n        }\n        this.setContinue();\n        return this.flags;\n    }\n}\n/**\n * This optimizer takes output nodes that are at a fork and moves them before the fork.\n *\n * The algorithm iterates over the children and tries to find the last output node in a cahin of output nodes.\n * It then moves all output nodes before that main output node. All other children (and the children of the output nodes)\n * are inserted after the main output node.\n */\nexport class MergeOutputs extends BottomUpOptimizer {\n    run(node) {\n        const parent = node.parent;\n        const children = [...parent.children];\n        const hasOutputChild = some(children, child => child instanceof OutputNode);\n        if (!hasOutputChild || parent.numChildren() <= 1) {\n            this.setContinue();\n            return this.flags;\n        }\n        const otherChildren = [];\n        // The output node we will connect all other nodes to\n        // output nodes will be added before, other nodes after\n        let mainOutput;\n        for (const child of children) {\n            if (child instanceof OutputNode) {\n                let lastOutput = child;\n                while (lastOutput.numChildren() === 1) {\n                    const theChild = lastOutput.children[0];\n                    if (theChild instanceof OutputNode) {\n                        lastOutput = theChild;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                otherChildren.push(...lastOutput.children);\n                if (mainOutput) {\n                    // Move the output nodes before the mainOutput. We do this by setting\n                    // the parent of the first not to the parent of the main output and\n                    // the main output's parent to the last output.\n                    // note: the child is the first output\n                    parent.removeChild(child);\n                    child.parent = mainOutput.parent;\n                    mainOutput.parent.removeChild(mainOutput);\n                    mainOutput.parent = lastOutput;\n                    this.setMutated();\n                }\n                else {\n                    mainOutput = lastOutput;\n                }\n            }\n            else {\n                otherChildren.push(child);\n            }\n        }\n        if (otherChildren.length) {\n            this.setMutated();\n            for (const child of otherChildren) {\n                child.parent.removeChild(child);\n                child.parent = mainOutput;\n            }\n        }\n        this.setContinue();\n        return this.flags;\n    }\n}\n//# sourceMappingURL=optimizers.js.map","// DateTime definition object\nimport { isNumber } from 'vega-util';\nimport * as log from './log';\nimport { duplicate, keys } from './util';\n/*\n * A designated year that starts on Sunday.\n */\nconst SUNDAY_YEAR = 2006;\nexport function isDateTime(o) {\n    return (!!o &&\n        (!!o.year ||\n            !!o.quarter ||\n            !!o.month ||\n            !!o.date ||\n            !!o.day ||\n            !!o.hours ||\n            !!o.minutes ||\n            !!o.seconds ||\n            !!o.milliseconds));\n}\nexport const MONTHS = [\n    'january',\n    'february',\n    'march',\n    'april',\n    'may',\n    'june',\n    'july',\n    'august',\n    'september',\n    'october',\n    'november',\n    'december'\n];\nexport const SHORT_MONTHS = MONTHS.map(m => m.substr(0, 3));\nexport const DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];\nexport const SHORT_DAYS = DAYS.map(d => d.substr(0, 3));\nfunction normalizeQuarter(q) {\n    if (isNumber(q)) {\n        if (q > 4) {\n            log.warn(log.message.invalidTimeUnit('quarter', q));\n        }\n        // We accept 1-based quarter, so need to readjust to 0-based quarter\n        return (q - 1).toString();\n    }\n    else {\n        // Invalid quarter\n        throw new Error(log.message.invalidTimeUnit('quarter', q));\n    }\n}\nfunction normalizeMonth(m) {\n    if (isNumber(m)) {\n        // We accept 1-based month, so need to readjust to 0-based month\n        return (m - 1).toString();\n    }\n    else {\n        const lowerM = m.toLowerCase();\n        const monthIndex = MONTHS.indexOf(lowerM);\n        if (monthIndex !== -1) {\n            return monthIndex + ''; // 0 for january, ...\n        }\n        const shortM = lowerM.substr(0, 3);\n        const shortMonthIndex = SHORT_MONTHS.indexOf(shortM);\n        if (shortMonthIndex !== -1) {\n            return shortMonthIndex + '';\n        }\n        // Invalid month\n        throw new Error(log.message.invalidTimeUnit('month', m));\n    }\n}\nfunction normalizeDay(d) {\n    if (isNumber(d)) {\n        // mod so that this can be both 0-based where 0 = sunday\n        // and 1-based where 7=sunday\n        return (d % 7) + '';\n    }\n    else {\n        const lowerD = d.toLowerCase();\n        const dayIndex = DAYS.indexOf(lowerD);\n        if (dayIndex !== -1) {\n            return dayIndex + ''; // 0 for january, ...\n        }\n        const shortD = lowerD.substr(0, 3);\n        const shortDayIndex = SHORT_DAYS.indexOf(shortD);\n        if (shortDayIndex !== -1) {\n            return shortDayIndex + '';\n        }\n        // Invalid day\n        throw new Error(log.message.invalidTimeUnit('day', d));\n    }\n}\n/**\n * Return Vega Expression for a particular date time.\n * @param d\n * @param normalize whether to normalize quarter, month, day.\n * @param toJSON whether to return the date in JSON format\n */\nexport function dateTimeExpr(d, normalize = false, toJSON = false) {\n    const units = [];\n    if (normalize && d.day !== undefined) {\n        if (keys(d).length > 1) {\n            log.warn(log.message.droppedDay(d));\n            d = duplicate(d);\n            delete d.day;\n        }\n    }\n    if (d.year !== undefined) {\n        units.push(d.year);\n    }\n    else if (d.day !== undefined) {\n        // Set year to 2006 for working with day since January 1 2006 is a Sunday\n        units.push(SUNDAY_YEAR);\n    }\n    else {\n        units.push(0);\n    }\n    if (d.month !== undefined) {\n        const month = normalize ? normalizeMonth(d.month) : d.month;\n        units.push(month);\n    }\n    else if (d.quarter !== undefined) {\n        const quarter = normalize ? normalizeQuarter(d.quarter) : d.quarter;\n        units.push(quarter + '*3');\n    }\n    else {\n        units.push(0); // months start at zero in JS\n    }\n    if (d.date !== undefined) {\n        units.push(d.date);\n    }\n    else if (d.day !== undefined) {\n        // HACK: Day only works as a standalone unit\n        // This is only correct because we always set year to 2006 for day\n        const day = normalize ? normalizeDay(d.day) : d.day;\n        units.push(day + '+1');\n    }\n    else {\n        units.push(1); // Date starts at 1 in JS\n    }\n    // Note: can't use TimeUnit enum here as importing it will create\n    // circular dependency problem!\n    for (const timeUnit of ['hours', 'minutes', 'seconds', 'milliseconds']) {\n        if (d[timeUnit] !== undefined) {\n            units.push(d[timeUnit]);\n        }\n        else {\n            units.push(0);\n        }\n    }\n    const unitsString = units.join(', ');\n    if (toJSON) {\n        if (d.utc) {\n            return new Function(`return +new Date(Date.UTC(${unitsString}))`)();\n        }\n        else {\n            return new Function(`return +new Date(${unitsString})`)();\n        }\n    }\n    if (d.utc) {\n        return `utc(${unitsString})`;\n    }\n    else {\n        return `datetime(${unitsString})`;\n    }\n}\n//# sourceMappingURL=datetime.js.map","export function isAnyConcatSpec(spec) {\n    return isVConcatSpec(spec) || isHConcatSpec(spec) || isConcatSpec(spec);\n}\nexport function isConcatSpec(spec) {\n    return spec['concat'] !== undefined;\n}\nexport function isVConcatSpec(spec) {\n    return spec['vconcat'] !== undefined;\n}\nexport function isHConcatSpec(spec) {\n    return spec['hconcat'] !== undefined;\n}\n//# sourceMappingURL=concat.js.map","import { isGenerator, isGraticuleGenerator, isInlineData, isNamedData, isSequenceGenerator, isUrlData, MAIN, RAW } from '../../data';\nimport * as log from '../../log';\nimport { isAggregate, isBin, isCalculate, isDensity, isFilter, isFlatten, isFold, isImpute, isJoinAggregate, isLoess, isLookup, isRegression, isPivot, isSample, isStack, isTimeUnit, isWindow } from '../../transform';\nimport { deepEqual, mergeDeep } from '../../util';\nimport { isFacetModel, isLayerModel, isUnitModel } from '../model';\nimport { requiresSelectionId } from '../selection';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { DensityTransformNode } from './density';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { FlattenTransformNode } from './flatten';\nimport { FoldTransformNode } from './fold';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { GraticuleNode } from './graticule';\nimport { IdentifierNode } from './identifier';\nimport { ImputeNode } from './impute';\nimport { AncestorParse } from './index';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { makeJoinAggregateFromFacet } from './joinaggregatefacet';\nimport { LoessTransformNode } from './loess';\nimport { LookupNode } from './lookup';\nimport { RegressionTransformNode } from './regression';\nimport { PivotTransformNode } from './pivot';\nimport { SampleTransformNode } from './sample';\nimport { SequenceNode } from './sequence';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\nexport function findSource(data, sources) {\n    for (const other of sources) {\n        const otherData = other.data;\n        // if both datasets have a name defined, we cannot merge\n        if (data.name && other.hasName() && data.name !== other.dataName) {\n            continue;\n        }\n        // feature and mesh are mutually exclusive\n        if (data['format'] && data['format'].mesh && otherData.format && otherData.format.feature) {\n            continue;\n        }\n        if (isInlineData(data) && isInlineData(otherData)) {\n            if (deepEqual(data.values, otherData.values)) {\n                return other;\n            }\n        }\n        else if (isUrlData(data) && isUrlData(otherData)) {\n            if (data.url === otherData.url) {\n                return other;\n            }\n        }\n        else if (isNamedData(data)) {\n            if (data.name === other.dataName) {\n                return other;\n            }\n        }\n    }\n    return null;\n}\nfunction parseRoot(model, sources) {\n    if (model.data !== undefined || !model.parent) {\n        // if the model defines a data source or is the root, create a source node\n        if (model.data === null) {\n            // data: null means we should ignore the parent's data so we just create a new data source\n            const source = new SourceNode([]);\n            sources.push(source);\n            return source;\n        }\n        const existingSource = findSource(model.data, sources);\n        if (existingSource) {\n            if (!isGenerator(model.data)) {\n                existingSource.data.format = mergeDeep({}, model.data.format, existingSource.data.format);\n            }\n            // if the new source has a name but the existing one does not, we can set it\n            if (!existingSource.hasName() && model.data.name) {\n                existingSource.dataName = model.data.name;\n            }\n            return existingSource;\n        }\n        else {\n            const source = new SourceNode(model.data);\n            sources.push(source);\n            return source;\n        }\n    }\n    else {\n        // If we don't have a source defined (overriding parent's data), use the parent's facet root or main.\n        return model.parent.component.data.facetRoot\n            ? model.parent.component.data.facetRoot\n            : model.parent.component.data.main;\n    }\n}\n/**\n * Parses a transform array into a chain of connected dataflow nodes.\n */\nexport function parseTransformArray(head, model, ancestorParse) {\n    let lookupCounter = 0;\n    for (const t of model.transforms) {\n        let derivedType = undefined;\n        let transformNode;\n        if (isCalculate(t)) {\n            transformNode = head = new CalculateNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFilter(t)) {\n            transformNode = head = ParseNode.makeImplicitFromFilterTransform(head, t, ancestorParse) || head;\n            head = new FilterNode(head, model, t.filter);\n        }\n        else if (isBin(t)) {\n            transformNode = head = BinNode.makeFromTransform(head, t, model);\n            derivedType = 'number';\n        }\n        else if (isTimeUnit(t)) {\n            derivedType = 'date';\n            const parsedAs = ancestorParse.getWithExplicit(t.field);\n            // Create parse node because the input to time unit is always date.\n            if (parsedAs.value === undefined) {\n                head = new ParseNode(head, { [t.field]: derivedType });\n                ancestorParse.set(t.field, derivedType, false);\n            }\n            transformNode = head = TimeUnitNode.makeFromTransform(head, t);\n        }\n        else if (isAggregate(t)) {\n            transformNode = head = AggregateNode.makeFromTransform(head, t);\n            derivedType = 'number';\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n        }\n        else if (isLookup(t)) {\n            transformNode = head = LookupNode.make(head, model, t, lookupCounter++);\n            derivedType = 'derived';\n        }\n        else if (isWindow(t)) {\n            transformNode = head = new WindowTransformNode(head, t);\n            derivedType = 'number';\n        }\n        else if (isJoinAggregate(t)) {\n            transformNode = head = new JoinAggregateTransformNode(head, t);\n            derivedType = 'number';\n        }\n        else if (isStack(t)) {\n            transformNode = head = StackNode.makeFromTransform(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFold(t)) {\n            transformNode = head = new FoldTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isFlatten(t)) {\n            transformNode = head = new FlattenTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isPivot(t)) {\n            transformNode = head = new PivotTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isSample(t)) {\n            head = new SampleTransformNode(head, t);\n        }\n        else if (isImpute(t)) {\n            transformNode = head = ImputeNode.makeFromTransform(head, t);\n            derivedType = 'derived';\n        }\n        else if (isDensity(t)) {\n            transformNode = head = new DensityTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isRegression(t)) {\n            transformNode = head = new RegressionTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else if (isLoess(t)) {\n            transformNode = head = new LoessTransformNode(head, t);\n            derivedType = 'derived';\n        }\n        else {\n            log.warn(log.message.invalidTransformIgnored(t));\n            continue;\n        }\n        if (transformNode && derivedType !== undefined) {\n            for (const field of transformNode.producedFields() || []) {\n                ancestorParse.set(field, derivedType, false);\n            }\n        }\n    }\n    return head;\n}\n/*\nDescription of the dataflow (http://asciiflow.com/):\n     +--------+\n     | Source |\n     +---+----+\n         |\n         v\n     FormatParse\n     (explicit)\n         |\n         v\n     Transforms\n(Filter, Calculate, Binning, TimeUnit, Aggregate, Window, ...)\n         |\n         v\n     FormatParse\n     (implicit)\n         |\n         v\n Binning (in `encoding`)\n         |\n         v\n Timeunit (in `encoding`)\n         |\n         v\nFormula From Sort Array\n         |\n         v\n      +--+--+\n      | Raw |\n      +-----+\n         |\n         v\n  Aggregate (in `encoding`)\n         |\n         v\n  Stack (in `encoding`)\n         |\n         v\n  Invalid Filter\n         |\n         v\n   +----------+\n   |   Main   |\n   +----------+\n         |\n         v\n     +-------+\n     | Facet |----> \"column\", \"column-layout\", and \"row\"\n     +-------+\n         |\n         v\n  ...Child data...\n*/\nexport function parseData(model) {\n    let head = parseRoot(model, model.component.data.sources);\n    const { outputNodes, outputNodeRefCounts } = model.component.data;\n    const ancestorParse = model.parent ? model.parent.component.data.ancestorParse.clone() : new AncestorParse();\n    const data = model.data;\n    if (isGenerator(data)) {\n        // insert generator transform\n        if (isSequenceGenerator(data)) {\n            head = new SequenceNode(head, data.sequence);\n        }\n        else if (isGraticuleGenerator(data)) {\n            head = new GraticuleNode(head, data.graticule);\n        }\n        // no parsing necessary for generator\n        ancestorParse.parseNothing = true;\n    }\n    else if (data && data.format && data.format.parse === null) {\n        // format.parse: null means disable parsing\n        ancestorParse.parseNothing = true;\n    }\n    head = ParseNode.makeExplicit(head, model, ancestorParse) || head;\n    // Default discrete selections require an identifier transform to\n    // uniquely identify data points as the _id field is volatile. Add\n    // this transform at the head of our pipeline such that the identifier\n    // field is available for all subsequent datasets. Additional identifier\n    // transforms will be necessary when new tuples are constructed\n    // (e.g., post-aggregation).\n    if (requiresSelectionId(model) &&\n        // only add identifier to unit/layer models that do not have layer parents to avoid redundant identifier transforms\n        ((isUnitModel(model) || isLayerModel(model)) && (!model.parent || !isLayerModel(model.parent)))) {\n        head = new IdentifierNode(head);\n    }\n    // HACK: This is equivalent for merging bin extent for union scale.\n    // FIXME(https://github.com/vega/vega-lite/issues/2270): Correctly merge extent / bin node for shared bin scale\n    const parentIsLayer = model.parent && isLayerModel(model.parent);\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (parentIsLayer) {\n            head = BinNode.makeFromEncoding(head, model) || head;\n        }\n    }\n    if (model.transforms.length > 0) {\n        head = parseTransformArray(head, model, ancestorParse);\n    }\n    head = ParseNode.makeImplicitFromEncoding(head, model, ancestorParse) || head;\n    if (isUnitModel(model)) {\n        head = GeoJSONNode.parseAll(head, model);\n        head = GeoPointNode.parseAll(head, model);\n    }\n    if (isUnitModel(model) || isFacetModel(model)) {\n        if (!parentIsLayer) {\n            head = BinNode.makeFromEncoding(head, model) || head;\n        }\n        head = TimeUnitNode.makeFromEncoding(head, model) || head;\n        head = CalculateNode.parseAllForSortIndex(head, model);\n    }\n    // add an output node pre aggregation\n    const rawName = model.getName(RAW);\n    const raw = new OutputNode(head, rawName, RAW, outputNodeRefCounts);\n    outputNodes[rawName] = raw;\n    head = raw;\n    if (isUnitModel(model)) {\n        const agg = AggregateNode.makeFromEncoding(head, model);\n        if (agg) {\n            head = agg;\n            if (requiresSelectionId(model)) {\n                head = new IdentifierNode(head);\n            }\n        }\n        head = ImputeNode.makeFromEncoding(head, model) || head;\n        head = StackNode.makeFromEncoding(head, model) || head;\n    }\n    if (isUnitModel(model)) {\n        head = FilterInvalidNode.make(head, model) || head;\n    }\n    // output node for marks\n    const mainName = model.getName(MAIN);\n    const main = new OutputNode(head, mainName, MAIN, outputNodeRefCounts);\n    outputNodes[mainName] = main;\n    head = main;\n    // add facet marker\n    let facetRoot = null;\n    if (isFacetModel(model)) {\n        const facetName = model.getName('facet');\n        // Derive new sort index field for facet's sort array\n        head = CalculateNode.parseAllForSortIndex(head, model);\n        // Derive new aggregate for facet's sort field\n        // augment data source with new fields for crossed facet\n        head = makeJoinAggregateFromFacet(head, model.facet) || head;\n        facetRoot = new FacetNode(head, model, facetName, main.getSource());\n        outputNodes[facetName] = facetRoot;\n        head = facetRoot;\n    }\n    return Object.assign(Object.assign({}, model.component.data), { outputNodes,\n        outputNodeRefCounts,\n        raw,\n        main,\n        facetRoot,\n        ancestorParse });\n}\n//# sourceMappingURL=parse.js.map","import { getSizeType, POSITION_SCALE_CHANNELS } from '../../channel';\nimport { getViewConfigContinuousSize, getViewConfigDiscreteSize } from '../../config';\nimport { hasDiscreteDomain } from '../../scale';\nimport { isStep } from '../../spec/base';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { mergeValuesWithExplicit } from '../split';\nexport function parseLayerLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    const layoutSizeCmpt = model.component.layoutSize;\n    layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n    layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\nexport const parseRepeatLayoutSize = parseLayerLayoutSize;\nconst SIZE_TYPE_TO_MERGE = {\n    vconcat: 'width',\n    hconcat: 'height'\n};\nexport function parseConcatLayoutSize(model) {\n    parseChildrenLayoutSize(model);\n    const layoutSizeCmpt = model.component.layoutSize;\n    const sizeTypeToMerge = SIZE_TYPE_TO_MERGE[model.concatType];\n    if (sizeTypeToMerge) {\n        layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n    }\n}\nexport function parseChildrenLayoutSize(model) {\n    for (const child of model.children) {\n        child.parseLayoutSize();\n    }\n}\nfunction parseNonUnitLayoutSizeForChannel(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const resolve = model.component.resolve;\n    let mergedSize;\n    // Try to merge layout size\n    for (const child of model.children) {\n        const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n        const scaleResolve = resolve.scale[channel];\n        if (scaleResolve === 'independent' && childSize.value === 'step') {\n            // Do not merge independent scales with range-step as their size depends\n            // on the scale domains, which can be different between scales.\n            mergedSize = undefined;\n            break;\n        }\n        if (mergedSize) {\n            if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n                // For independent scale, only merge if all the sizes are the same.\n                // If the values are different, abandon the merge!\n                mergedSize = undefined;\n                break;\n            }\n            mergedSize = mergeValuesWithExplicit(mergedSize, childSize, sizeType, '');\n        }\n        else {\n            mergedSize = childSize;\n        }\n    }\n    if (mergedSize) {\n        // If merged, rename size and set size of all children.\n        for (const child of model.children) {\n            model.renameSignal(child.getName(sizeType), model.getName(sizeType));\n            child.component.layoutSize.set(sizeType, 'merged', false);\n        }\n        return mergedSize;\n    }\n    else {\n        // Otherwise, there is no merged size.\n        return {\n            explicit: false,\n            value: undefined\n        };\n    }\n}\nexport function parseUnitLayoutSize(model) {\n    const { size, component } = model;\n    for (const channel of POSITION_SCALE_CHANNELS) {\n        const sizeType = getSizeType(channel);\n        if (size[sizeType]) {\n            const specifiedSize = size[sizeType];\n            component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n        }\n        else {\n            const defaultSize = defaultUnitSize(model, sizeType);\n            component.layoutSize.set(sizeType, defaultSize, false);\n        }\n    }\n}\nfunction defaultUnitSize(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const config = model.config;\n    const scaleComponent = model.getScaleComponent(channel);\n    if (scaleComponent) {\n        const scaleType = scaleComponent.get('type');\n        const range = scaleComponent.get('range');\n        if (hasDiscreteDomain(scaleType)) {\n            const size = getViewConfigDiscreteSize(config.view, sizeType);\n            if (isVgRangeStep(range) || isStep(size)) {\n                // For discrete domain with range.step, use dynamic width/height\n                return 'step';\n            }\n            else {\n                return size;\n            }\n        }\n        else {\n            return getViewConfigContinuousSize(config.view, sizeType);\n        }\n    }\n    else if (model.hasProjection) {\n        return getViewConfigContinuousSize(config.view, sizeType);\n    }\n    else {\n        const size = getViewConfigDiscreteSize(config.view, sizeType);\n        return isStep(size) ? size.step : size;\n    }\n}\n//# sourceMappingURL=parse.js.map","import { getSecondaryRangeChannel } from '../../channel';\nimport { hasBand, vgField } from '../../channeldef';\nimport { fieldExpr } from '../../timeunit';\nimport { duplicate, hash, keys, vals } from '../../util';\nimport { isUnitModel } from '../model';\nimport { DataFlowNode } from './dataflow';\nexport class TimeUnitNode extends DataFlowNode {\n    constructor(parent, formula) {\n        super(parent);\n        this.formula = formula;\n    }\n    clone() {\n        return new TimeUnitNode(null, duplicate(this.formula));\n    }\n    static makeFromEncoding(parent, model) {\n        const formula = model.reduceFieldDef((timeUnitComponent, fieldDef, channel) => {\n            const { timeUnit, field } = fieldDef;\n            const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;\n            const band = isUnitModel(model) && hasBand(channel, fieldDef, channelDef2, model.markDef, model.config);\n            if (timeUnit) {\n                const as = vgField(fieldDef, { forAs: true });\n                timeUnitComponent[hash({ as, timeUnit, field })] = Object.assign({ as,\n                    timeUnit,\n                    field }, (band ? { band: true } : {}));\n            }\n            return timeUnitComponent;\n        }, {});\n        if (keys(formula).length === 0) {\n            return null;\n        }\n        return new TimeUnitNode(parent, formula);\n    }\n    static makeFromTransform(parent, t) {\n        const component = Object.assign({}, t);\n        return new TimeUnitNode(parent, {\n            [hash(component)]: component\n        });\n    }\n    /**\n     * Merge together TimeUnitNodes assigning the children of `other` to `this`\n     * and removing `other`.\n     */\n    merge(other) {\n        this.formula = Object.assign({}, this.formula);\n        // if the same hash happen twice, merge \"band\"\n        for (const key in other.formula) {\n            if (!this.formula[key] || other.formula[key].band) {\n                // copy if it's not a duplicate or if we need to include copy band over\n                this.formula[key] = other.formula[key];\n            }\n        }\n        for (const child of other.children) {\n            other.removeChild(child);\n            child.parent = this;\n        }\n        other.remove();\n    }\n    producedFields() {\n        return new Set(vals(this.formula).map(f => f.as));\n    }\n    dependentFields() {\n        return new Set(vals(this.formula).map(f => f.field));\n    }\n    hash() {\n        return `TimeUnit ${hash(this.formula)}`;\n    }\n    assemble() {\n        const transforms = [];\n        for (const f of vals(this.formula)) {\n            const { timeUnit, field, as, band } = f;\n            transforms.push({\n                type: 'formula',\n                as,\n                expr: fieldExpr(timeUnit, field)\n            });\n            if (band) {\n                transforms.push({\n                    type: 'formula',\n                    as: as + '_end',\n                    expr: fieldExpr(timeUnit, field, { end: true })\n                });\n            }\n        }\n        return transforms;\n    }\n}\n//# sourceMappingURL=timeunit.js.map","export const HEADER_CHANNELS = ['row', 'column'];\nexport const HEADER_TYPES = ['header', 'footer'];\n//# sourceMappingURL=component.js.map","import { keys } from './util';\nexport const CONDITIONAL_AXIS_PROP_INDEX = {\n    labelAlign: {\n        part: 'labels',\n        vgProp: 'align'\n    },\n    labelBaseline: {\n        part: 'labels',\n        vgProp: 'align'\n    },\n    labelColor: {\n        part: 'labels',\n        vgProp: 'fill'\n    },\n    labelFont: {\n        part: 'labels',\n        vgProp: 'font'\n    },\n    labelFontSize: {\n        part: 'labels',\n        vgProp: 'fontSize'\n    },\n    labelFontStyle: {\n        part: 'labels',\n        vgProp: 'fontStyle'\n    },\n    labelFontWeight: {\n        part: 'labels',\n        vgProp: 'fontWeight'\n    },\n    labelOpacity: {\n        part: 'labels',\n        vgProp: 'opacity'\n    },\n    gridColor: {\n        part: 'grid',\n        vgProp: 'stroke'\n    },\n    gridDash: {\n        part: 'grid',\n        vgProp: 'strokeDash'\n    },\n    gridDashOffset: {\n        part: 'grid',\n        vgProp: 'strokeDash'\n    },\n    gridOpacity: {\n        part: 'grid',\n        vgProp: 'opacity'\n    },\n    gridWidth: {\n        part: 'grid',\n        vgProp: 'strokeWidth'\n    },\n    tickColor: {\n        part: 'ticks',\n        vgProp: 'stroke'\n    },\n    tickDash: {\n        part: 'ticks',\n        vgProp: 'strokeDash'\n    },\n    tickDashOffset: {\n        part: 'ticks',\n        vgProp: 'strokeDash'\n    },\n    tickOpacity: {\n        part: 'ticks',\n        vgProp: 'opacity'\n    },\n    tickWidth: {\n        part: 'ticks',\n        vgProp: 'strokeWidth'\n    }\n};\nexport function isConditionalAxisValue(v) {\n    return v['condition'];\n}\nexport const AXIS_PARTS = ['domain', 'grid', 'labels', 'ticks', 'title'];\n/**\n * A dictionary listing whether a certain axis property is applicable for only main axes or only grid axes.\n * (Properties not listed are applicable for both)\n */\nexport const AXIS_PROPERTY_TYPE = {\n    grid: 'grid',\n    gridColor: 'grid',\n    gridDash: 'grid',\n    gridOpacity: 'grid',\n    gridScale: 'grid',\n    gridWidth: 'grid',\n    orient: 'main',\n    bandPosition: 'both',\n    domain: 'main',\n    domainColor: 'main',\n    domainOpacity: 'main',\n    domainWidth: 'main',\n    format: 'main',\n    formatType: 'main',\n    labelAlign: 'main',\n    labelAngle: 'main',\n    labelBaseline: 'main',\n    labelBound: 'main',\n    labelColor: 'main',\n    labelFlush: 'main',\n    labelFlushOffset: 'main',\n    labelFont: 'main',\n    labelFontSize: 'main',\n    labelFontWeight: 'main',\n    labelLimit: 'main',\n    labelOpacity: 'main',\n    labelOverlap: 'main',\n    labelPadding: 'main',\n    labels: 'main',\n    maxExtent: 'main',\n    minExtent: 'main',\n    offset: 'main',\n    position: 'main',\n    tickColor: 'main',\n    tickExtra: 'main',\n    tickOffset: 'both',\n    tickOpacity: 'main',\n    tickRound: 'main',\n    ticks: 'main',\n    tickSize: 'main',\n    title: 'main',\n    titleAlign: 'main',\n    titleAngle: 'main',\n    titleBaseline: 'main',\n    titleColor: 'main',\n    titleFont: 'main',\n    titleFontSize: 'main',\n    titleFontWeight: 'main',\n    titleLimit: 'main',\n    titleOpacity: 'main',\n    titlePadding: 'main',\n    titleX: 'main',\n    titleY: 'main',\n    tickWidth: 'both',\n    tickCount: 'both',\n    values: 'both',\n    scale: 'both',\n    zindex: 'both' // this is actually set afterward, so it doesn't matter\n};\nexport const COMMON_AXIS_PROPERTIES_INDEX = {\n    orient: 1,\n    bandPosition: 1,\n    domain: 1,\n    domainColor: 1,\n    domainDash: 1,\n    domainDashOffset: 1,\n    domainOpacity: 1,\n    domainWidth: 1,\n    format: 1,\n    formatType: 1,\n    grid: 1,\n    gridColor: 1,\n    gridDash: 1,\n    gridDashOffset: 1,\n    gridOpacity: 1,\n    gridWidth: 1,\n    labelAlign: 1,\n    labelAngle: 1,\n    labelBaseline: 1,\n    labelBound: 1,\n    labelColor: 1,\n    labelFlush: 1,\n    labelFlushOffset: 1,\n    labelFont: 1,\n    labelFontSize: 1,\n    labelFontStyle: 1,\n    labelFontWeight: 1,\n    labelLimit: 1,\n    labelOpacity: 1,\n    labelOverlap: 1,\n    labelPadding: 1,\n    labels: 1,\n    labelSeparation: 1,\n    maxExtent: 1,\n    minExtent: 1,\n    offset: 1,\n    position: 1,\n    tickColor: 1,\n    tickCount: 1,\n    tickDash: 1,\n    tickDashOffset: 1,\n    tickExtra: 1,\n    tickMinStep: 1,\n    tickOffset: 1,\n    tickOpacity: 1,\n    tickRound: 1,\n    ticks: 1,\n    tickSize: 1,\n    tickWidth: 1,\n    title: 1,\n    titleAlign: 1,\n    titleAnchor: 1,\n    titleAngle: 1,\n    titleBaseline: 1,\n    titleColor: 1,\n    titleFont: 1,\n    titleFontSize: 1,\n    titleFontStyle: 1,\n    titleFontWeight: 1,\n    titleLimit: 1,\n    titleOpacity: 1,\n    titlePadding: 1,\n    titleX: 1,\n    titleY: 1,\n    values: 1,\n    zindex: 1\n};\nconst AXIS_PROPERTIES_INDEX = Object.assign(Object.assign({}, COMMON_AXIS_PROPERTIES_INDEX), { labelExpr: 1, encoding: 1 });\nexport function isAxisProperty(prop) {\n    return !!AXIS_PROPERTIES_INDEX[prop];\n}\n// Export for dependent projects\nexport const AXIS_PROPERTIES = keys(AXIS_PROPERTIES_INDEX);\n//# sourceMappingURL=axis.js.map","import { isColorChannel } from '../../channel';\nimport { valueArray } from '../../channeldef';\nimport { isContinuousToContinuous } from '../../scale';\nimport { contains, getFirstDefined } from '../../util';\nimport { getFirstConditionValue } from './encode';\nexport function values(legend, fieldDef) {\n    const vals = legend.values;\n    if (vals) {\n        return valueArray(fieldDef, vals);\n    }\n    return undefined;\n}\nexport function defaultSymbolType(mark, channel, shapeChannelDef, markShape) {\n    if (channel !== 'shape') {\n        // use the value from the shape encoding or the mark config if they exist\n        const shape = getFirstConditionValue(shapeChannelDef) || markShape;\n        if (shape) {\n            return shape;\n        }\n    }\n    switch (mark) {\n        case 'bar':\n        case 'rect':\n        case 'image':\n        case 'square':\n            return 'square';\n        case 'line':\n        case 'trail':\n        case 'rule':\n            return 'stroke';\n        case 'point':\n        case 'circle':\n        case 'tick':\n        case 'geoshape':\n        case 'area':\n        case 'text':\n            return 'circle';\n    }\n}\nexport function clipHeight(legendType) {\n    if (legendType === 'gradient') {\n        return 20;\n    }\n    return undefined;\n}\nexport function type(params) {\n    const { legend } = params;\n    return getFirstDefined(legend.type, defaultType(params));\n}\nexport function defaultType({ channel, timeUnit, scaleType, alwaysReturn }) {\n    // Following the logic in https://github.com/vega/vega-parser/blob/master/src/parsers/legend.js\n    if (isColorChannel(channel)) {\n        if (contains(['quarter', 'month', 'day'], timeUnit)) {\n            return 'symbol';\n        }\n        if (isContinuousToContinuous(scaleType)) {\n            return alwaysReturn ? 'gradient' : undefined;\n        }\n    }\n    return alwaysReturn ? 'symbol' : undefined;\n}\nexport function direction({ legend, legendConfig, timeUnit, channel, scaleType }) {\n    const orient = getFirstDefined(legend.orient, legendConfig.orient, 'right');\n    const legendType = type({ legend, channel, timeUnit, scaleType, alwaysReturn: true });\n    return getFirstDefined(legend.direction, legendConfig[legendType ? 'gradientDirection' : 'symbolDirection'], defaultDirection(orient, legendType));\n}\nfunction defaultDirection(orient, legendType) {\n    switch (orient) {\n        case 'top':\n        case 'bottom':\n            return 'horizontal';\n        case 'left':\n        case 'right':\n        case 'none':\n        case undefined: // undefined = \"right\" in Vega\n            return undefined; // vertical is Vega's default\n        default:\n            // top-left / ...\n            // For inner legend, uses compact layout like Tableau\n            return legendType === 'gradient' ? 'horizontal' : undefined;\n    }\n}\nexport function defaultGradientLength({ legend, legendConfig, model, channel, scaleType }) {\n    const { gradientHorizontalMaxLength, gradientHorizontalMinLength, gradientVerticalMaxLength, gradientVerticalMinLength } = legendConfig;\n    const dir = direction({ legend, legendConfig, channel, scaleType });\n    if (dir === 'horizontal') {\n        const orient = getFirstDefined(legend.orient, legendConfig.orient);\n        if (orient === 'top' || orient === 'bottom') {\n            return gradientLengthSignal(model, 'width', gradientHorizontalMinLength, gradientHorizontalMaxLength);\n        }\n        else {\n            return gradientHorizontalMinLength;\n        }\n    }\n    else {\n        // vertical / undefined (Vega uses vertical by default)\n        return gradientLengthSignal(model, 'height', gradientVerticalMinLength, gradientVerticalMaxLength);\n    }\n}\nfunction gradientLengthSignal(model, sizeType, min, max) {\n    const sizeSignal = model.getSizeSignalRef(sizeType).signal;\n    return { signal: `clamp(${sizeSignal}, ${min}, ${max})` };\n}\nexport function defaultLabelOverlap(scaleType) {\n    if (contains(['quantile', 'threshold', 'log'], scaleType)) {\n        return 'greedy';\n    }\n    return undefined;\n}\n//# sourceMappingURL=properties.js.map","import { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from './../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the join aggregate transform nodes.\n */\nexport class JoinAggregateTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new JoinAggregateTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n    dependentFields() {\n        const out = new Set();\n        if (this.transform.groupby) {\n            this.transform.groupby.forEach(f => out.add(f));\n        }\n        this.transform.joinaggregate\n            .map(w => w.field)\n            .filter(f => f !== undefined)\n            .forEach(f => out.add(f));\n        return out;\n    }\n    producedFields() {\n        return new Set(this.transform.joinaggregate.map(this.getDefaultName));\n    }\n    getDefaultName(joinAggregateFieldDef) {\n        return joinAggregateFieldDef.as || vgField(joinAggregateFieldDef);\n    }\n    hash() {\n        return `JoinAggregateTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        for (const joinaggregate of this.transform.joinaggregate) {\n            ops.push(joinaggregate.op);\n            as.push(this.getDefaultName(joinaggregate));\n            fields.push(joinaggregate.field === undefined ? null : joinaggregate.field);\n        }\n        const groupby = this.transform.groupby;\n        return Object.assign({ type: 'joinaggregate', as,\n            ops,\n            fields }, (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=joinaggregate.js.map","import { isArgmaxDef, isArgminDef } from '../../aggregate';\nimport { getPositionChannelFromLatLong, getSecondaryRangeChannel, isGeoPositionChannel, isScaleChannel } from '../../channel';\nimport { binRequiresRange, hasBand, isTypedFieldDef, vgField } from '../../channeldef';\nimport * as log from '../../log';\nimport { duplicate, hash, keys, replacePathInField, setEqual } from '../../util';\nimport { isUnitModel } from '../model';\nimport { DataFlowNode } from './dataflow';\nfunction addDimension(dims, channel, fieldDef, model) {\n    const channelDef2 = isUnitModel(model) ? model.encoding[getSecondaryRangeChannel(channel)] : undefined;\n    if (isTypedFieldDef(fieldDef) &&\n        isUnitModel(model) &&\n        hasBand(channel, fieldDef, channelDef2, model.markDef, model.config)) {\n        dims.add(vgField(fieldDef, {}));\n        dims.add(vgField(fieldDef, { suffix: 'end' }));\n        if (binRequiresRange(fieldDef, channel)) {\n            dims.add(vgField(fieldDef, { binSuffix: 'range' }));\n        }\n    }\n    else if (isGeoPositionChannel(channel)) {\n        const posChannel = getPositionChannelFromLatLong(channel);\n        dims.add(model.getName(posChannel));\n    }\n    else {\n        dims.add(vgField(fieldDef));\n    }\n    return dims;\n}\nfunction mergeMeasures(parentMeasures, childMeasures) {\n    for (const field of keys(childMeasures)) {\n        // when we merge a measure, we either have to add an aggregation operator or even a new field\n        const ops = childMeasures[field];\n        for (const op of keys(ops)) {\n            if (field in parentMeasures) {\n                // add operator to existing measure field\n                parentMeasures[field][op] = new Set([...(parentMeasures[field][op] || []), ...ops[op]]);\n            }\n            else {\n                parentMeasures[field] = { [op]: ops[op] };\n            }\n        }\n    }\n}\nexport class AggregateNode extends DataFlowNode {\n    /**\n     * @param dimensions string set for dimensions\n     * @param measures dictionary mapping field name => dict of aggregation functions and names to use\n     */\n    constructor(parent, dimensions, measures) {\n        super(parent);\n        this.dimensions = dimensions;\n        this.measures = measures;\n    }\n    clone() {\n        return new AggregateNode(null, new Set(this.dimensions), duplicate(this.measures));\n    }\n    get groupBy() {\n        return this.dimensions;\n    }\n    static makeFromEncoding(parent, model) {\n        let isAggregate = false;\n        model.forEachFieldDef(fd => {\n            if (fd.aggregate) {\n                isAggregate = true;\n            }\n        });\n        const meas = {};\n        const dims = new Set();\n        if (!isAggregate) {\n            // no need to create this node if the model has no aggregation\n            return null;\n        }\n        model.forEachFieldDef((fieldDef, channel) => {\n            const { aggregate, field } = fieldDef;\n            if (aggregate) {\n                if (aggregate === 'count') {\n                    meas['*'] = meas['*'] || {};\n                    meas['*']['count'] = new Set([vgField(fieldDef, { forAs: true })]);\n                }\n                else {\n                    if (isArgminDef(aggregate) || isArgmaxDef(aggregate)) {\n                        const op = isArgminDef(aggregate) ? 'argmin' : 'argmax';\n                        const argField = aggregate[op];\n                        meas[argField] = meas[argField] || {};\n                        meas[argField][op] = new Set([vgField({ op, field: argField }, { forAs: true })]);\n                    }\n                    else {\n                        meas[field] = meas[field] || {};\n                        meas[field][aggregate] = new Set([vgField(fieldDef, { forAs: true })]);\n                    }\n                    // For scale channel with domain === 'unaggregated', add min/max so we can use their union as unaggregated domain\n                    if (isScaleChannel(channel) && model.scaleDomain(channel) === 'unaggregated') {\n                        meas[field] = meas[field] || {};\n                        meas[field]['min'] = new Set([vgField({ field, aggregate: 'min' }, { forAs: true })]);\n                        meas[field]['max'] = new Set([vgField({ field, aggregate: 'max' }, { forAs: true })]);\n                    }\n                }\n            }\n            else {\n                addDimension(dims, channel, fieldDef, model);\n            }\n        });\n        if (dims.size + keys(meas).length === 0) {\n            return null;\n        }\n        return new AggregateNode(parent, dims, meas);\n    }\n    static makeFromTransform(parent, t) {\n        const dims = new Set();\n        const meas = {};\n        for (const s of t.aggregate) {\n            const { op, field, as } = s;\n            if (op) {\n                if (op === 'count') {\n                    meas['*'] = meas['*'] || {};\n                    meas['*']['count'] = new Set([as ? as : vgField(s, { forAs: true })]);\n                }\n                else {\n                    meas[field] = meas[field] || {};\n                    meas[field][op] = new Set([as ? as : vgField(s, { forAs: true })]);\n                }\n            }\n        }\n        for (const s of t.groupby || []) {\n            dims.add(s);\n        }\n        if (dims.size + keys(meas).length === 0) {\n            return null;\n        }\n        return new AggregateNode(parent, dims, meas);\n    }\n    merge(other) {\n        if (setEqual(this.dimensions, other.dimensions)) {\n            mergeMeasures(this.measures, other.measures);\n            return true;\n        }\n        else {\n            log.debug('different dimensions, cannot merge');\n            return false;\n        }\n    }\n    addDimensions(fields) {\n        fields.forEach(this.dimensions.add, this.dimensions);\n    }\n    dependentFields() {\n        return new Set([...this.dimensions, ...keys(this.measures)]);\n    }\n    producedFields() {\n        const out = new Set();\n        for (const field of keys(this.measures)) {\n            for (const op of keys(this.measures[field])) {\n                const m = this.measures[field][op];\n                if (m.size === 0) {\n                    out.add(`${op}_${field}`);\n                }\n                else {\n                    m.forEach(out.add, out);\n                }\n            }\n        }\n        return out;\n    }\n    hash() {\n        return `Aggregate ${hash({ dimensions: this.dimensions, measures: this.measures })}`;\n    }\n    assemble() {\n        const ops = [];\n        const fields = [];\n        const as = [];\n        for (const field of keys(this.measures)) {\n            for (const op of keys(this.measures[field])) {\n                for (const alias of this.measures[field][op]) {\n                    as.push(alias);\n                    ops.push(op);\n                    fields.push(field === '*' ? null : replacePathInField(field));\n                }\n            }\n        }\n        const result = {\n            type: 'aggregate',\n            groupby: [...this.dimensions],\n            ops,\n            fields,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=aggregate.js.map","import { isArray } from 'vega-util';\nimport { isBinning } from '../../bin';\nimport { COLUMN, FACET_CHANNELS, ROW } from '../../channel';\nimport { vgField } from '../../channeldef';\nimport * as log from '../../log';\nimport { hasDiscreteDomain } from '../../scale';\nimport { DEFAULT_SORT_OP, isSortField } from '../../sort';\nimport { hash } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { HEADER_CHANNELS, HEADER_TYPES } from '../header/component';\nimport { assembleDomain, getFieldFromDomain } from '../scale/domain';\nimport { sortArrayIndexField } from './calculate';\nimport { DataFlowNode } from './dataflow';\n/**\n * A node that helps us track what fields we are faceting by.\n */\nexport class FacetNode extends DataFlowNode {\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    constructor(parent, model, name, data) {\n        super(parent);\n        this.model = model;\n        this.name = name;\n        this.data = data;\n        for (const channel of FACET_CHANNELS) {\n            const fieldDef = model.facet[channel];\n            if (fieldDef) {\n                const { bin, sort } = fieldDef;\n                this[channel] = Object.assign({ name: model.getName(`${channel}_domain`), fields: [vgField(fieldDef), ...(isBinning(bin) ? [vgField(fieldDef, { binSuffix: 'end' })] : [])] }, (isSortField(sort)\n                    ? { sortField: sort }\n                    : isArray(sort)\n                        ? { sortIndexField: sortArrayIndexField(fieldDef, channel) }\n                        : {}));\n            }\n        }\n        this.childModel = model.child;\n    }\n    hash() {\n        let out = `Facet`;\n        for (const channel of FACET_CHANNELS) {\n            if (this[channel]) {\n                out += ` ${channel.charAt(0)}:${hash(this[channel])}`;\n            }\n        }\n        return out;\n    }\n    get fields() {\n        const f = [];\n        for (const channel of FACET_CHANNELS) {\n            if (this[channel] && this[channel].fields) {\n                f.push(...this[channel].fields);\n            }\n        }\n        return f;\n    }\n    dependentFields() {\n        const depFields = new Set(this.fields);\n        for (const channel of FACET_CHANNELS) {\n            if (this[channel]) {\n                if (this[channel].sortField) {\n                    depFields.add(this[channel].sortField.field);\n                }\n                if (this[channel].sortIndexField) {\n                    depFields.add(this[channel].sortIndexField);\n                }\n            }\n        }\n        return depFields;\n    }\n    producedFields() {\n        return new Set(); // facet does not produce any new fields\n    }\n    /**\n     * The name to reference this source is its name.\n     */\n    getSource() {\n        return this.name;\n    }\n    getChildIndependentFieldsWithStep() {\n        const childIndependentFieldsWithStep = {};\n        for (const channel of ['x', 'y']) {\n            const childScaleComponent = this.childModel.component.scales[channel];\n            if (childScaleComponent && !childScaleComponent.merged) {\n                // independent scale\n                const type = childScaleComponent.get('type');\n                const range = childScaleComponent.get('range');\n                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                    const domain = assembleDomain(this.childModel, channel);\n                    const field = getFieldFromDomain(domain);\n                    if (field) {\n                        childIndependentFieldsWithStep[channel] = field;\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                    }\n                }\n            }\n        }\n        return childIndependentFieldsWithStep;\n    }\n    assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep) {\n        const childChannel = { row: 'y', column: 'x' }[channel];\n        const fields = [];\n        const ops = [];\n        const as = [];\n        if (childIndependentFieldsWithStep && childIndependentFieldsWithStep[childChannel]) {\n            if (crossedDataName) {\n                // If there is a crossed data, calculate max\n                fields.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n                ops.push('max');\n            }\n            else {\n                // If there is no crossed data, just calculate distinct\n                fields.push(childIndependentFieldsWithStep[childChannel]);\n                ops.push('distinct');\n            }\n            // Although it is technically a max, just name it distinct so it's easier to refer to it\n            as.push(`distinct_${childIndependentFieldsWithStep[childChannel]}`);\n        }\n        const { sortField, sortIndexField } = this[channel];\n        if (sortField) {\n            const { op = DEFAULT_SORT_OP, field } = sortField;\n            fields.push(field);\n            ops.push(op);\n            as.push(vgField(sortField, { forAs: true }));\n        }\n        else if (sortIndexField) {\n            fields.push(sortIndexField);\n            ops.push('max');\n            as.push(sortIndexField);\n        }\n        return {\n            name: this[channel].name,\n            // Use data from the crossed one if it exist\n            source: crossedDataName || this.data,\n            transform: [\n                Object.assign({ type: 'aggregate', groupby: this[channel].fields }, (fields.length\n                    ? {\n                        fields,\n                        ops,\n                        as\n                    }\n                    : {}))\n            ]\n        };\n    }\n    assembleFacetHeaderData(childIndependentFieldsWithStep) {\n        const { columns } = this.model.layout;\n        const { layoutHeaders } = this.model.component;\n        const data = [];\n        const hasSharedAxis = {};\n        for (const headerChannel of HEADER_CHANNELS) {\n            for (const headerType of HEADER_TYPES) {\n                const headers = (layoutHeaders[headerChannel] && layoutHeaders[headerChannel][headerType]) || [];\n                for (const header of headers) {\n                    if (header.axes && header.axes.length > 0) {\n                        hasSharedAxis[headerChannel] = true;\n                        break;\n                    }\n                }\n            }\n            if (hasSharedAxis[headerChannel]) {\n                const cardinality = `length(data(\"${this.facet.name}\"))`;\n                const stop = headerChannel === 'row'\n                    ? columns\n                        ? { signal: `ceil(${cardinality} / ${columns})` }\n                        : 1\n                    : columns\n                        ? { signal: `min(${cardinality}, ${columns})` }\n                        : { signal: cardinality };\n                data.push({\n                    name: `${this.facet.name}_${headerChannel}`,\n                    transform: [\n                        {\n                            type: 'sequence',\n                            start: 0,\n                            stop\n                        }\n                    ]\n                });\n            }\n        }\n        const { row, column } = hasSharedAxis;\n        if (row || column) {\n            data.unshift(this.assembleRowColumnHeaderData('facet', null, childIndependentFieldsWithStep));\n        }\n        return data;\n    }\n    assemble() {\n        const data = [];\n        let crossedDataName = null;\n        const childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n        const { column, row, facet } = this;\n        if (column && row && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n            // Need to create a cross dataset to correctly calculate cardinality\n            crossedDataName = `cross_${this.column.name}_${this.row.name}`;\n            const fields = [].concat(childIndependentFieldsWithStep.x || [], childIndependentFieldsWithStep.y || []);\n            const ops = fields.map(() => 'distinct');\n            data.push({\n                name: crossedDataName,\n                source: this.data,\n                transform: [\n                    {\n                        type: 'aggregate',\n                        groupby: this.fields,\n                        fields,\n                        ops\n                    }\n                ]\n            });\n        }\n        for (const channel of [COLUMN, ROW]) {\n            if (this[channel]) {\n                data.push(this.assembleRowColumnHeaderData(channel, crossedDataName, childIndependentFieldsWithStep));\n            }\n        }\n        if (facet) {\n            const facetData = this.assembleFacetHeaderData(childIndependentFieldsWithStep);\n            if (facetData) {\n                data.push(...facetData);\n            }\n        }\n        return data;\n    }\n}\n//# sourceMappingURL=facet.js.map","import { getMarkType } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nexport class CompositeMarkNormalizer {\n    constructor(name, run) {\n        this.name = name;\n        this.run = run;\n    }\n    hasMatchingType(spec) {\n        if (isUnitSpec(spec)) {\n            return getMarkType(spec.mark) === this.name;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=base.js.map","import * as log from '../log';\nimport { isAnyConcatSpec, isFacetSpec, isLayerSpec, isRepeatSpec, isUnitSpec } from '../spec';\nimport { ConcatModel } from './concat';\nimport { FacetModel } from './facet';\nimport { LayerModel } from './layer';\nimport { RepeatModel } from './repeat';\nimport { UnitModel } from './unit';\nexport function buildModel(spec, parent, parentGivenName, unitSize, repeater, config) {\n    if (isFacetSpec(spec)) {\n        return new FacetModel(spec, parent, parentGivenName, repeater, config);\n    }\n    else if (isLayerSpec(spec)) {\n        return new LayerModel(spec, parent, parentGivenName, unitSize, repeater, config);\n    }\n    else if (isUnitSpec(spec)) {\n        return new UnitModel(spec, parent, parentGivenName, unitSize, repeater, config);\n    }\n    else if (isRepeatSpec(spec)) {\n        return new RepeatModel(spec, parent, parentGivenName, repeater, config);\n    }\n    else if (isAnyConcatSpec(spec)) {\n        return new ConcatModel(spec, parent, parentGivenName, repeater, config);\n    }\n    throw new Error(log.message.invalidSpec(spec));\n}\n//# sourceMappingURL=buildmodel.js.map","import { __rest } from \"tslib\";\nimport { isArray } from 'vega-util';\nimport { AXIS_PARTS, AXIS_PROPERTY_TYPE, CONDITIONAL_AXIS_PROP_INDEX, isConditionalAxisValue } from '../../axis';\nimport { POSITION_SCALE_CHANNELS } from '../../channel';\nimport { defaultTitle } from '../../channeldef';\nimport { getFirstDefined, keys } from '../../util';\nimport { isSignalRef } from '../../vega.schema';\nimport { expression } from '../predicate';\nfunction assembleTitle(title, config) {\n    if (isArray(title)) {\n        return title.map(fieldDef => defaultTitle(fieldDef, config)).join(', ');\n    }\n    return title;\n}\nfunction setAxisEncode(axis, part, vgProp, vgRef) {\n    axis.encode = axis.encode || {};\n    axis.encode[part] = axis.encode[part] || {};\n    axis.encode[part].update = axis.encode[part].update || {};\n    // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291\n    axis.encode[part].update[vgProp] = vgRef;\n}\nexport function assembleAxis(axisCmpt, kind, config, opt = { header: false }) {\n    const _a = axisCmpt.combine(), { orient, scale, labelExpr, title, zindex } = _a, axis = __rest(_a, [\"orient\", \"scale\", \"labelExpr\", \"title\", \"zindex\"]);\n    // Remove properties that are not valid for this kind of axis\n    keys(axis).forEach(prop => {\n        const propType = AXIS_PROPERTY_TYPE[prop];\n        const propValue = axis[prop];\n        if (propType && propType !== kind && propType !== 'both') {\n            delete axis[prop];\n        }\n        else if (isConditionalAxisValue(propValue)) {\n            const { vgProp, part } = CONDITIONAL_AXIS_PROP_INDEX[prop];\n            const { condition, value } = propValue;\n            const vgRef = [\n                ...(isArray(condition) ? condition : [condition]).map(c => {\n                    const { value: v, test } = c;\n                    return {\n                        test: expression(null, test),\n                        value: v\n                    };\n                }),\n                { value }\n            ];\n            setAxisEncode(axis, part, vgProp, vgRef);\n            delete axis[prop];\n        }\n    });\n    if (kind === 'grid') {\n        if (!axis.grid) {\n            return undefined;\n        }\n        // Remove unnecessary encode block\n        if (axis.encode) {\n            // Only need to keep encode block for grid\n            const { grid } = axis.encode;\n            axis.encode = Object.assign({}, (grid ? { grid } : {}));\n            if (keys(axis.encode).length === 0) {\n                delete axis.encode;\n            }\n        }\n        return Object.assign(Object.assign({ scale,\n            orient }, axis), { domain: false, labels: false, \n            // Always set min/maxExtent to 0 to ensure that `config.axis*.minExtent` and `config.axis*.maxExtent`\n            // would not affect gridAxis\n            maxExtent: 0, minExtent: 0, ticks: false, zindex: getFirstDefined(zindex, 0) // put grid behind marks by default\n         });\n    }\n    else {\n        // kind === 'main'\n        if (!opt.header && axisCmpt.mainExtracted) {\n            // if mainExtracted has been extracted to a separate facet\n            return undefined;\n        }\n        if (labelExpr !== undefined) {\n            let expr = labelExpr;\n            if (axis.encode &&\n                axis.encode.labels &&\n                axis.encode.labels.update &&\n                isSignalRef(axis.encode.labels.update.text)) {\n                expr = labelExpr.replace('datum.label', axis.encode.labels.update.text.signal);\n            }\n            setAxisEncode(axis, 'labels', 'text', { signal: expr });\n        }\n        // Remove unnecessary encode block\n        if (axis.encode) {\n            for (const part of AXIS_PARTS) {\n                if (!axisCmpt.hasAxisPart(part)) {\n                    delete axis.encode[part];\n                }\n            }\n            if (keys(axis.encode).length === 0) {\n                delete axis.encode;\n            }\n        }\n        const titleString = assembleTitle(title, config);\n        return Object.assign(Object.assign(Object.assign({ scale,\n            orient, grid: false }, (titleString ? { title: titleString } : {})), axis), { zindex: getFirstDefined(zindex, 0) // put axis line above marks by default\n         });\n    }\n}\n/**\n * Add axis signals so grid line works correctly\n * (Fix https://github.com/vega/vega-lite/issues/4226)\n */\nexport function assembleAxisSignals(model) {\n    const { axes } = model.component;\n    for (const channel of POSITION_SCALE_CHANNELS) {\n        if (axes[channel]) {\n            for (const axis of axes[channel]) {\n                if (!axis.get('gridScale')) {\n                    // If there is x-axis but no y-scale for gridScale, need to set height/weight so x-axis can draw the grid with the right height.  Same for y-axis and width.\n                    const sizeType = channel === 'x' ? 'height' : 'width';\n                    return [\n                        {\n                            name: sizeType,\n                            update: model.getSizeSignalRef(sizeType).signal\n                        }\n                    ];\n                }\n            }\n        }\n    }\n    return [];\n}\nexport function assembleAxes(axisComponents, config) {\n    const { x = [], y = [] } = axisComponents;\n    return [\n        ...x.map(a => assembleAxis(a, 'grid', config)),\n        ...y.map(a => assembleAxis(a, 'grid', config)),\n        ...x.map(a => assembleAxis(a, 'main', config)),\n        ...y.map(a => assembleAxis(a, 'main', config))\n    ].filter(a => a); // filter undefined\n}\n//# sourceMappingURL=assemble.js.map","import { __rest } from \"tslib\";\nimport { array, isArray } from 'vega-util';\nimport { isSingleDefUnitChannel } from '../../../channel';\nimport * as log from '../../../log';\nimport { hasContinuousDomain } from '../../../scale';\nimport { hash, keys, varName } from '../../../util';\nimport { TimeUnitNode } from '../../data/timeunit';\nexport const TUPLE_FIELDS = '_tuple_fields';\nexport class SelectionProjectionComponent {\n    constructor(...items) {\n        this.items = items;\n        this.has = {};\n    }\n}\nconst project = {\n    has: () => {\n        return true; // This transform handles its own defaults, so always run parse.\n    },\n    parse: (model, selCmpt, selDef) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project || (selCmpt.project = new SelectionProjectionComponent());\n        const parsed = {};\n        const timeUnits = {};\n        const signals = new Set();\n        const signalName = (p, range) => {\n            const suffix = range === 'visual' ? p.channel : p.field;\n            let sg = varName(`${name}_${suffix}`);\n            for (let counter = 1; signals.has(sg); counter++) {\n                sg = varName(`${name}_${suffix}_${counter}`);\n            }\n            signals.add(sg);\n            return { [range]: sg };\n        };\n        // If no explicit projection (either fields or encodings) is specified, set some defaults.\n        // If an initial value is set, try to infer projections.\n        // Otherwise, use the default configuration.\n        if (!selDef.fields && !selDef.encodings) {\n            const cfg = model.config.selection[selDef.type];\n            if (selDef.init) {\n                for (const init of array(selDef.init)) {\n                    for (const key of keys(init)) {\n                        if (isSingleDefUnitChannel(key)) {\n                            (selDef.encodings || (selDef.encodings = [])).push(key);\n                        }\n                        else {\n                            if (selDef.type === 'interval') {\n                                log.warn('Interval selections should be initialized using \"x\" and/or \"y\" keys.');\n                                selDef.encodings = cfg.encodings;\n                            }\n                            else {\n                                (selDef.fields || (selDef.fields = [])).push(key);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                selDef.encodings = cfg.encodings;\n                selDef.fields = cfg.fields;\n            }\n        }\n        // TODO: find a possible channel mapping for these fields.\n        for (const field of selDef.fields || []) {\n            const p = { type: 'E', field };\n            p.signals = Object.assign({}, signalName(p, 'data'));\n            proj.items.push(p);\n        }\n        for (const channel of selDef.encodings || []) {\n            const fieldDef = model.fieldDef(channel);\n            if (fieldDef) {\n                let field = fieldDef.field;\n                if (fieldDef.timeUnit) {\n                    field = model.vgField(channel);\n                    // Construct TimeUnitComponents which will be combined into a\n                    // TimeUnitNode. This node may need to be inserted into the\n                    // dataflow if the selection is used across views that do not\n                    // have these time units defined.\n                    const component = {\n                        as: field,\n                        field: fieldDef.field,\n                        timeUnit: fieldDef.timeUnit\n                    };\n                    timeUnits[hash(component)] = component;\n                }\n                // Prevent duplicate projections on the same field.\n                // TODO: what if the same field is bound to multiple channels (e.g., SPLOM diag).\n                if (!parsed[field]) {\n                    // Determine whether the tuple will store enumerated or ranged values.\n                    // Interval selections store ranges for continuous scales, and enumerations otherwise.\n                    // Single/multi selections store ranges for binned fields, and enumerations otherwise.\n                    let type = 'E';\n                    if (selCmpt.type === 'interval') {\n                        const scaleType = model.getScaleComponent(channel).get('type');\n                        if (hasContinuousDomain(scaleType)) {\n                            type = 'R';\n                        }\n                    }\n                    else if (fieldDef.bin) {\n                        type = 'R-RE';\n                    }\n                    const p = { field, channel, type };\n                    p.signals = Object.assign(Object.assign({}, signalName(p, 'data')), signalName(p, 'visual'));\n                    proj.items.push((parsed[field] = p));\n                    proj.has[channel] = parsed[field];\n                }\n            }\n            else {\n                log.warn(log.message.cannotProjectOnChannelWithoutField(channel));\n            }\n        }\n        if (selDef.init) {\n            const parseInit = (i) => {\n                return proj.items.map(p => (i[p.channel] !== undefined ? i[p.channel] : i[p.field]));\n            };\n            if (selDef.type === 'interval') {\n                selCmpt.init = parseInit(selDef.init);\n            }\n            else {\n                const init = isArray(selDef.init) ? selDef.init : [selDef.init];\n                selCmpt.init = init.map(parseInit);\n            }\n        }\n        if (keys(timeUnits).length) {\n            proj.timeUnit = new TimeUnitNode(null, timeUnits);\n        }\n    },\n    signals: (model, selCmpt, allSignals) => {\n        const name = selCmpt.name + TUPLE_FIELDS;\n        const hasSignal = allSignals.filter(s => s.name === name);\n        return hasSignal.length\n            ? allSignals\n            : allSignals.concat({\n                name,\n                value: selCmpt.project.items.map(proj => {\n                    const { signals } = proj, rest = __rest(proj, [\"signals\"]);\n                    return rest;\n                })\n            });\n    }\n};\nexport default project;\n//# sourceMappingURL=project.js.map","import { hasDiscreteDomain } from '../../scale';\nimport { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { isFacetModel } from '../model';\nexport function assembleLayoutSignals(model) {\n    return [...sizeSignals(model, 'width'), ...sizeSignals(model, 'height')];\n}\nexport function sizeSignals(model, sizeType) {\n    const channel = sizeType === 'width' ? 'x' : 'y';\n    const size = model.component.layoutSize.get(sizeType);\n    if (!size || size === 'merged') {\n        return [];\n    }\n    // Read size signal name from name map, just in case it is the top-level size signal that got renamed.\n    const name = model.getSizeSignalRef(sizeType).signal;\n    if (size === 'step') {\n        const scaleComponent = model.getScaleComponent(channel);\n        if (scaleComponent) {\n            const type = scaleComponent.get('type');\n            const range = scaleComponent.get('range');\n            if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                const scaleName = model.scaleName(channel);\n                if (isFacetModel(model.parent)) {\n                    // If parent is facet and this is an independent scale, return only signal signal\n                    // as the width/height will be calculated using the cardinality from\n                    // facet's aggregate rather than reading from scale domain\n                    const parentResolve = model.parent.component.resolve;\n                    if (parentResolve.scale[channel] === 'independent') {\n                        return [stepSignal(scaleName, range)];\n                    }\n                }\n                return [\n                    stepSignal(scaleName, range),\n                    {\n                        name,\n                        update: sizeExpr(scaleName, scaleComponent, `domain('${scaleName}').length`)\n                    }\n                ];\n            }\n        }\n        /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n        throw new Error('layout size is step although width/height is not step.');\n    }\n    else {\n        return [\n            {\n                name,\n                value: size\n            }\n        ];\n    }\n}\nfunction stepSignal(scaleName, range) {\n    return {\n        name: scaleName + '_step',\n        value: range.step\n    };\n}\nexport function sizeExpr(scaleName, scaleComponent, cardinality) {\n    const type = scaleComponent.get('type');\n    const padding = scaleComponent.get('padding');\n    const paddingOuter = getFirstDefined(scaleComponent.get('paddingOuter'), padding);\n    let paddingInner = scaleComponent.get('paddingInner');\n    paddingInner =\n        type === 'band'\n            ? // only band has real paddingInner\n                paddingInner !== undefined\n                    ? paddingInner\n                    : padding\n            : // For point, as calculated in https://github.com/vega/vega-scale/blob/master/src/band.js#L128,\n                // it's equivalent to have paddingInner = 1 since there is only n-1 steps between n points.\n                1;\n    return `bandspace(${cardinality}, ${paddingInner}, ${paddingOuter}) * ${scaleName}_step`;\n}\n//# sourceMappingURL=assemble.js.map","import { POSITION_SCALE_CHANNELS } from '../channel';\nimport * as log from '../log';\nimport { contains } from '../util';\nimport { isConcatModel, isFacetModel, isLayerModel, isRepeatModel } from './model';\nexport function defaultScaleResolve(channel, model) {\n    if (isLayerModel(model) || isFacetModel(model)) {\n        return 'shared';\n    }\n    else if (isConcatModel(model) || isRepeatModel(model)) {\n        return contains(POSITION_SCALE_CHANNELS, channel) ? 'independent' : 'shared';\n    }\n    /* istanbul ignore next: should never reach here. */\n    throw new Error('invalid model type for resolve');\n}\nexport function parseGuideResolve(resolve, channel) {\n    const channelScaleResolve = resolve.scale[channel];\n    const guide = contains(POSITION_SCALE_CHANNELS, channel) ? 'axis' : 'legend';\n    if (channelScaleResolve === 'independent') {\n        if (resolve[guide][channel] === 'shared') {\n            log.warn(log.message.independentScaleMeansIndependentGuide(channel));\n        }\n        return 'independent';\n    }\n    return resolve[guide][channel] || 'shared';\n}\n//# sourceMappingURL=resolve.js.map","export function isLogicalOr(op) {\n    return !!op.or;\n}\nexport function isLogicalAnd(op) {\n    return !!op.and;\n}\nexport function isLogicalNot(op) {\n    return !!op.not;\n}\nexport function forEachLeaf(op, fn) {\n    if (isLogicalNot(op)) {\n        forEachLeaf(op.not, fn);\n    }\n    else if (isLogicalAnd(op)) {\n        for (const subop of op.and) {\n            forEachLeaf(subop, fn);\n        }\n    }\n    else if (isLogicalOr(op)) {\n        for (const subop of op.or) {\n            forEachLeaf(subop, fn);\n        }\n    }\n    else {\n        fn(op);\n    }\n}\nexport function normalizeLogicalOperand(op, normalizer) {\n    if (isLogicalNot(op)) {\n        return { not: normalizeLogicalOperand(op.not, normalizer) };\n    }\n    else if (isLogicalAnd(op)) {\n        return { and: op.and.map(o => normalizeLogicalOperand(o, normalizer)) };\n    }\n    else if (isLogicalOr(op)) {\n        return { or: op.or.map(o => normalizeLogicalOperand(o, normalizer)) };\n    }\n    else {\n        return normalizer(op);\n    }\n}\n//# sourceMappingURL=logical.js.map","import { __rest } from \"tslib\";\nimport { isContinuous, isFieldDef, title } from '../channeldef';\nimport { extractTransformsFromEncoding } from '../encoding';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { keys, titlecase } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { compositeMarkContinuousAxis, compositeMarkOrient, getCompositeMarkTooltip, makeCompositeAggregatePartFactory } from './common';\nexport const ERRORBAR = 'errorbar';\nconst ERRORBAR_PART_INDEX = {\n    ticks: 1,\n    rule: 1\n};\nexport const ERRORBAR_PARTS = keys(ERRORBAR_PART_INDEX);\nexport const errorBarNormalizer = new CompositeMarkNormalizer(ERRORBAR, normalizeErrorBar);\nexport function normalizeErrorBar(spec, { config }) {\n    const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, ticksOrient, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAR, config);\n    const makeErrorBarPart = makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorbar);\n    const tick = { type: 'tick', orient: ticksOrient };\n    return Object.assign(Object.assign({}, outerSpec), { transform, layer: [\n            ...makeErrorBarPart({\n                partName: 'ticks',\n                mark: tick,\n                positionPrefix: 'lower',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBarPart({\n                partName: 'ticks',\n                mark: tick,\n                positionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBarPart({\n                partName: 'rule',\n                mark: 'rule',\n                positionPrefix: 'lower',\n                endPositionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            })\n        ] });\n}\nfunction errorBarOrientAndInputType(spec, compositeMark) {\n    const { encoding } = spec;\n    if (errorBarIsInputTypeRaw(encoding)) {\n        return {\n            orient: compositeMarkOrient(spec, compositeMark),\n            inputType: 'raw'\n        };\n    }\n    const isTypeAggregatedUpperLower = errorBarIsInputTypeAggregatedUpperLower(encoding);\n    const isTypeAggregatedError = errorBarIsInputTypeAggregatedError(encoding);\n    const x = encoding.x;\n    const y = encoding.y;\n    if (isTypeAggregatedUpperLower) {\n        // type is aggregated-upper-lower\n        if (isTypeAggregatedError) {\n            throw new Error(compositeMark + ' cannot be both type aggregated-upper-lower and aggregated-error');\n        }\n        const x2 = encoding.x2;\n        const y2 = encoding.y2;\n        if (isFieldDef(x2) && isFieldDef(y2)) {\n            // having both x, x2 and y, y2\n            throw new Error(compositeMark + ' cannot have both x2 and y2');\n        }\n        else if (isFieldDef(x2)) {\n            if (isFieldDef(x) && isContinuous(x)) {\n                // having x, x2 quantitative and field y, y2 are not specified\n                return { orient: 'horizontal', inputType: 'aggregated-upper-lower' };\n            }\n            else {\n                // having x, x2 that are not both quantitative\n                throw new Error('Both x and x2 have to be quantitative in ' + compositeMark);\n            }\n        }\n        else if (isFieldDef(y2)) {\n            // y2 is a FieldDef\n            if (isFieldDef(y) && isContinuous(y)) {\n                // having y, y2 quantitative and field x, x2 are not specified\n                return { orient: 'vertical', inputType: 'aggregated-upper-lower' };\n            }\n            else {\n                // having y, y2 that are not both quantitative\n                throw new Error('Both y and y2 have to be quantitative in ' + compositeMark);\n            }\n        }\n        throw new Error('No ranged axis');\n    }\n    else {\n        // type is aggregated-error\n        const xError = encoding.xError;\n        const xError2 = encoding.xError2;\n        const yError = encoding.yError;\n        const yError2 = encoding.yError2;\n        if (isFieldDef(xError2) && !isFieldDef(xError)) {\n            // having xError2 without xError\n            throw new Error(compositeMark + ' cannot have xError2 without xError');\n        }\n        if (isFieldDef(yError2) && !isFieldDef(yError)) {\n            // having yError2 without yError\n            throw new Error(compositeMark + ' cannot have yError2 without yError');\n        }\n        if (isFieldDef(xError) && isFieldDef(yError)) {\n            // having both xError and yError\n            throw new Error(compositeMark + ' cannot have both xError and yError with both are quantiative');\n        }\n        else if (isFieldDef(xError)) {\n            if (isFieldDef(x) && isContinuous(x)) {\n                // having x and xError that are all quantitative\n                return { orient: 'horizontal', inputType: 'aggregated-error' };\n            }\n            else {\n                // having x, xError, and xError2 that are not all quantitative\n                throw new Error('All x, xError, and xError2 (if exist) have to be quantitative');\n            }\n        }\n        else if (isFieldDef(yError)) {\n            if (isFieldDef(y) && isContinuous(y)) {\n                // having y and yError that are all quantitative\n                return { orient: 'vertical', inputType: 'aggregated-error' };\n            }\n            else {\n                // having y, yError, and yError2 that are not all quantitative\n                throw new Error('All y, yError, and yError2 (if exist) have to be quantitative');\n            }\n        }\n        throw new Error('No ranged axis');\n    }\n}\nfunction errorBarIsInputTypeRaw(encoding) {\n    return ((isFieldDef(encoding.x) || isFieldDef(encoding.y)) &&\n        !isFieldDef(encoding.x2) &&\n        !isFieldDef(encoding.y2) &&\n        !isFieldDef(encoding.xError) &&\n        !isFieldDef(encoding.xError2) &&\n        !isFieldDef(encoding.yError) &&\n        !isFieldDef(encoding.yError2));\n}\nfunction errorBarIsInputTypeAggregatedUpperLower(encoding) {\n    return isFieldDef(encoding.x2) || isFieldDef(encoding.y2);\n}\nfunction errorBarIsInputTypeAggregatedError(encoding) {\n    return (isFieldDef(encoding.xError) ||\n        isFieldDef(encoding.xError2) ||\n        isFieldDef(encoding.yError) ||\n        isFieldDef(encoding.yError2));\n}\nexport function errorBarParams(spec, compositeMark, config) {\n    // TODO: use selection\n    const { mark, encoding, selection, projection: _p } = spec, outerSpec = __rest(spec, [\"mark\", \"encoding\", \"selection\", \"projection\"]);\n    const markDef = isMarkDef(mark) ? mark : { type: mark };\n    // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n    if (selection) {\n        log.warn(log.message.selectionNotSupported(compositeMark));\n    }\n    const { orient, inputType } = errorBarOrientAndInputType(spec, compositeMark);\n    const { continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, continuousAxis } = compositeMarkContinuousAxis(spec, orient, compositeMark);\n    const { errorBarSpecificAggregate, postAggregateCalculates, tooltipSummary, tooltipTitleWithFieldName } = errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config);\n    const _a = continuousAxis, oldContinuousAxisChannelDef = encoding[_a], _b = continuousAxis === 'x' ? 'x2' : 'y2', oldContinuousAxisChannelDef2 = encoding[_b], _c = continuousAxis === 'x' ? 'xError' : 'yError', oldContinuousAxisChannelDefError = encoding[_c], _d = continuousAxis === 'x' ? 'xError2' : 'yError2', oldContinuousAxisChannelDefError2 = encoding[_d], oldEncodingWithoutContinuousAxis = __rest(encoding, [typeof _a === \"symbol\" ? _a : _a + \"\", typeof _b === \"symbol\" ? _b : _b + \"\", typeof _c === \"symbol\" ? _c : _c + \"\", typeof _d === \"symbol\" ? _d : _d + \"\"]);\n    const { bins, timeUnits, aggregate: oldAggregate, groupby: oldGroupBy, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(oldEncodingWithoutContinuousAxis, config);\n    const aggregate = [...oldAggregate, ...errorBarSpecificAggregate];\n    const groupby = inputType !== 'raw' ? [] : oldGroupBy;\n    const tooltipEncoding = getCompositeMarkTooltip(tooltipSummary, continuousAxisChannelDef, encodingWithoutContinuousAxis, tooltipTitleWithFieldName);\n    return {\n        transform: [\n            ...(outerSpec.transform || []),\n            ...bins,\n            ...timeUnits,\n            ...(!aggregate.length ? [] : [{ aggregate, groupby }]),\n            ...postAggregateCalculates\n        ],\n        groupby,\n        continuousAxisChannelDef,\n        continuousAxis,\n        encodingWithoutContinuousAxis,\n        ticksOrient: orient === 'vertical' ? 'horizontal' : 'vertical',\n        markDef,\n        outerSpec,\n        tooltipEncoding\n    };\n}\nfunction errorBarAggregationAndCalculation(markDef, continuousAxisChannelDef, continuousAxisChannelDef2, continuousAxisChannelDefError, continuousAxisChannelDefError2, inputType, compositeMark, config) {\n    let errorBarSpecificAggregate = [];\n    let postAggregateCalculates = [];\n    const continuousFieldName = continuousAxisChannelDef.field;\n    let tooltipSummary;\n    let tooltipTitleWithFieldName = false;\n    if (inputType === 'raw') {\n        const center = markDef.center\n            ? markDef.center\n            : markDef.extent\n                ? markDef.extent === 'iqr'\n                    ? 'median'\n                    : 'mean'\n                : config.errorbar.center;\n        const extent = markDef.extent ? markDef.extent : center === 'mean' ? 'stderr' : 'iqr';\n        if ((center === 'median') !== (extent === 'iqr')) {\n            log.warn(log.message.errorBarCenterIsUsedWithWrongExtent(center, extent, compositeMark));\n        }\n        if (extent === 'stderr' || extent === 'stdev') {\n            errorBarSpecificAggregate = [\n                { op: extent, field: continuousFieldName, as: 'extent_' + continuousFieldName },\n                { op: center, field: continuousFieldName, as: 'center_' + continuousFieldName }\n            ];\n            postAggregateCalculates = [\n                {\n                    calculate: `datum[\"center_${continuousFieldName}\"] + datum[\"extent_${continuousFieldName}\"]`,\n                    as: 'upper_' + continuousFieldName\n                },\n                {\n                    calculate: `datum[\"center_${continuousFieldName}\"] - datum[\"extent_${continuousFieldName}\"]`,\n                    as: 'lower_' + continuousFieldName\n                }\n            ];\n            tooltipSummary = [\n                { fieldPrefix: 'center_', titlePrefix: titlecase(center) },\n                { fieldPrefix: 'upper_', titlePrefix: getTitlePrefix(center, extent, '+') },\n                { fieldPrefix: 'lower_', titlePrefix: getTitlePrefix(center, extent, '-') }\n            ];\n            tooltipTitleWithFieldName = true;\n        }\n        else {\n            if (markDef.center && markDef.extent) {\n                log.warn(log.message.errorBarCenterIsNotNeeded(markDef.extent, compositeMark));\n            }\n            let centerOp;\n            let lowerExtentOp;\n            let upperExtentOp;\n            if (extent === 'ci') {\n                centerOp = 'mean';\n                lowerExtentOp = 'ci0';\n                upperExtentOp = 'ci1';\n            }\n            else {\n                centerOp = 'median';\n                lowerExtentOp = 'q1';\n                upperExtentOp = 'q3';\n            }\n            errorBarSpecificAggregate = [\n                { op: lowerExtentOp, field: continuousFieldName, as: 'lower_' + continuousFieldName },\n                { op: upperExtentOp, field: continuousFieldName, as: 'upper_' + continuousFieldName },\n                { op: centerOp, field: continuousFieldName, as: 'center_' + continuousFieldName }\n            ];\n            tooltipSummary = [\n                {\n                    fieldPrefix: 'upper_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: upperExtentOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                },\n                {\n                    fieldPrefix: 'lower_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: lowerExtentOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                },\n                {\n                    fieldPrefix: 'center_',\n                    titlePrefix: title({ field: continuousFieldName, aggregate: centerOp, type: 'quantitative' }, config, {\n                        allowDisabling: false\n                    })\n                }\n            ];\n        }\n    }\n    else {\n        if (markDef.center || markDef.extent) {\n            log.warn(log.message.errorBarCenterAndExtentAreNotNeeded(markDef.center, markDef.extent));\n        }\n        if (inputType === 'aggregated-upper-lower') {\n            tooltipSummary = [];\n            postAggregateCalculates = [\n                { calculate: `datum[\"${continuousAxisChannelDef2.field}\"]`, as: 'upper_' + continuousFieldName },\n                { calculate: `datum[\"${continuousFieldName}\"]`, as: 'lower_' + continuousFieldName }\n            ];\n        }\n        else if (inputType === 'aggregated-error') {\n            tooltipSummary = [{ fieldPrefix: '', titlePrefix: continuousFieldName }];\n            postAggregateCalculates = [\n                {\n                    calculate: `datum[\"${continuousFieldName}\"] + datum[\"${continuousAxisChannelDefError.field}\"]`,\n                    as: 'upper_' + continuousFieldName\n                }\n            ];\n            if (continuousAxisChannelDefError2) {\n                postAggregateCalculates.push({\n                    calculate: `datum[\"${continuousFieldName}\"] + datum[\"${continuousAxisChannelDefError2.field}\"]`,\n                    as: 'lower_' + continuousFieldName\n                });\n            }\n            else {\n                postAggregateCalculates.push({\n                    calculate: `datum[\"${continuousFieldName}\"] - datum[\"${continuousAxisChannelDefError.field}\"]`,\n                    as: 'lower_' + continuousFieldName\n                });\n            }\n        }\n        for (const postAggregateCalculate of postAggregateCalculates) {\n            tooltipSummary.push({\n                fieldPrefix: postAggregateCalculate.as.substring(0, 6),\n                titlePrefix: postAggregateCalculate.calculate\n                    .replace(new RegExp('datum\\\\[\\\\\"', 'g'), '')\n                    .replace(new RegExp('\\\\\"\\\\]', 'g'), '')\n            });\n        }\n    }\n    return { postAggregateCalculates, errorBarSpecificAggregate, tooltipSummary, tooltipTitleWithFieldName };\n}\nfunction getTitlePrefix(center, extent, operation) {\n    return titlecase(center) + ' ' + operation + ' ' + extent;\n}\n//# sourceMappingURL=errorbar.js.map","import { isArray, isString } from 'vega-util';\nimport { getTypedFieldDef, isFieldDef, vgField } from '../../channeldef';\nimport { duplicate, getFirstDefined, hash } from '../../util';\nimport { sortParams } from '../common';\nimport { DataFlowNode } from './dataflow';\nfunction getStackByFields(model) {\n    return model.stack.stackBy.reduce((fields, by) => {\n        const fieldDef = by.fieldDef;\n        const _field = vgField(fieldDef);\n        if (_field) {\n            fields.push(_field);\n        }\n        return fields;\n    }, []);\n}\nfunction isValidAsArray(as) {\n    return isArray(as) && as.every(s => isString(s)) && as.length > 1;\n}\nexport class StackNode extends DataFlowNode {\n    constructor(parent, stack) {\n        super(parent);\n        this._stack = stack;\n    }\n    clone() {\n        return new StackNode(null, duplicate(this._stack));\n    }\n    static makeFromTransform(parent, stackTransform) {\n        const { stack, groupby, as, offset = 'zero' } = stackTransform;\n        const sortFields = [];\n        const sortOrder = [];\n        if (stackTransform.sort !== undefined) {\n            for (const sortField of stackTransform.sort) {\n                sortFields.push(sortField.field);\n                sortOrder.push(getFirstDefined(sortField.order, 'ascending'));\n            }\n        }\n        const sort = {\n            field: sortFields,\n            order: sortOrder\n        };\n        let normalizedAs;\n        if (isValidAsArray(as)) {\n            normalizedAs = as;\n        }\n        else if (isString(as)) {\n            normalizedAs = [as, as + '_end'];\n        }\n        else {\n            normalizedAs = [stackTransform.stack + '_start', stackTransform.stack + '_end'];\n        }\n        return new StackNode(parent, {\n            stackField: stack,\n            groupby,\n            offset,\n            sort,\n            facetby: [],\n            as: normalizedAs\n        });\n    }\n    static makeFromEncoding(parent, model) {\n        const stackProperties = model.stack;\n        const { encoding } = model;\n        if (!stackProperties) {\n            return null;\n        }\n        let dimensionFieldDef;\n        if (stackProperties.groupbyChannel) {\n            const cDef = encoding[stackProperties.groupbyChannel];\n            dimensionFieldDef = getTypedFieldDef(cDef); // Fair to cast as groupByChannel is always either x or y\n        }\n        const stackby = getStackByFields(model);\n        const orderDef = model.encoding.order;\n        let sort;\n        if (isArray(orderDef) || isFieldDef(orderDef)) {\n            sort = sortParams(orderDef);\n        }\n        else {\n            // default = descending by stackFields\n            // FIXME is the default here correct for binned fields?\n            sort = stackby.reduce((s, field) => {\n                s.field.push(field);\n                s.order.push('descending');\n                return s;\n            }, { field: [], order: [] });\n        }\n        return new StackNode(parent, {\n            dimensionFieldDef,\n            stackField: model.vgField(stackProperties.fieldChannel),\n            facetby: [],\n            stackby,\n            sort,\n            offset: stackProperties.offset,\n            impute: stackProperties.impute,\n            as: [\n                model.vgField(stackProperties.fieldChannel, { suffix: 'start', forAs: true }),\n                model.vgField(stackProperties.fieldChannel, { suffix: 'end', forAs: true })\n            ]\n        });\n    }\n    get stack() {\n        return this._stack;\n    }\n    addDimensions(fields) {\n        this._stack.facetby.push(...fields);\n    }\n    dependentFields() {\n        const out = new Set();\n        out.add(this._stack.stackField);\n        this.getGroupbyFields().forEach(f => out.add(f));\n        this._stack.facetby.forEach(f => out.add(f));\n        this._stack.sort.field.forEach(f => out.add(f));\n        return out;\n    }\n    producedFields() {\n        return new Set(this._stack.as);\n    }\n    hash() {\n        return `Stack ${hash(this._stack)}`;\n    }\n    getGroupbyFields() {\n        const { dimensionFieldDef, impute, groupby } = this._stack;\n        if (dimensionFieldDef) {\n            if (dimensionFieldDef.bin) {\n                if (impute) {\n                    // For binned group by field with impute, we calculate bin_mid\n                    // as we cannot impute two fields simultaneously\n                    return [vgField(dimensionFieldDef, { binSuffix: 'mid' })];\n                }\n                return [\n                    // For binned group by field without impute, we need both bin (start) and bin_end\n                    vgField(dimensionFieldDef, {}),\n                    vgField(dimensionFieldDef, { binSuffix: 'end' })\n                ];\n            }\n            return [vgField(dimensionFieldDef)];\n        }\n        return groupby || [];\n    }\n    assemble() {\n        const transform = [];\n        const { facetby, dimensionFieldDef, stackField: field, stackby, sort, offset, impute, as } = this._stack;\n        // Impute\n        if (impute && dimensionFieldDef) {\n            const { band = 0.5, bin } = dimensionFieldDef;\n            if (bin) {\n                // As we can only impute one field at a time, we need to calculate\n                // mid point for a binned field\n                transform.push({\n                    type: 'formula',\n                    expr: `${band}*` +\n                        vgField(dimensionFieldDef, { expr: 'datum' }) +\n                        `+${1 - band}*` +\n                        vgField(dimensionFieldDef, { expr: 'datum', binSuffix: 'end' }),\n                    as: vgField(dimensionFieldDef, { binSuffix: 'mid', forAs: true })\n                });\n            }\n            transform.push({\n                type: 'impute',\n                field,\n                groupby: [...stackby, ...facetby],\n                key: vgField(dimensionFieldDef, { binSuffix: 'mid' }),\n                method: 'value',\n                value: 0\n            });\n        }\n        // Stack\n        transform.push({\n            type: 'stack',\n            groupby: [...this.getGroupbyFields(), ...facetby],\n            field,\n            sort,\n            as,\n            offset\n        });\n        return transform;\n    }\n}\n//# sourceMappingURL=stack.js.map","import { isNumber } from 'vega-util';\nimport { isBinned, isBinning } from '../../bin';\nimport { getBand, isFieldDef, isPositionFieldDef } from '../../channeldef';\nimport { DEFAULT_STEP, getViewConfigDiscreteStep } from '../../config';\nimport { hasDiscreteDomain, ScaleType } from '../../scale';\nimport { getFirstDefined } from '../../util';\nimport { isVgRangeStep } from '../../vega.schema';\nimport { getMarkConfig } from '../common';\nimport * as mixins from './mixins';\nimport * as ref from './valueref';\nexport const rect = {\n    vgMark: 'rect',\n    encodeEntry: (model) => {\n        return Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n            align: 'ignore',\n            baseline: 'ignore',\n            color: 'include',\n            orient: 'ignore',\n            size: 'ignore'\n        })), rectPosition(model, 'x', 'rect')), rectPosition(model, 'y', 'rect'));\n    }\n};\nexport function rectPosition(model, channel, mark) {\n    const { config, encoding, markDef } = model;\n    const channel2 = channel === 'x' ? 'x2' : 'y2';\n    const sizeChannel = channel === 'x' ? 'width' : 'height';\n    const fieldDef = encoding[channel];\n    const fieldDef2 = encoding[channel2];\n    const scale = model.getScaleComponent(channel);\n    const scaleType = scale ? scale.get('type') : undefined;\n    const scaleName = model.scaleName(channel);\n    const orient = markDef.orient;\n    const hasSizeDef = encoding[sizeChannel] ||\n        encoding.size ||\n        markDef[sizeChannel] ||\n        markDef.size ||\n        getMarkConfig('size', markDef, config, { vgChannel: sizeChannel });\n    const isBarBand = channel === 'x' ? orient === 'vertical' : orient === 'horizontal';\n    // x, x2, and width -- we must specify two of these in all conditions\n    if (isFieldDef(fieldDef) &&\n        (isBinning(fieldDef.bin) || isBinned(fieldDef.bin) || (fieldDef.timeUnit && !fieldDef2)) &&\n        !hasSizeDef &&\n        !hasDiscreteDomain(scaleType)) {\n        const band = getBand(channel, fieldDef, undefined, markDef, config);\n        return mixins.binPosition({\n            fieldDef,\n            fieldDef2,\n            channel,\n            markDef,\n            scaleName,\n            band,\n            spacing: getFirstDefined(markDef.binSpacing, config[mark].binSpacing),\n            reverse: scale.get('reverse')\n        });\n    }\n    else if (((isFieldDef(fieldDef) && hasDiscreteDomain(scaleType)) || isBarBand) && !fieldDef2) {\n        // vertical\n        if (isFieldDef(fieldDef) && scaleType === ScaleType.BAND) {\n            const band = isPositionFieldDef(fieldDef) ? fieldDef.band : undefined;\n            return mixins.bandPosition(fieldDef, channel, model, defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config, band));\n        }\n        // sized bin, normal point-ordinal axis, quantitative x-axis, or no x\n        return mixins.centeredPointPositionWithSize(channel, model, ref.mid(model[sizeChannel]), defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config));\n    }\n    else {\n        return mixins.rangePosition(channel, model, { defaultRef: 'zeroOrMax', defaultRef2: 'zeroOrMin' });\n    }\n}\nfunction defaultSizeRef(mark, markDef, sizeChannel, scaleName, scale, config, band) {\n    const markPropOrConfig = getFirstDefined(markDef[sizeChannel], markDef.size, \n    // TODO: deal with sizeChannel config\n    getMarkConfig('size', markDef, config, { vgChannel: sizeChannel }));\n    if (markPropOrConfig !== undefined) {\n        return { value: markPropOrConfig };\n    }\n    if (scale) {\n        const scaleType = scale.get('type');\n        if (scaleType === 'point' || scaleType === 'band') {\n            if (config[mark].discreteBandSize !== undefined) {\n                return { value: config[mark].discreteBandSize };\n            }\n            if (scaleType === ScaleType.POINT) {\n                const scaleRange = scale.get('range');\n                if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n                    return { value: scaleRange.step - 2 };\n                }\n                return { value: DEFAULT_STEP - 2 };\n            }\n            else {\n                // BAND\n                return ref.bandRef(scaleName, band);\n            }\n        }\n        else {\n            // continuous scale\n            return { value: config[mark].continuousBandSize };\n        }\n    }\n    // No Scale\n    const step = getViewConfigDiscreteStep(config.view, sizeChannel);\n    const value = getFirstDefined(\n    // No scale is like discrete bar (with one item)\n    config[mark].discreteBandSize, step - 2);\n    return { value };\n}\n//# sourceMappingURL=rect.js.map","import { toSet } from 'vega-util';\nimport { contains, keys } from './util';\nexport const AREA = 'area';\nexport const BAR = 'bar';\nexport const IMAGE = 'image';\nexport const LINE = 'line';\nexport const POINT = 'point';\nexport const RECT = 'rect';\nexport const RULE = 'rule';\nexport const TEXT = 'text';\nexport const TICK = 'tick';\nexport const TRAIL = 'trail';\nexport const CIRCLE = 'circle';\nexport const SQUARE = 'square';\nexport const GEOSHAPE = 'geoshape';\n// Using mapped type to declare index, ensuring we always have all marks when we add more.\nconst MARK_INDEX = {\n    area: 1,\n    bar: 1,\n    image: 1,\n    line: 1,\n    point: 1,\n    text: 1,\n    tick: 1,\n    trail: 1,\n    rect: 1,\n    geoshape: 1,\n    rule: 1,\n    circle: 1,\n    square: 1\n};\nexport function isMark(m) {\n    return !!MARK_INDEX[m];\n}\nexport function isPathMark(m) {\n    return contains(['line', 'area', 'trail'], m);\n}\nexport function isRectBasedMark(m) {\n    return contains(['rect', 'bar', 'image'], m);\n}\nexport const PRIMITIVE_MARKS = keys(MARK_INDEX);\nexport function isMarkDef(mark) {\n    return mark['type'];\n}\nconst PRIMITIVE_MARK_INDEX = toSet(PRIMITIVE_MARKS);\nexport function isPrimitiveMark(mark) {\n    const markType = isMarkDef(mark) ? mark.type : mark;\n    return markType in PRIMITIVE_MARK_INDEX;\n}\nexport const STROKE_CONFIG = [\n    'stroke',\n    'strokeWidth',\n    'strokeDash',\n    'strokeDashOffset',\n    'strokeOpacity',\n    'strokeJoin',\n    'strokeMiterLimit'\n];\nexport const FILL_CONFIG = ['fill', 'fillOpacity'];\nexport const FILL_STROKE_CONFIG = [].concat(STROKE_CONFIG, FILL_CONFIG);\nexport const VL_ONLY_MARK_CONFIG_PROPERTIES = [\n    'filled',\n    'color',\n    'tooltip',\n    'invalid',\n    'timeUnitBandPosition',\n    'timeUnitBand'\n];\nexport const VL_ONLY_MARK_SPECIFIC_CONFIG_PROPERTY_INDEX = {\n    area: ['line', 'point'],\n    bar: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    rect: ['binSpacing', 'continuousBandSize', 'discreteBandSize'],\n    line: ['point'],\n    text: ['shortTimeLabels'],\n    tick: ['bandSize', 'thickness']\n};\nexport const defaultMarkConfig = {\n    color: '#4c78a8',\n    invalid: 'filter',\n    timeUnitBand: 1\n};\nconst DEFAULT_RECT_BAND_SIZE = 5;\nexport const defaultBarConfig = {\n    binSpacing: 1,\n    continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n    timeUnitBandPosition: 0.5\n};\nexport const defaultRectConfig = {\n    binSpacing: 0,\n    continuousBandSize: DEFAULT_RECT_BAND_SIZE,\n    timeUnitBandPosition: 0.5\n};\nexport const defaultTickConfig = {\n    thickness: 1\n};\nexport function getMarkType(m) {\n    return isMarkDef(m) ? m.type : m;\n}\n//# sourceMappingURL=mark.js.map","import pkg from '../package.json';\nimport { normalize } from './normalize';\nconst version = pkg.version;\nexport { compile } from './compile/compile';\nexport { extractTransforms } from './transformextract';\nexport { normalize, version };\n//# sourceMappingURL=index.js.map","export const SELECTION_ID = '_vgsid_';\nexport const defaultConfig = {\n    single: {\n        on: 'click',\n        fields: [SELECTION_ID],\n        resolve: 'global',\n        empty: 'all',\n        clear: 'dblclick'\n    },\n    multi: {\n        on: 'click',\n        fields: [SELECTION_ID],\n        toggle: 'event.shiftKey',\n        resolve: 'global',\n        empty: 'all',\n        clear: 'dblclick'\n    },\n    interval: {\n        on: '[mousedown, window:mouseup] > window:mousemove!',\n        encodings: ['x', 'y'],\n        translate: '[mousedown, window:mouseup] > window:mousemove!',\n        zoom: 'wheel!',\n        mark: { fill: '#333', fillOpacity: 0.125, stroke: 'white' },\n        resolve: 'global',\n        clear: 'dblclick'\n    }\n};\n//# sourceMappingURL=selection.js.map","import * as log from '../../log';\nimport { checkLinks } from './debug';\nimport { BottomUpOptimizer } from './optimizer';\nimport * as optimizers from './optimizers';\nexport const FACET_SCALE_PREFIX = 'scale_';\nexport const MAX_OPTIMIZATION_RUNS = 5;\n/**\n * Return all leaf nodes.\n */\nfunction getLeaves(roots) {\n    const leaves = [];\n    function append(node) {\n        if (node.numChildren() === 0) {\n            leaves.push(node);\n        }\n        else {\n            node.children.forEach(append);\n        }\n    }\n    roots.forEach(append);\n    return leaves;\n}\nexport function isTrue(x) {\n    return x;\n}\n/**\n * Run the specified optimizer on the provided nodes.\n *\n * @param optimizer The optimizer instance to run.\n * @param nodes A set of nodes to optimize.\n * @param flag Flag that will be or'ed with return valued from optimization calls to the nodes.\n */\nfunction runOptimizer(optimizer, nodes) {\n    const flags = nodes.map(node => {\n        if (optimizer instanceof BottomUpOptimizer) {\n            const runFlags = optimizer.optimizeNextFromLeaves(node);\n            optimizer.reset();\n            return runFlags;\n        }\n        else {\n            return optimizer.run(node);\n        }\n    });\n    return flags.some(isTrue);\n}\nfunction optimizationDataflowHelper(dataComponent, model) {\n    let roots = dataComponent.sources;\n    const mutatedFlags = new Set();\n    mutatedFlags.add(runOptimizer(new optimizers.RemoveUnnecessaryNodes(), roots));\n    // remove source nodes that don't have any children because they also don't have output nodes\n    roots = roots.filter(r => r.numChildren() > 0);\n    mutatedFlags.add(runOptimizer(new optimizers.RemoveUnusedSubtrees(), getLeaves(roots)));\n    roots = roots.filter(r => r.numChildren() > 0);\n    mutatedFlags.add(runOptimizer(new optimizers.MoveParseUp(), getLeaves(roots)));\n    mutatedFlags.add(runOptimizer(new optimizers.MergeBins(model), getLeaves(roots)));\n    mutatedFlags.add(runOptimizer(new optimizers.RemoveDuplicateTimeUnits(), getLeaves(roots)));\n    mutatedFlags.add(runOptimizer(new optimizers.MergeParse(), getLeaves(roots)));\n    mutatedFlags.add(runOptimizer(new optimizers.MergeAggregates(), getLeaves(roots)));\n    mutatedFlags.add(runOptimizer(new optimizers.MergeTimeUnits(), getLeaves(roots)));\n    mutatedFlags.add(runOptimizer(new optimizers.MergeIdenticalNodes(), roots));\n    mutatedFlags.add(runOptimizer(new optimizers.MergeOutputs(), getLeaves(roots)));\n    dataComponent.sources = roots;\n    return mutatedFlags.has(true);\n}\n/**\n * Optimizes the dataflow of the passed in data component.\n */\nexport function optimizeDataflow(data, model) {\n    // check before optimizations\n    checkLinks(data.sources);\n    let firstPassCounter = 0;\n    let secondPassCounter = 0;\n    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n        if (!optimizationDataflowHelper(data, model)) {\n            break;\n        }\n        firstPassCounter++;\n    }\n    // move facets down and make a copy of the subtree so that we can have scales at the top level\n    data.sources.map(optimizers.moveFacetDown);\n    for (let i = 0; i < MAX_OPTIMIZATION_RUNS; i++) {\n        if (!optimizationDataflowHelper(data, model)) {\n            break;\n        }\n        secondPassCounter++;\n    }\n    // check after optimizations\n    checkLinks(data.sources);\n    if (Math.max(firstPassCounter, secondPassCounter) === MAX_OPTIMIZATION_RUNS) {\n        log.warn(`Maximum optimization runs(${MAX_OPTIMIZATION_RUNS}) reached.`);\n    }\n}\n//# sourceMappingURL=optimize.js.map","import { isAggregateOp } from '../../aggregate';\nimport { vgField } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { unique } from './../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the window transform nodes\n */\nexport class WindowTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new WindowTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n    }\n    dependentFields() {\n        const out = new Set();\n        (this.transform.groupby || []).forEach(f => out.add(f));\n        (this.transform.sort || []).forEach(m => out.add(m.field));\n        this.transform.window\n            .map(w => w.field)\n            .filter(f => f !== undefined)\n            .forEach(f => out.add(f));\n        return out;\n    }\n    producedFields() {\n        return new Set(this.transform.window.map(this.getDefaultName));\n    }\n    getDefaultName(windowFieldDef) {\n        return windowFieldDef.as || vgField(windowFieldDef);\n    }\n    hash() {\n        return `WindowTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        const params = [];\n        for (const window of this.transform.window) {\n            ops.push(window.op);\n            as.push(this.getDefaultName(window));\n            params.push(window.param === undefined ? null : window.param);\n            fields.push(window.field === undefined ? null : window.field);\n        }\n        const frame = this.transform.frame;\n        const groupby = this.transform.groupby;\n        if (frame && frame[0] === null && frame[1] === null && ops.every(o => isAggregateOp(o))) {\n            // when the window does not rely on any particular window ops or frame, switch to a simpler and more efficient joinaggregate\n            return Object.assign({ type: 'joinaggregate', as, ops: ops, fields }, (groupby !== undefined ? { groupby } : {}));\n        }\n        const sortFields = [];\n        const sortOrder = [];\n        if (this.transform.sort !== undefined) {\n            for (const sortField of this.transform.sort) {\n                sortFields.push(sortField.field);\n                sortOrder.push(sortField.order || 'ascending');\n            }\n        }\n        const sort = {\n            field: sortFields,\n            order: sortOrder\n        };\n        const ignorePeers = this.transform.ignorePeers;\n        return Object.assign(Object.assign(Object.assign({ type: 'window', params,\n            as,\n            ops,\n            fields,\n            sort }, (ignorePeers !== undefined ? { ignorePeers } : {})), (groupby !== undefined ? { groupby } : {})), (frame !== undefined ? { frame } : {}));\n    }\n}\n//# sourceMappingURL=window.js.map","import { isString } from 'vega-util';\nimport * as log from '../log';\nimport { isLayerSpec } from './layer';\nimport { isUnitSpec } from './unit';\nimport { getPositionScaleChannel } from '../channel';\nexport function isFitType(autoSizeType) {\n    return autoSizeType === 'fit' || autoSizeType === 'fit-x' || autoSizeType === 'fit-y';\n}\nexport function getFitType(sizeType) {\n    return sizeType ? `fit-${getPositionScaleChannel(sizeType)}` : 'fit';\n}\nfunction _normalizeAutoSize(autosize) {\n    return isString(autosize) ? { type: autosize } : autosize || {};\n}\nexport function normalizeAutoSize(spec, config) {\n    const autosize = Object.assign(Object.assign({ type: 'pad' }, (config ? _normalizeAutoSize(config.autosize) : {})), _normalizeAutoSize(spec.autosize));\n    if (autosize.type === 'fit') {\n        if (!(isLayerSpec(spec) || isUnitSpec(spec))) {\n            log.warn(log.message.FIT_NON_SINGLE);\n            autosize.type = 'pad';\n        }\n    }\n    return autosize;\n}\nconst TOP_LEVEL_PROPERTIES = [\n    'background',\n    'padding'\n    // We do not include \"autosize\" here as it is supported by only unit and layer specs and thus need to be normalized\n];\nexport function extractTopLevelProperties(t) {\n    return TOP_LEVEL_PROPERTIES.reduce((o, p) => {\n        if (t && t[p] !== undefined) {\n            o[p] = t[p];\n        }\n        return o;\n    }, {});\n}\n//# sourceMappingURL=toplevel.js.map","import { isArray } from 'vega-util';\nimport { FACET_CHANNELS } from '../../channel';\nimport { vgField } from '../../channeldef';\nimport { HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP } from '../../header';\nimport { isSortField } from '../../sort';\nimport { isFacetMapping } from '../../spec/facet';\nimport { contains, keys } from '../../util';\nimport { defaultLabelAlign, defaultLabelBaseline } from '../axis/properties';\nimport { formatSignalRef } from '../common';\nimport { sortArrayIndexField } from '../data/calculate';\nimport { isFacetModel } from '../model';\nimport { getHeaderChannel, getHeaderProperties, getHeaderProperty } from './common';\nimport { HEADER_TYPES } from './component';\n// TODO: rename to assembleHeaderTitleGroup\nexport function assembleTitleGroup(model, channel) {\n    const title = model.component.layoutHeaders[channel].title;\n    const config = model.config ? model.config : undefined;\n    const facetFieldDef = model.component.layoutHeaders[channel].facetFieldDef\n        ? model.component.layoutHeaders[channel].facetFieldDef\n        : undefined;\n    const { titleAnchor, titleAngle, titleOrient } = getHeaderProperties(['titleAnchor', 'titleAngle', 'titleOrient'], facetFieldDef, config, channel);\n    const headerChannel = getHeaderChannel(channel, titleOrient);\n    return {\n        name: `${channel}-title`,\n        type: 'group',\n        role: `${headerChannel}-title`,\n        title: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ text: title }, (channel === 'row' ? { orient: 'left' } : {})), { style: 'guide-title' }), defaultHeaderGuideBaseline(titleAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, titleAngle, titleAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_TITLE_PROPERTIES, HEADER_TITLE_PROPERTIES_MAP))\n    };\n}\nexport function defaultHeaderGuideAlign(headerChannel, angle, anchor = 'middle') {\n    switch (anchor) {\n        case 'start':\n            return { align: 'left' };\n        case 'end':\n            return { align: 'right' };\n    }\n    const align = defaultLabelAlign(angle, headerChannel === 'row' ? 'left' : 'top');\n    return align ? { align } : {};\n}\nexport function defaultHeaderGuideBaseline(angle, channel) {\n    const baseline = defaultLabelBaseline(angle, channel === 'row' ? 'left' : 'top');\n    return baseline ? { baseline } : {};\n}\nexport function assembleHeaderGroups(model, channel) {\n    const layoutHeader = model.component.layoutHeaders[channel];\n    const groups = [];\n    for (const headerType of HEADER_TYPES) {\n        if (layoutHeader[headerType]) {\n            for (const headerCmpt of layoutHeader[headerType]) {\n                groups.push(assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt));\n            }\n        }\n    }\n    return groups;\n}\nfunction getSort(facetFieldDef, channel) {\n    const { sort } = facetFieldDef;\n    if (isSortField(sort)) {\n        return {\n            field: vgField(sort, { expr: 'datum' }),\n            order: sort.order || 'ascending'\n        };\n    }\n    else if (isArray(sort)) {\n        return {\n            field: sortArrayIndexField(facetFieldDef, channel, { expr: 'datum' }),\n            order: 'ascending'\n        };\n    }\n    else {\n        return {\n            field: vgField(facetFieldDef, { expr: 'datum' }),\n            order: sort || 'ascending'\n        };\n    }\n}\nexport function assembleLabelTitle(facetFieldDef, channel, config) {\n    const { format, labelAngle, labelAnchor, labelOrient, labelExpr } = getHeaderProperties(['format', 'labelAngle', 'labelAnchor', 'labelOrient', 'labelExpr'], facetFieldDef, config, channel);\n    const titleTextExpr = formatSignalRef(facetFieldDef, format, 'parent', config).signal;\n    const headerChannel = getHeaderChannel(channel, labelOrient);\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ text: {\n            signal: labelExpr\n                ? labelExpr\n                    .replace('datum.label', titleTextExpr)\n                    .replace('datum.value', vgField(facetFieldDef, { expr: 'parent' }))\n                : titleTextExpr\n        } }, (channel === 'row' ? { orient: 'left' } : {})), { style: 'guide-label', frame: 'group' }), defaultHeaderGuideBaseline(labelAngle, headerChannel)), defaultHeaderGuideAlign(headerChannel, labelAngle, labelAnchor)), assembleHeaderProperties(config, facetFieldDef, channel, HEADER_LABEL_PROPERTIES, HEADER_LABEL_PROPERTIES_MAP));\n}\nexport function assembleHeaderGroup(model, channel, headerType, layoutHeader, headerCmpt) {\n    if (headerCmpt) {\n        let title = null;\n        const { facetFieldDef } = layoutHeader;\n        const config = model.config ? model.config : undefined;\n        if (facetFieldDef && headerCmpt.labels) {\n            const { labelOrient } = getHeaderProperties(['labelOrient'], facetFieldDef, config, channel);\n            // Include label title in the header if orient aligns with the channel\n            if ((channel === 'row' && !contains(['top', 'bottom'], labelOrient)) ||\n                (channel === 'column' && !contains(['left', 'right'], labelOrient))) {\n                title = assembleLabelTitle(facetFieldDef, channel, config);\n            }\n        }\n        const isFacetWithoutRowCol = isFacetModel(model) && !isFacetMapping(model.facet);\n        const axes = headerCmpt.axes;\n        const hasAxes = axes && axes.length > 0;\n        if (title || hasAxes) {\n            const sizeChannel = channel === 'row' ? 'height' : 'width';\n            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: model.getName(`${channel}_${headerType}`), type: 'group', role: `${channel}-${headerType}` }, (layoutHeader.facetFieldDef\n                ? {\n                    from: { data: model.getName(channel + '_domain') },\n                    sort: getSort(facetFieldDef, channel)\n                }\n                : {})), (hasAxes && isFacetWithoutRowCol\n                ? {\n                    from: { data: model.getName(`facet_domain_${channel}`) }\n                }\n                : {})), (title ? { title } : {})), (headerCmpt.sizeSignal\n                ? {\n                    encode: {\n                        update: {\n                            [sizeChannel]: headerCmpt.sizeSignal\n                        }\n                    }\n                }\n                : {})), (hasAxes ? { axes } : {}));\n        }\n    }\n    return null;\n}\nconst LAYOUT_TITLE_BAND = {\n    column: {\n        start: 0,\n        end: 1\n    },\n    row: {\n        start: 1,\n        end: 0\n    }\n};\nexport function getLayoutTitleBand(titleAnchor, headerChannel) {\n    return LAYOUT_TITLE_BAND[headerChannel][titleAnchor];\n}\nexport function assembleLayoutTitleBand(headerComponentIndex, config) {\n    const titleBand = {};\n    for (const channel of FACET_CHANNELS) {\n        const headerComponent = headerComponentIndex[channel];\n        if (headerComponent && headerComponent.facetFieldDef) {\n            const { titleAnchor, titleOrient } = getHeaderProperties(['titleAnchor', 'titleOrient'], headerComponent.facetFieldDef, config, channel);\n            const headerChannel = getHeaderChannel(channel, titleOrient);\n            const band = getLayoutTitleBand(titleAnchor, headerChannel);\n            if (band !== undefined) {\n                titleBand[headerChannel] = band;\n            }\n        }\n    }\n    return keys(titleBand).length > 0 ? titleBand : undefined;\n}\nexport function assembleHeaderProperties(config, facetFieldDef, channel, properties, propertiesMap) {\n    const props = {};\n    for (const prop of properties) {\n        if (!propertiesMap[prop]) {\n            continue;\n        }\n        const value = getHeaderProperty(prop, facetFieldDef, config, channel);\n        if (value !== undefined) {\n            props[propertiesMap[prop]] = value;\n        }\n    }\n    return props;\n}\n//# sourceMappingURL=assemble.js.map","import { __rest } from \"tslib\";\nimport { toSet } from 'vega-util';\nimport * as CHANNEL from './channel';\nimport { CHANNELS, isColorChannel } from './channel';\nimport * as log from './log';\nimport * as TYPE from './type';\nimport { TYPE_INDEX } from './type';\nimport { contains, keys } from './util';\nexport var ScaleType;\n(function (ScaleType) {\n    // Continuous - Quantitative\n    ScaleType.LINEAR = 'linear';\n    ScaleType.LOG = 'log';\n    ScaleType.POW = 'pow';\n    ScaleType.SQRT = 'sqrt';\n    ScaleType.SYMLOG = 'symlog';\n    // Continuous - Time\n    ScaleType.TIME = 'time';\n    ScaleType.UTC = 'utc';\n    // Discretizing scales\n    ScaleType.QUANTILE = 'quantile';\n    ScaleType.QUANTIZE = 'quantize';\n    ScaleType.THRESHOLD = 'threshold';\n    ScaleType.BIN_ORDINAL = 'bin-ordinal';\n    // Discrete scales\n    ScaleType.ORDINAL = 'ordinal';\n    ScaleType.POINT = 'point';\n    ScaleType.BAND = 'band';\n})(ScaleType || (ScaleType = {}));\n/**\n * Index for scale categories -- only scale of the same categories can be merged together.\n * Current implementation is trying to be conservative and avoid merging scale type that might not work together\n */\nconst SCALE_CATEGORY_INDEX = {\n    linear: 'numeric',\n    log: 'numeric',\n    pow: 'numeric',\n    sqrt: 'numeric',\n    symlog: 'numeric',\n    time: 'time',\n    utc: 'time',\n    ordinal: 'ordinal',\n    'bin-ordinal': 'bin-ordinal',\n    point: 'ordinal-position',\n    band: 'ordinal-position',\n    quantile: 'discretizing',\n    quantize: 'discretizing',\n    threshold: 'discretizing'\n};\nexport const SCALE_TYPES = keys(SCALE_CATEGORY_INDEX);\n/**\n * Whether the two given scale types can be merged together.\n */\nexport function scaleCompatible(scaleType1, scaleType2) {\n    const scaleCategory1 = SCALE_CATEGORY_INDEX[scaleType1];\n    const scaleCategory2 = SCALE_CATEGORY_INDEX[scaleType2];\n    return (scaleCategory1 === scaleCategory2 ||\n        (scaleCategory1 === 'ordinal-position' && scaleCategory2 === 'time') ||\n        (scaleCategory2 === 'ordinal-position' && scaleCategory1 === 'time'));\n}\n/**\n * Index for scale precedence -- high score = higher priority for merging.\n */\nconst SCALE_PRECEDENCE_INDEX = {\n    // numeric\n    linear: 0,\n    log: 1,\n    pow: 1,\n    sqrt: 1,\n    symlog: 1,\n    // time\n    time: 0,\n    utc: 0,\n    // ordinal-position -- these have higher precedence than continuous scales as they support more types of data\n    point: 10,\n    band: 11,\n    // non grouped types\n    ordinal: 0,\n    'bin-ordinal': 0,\n    quantile: 0,\n    quantize: 0,\n    threshold: 0\n};\n/**\n * Return scale categories -- only scale of the same categories can be merged together.\n */\nexport function scaleTypePrecedence(scaleType) {\n    return SCALE_PRECEDENCE_INDEX[scaleType];\n}\nexport const CONTINUOUS_TO_CONTINUOUS_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog', 'time', 'utc'];\nconst CONTINUOUS_TO_CONTINUOUS_INDEX = toSet(CONTINUOUS_TO_CONTINUOUS_SCALES);\nexport const QUANTITATIVE_SCALES = ['linear', 'log', 'pow', 'sqrt', 'symlog'];\nexport const CONTINUOUS_TO_DISCRETE_SCALES = ['quantile', 'quantize', 'threshold'];\nconst CONTINUOUS_TO_DISCRETE_INDEX = toSet(CONTINUOUS_TO_DISCRETE_SCALES);\nexport const CONTINUOUS_DOMAIN_SCALES = CONTINUOUS_TO_CONTINUOUS_SCALES.concat([\n    'quantile',\n    'quantize',\n    'threshold'\n]);\nconst CONTINUOUS_DOMAIN_INDEX = toSet(CONTINUOUS_DOMAIN_SCALES);\nexport const DISCRETE_DOMAIN_SCALES = ['ordinal', 'bin-ordinal', 'point', 'band'];\nconst DISCRETE_DOMAIN_INDEX = toSet(DISCRETE_DOMAIN_SCALES);\nexport const TIME_SCALE_TYPES = ['time', 'utc'];\nexport function hasDiscreteDomain(type) {\n    return type in DISCRETE_DOMAIN_INDEX;\n}\nexport function hasContinuousDomain(type) {\n    return type in CONTINUOUS_DOMAIN_INDEX;\n}\nexport function isContinuousToContinuous(type) {\n    return type in CONTINUOUS_TO_CONTINUOUS_INDEX;\n}\nexport function isContinuousToDiscrete(type) {\n    return type in CONTINUOUS_TO_DISCRETE_INDEX;\n}\nexport const defaultScaleConfig = {\n    pointPadding: 0.5,\n    barBandPaddingInner: 0.1,\n    rectBandPaddingInner: 0,\n    minBandSize: 2,\n    minFontSize: 8,\n    maxFontSize: 40,\n    minOpacity: 0.3,\n    maxOpacity: 0.8,\n    // FIXME: revise if these *can* become ratios of width/height step\n    minSize: 9,\n    minStrokeWidth: 1,\n    maxStrokeWidth: 4,\n    quantileCount: 4,\n    quantizeCount: 4\n};\nexport function isExtendedScheme(scheme) {\n    return scheme && !!scheme['name'];\n}\nexport function isSelectionDomain(domain) {\n    return domain && domain['selection'];\n}\nconst SCALE_PROPERTY_INDEX = {\n    type: 1,\n    domain: 1,\n    align: 1,\n    range: 1,\n    scheme: 1,\n    bins: 1,\n    // Other properties\n    reverse: 1,\n    round: 1,\n    // quantitative / time\n    clamp: 1,\n    nice: 1,\n    // quantitative\n    base: 1,\n    exponent: 1,\n    constant: 1,\n    interpolate: 1,\n    zero: 1,\n    // band/point\n    padding: 1,\n    paddingInner: 1,\n    paddingOuter: 1\n};\nexport const SCALE_PROPERTIES = keys(SCALE_PROPERTY_INDEX);\nconst { type, domain, range, scheme } = SCALE_PROPERTY_INDEX, NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX = __rest(SCALE_PROPERTY_INDEX, [\"type\", \"domain\", \"range\", \"scheme\"]);\nexport const NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTIES = keys(NON_TYPE_DOMAIN_RANGE_VEGA_SCALE_PROPERTY_INDEX);\nexport const SCALE_TYPE_INDEX = generateScaleTypeIndex();\nexport function scaleTypeSupportProperty(scaleType, propName) {\n    switch (propName) {\n        case 'type':\n        case 'domain':\n        case 'reverse':\n        case 'range':\n            return true;\n        case 'scheme':\n        case 'interpolate':\n            return !contains(['point', 'band', 'identity'], scaleType);\n        case 'bins':\n            return !contains(['point', 'band', 'identity', 'ordinal'], scaleType);\n        case 'round':\n            return isContinuousToContinuous(scaleType) || scaleType === 'band' || scaleType === 'point';\n        case 'padding':\n            return isContinuousToContinuous(scaleType) || contains(['point', 'band'], scaleType);\n        case 'paddingOuter':\n        case 'align':\n            return contains(['point', 'band'], scaleType);\n        case 'paddingInner':\n            return scaleType === 'band';\n        case 'clamp':\n            return isContinuousToContinuous(scaleType);\n        case 'nice':\n            return isContinuousToContinuous(scaleType) || scaleType === 'quantize' || scaleType === 'threshold';\n        case 'exponent':\n            return scaleType === 'pow';\n        case 'base':\n            return scaleType === 'log';\n        case 'constant':\n            return scaleType === 'symlog';\n        case 'zero':\n            return (hasContinuousDomain(scaleType) &&\n                !contains([\n                    'log',\n                    'time',\n                    'utc',\n                    'threshold',\n                    'quantile' // quantile depends on distribution so zero does not matter\n                ], scaleType));\n    }\n}\n/**\n * Returns undefined if the input channel supports the input scale property name\n */\nexport function channelScalePropertyIncompatability(channel, propName) {\n    switch (propName) {\n        case 'interpolate':\n        case 'scheme':\n            if (!isColorChannel(channel)) {\n                return log.message.cannotUseScalePropertyWithNonColor(channel);\n            }\n            return undefined;\n        case 'align':\n        case 'type':\n        case 'bins':\n        case 'domain':\n        case 'range':\n        case 'base':\n        case 'exponent':\n        case 'constant':\n        case 'nice':\n        case 'padding':\n        case 'paddingInner':\n        case 'paddingOuter':\n        case 'reverse':\n        case 'round':\n        case 'clamp':\n        case 'zero':\n            return undefined; // GOOD!\n    }\n}\nexport function scaleTypeSupportDataType(specifiedType, fieldDefType) {\n    if (contains([TYPE.ORDINAL, TYPE.NOMINAL], fieldDefType)) {\n        return specifiedType === undefined || hasDiscreteDomain(specifiedType);\n    }\n    else if (fieldDefType === TYPE.TEMPORAL) {\n        return contains([ScaleType.TIME, ScaleType.UTC, undefined], specifiedType);\n    }\n    else if (fieldDefType === TYPE.QUANTITATIVE) {\n        return contains([\n            ScaleType.LOG,\n            ScaleType.POW,\n            ScaleType.SQRT,\n            ScaleType.SYMLOG,\n            ScaleType.QUANTILE,\n            ScaleType.QUANTIZE,\n            ScaleType.THRESHOLD,\n            ScaleType.LINEAR,\n            undefined\n        ], specifiedType);\n    }\n    return true;\n}\nexport function channelSupportScaleType(channel, scaleType) {\n    switch (channel) {\n        case CHANNEL.X:\n        case CHANNEL.Y:\n            return isContinuousToContinuous(scaleType) || contains(['band', 'point'], scaleType);\n        case CHANNEL.SIZE: // TODO: size and opacity can support ordinal with more modification\n        case CHANNEL.STROKEWIDTH:\n        case CHANNEL.OPACITY:\n        case CHANNEL.FILLOPACITY:\n        case CHANNEL.STROKEOPACITY:\n            // Although it generally doesn't make sense to use band with size and opacity,\n            // it can also work since we use band: 0.5 to get midpoint.\n            return (isContinuousToContinuous(scaleType) ||\n                isContinuousToDiscrete(scaleType) ||\n                contains(['band', 'point'], scaleType));\n        case CHANNEL.COLOR:\n        case CHANNEL.FILL:\n        case CHANNEL.STROKE:\n            return scaleType !== 'band'; // band does not make sense with color\n        case CHANNEL.SHAPE:\n            return scaleType === 'ordinal'; // shape = lookup only\n    }\n    /* istanbul ignore next: it should never reach here */\n    return false;\n}\nexport function getSupportedScaleType(channel, fieldDefType) {\n    return SCALE_TYPE_INDEX[generateScaleTypeIndexKey(channel, fieldDefType)];\n}\n// generates ScaleTypeIndex where keys are encoding channels and values are list of valid ScaleTypes\nfunction generateScaleTypeIndex() {\n    const index = {};\n    for (const channel of CHANNELS) {\n        for (const fieldDefType of keys(TYPE_INDEX)) {\n            for (const scaleType of SCALE_TYPES) {\n                const key = generateScaleTypeIndexKey(channel, fieldDefType);\n                if (channelSupportScaleType(channel, scaleType) && scaleTypeSupportDataType(scaleType, fieldDefType)) {\n                    index[key] = index[key] || [];\n                    index[key].push(scaleType);\n                }\n            }\n        }\n    }\n    return index;\n}\nfunction generateScaleTypeIndexKey(channel, fieldDefType) {\n    return channel + '_' + fieldDefType;\n}\n//# sourceMappingURL=scale.js.map","import { __rest } from \"tslib\";\nimport { hasOwnProperty, isString } from 'vega-util';\nimport { FACET_CHANNELS, getPositionScaleChannel, isChannel, isScaleChannel } from '../channel';\nimport { getFieldDef, vgField } from '../channeldef';\nimport { forEach, reduce } from '../encoding';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { isFacetSpec, isLayerSpec, isUnitSpec } from '../spec';\nimport { extractCompositionLayout } from '../spec/base';\nimport { extractTitleConfig } from '../title';\nimport { normalizeTransform } from '../transform';\nimport { contains, duplicate, keys, varName } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { assembleAxes } from './axis/assemble';\nimport { assembleHeaderGroups, assembleLayoutTitleBand, assembleTitleGroup } from './header/assemble';\nimport { HEADER_CHANNELS } from './header/component';\nimport { sizeExpr } from './layoutsize/assemble';\nimport { assembleLegends } from './legend/assemble';\nimport { parseLegend } from './legend/parse';\nimport { assembleProjections } from './projection/assemble';\nimport { parseProjection } from './projection/parse';\nimport { assembleScales } from './scale/assemble';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { parseScales } from './scale/parse';\nimport { Split } from './split';\nexport class NameMap {\n    constructor() {\n        this.nameMap = {};\n    }\n    rename(oldName, newName) {\n        this.nameMap[oldName] = newName;\n    }\n    has(name) {\n        return this.nameMap[name] !== undefined;\n    }\n    get(name) {\n        // If the name appears in the _nameMap, we need to read its new name.\n        // We have to loop over the dict just in case the new name also gets renamed.\n        while (this.nameMap[name] && name !== this.nameMap[name]) {\n            name = this.nameMap[name];\n        }\n        return name;\n    }\n}\n/*\n  We use type guards instead of `instanceof` as `instanceof` makes\n  different parts of the compiler depend on the actual implementation of\n  the model classes, which in turn depend on different parts of the compiler.\n  Thus, `instanceof` leads to circular dependency problems.\n\n  On the other hand, type guards only make different parts of the compiler\n  depend on the type of the model classes, but not the actual implementation.\n*/\nexport function isUnitModel(model) {\n    return model && model.type === 'unit';\n}\nexport function isFacetModel(model) {\n    return model && model.type === 'facet';\n}\nexport function isRepeatModel(model) {\n    return model && model.type === 'repeat';\n}\nexport function isConcatModel(model) {\n    return model && model.type === 'concat';\n}\nexport function isLayerModel(model) {\n    return model && model.type === 'layer';\n}\nexport class Model {\n    constructor(spec, type, parent, parentGivenName, config, repeater, resolve, view) {\n        this.type = type;\n        this.parent = parent;\n        this.config = config;\n        this.repeater = repeater;\n        this.view = view;\n        this.children = [];\n        /**\n         * Corrects the data references in marks after assemble.\n         */\n        this.correctDataNames = (mark) => {\n            // TODO: make this correct\n            // for normal data references\n            if (mark.from && mark.from.data) {\n                mark.from.data = this.lookupDataSource(mark.from.data);\n            }\n            // for access to facet data\n            if (mark.from && mark.from.facet && mark.from.facet.data) {\n                mark.from.facet.data = this.lookupDataSource(mark.from.facet.data);\n            }\n            return mark;\n        };\n        this.parent = parent;\n        this.config = config;\n        this.repeater = repeater;\n        // If name is not provided, always use parent's givenName to avoid name conflicts.\n        this.name = spec.name || parentGivenName;\n        this.title = isString(spec.title) ? { text: spec.title } : spec.title;\n        // Shared name maps\n        this.scaleNameMap = parent ? parent.scaleNameMap : new NameMap();\n        this.projectionNameMap = parent ? parent.projectionNameMap : new NameMap();\n        this.signalNameMap = parent ? parent.signalNameMap : new NameMap();\n        this.data = spec.data;\n        this.description = spec.description;\n        this.transforms = normalizeTransform(spec.transform || []);\n        this.layout = isUnitSpec(spec) || isLayerSpec(spec) ? {} : extractCompositionLayout(spec, type, config);\n        this.component = {\n            data: {\n                sources: parent ? parent.component.data.sources : [],\n                outputNodes: parent ? parent.component.data.outputNodes : {},\n                outputNodeRefCounts: parent ? parent.component.data.outputNodeRefCounts : {},\n                // data is faceted if the spec is a facet spec or the parent has faceted data and data is undefined\n                isFaceted: isFacetSpec(spec) || (parent && parent.component.data.isFaceted && spec.data === undefined)\n            },\n            layoutSize: new Split(),\n            layoutHeaders: { row: {}, column: {}, facet: {} },\n            mark: null,\n            resolve: Object.assign({ scale: {}, axis: {}, legend: {} }, (resolve ? duplicate(resolve) : {})),\n            selection: null,\n            scales: null,\n            projection: null,\n            axes: {},\n            legends: {}\n        };\n    }\n    get width() {\n        return this.getSizeSignalRef('width');\n    }\n    get height() {\n        return this.getSizeSignalRef('height');\n    }\n    parse() {\n        this.parseScale();\n        this.parseLayoutSize(); // depends on scale\n        this.renameTopLevelLayoutSizeSignal();\n        this.parseSelections();\n        this.parseProjection();\n        this.parseData(); // (pathorder) depends on markDef; selection filters depend on parsed selections; depends on projection because some transforms require the finalized projection name.\n        this.parseAxesAndHeaders(); // depends on scale and layout size\n        this.parseLegends(); // depends on scale, markDef\n        this.parseMarkGroup(); // depends on data name, scale, layout size, axisGroup, and children's scale, axis, legend and mark.\n    }\n    parseScale() {\n        parseScales(this);\n    }\n    parseProjection() {\n        parseProjection(this);\n    }\n    /**\n     * Rename top-level spec's size to be just width / height, ignoring model name.\n     * This essentially merges the top-level spec's width/height signals with the width/height signals\n     * to help us reduce redundant signals declaration.\n     */\n    renameTopLevelLayoutSizeSignal() {\n        if (this.getName('width') !== 'width') {\n            this.renameSignal(this.getName('width'), 'width');\n        }\n        if (this.getName('height') !== 'height') {\n            this.renameSignal(this.getName('height'), 'height');\n        }\n    }\n    parseLegends() {\n        parseLegend(this);\n    }\n    assembleGroupStyle() {\n        if (this.type === 'unit' || this.type === 'layer') {\n            return (this.view && this.view.style) || 'cell';\n        }\n        return undefined;\n    }\n    assembleEncodeFromView(view) {\n        // Exclude \"style\"\n        const { style: _ } = view, baseView = __rest(view, [\"style\"]);\n        const e = {};\n        for (const property in baseView) {\n            if (hasOwnProperty(baseView, property)) {\n                const value = baseView[property];\n                if (value !== undefined) {\n                    e[property] = { value };\n                }\n            }\n        }\n        return e;\n    }\n    assembleGroupEncodeEntry(isTopLevel) {\n        let encodeEntry = undefined;\n        if (this.view) {\n            encodeEntry = this.assembleEncodeFromView(this.view);\n        }\n        if (!isTopLevel) {\n            // For top-level spec, we can set the global width and height signal to adjust the group size.\n            // For other child specs, we have to manually set width and height in the encode entry.\n            if (this.type === 'unit' || this.type === 'layer') {\n                return Object.assign({ width: this.getSizeSignalRef('width'), height: this.getSizeSignalRef('height') }, (encodeEntry || {}));\n            }\n        }\n        return encodeEntry;\n    }\n    assembleLayout() {\n        if (!this.layout) {\n            return undefined;\n        }\n        const _a = this.layout, { spacing } = _a, layout = __rest(_a, [\"spacing\"]);\n        const { component, config } = this;\n        const titleBand = assembleLayoutTitleBand(component.layoutHeaders, config);\n        return Object.assign(Object.assign(Object.assign({ padding: spacing }, this.assembleDefaultLayout()), layout), (titleBand ? { titleBand } : {}));\n    }\n    assembleDefaultLayout() {\n        return {};\n    }\n    assembleHeaderMarks() {\n        const { layoutHeaders } = this.component;\n        let headerMarks = [];\n        for (const channel of FACET_CHANNELS) {\n            if (layoutHeaders[channel].title) {\n                headerMarks.push(assembleTitleGroup(this, channel));\n            }\n        }\n        for (const channel of HEADER_CHANNELS) {\n            headerMarks = headerMarks.concat(assembleHeaderGroups(this, channel));\n        }\n        return headerMarks;\n    }\n    assembleAxes() {\n        return assembleAxes(this.component.axes, this.config);\n    }\n    assembleLegends() {\n        return assembleLegends(this);\n    }\n    assembleProjections() {\n        return assembleProjections(this);\n    }\n    assembleTitle() {\n        const _a = this.title || {}, { encoding } = _a, titleNoEncoding = __rest(_a, [\"encoding\"]);\n        const title = Object.assign(Object.assign(Object.assign({}, extractTitleConfig(this.config.title).nonMark), titleNoEncoding), (encoding ? { encode: { update: encoding } } : {}));\n        if (title.text) {\n            if (contains(['unit', 'layer'], this.type)) {\n                // Unit/Layer\n                if (contains(['middle', undefined], title.anchor)) {\n                    title.frame = title.frame || 'group';\n                }\n            }\n            else {\n                // composition with Vega layout\n                // Set title = \"start\" by default for composition as \"middle\" does not look nice\n                // https://github.com/vega/vega/issues/960#issuecomment-471360328\n                title.anchor = title.anchor || 'start';\n            }\n            return keys(title).length > 0 ? title : undefined;\n        }\n        return undefined;\n    }\n    /**\n     * Assemble the mark group for this model.  We accept optional `signals` so that we can include concat top-level signals with the top-level model's local signals.\n     */\n    assembleGroup(signals = []) {\n        const group = {};\n        signals = signals.concat(this.assembleSignals());\n        if (signals.length > 0) {\n            group.signals = signals;\n        }\n        const layout = this.assembleLayout();\n        if (layout) {\n            group.layout = layout;\n        }\n        group.marks = [].concat(this.assembleHeaderMarks(), this.assembleMarks());\n        // Only include scales if this spec is top-level or if parent is facet.\n        // (Otherwise, it will be merged with upper-level's scope.)\n        const scales = !this.parent || isFacetModel(this.parent) ? assembleScales(this) : [];\n        if (scales.length > 0) {\n            group.scales = scales;\n        }\n        const axes = this.assembleAxes();\n        if (axes.length > 0) {\n            group.axes = axes;\n        }\n        const legends = this.assembleLegends();\n        if (legends.length > 0) {\n            group.legends = legends;\n        }\n        return group;\n    }\n    hasDescendantWithFieldOnChannel(channel) {\n        for (const child of this.children) {\n            if (isUnitModel(child)) {\n                if (child.channelHasField(channel)) {\n                    return true;\n                }\n            }\n            else {\n                if (child.hasDescendantWithFieldOnChannel(channel)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    getName(text) {\n        return varName((this.name ? this.name + '_' : '') + text);\n    }\n    /**\n     * Request a data source name for the given data source type and mark that data source as required.\n     * This method should be called in parse, so that all used data source can be correctly instantiated in assembleData().\n     * You can lookup the correct dataset name in assemble with `lookupDataSource`.\n     */\n    requestDataName(name) {\n        const fullName = this.getName(name);\n        // Increase ref count. This is critical because otherwise we won't create a data source.\n        // We also increase the ref counts on OutputNode.getSource() calls.\n        const refCounts = this.component.data.outputNodeRefCounts;\n        refCounts[fullName] = (refCounts[fullName] || 0) + 1;\n        return fullName;\n    }\n    getSizeSignalRef(sizeType) {\n        if (isFacetModel(this.parent)) {\n            const channel = getPositionScaleChannel(sizeType);\n            const scaleComponent = this.component.scales[channel];\n            if (scaleComponent && !scaleComponent.merged) {\n                // independent scale\n                const type = scaleComponent.get('type');\n                const range = scaleComponent.get('range');\n                if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                    const scaleName = scaleComponent.get('name');\n                    const domain = assembleDomain(this, channel);\n                    const field = getFieldFromDomain(domain);\n                    if (field) {\n                        const fieldRef = vgField({ aggregate: 'distinct', field }, { expr: 'datum' });\n                        return {\n                            signal: sizeExpr(scaleName, scaleComponent, fieldRef)\n                        };\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                        return null;\n                    }\n                }\n            }\n        }\n        return {\n            signal: this.signalNameMap.get(this.getName(sizeType))\n        };\n    }\n    /**\n     * Lookup the name of the datasource for an output node. You probably want to call this in assemble.\n     */\n    lookupDataSource(name) {\n        const node = this.component.data.outputNodes[name];\n        if (!node) {\n            // Name not found in map so let's just return what we got.\n            // This can happen if we already have the correct name.\n            return name;\n        }\n        return node.getSource();\n    }\n    getSignalName(oldSignalName) {\n        return this.signalNameMap.get(oldSignalName);\n    }\n    renameSignal(oldName, newName) {\n        this.signalNameMap.rename(oldName, newName);\n    }\n    renameScale(oldName, newName) {\n        this.scaleNameMap.rename(oldName, newName);\n    }\n    renameProjection(oldName, newName) {\n        this.projectionNameMap.rename(oldName, newName);\n    }\n    /**\n     * @return scale name for a given channel after the scale has been parsed and named.\n     */\n    scaleName(originalScaleName, parse) {\n        if (parse) {\n            // During the parse phase always return a value\n            // No need to refer to rename map because a scale can't be renamed\n            // before it has the original name.\n            return this.getName(originalScaleName);\n        }\n        // If there is a scale for the channel, it should either\n        // be in the scale component or exist in the name map\n        if (\n        // If there is a scale for the channel, there should be a local scale component for it\n        (isChannel(originalScaleName) && isScaleChannel(originalScaleName) && this.component.scales[originalScaleName]) ||\n            // in the scale name map (the scale get merged by its parent)\n            this.scaleNameMap.has(this.getName(originalScaleName))) {\n            return this.scaleNameMap.get(this.getName(originalScaleName));\n        }\n        return undefined;\n    }\n    /**\n     * @return projection name after the projection has been parsed and named.\n     */\n    projectionName(parse) {\n        if (parse) {\n            // During the parse phase always return a value\n            // No need to refer to rename map because a projection can't be renamed\n            // before it has the original name.\n            return this.getName('projection');\n        }\n        if ((this.component.projection && !this.component.projection.merged) ||\n            this.projectionNameMap.has(this.getName('projection'))) {\n            return this.projectionNameMap.get(this.getName('projection'));\n        }\n        return undefined;\n    }\n    /**\n     * Traverse a model's hierarchy to get the scale component for a particular channel.\n     */\n    getScaleComponent(channel) {\n        /* istanbul ignore next: This is warning for debugging test */\n        if (!this.component.scales) {\n            throw new Error('getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().');\n        }\n        const localScaleComponent = this.component.scales[channel];\n        if (localScaleComponent && !localScaleComponent.merged) {\n            return localScaleComponent;\n        }\n        return this.parent ? this.parent.getScaleComponent(channel) : undefined;\n    }\n    /**\n     * Traverse a model's hierarchy to get a particular selection component.\n     */\n    getSelectionComponent(variableName, origName) {\n        let sel = this.component.selection[variableName];\n        if (!sel && this.parent) {\n            sel = this.parent.getSelectionComponent(variableName, origName);\n        }\n        if (!sel) {\n            throw new Error(log.message.selectionNotFound(origName));\n        }\n        return sel;\n    }\n}\n/** Abstract class for UnitModel and FacetModel.  Both of which can contain fieldDefs as a part of its own specification. */\nexport class ModelWithField extends Model {\n    /** Get \"field\" reference for Vega */\n    vgField(channel, opt = {}) {\n        const fieldDef = this.fieldDef(channel);\n        if (!fieldDef) {\n            return undefined;\n        }\n        return vgField(fieldDef, opt);\n    }\n    reduceFieldDef(f, init, t) {\n        return reduce(this.getMapping(), (acc, cd, c) => {\n            const fieldDef = getFieldDef(cd);\n            if (fieldDef) {\n                return f(acc, fieldDef, c);\n            }\n            return acc;\n        }, init, t);\n    }\n    forEachFieldDef(f, t) {\n        forEach(this.getMapping(), (cd, c) => {\n            const fieldDef = getFieldDef(cd);\n            if (fieldDef) {\n                f(fieldDef, c);\n            }\n        }, t);\n    }\n}\n//# sourceMappingURL=model.js.map","import 'array-flat-polyfill';\nimport { default as clone_ } from 'clone';\nimport deepEqual_ from 'fast-deep-equal';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { hasOwnProperty, isArray, isNumber, isString, splitAccessPath, stringValue } from 'vega-util';\nimport { isLogicalAnd, isLogicalNot, isLogicalOr } from './logical';\nexport const deepEqual = deepEqual_;\nexport const duplicate = clone_;\n/**\n * Creates an object composed of the picked object properties.\n *\n * var object = {'a': 1, 'b': '2', 'c': 3};\n * pick(object, ['a', 'c']);\n * // → {'a': 1, 'c': 3}\n *\n */\nexport function pick(obj, props) {\n    const copy = {};\n    for (const prop of props) {\n        // TODO: remove as any when https://github.com/vega/vega/issues/1975 is out\n        if (hasOwnProperty(obj, prop)) {\n            copy[prop] = obj[prop];\n        }\n    }\n    return copy;\n}\n/**\n * The opposite of _.pick; this method creates an object composed of the own\n * and inherited enumerable string keyed properties of object that are not omitted.\n */\nexport function omit(obj, props) {\n    const copy = Object.assign({}, obj);\n    for (const prop of props) {\n        delete copy[prop];\n    }\n    return copy;\n}\n/**\n * Monkey patch Set so that `stringify` produces a string representation of sets.\n */\nSet.prototype['toJSON'] = function () {\n    return `Set(${[...this].map(x => stableStringify(x)).join(',')})`;\n};\n/**\n * Converts any object to a string representation that can be consumed by humans.\n */\nexport const stringify = stableStringify;\n/**\n * Converts any object to a string of limited size, or a number.\n */\nexport function hash(a) {\n    if (isNumber(a)) {\n        return a;\n    }\n    const str = isString(a) ? a : stableStringify(a);\n    // short strings can be used as hash directly, longer strings are hashed to reduce memory usage\n    if (str.length < 250) {\n        return str;\n    }\n    // from http://werxltd.com/wp/2010/05/13/javascript-implementation-of-javas-string-hashcode-method/\n    let h = 0;\n    for (let i = 0; i < str.length; i++) {\n        const char = str.charCodeAt(i);\n        h = (h << 5) - h + char;\n        h = h & h; // Convert to 32bit integer\n    }\n    return h;\n}\nexport function isNullOrFalse(x) {\n    return x === false || x === null;\n}\nexport function contains(array, item) {\n    return array.indexOf(item) > -1;\n}\n/** Returns the array without the elements in item */\nexport function without(array, excludedItems) {\n    return array.filter(item => !contains(excludedItems, item));\n}\nexport function union(array, other) {\n    return array.concat(without(other, array));\n}\n/**\n * Returns true if any item returns true.\n */\nexport function some(arr, f) {\n    let i = 0;\n    for (const [k, a] of arr.entries()) {\n        if (f(a, k, i++)) {\n            return true;\n        }\n    }\n    return false;\n}\n/**\n * Returns true if all items return true.\n */\nexport function every(arr, f) {\n    let i = 0;\n    for (const [k, a] of arr.entries()) {\n        if (!f(a, k, i++)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function fill(val, len) {\n    const arr = new Array(len);\n    for (let i = 0; i < len; ++i) {\n        arr[i] = val;\n    }\n    return arr;\n}\n/**\n * recursively merges src into dest\n */\nexport function mergeDeep(dest, ...src) {\n    for (const s of src) {\n        dest = deepMerge_(dest, s);\n    }\n    return dest;\n}\n// recursively merges src into dest\nfunction deepMerge_(dest, src) {\n    if (typeof src !== 'object' || src === null) {\n        return dest;\n    }\n    for (const p in src) {\n        if (!hasOwnProperty(src, p)) {\n            continue;\n        }\n        if (src[p] === undefined) {\n            continue;\n        }\n        if (typeof src[p] !== 'object' || isArray(src[p]) || src[p] === null) {\n            dest[p] = src[p];\n        }\n        else if (typeof dest[p] !== 'object' || dest[p] === null) {\n            dest[p] = mergeDeep(isArray(src[p].constructor) ? [] : {}, src[p]);\n        }\n        else {\n            mergeDeep(dest[p], src[p]);\n        }\n    }\n    return dest;\n}\nexport function unique(values, f) {\n    const results = [];\n    const u = {};\n    let v;\n    for (const val of values) {\n        v = f(val);\n        if (v in u) {\n            continue;\n        }\n        u[v] = 1;\n        results.push(val);\n    }\n    return results;\n}\n/**\n * Returns true if the two dictionaries disagree. Applies only to defined values.\n */\nexport function isEqual(dict, other) {\n    const dictKeys = keys(dict);\n    const otherKeys = keys(other);\n    if (dictKeys.length !== otherKeys.length) {\n        return false;\n    }\n    for (const key of dictKeys) {\n        if (dict[key] !== other[key]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function setEqual(a, b) {\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const e of a) {\n        if (!b.has(e)) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function hasIntersection(a, b) {\n    for (const key of a) {\n        if (b.has(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function prefixGenerator(a) {\n    const prefixes = new Set();\n    for (const x of a) {\n        const splitField = splitAccessPath(x);\n        // Wrap every element other than the first in `[]`\n        const wrappedWithAccessors = splitField.map((y, i) => (i === 0 ? y : `[${y}]`));\n        const computedPrefixes = wrappedWithAccessors.map((_, i) => wrappedWithAccessors.slice(0, i + 1).join(''));\n        computedPrefixes.forEach(y => prefixes.add(y));\n    }\n    return prefixes;\n}\n/**\n * Returns true if a and b have an intersection. Also return true if a or b are undefined\n * since this means we don't know what fields a node produces or depends on.\n */\nexport function fieldIntersection(a, b) {\n    if (a === undefined || b === undefined) {\n        return true;\n    }\n    return hasIntersection(prefixGenerator(a), prefixGenerator(b));\n}\nexport function isNumeric(num) {\n    return !isNaN(num);\n}\nexport function differArray(array, other) {\n    if (array.length !== other.length) {\n        return true;\n    }\n    array.sort();\n    other.sort();\n    for (let i = 0; i < array.length; i++) {\n        if (other[i] !== array[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n// This is a stricter version of Object.keys but with better types. See https://github.com/Microsoft/TypeScript/pull/12253#issuecomment-263132208\nexport const keys = Object.keys;\nexport function vals(x) {\n    const _vals = [];\n    for (const k in x) {\n        if (hasOwnProperty(x, k)) {\n            _vals.push(x[k]);\n        }\n    }\n    return _vals;\n}\nexport function entries(x) {\n    const _entries = [];\n    for (const k in x) {\n        if (hasOwnProperty(x, k)) {\n            _entries.push({\n                key: k,\n                value: x[k]\n            });\n        }\n    }\n    return _entries;\n}\nexport function isBoolean(b) {\n    return b === true || b === false;\n}\n/**\n * Convert a string into a valid variable name\n */\nexport function varName(s) {\n    // Replace non-alphanumeric characters (anything besides a-zA-Z0-9_) with _\n    const alphanumericS = s.replace(/\\W/g, '_');\n    // Add _ if the string has leading numbers.\n    return (s.match(/^\\d+/) ? '_' : '') + alphanumericS;\n}\nexport function logicalExpr(op, cb) {\n    if (isLogicalNot(op)) {\n        return '!(' + logicalExpr(op.not, cb) + ')';\n    }\n    else if (isLogicalAnd(op)) {\n        return '(' + op.and.map((and) => logicalExpr(and, cb)).join(') && (') + ')';\n    }\n    else if (isLogicalOr(op)) {\n        return '(' + op.or.map((or) => logicalExpr(or, cb)).join(') || (') + ')';\n    }\n    else {\n        return cb(op);\n    }\n}\n/**\n * Delete nested property of an object, and delete the ancestors of the property if they become empty.\n */\nexport function deleteNestedProperty(obj, orderedProps) {\n    if (orderedProps.length === 0) {\n        return true;\n    }\n    const prop = orderedProps.shift();\n    if (deleteNestedProperty(obj[prop], orderedProps)) {\n        delete obj[prop];\n    }\n    return keys(obj).length === 0;\n}\nexport function titlecase(s) {\n    return s.charAt(0).toUpperCase() + s.substr(1);\n}\n/**\n * Converts a path to an access path with datum.\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function accessPathWithDatum(path, datum = 'datum') {\n    const pieces = splitAccessPath(path);\n    const prefixes = [];\n    for (let i = 1; i <= pieces.length; i++) {\n        const prefix = `[${pieces\n            .slice(0, i)\n            .map(stringValue)\n            .join('][')}]`;\n        prefixes.push(`${datum}${prefix}`);\n    }\n    return prefixes.join(' && ');\n}\n/**\n * Return access with datum to the flattened field.\n *\n * @param path The field name.\n * @param datum The string to use for `datum`.\n */\nexport function flatAccessWithDatum(path, datum = 'datum') {\n    return `${datum}[${stringValue(splitAccessPath(path).join('.'))}]`;\n}\n/**\n * Replaces path accesses with access to non-nested field.\n * For example, `foo[\"bar\"].baz` becomes `foo\\\\.bar\\\\.baz`.\n */\nexport function replacePathInField(path) {\n    return `${splitAccessPath(path)\n        .map(p => p.replace('.', '\\\\.'))\n        .join('\\\\.')}`;\n}\n/**\n * Remove path accesses with access from field.\n * For example, `foo[\"bar\"].baz` becomes `foo.bar.baz`.\n */\nexport function removePathFromField(path) {\n    return `${splitAccessPath(path).join('.')}`;\n}\n/**\n * Count the depth of the path. Returns 1 for fields that are not nested.\n */\nexport function accessPathDepth(path) {\n    if (!path) {\n        return 0;\n    }\n    return splitAccessPath(path).length;\n}\n/**\n * This is a replacement for chained || for numeric properties or properties that respect null so that 0 will be included.\n */\nexport function getFirstDefined(...args) {\n    for (const arg of args) {\n        if (arg !== undefined) {\n            return arg;\n        }\n    }\n    return undefined;\n}\n// variable used to generate id\nlet idCounter = 42;\n/**\n * Returns a new random id every time it gets called.\n *\n * Has side effect!\n */\nexport function uniqueId(prefix) {\n    const id = ++idCounter;\n    return prefix ? String(prefix) + id : id;\n}\n/**\n * Resets the id counter used in uniqueId. This can be useful for testing.\n */\nexport function resetIdCounter() {\n    idCounter = 42;\n}\nexport function internalField(name) {\n    return isInternalField(name) ? name : `__${name}`;\n}\nexport function isInternalField(name) {\n    return name.indexOf('__') === 0;\n}\n/**\n * Normalize angle to be within [0,360).\n */\nexport function normalizeAngle(angle) {\n    return ((angle % 360) + 360) % 360;\n}\n//# sourceMappingURL=util.js.map","export function isRepeatSpec(spec) {\n    return spec['repeat'] !== undefined;\n}\n//# sourceMappingURL=repeat.js.map","export function isLayerSpec(spec) {\n    return spec['layer'] !== undefined;\n}\n//# sourceMappingURL=layer.js.map","import { uniqueId } from '../../util';\n/**\n * A node in the dataflow tree.\n */\nexport class DataFlowNode {\n    constructor(parent, debugName) {\n        this.debugName = debugName;\n        this._children = [];\n        this._parent = null;\n        if (parent) {\n            this.parent = parent;\n        }\n    }\n    /**\n     * Clone this node with a deep copy but don't clone links to children or parents.\n     */\n    clone() {\n        throw new Error('Cannot clone node');\n    }\n    get parent() {\n        return this._parent;\n    }\n    /**\n     * Set the parent of the node and also add this node to the parent's children.\n     */\n    set parent(parent) {\n        this._parent = parent;\n        if (parent) {\n            parent.addChild(this);\n        }\n    }\n    get children() {\n        return this._children;\n    }\n    numChildren() {\n        return this._children.length;\n    }\n    addChild(child, loc) {\n        // do not add the same child twice\n        if (this._children.indexOf(child) > -1) {\n            console.warn('Attempt to add the same child twice.');\n            return;\n        }\n        if (loc !== undefined) {\n            this._children.splice(loc, 0, child);\n        }\n        else {\n            this._children.push(child);\n        }\n    }\n    removeChild(oldChild) {\n        const loc = this._children.indexOf(oldChild);\n        this._children.splice(loc, 1);\n        return loc;\n    }\n    /**\n     * Remove node from the dataflow.\n     */\n    remove() {\n        let loc = this._parent.removeChild(this);\n        for (const child of this._children) {\n            // do not use the set method because we want to insert at a particular location\n            child._parent = this._parent;\n            this._parent.addChild(child, loc++);\n        }\n    }\n    /**\n     * Insert another node as a parent of this node.\n     */\n    insertAsParentOf(other) {\n        const parent = other.parent;\n        parent.removeChild(this);\n        this.parent = parent;\n        other.parent = this;\n    }\n    swapWithParent() {\n        const parent = this._parent;\n        const newParent = parent.parent;\n        // reconnect the children\n        for (const child of this._children) {\n            child.parent = parent;\n        }\n        // remove old links\n        this._children = []; // equivalent to removing every child link one by one\n        parent.removeChild(this);\n        parent.parent.removeChild(parent);\n        // swap two nodes\n        this.parent = newParent;\n        parent.parent = this;\n    }\n}\nexport class OutputNode extends DataFlowNode {\n    /**\n     * @param source The name of the source. Will change in assemble.\n     * @param type The type of the output node.\n     * @param refCounts A global ref counter map.\n     */\n    constructor(parent, source, type, refCounts) {\n        super(parent, source);\n        this.type = type;\n        this.refCounts = refCounts;\n        this._source = this._name = source;\n        if (this.refCounts && !(this._name in this.refCounts)) {\n            this.refCounts[this._name] = 0;\n        }\n    }\n    clone() {\n        const cloneObj = new this.constructor();\n        cloneObj.debugName = 'clone_' + this.debugName;\n        cloneObj._source = this._source;\n        cloneObj._name = 'clone_' + this._name;\n        cloneObj.type = this.type;\n        cloneObj.refCounts = this.refCounts;\n        cloneObj.refCounts[cloneObj._name] = 0;\n        return cloneObj;\n    }\n    dependentFields() {\n        return new Set();\n    }\n    producedFields() {\n        return new Set();\n    }\n    hash() {\n        if (this._hash === undefined) {\n            this._hash = `Output ${uniqueId()}`;\n        }\n        return this._hash;\n    }\n    /**\n     * Request the datasource name and increase the ref counter.\n     *\n     * During the parsing phase, this will return the simple name such as 'main' or 'raw'.\n     * It is crucial to request the name from an output node to mark it as a required node.\n     * If nobody ever requests the name, this datasource will not be instantiated in the assemble phase.\n     *\n     * In the assemble phase, this will return the correct name.\n     */\n    getSource() {\n        this.refCounts[this._name]++;\n        return this._source;\n    }\n    isRequired() {\n        return !!this.refCounts[this._name];\n    }\n    setSource(source) {\n        this._source = source;\n    }\n}\n//# sourceMappingURL=dataflow.js.map","import { isString } from 'vega-util';\nimport { fieldFilterExpression, isSelectionPredicate } from '../predicate';\nimport { logicalExpr } from '../util';\nimport { parseSelectionPredicate } from './selection/parse';\n/**\n * Converts a predicate into an expression.\n */\n// model is only used for selection filters.\nexport function expression(model, filterOp, node) {\n    return logicalExpr(filterOp, (predicate) => {\n        if (isString(predicate)) {\n            return predicate;\n        }\n        else if (isSelectionPredicate(predicate)) {\n            return parseSelectionPredicate(model, predicate.selection, node);\n        }\n        else {\n            // Filter Object\n            return fieldFilterExpression(predicate);\n        }\n    });\n}\n//# sourceMappingURL=predicate.js.map","import { __rest } from \"tslib\";\nimport { selector as parseSelector } from 'vega-event-selector';\nimport { hasOwnProperty, isString, stringValue } from 'vega-util';\nimport { STORE } from '.';\nimport { duplicate, logicalExpr, varName } from '../../util';\nimport { forEachTransform } from './transforms/transforms';\nexport function parseUnitSelection(model, selDefs) {\n    const selCmpts = {};\n    const selectionConfig = model.config.selection;\n    for (let name in selDefs) {\n        if (!hasOwnProperty(selDefs, name)) {\n            continue;\n        }\n        const selDef = duplicate(selDefs[name]);\n        const _a = selectionConfig[selDef.type], { fields, encodings } = _a, cfg = __rest(_a, [\"fields\", \"encodings\"]); // Project transform applies its defaults.\n        // Set default values from config if a property hasn't been specified,\n        // or if it is true. E.g., \"translate\": true should use the default\n        // event handlers for translate. However, true may be a valid value for\n        // a property (e.g., \"nearest\": true).\n        for (const key in cfg) {\n            // A selection should contain either `encodings` or `fields`, only use\n            // default values for these two values if neither of them is specified.\n            if ((key === 'encodings' && selDef.fields) || (key === 'fields' && selDef.encodings)) {\n                continue;\n            }\n            if (key === 'mark') {\n                selDef[key] = Object.assign(Object.assign({}, cfg[key]), selDef[key]);\n            }\n            if (selDef[key] === undefined || selDef[key] === true) {\n                selDef[key] = cfg[key] || selDef[key];\n            }\n        }\n        name = varName(name);\n        const selCmpt = (selCmpts[name] = Object.assign(Object.assign({}, selDef), { name: name, events: isString(selDef.on) ? parseSelector(selDef.on, 'scope') : selDef.on }));\n        forEachTransform(selCmpt, txCompiler => {\n            if (txCompiler.parse) {\n                txCompiler.parse(model, selCmpt, selDef, selDefs[name]);\n            }\n        });\n    }\n    return selCmpts;\n}\nexport function parseSelectionPredicate(model, selections, dfnode) {\n    const stores = [];\n    function expr(name) {\n        const vname = varName(name);\n        const selCmpt = model.getSelectionComponent(vname, name);\n        const store = stringValue(vname + STORE);\n        if (selCmpt.project.timeUnit) {\n            const child = dfnode || model.component.data.raw;\n            const tunode = selCmpt.project.timeUnit.clone();\n            if (child.parent) {\n                tunode.insertAsParentOf(child);\n            }\n            else {\n                child.parent = tunode;\n            }\n        }\n        if (selCmpt.empty !== 'none') {\n            stores.push(store);\n        }\n        return (`vlSelectionTest(${store}, datum` + (selCmpt.resolve === 'global' ? ')' : `, ${stringValue(selCmpt.resolve)})`));\n    }\n    const predicateStr = logicalExpr(selections, expr);\n    return ((stores.length ? '!(' + stores.map(s => `length(data(${s}))`).join(' || ') + ') || ' : '') + `(${predicateStr})`);\n}\n//# sourceMappingURL=parse.js.map","import { __rest } from \"tslib\";\nimport { array, stringValue } from 'vega-util';\nimport { STORE, TUPLE, unitName } from '.';\nimport { X, Y } from '../../channel';\nimport { warn } from '../../log';\nimport { hasContinuousDomain } from '../../scale';\nimport { keys } from '../../util';\nimport { assembleInit } from './assemble';\nimport { TUPLE_FIELDS } from './transforms/project';\nimport scales from './transforms/scales';\nexport const BRUSH = '_brush';\nexport const SCALE_TRIGGER = '_scale_trigger';\nconst interval = {\n    signals: (model, selCmpt) => {\n        const name = selCmpt.name;\n        const fieldsSg = name + TUPLE_FIELDS;\n        const hasScales = scales.has(selCmpt);\n        const signals = [];\n        const dataSignals = [];\n        const scaleTriggers = [];\n        if (selCmpt.translate && !hasScales) {\n            const filterExpr = `!event.item || event.item.mark.name !== ${stringValue(name + BRUSH)}`;\n            events(selCmpt, (on, evt) => {\n                const filters = array(evt.between[0].filter || (evt.between[0].filter = []));\n                if (filters.indexOf(filterExpr) < 0) {\n                    filters.push(filterExpr);\n                }\n                return on;\n            });\n        }\n        selCmpt.project.items.forEach((proj, i) => {\n            const channel = proj.channel;\n            if (channel !== X && channel !== Y) {\n                warn('Interval selections only support x and y encoding channels.');\n                return;\n            }\n            const init = selCmpt.init ? selCmpt.init[i] : null;\n            const cs = channelSignals(model, selCmpt, proj, init);\n            const dname = proj.signals.data;\n            const vname = proj.signals.visual;\n            const scaleName = stringValue(model.scaleName(channel));\n            const scaleType = model.getScaleComponent(channel).get('type');\n            const toNum = hasContinuousDomain(scaleType) ? '+' : '';\n            signals.push(...cs);\n            dataSignals.push(dname);\n            scaleTriggers.push({\n                scaleName: model.scaleName(channel),\n                expr: `(!isArray(${dname}) || ` +\n                    `(${toNum}invert(${scaleName}, ${vname})[0] === ${toNum}${dname}[0] && ` +\n                    `${toNum}invert(${scaleName}, ${vname})[1] === ${toNum}${dname}[1]))`\n            });\n        });\n        // Proxy scale reactions to ensure that an infinite loop doesn't occur\n        // when an interval selection filter touches the scale.\n        if (!hasScales) {\n            signals.push({\n                name: name + SCALE_TRIGGER,\n                value: {},\n                on: [\n                    {\n                        events: scaleTriggers.map(t => ({ scale: t.scaleName })),\n                        update: scaleTriggers.map(t => t.expr).join(' && ') + ` ? ${name + SCALE_TRIGGER} : {}`\n                    }\n                ]\n            });\n        }\n        // Only add an interval to the store if it has valid data extents. Data extents\n        // are set to null if pixel extents are equal to account for intervals over\n        // ordinal/nominal domains which, when inverted, will still produce a valid datum.\n        const init = selCmpt.init;\n        const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;\n        return signals.concat(Object.assign(Object.assign({ name: name + TUPLE }, (init ? { init: `{${update}: ${assembleInit(init)}}` } : {})), { on: [\n                {\n                    events: [{ signal: dataSignals.join(' || ') }],\n                    update: dataSignals.join(' && ') + ` ? {${update}: [${dataSignals}]} : null`\n                }\n            ] }));\n    },\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' + (selCmpt.resolve === 'global' ? 'true' : `{unit: ${unitName(model)}}`);\n    },\n    marks: (model, selCmpt, marks) => {\n        const name = selCmpt.name;\n        const { x, y } = selCmpt.project.has;\n        const xvname = x && x.signals.visual;\n        const yvname = y && y.signals.visual;\n        const store = `data(${stringValue(selCmpt.name + STORE)})`;\n        // Do not add a brush if we're binding to scales.\n        if (scales.has(selCmpt)) {\n            return marks;\n        }\n        const update = {\n            x: x !== undefined ? { signal: `${xvname}[0]` } : { value: 0 },\n            y: y !== undefined ? { signal: `${yvname}[0]` } : { value: 0 },\n            x2: x !== undefined ? { signal: `${xvname}[1]` } : { field: { group: 'width' } },\n            y2: y !== undefined ? { signal: `${yvname}[1]` } : { field: { group: 'height' } }\n        };\n        // If the selection is resolved to global, only a single interval is in\n        // the store. Wrap brush mark's encodings with a production rule to test\n        // this based on the `unit` property. Hide the brush mark if it corresponds\n        // to a unit different from the one in the store.\n        if (selCmpt.resolve === 'global') {\n            for (const key of keys(update)) {\n                update[key] = [\n                    Object.assign({ test: `${store}.length && ${store}[0].unit === ${unitName(model)}` }, update[key]),\n                    { value: 0 }\n                ];\n            }\n        }\n        // Two brush marks ensure that fill colors and other aesthetic choices do\n        // not interefere with the core marks, but that the brushed region can still\n        // be interacted with (e.g., dragging it around).\n        const _a = selCmpt.mark, { fill, fillOpacity } = _a, stroke = __rest(_a, [\"fill\", \"fillOpacity\"]);\n        const vgStroke = keys(stroke).reduce((def, k) => {\n            def[k] = [\n                {\n                    test: [x !== undefined && `${xvname}[0] !== ${xvname}[1]`, y !== undefined && `${yvname}[0] !== ${yvname}[1]`]\n                        .filter(t => t)\n                        .join(' && '),\n                    value: stroke[k]\n                },\n                { value: null }\n            ];\n            return def;\n        }, {});\n        return [\n            {\n                name: name + BRUSH + '_bg',\n                type: 'rect',\n                clip: true,\n                encode: {\n                    enter: {\n                        fill: { value: fill },\n                        fillOpacity: { value: fillOpacity }\n                    },\n                    update: update\n                }\n            },\n            ...marks,\n            {\n                name: name + BRUSH,\n                type: 'rect',\n                clip: true,\n                encode: {\n                    enter: {\n                        fill: { value: 'transparent' }\n                    },\n                    update: Object.assign(Object.assign({}, update), vgStroke)\n                }\n            }\n        ];\n    }\n};\nexport default interval;\n/**\n * Returns the visual and data signals for an interval selection.\n */\nfunction channelSignals(model, selCmpt, proj, init) {\n    const channel = proj.channel;\n    const vname = proj.signals.visual;\n    const dname = proj.signals.data;\n    const hasScales = scales.has(selCmpt);\n    const scaleName = stringValue(model.scaleName(channel));\n    const scale = model.getScaleComponent(channel);\n    const scaleType = scale ? scale.get('type') : undefined;\n    const scaled = (str) => `scale(${scaleName}, ${str})`;\n    const size = model.getSizeSignalRef(channel === X ? 'width' : 'height').signal;\n    const coord = `${channel}(unit)`;\n    const on = events(selCmpt, (def, evt) => {\n        return [\n            ...def,\n            { events: evt.between[0], update: `[${coord}, ${coord}]` },\n            { events: evt, update: `[${vname}[0], clamp(${coord}, 0, ${size})]` } // Brush End\n        ];\n    });\n    // React to pan/zooms of continuous scales. Non-continuous scales\n    // (band, point) cannot be pan/zoomed and any other changes\n    // to their domains (e.g., filtering) should clear the brushes.\n    on.push({\n        events: { signal: selCmpt.name + SCALE_TRIGGER },\n        update: hasContinuousDomain(scaleType) ? `[${scaled(`${dname}[0]`)}, ${scaled(`${dname}[1]`)}]` : `[0, 0]`\n    });\n    return hasScales\n        ? [{ name: dname, on: [] }]\n        : [\n            Object.assign(Object.assign({ name: vname }, (init ? { init: assembleInit(init, true, scaled) } : { value: [] })), { on: on }),\n            Object.assign(Object.assign({ name: dname }, (init ? { init: assembleInit(init) } : {})), { on: [\n                    {\n                        events: { signal: vname },\n                        update: `${vname}[0] === ${vname}[1] ? null : invert(${scaleName}, ${vname})`\n                    }\n                ] })\n        ];\n}\nfunction events(selCmpt, cb) {\n    return selCmpt.events.reduce((on, evt) => {\n        if (!evt.between) {\n            warn(`${evt} is not an ordered event stream for interval selections.`);\n            return on;\n        }\n        return cb(on, evt);\n    }, []);\n}\n//# sourceMappingURL=interval.js.map","import { hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GraticuleNode extends DataFlowNode {\n    constructor(parent, params) {\n        super(parent);\n        this.params = params;\n    }\n    clone() {\n        return new GraticuleNode(null, this.params);\n    }\n    dependentFields() {\n        return new Set();\n    }\n    producedFields() {\n        return undefined; // there should never be a node before graticule\n    }\n    hash() {\n        return `Graticule ${hash(this.params)}`;\n    }\n    assemble() {\n        return Object.assign({ type: 'graticule' }, (this.params === true ? {} : this.params));\n    }\n}\n//# sourceMappingURL=graticule.js.map","import { hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class SequenceNode extends DataFlowNode {\n    constructor(parent, params) {\n        super(parent);\n        this.params = params;\n    }\n    clone() {\n        return new SequenceNode(null, this.params);\n    }\n    dependentFields() {\n        return new Set();\n    }\n    producedFields() {\n        return new Set([this.params.as || 'data']);\n    }\n    hash() {\n        return `Hash ${hash(this.params)}`;\n    }\n    assemble() {\n        return Object.assign({ type: 'sequence' }, this.params);\n    }\n}\n//# sourceMappingURL=sequence.js.map","import { duplicate } from '../../util';\nimport { expression } from '../predicate';\nimport { DataFlowNode } from './dataflow';\nimport { getDependentFields } from './expressions';\nexport class FilterNode extends DataFlowNode {\n    constructor(parent, model, filter) {\n        super(parent);\n        this.model = model;\n        this.filter = filter;\n        // TODO: refactor this to not take a node and\n        // then add a static function makeFromOperand and make the constructor take only an expression\n        this.expr = expression(this.model, this.filter, this);\n        this._dependentFields = getDependentFields(this.expr);\n    }\n    clone() {\n        return new FilterNode(null, this.model, duplicate(this.filter));\n    }\n    dependentFields() {\n        return this._dependentFields;\n    }\n    producedFields() {\n        return new Set(); // filter does not produce any new fields\n    }\n    assemble() {\n        return {\n            type: 'filter',\n            expr: this.expr\n        };\n    }\n    hash() {\n        return `Filter ${this.expr}`;\n    }\n}\n//# sourceMappingURL=filter.js.map","import { __rest } from \"tslib\";\nimport { isNumber, isObject } from 'vega-util';\nimport { extractTransformsFromEncoding } from '../encoding';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { getFirstDefined, keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { compositeMarkContinuousAxis, compositeMarkOrient, filterTooltipWithAggregatedField, getCompositeMarkTooltip, makeCompositeAggregatePartFactory, partLayerMixins } from './common';\nexport const BOXPLOT = 'boxplot';\nconst BOXPLOT_PART_INDEX = {\n    box: 1,\n    median: 1,\n    outliers: 1,\n    rule: 1,\n    ticks: 1\n};\nexport const BOXPLOT_PARTS = keys(BOXPLOT_PART_INDEX);\nexport const boxPlotNormalizer = new CompositeMarkNormalizer(BOXPLOT, normalizeBoxPlot);\nexport function getBoxPlotType(extent) {\n    if (isNumber(extent)) {\n        return 'tukey';\n    }\n    // Ham: If we ever want to, we could add another extent syntax `{kIQR: number}` for the original [Q1-k*IQR, Q3+k*IQR] whisker and call this boxPlotType = `kIQR`.  However, I'm not exposing this for now.\n    return extent;\n}\nexport function normalizeBoxPlot(spec, { config }) {\n    // TODO: use selection\n    const { mark, encoding: _encoding, selection, projection: _p } = spec, outerSpec = __rest(spec, [\"mark\", \"encoding\", \"selection\", \"projection\"]);\n    const markDef = isMarkDef(mark) ? mark : { type: mark };\n    // TODO(https://github.com/vega/vega-lite/issues/3702): add selection support\n    if (selection) {\n        log.warn(log.message.selectionNotSupported('boxplot'));\n    }\n    const extent = markDef.extent || config.boxplot.extent;\n    const sizeValue = getFirstDefined(markDef.size, config.boxplot.size);\n    const boxPlotType = getBoxPlotType(extent);\n    const { transform, continuousAxisChannelDef, continuousAxis, groupby, aggregate, encodingWithoutContinuousAxis, ticksOrient, boxOrient, customTooltipWithoutAggregatedField } = boxParams(spec, extent, config);\n    const { color, size } = encodingWithoutContinuousAxis, encodingWithoutSizeColorAndContinuousAxis = __rest(encodingWithoutContinuousAxis, [\"color\", \"size\"]);\n    const makeBoxPlotPart = (sharedEncoding) => {\n        return makeCompositeAggregatePartFactory(markDef, continuousAxis, continuousAxisChannelDef, sharedEncoding, config.boxplot);\n    };\n    const makeBoxPlotExtent = makeBoxPlotPart(encodingWithoutSizeColorAndContinuousAxis);\n    const makeBoxPlotBox = makeBoxPlotPart(encodingWithoutContinuousAxis);\n    const makeBoxPlotMidTick = makeBoxPlotPart(Object.assign(Object.assign({}, encodingWithoutSizeColorAndContinuousAxis), (size ? { size } : {})));\n    const fiveSummaryTooltipEncoding = getCompositeMarkTooltip([\n        { fieldPrefix: boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_', titlePrefix: 'Max' },\n        { fieldPrefix: 'upper_box_', titlePrefix: 'Q3' },\n        { fieldPrefix: 'mid_box_', titlePrefix: 'Median' },\n        { fieldPrefix: 'lower_box_', titlePrefix: 'Q1' },\n        { fieldPrefix: boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_', titlePrefix: 'Min' }\n    ], continuousAxisChannelDef, encodingWithoutContinuousAxis);\n    // ## Whisker Layers\n    const endTick = { type: 'tick', color: 'black', opacity: 1, orient: ticksOrient };\n    const whiskerTooltipEncoding = boxPlotType === 'min-max'\n        ? fiveSummaryTooltipEncoding // for min-max, show five-summary tooltip for whisker\n        : // for tukey / k-IQR, just show upper/lower-whisker\n            getCompositeMarkTooltip([\n                { fieldPrefix: 'upper_whisker_', titlePrefix: 'Upper Whisker' },\n                { fieldPrefix: 'lower_whisker_', titlePrefix: 'Lower Whisker' }\n            ], continuousAxisChannelDef, encodingWithoutContinuousAxis);\n    const whiskerLayers = [\n        ...makeBoxPlotExtent({\n            partName: 'rule',\n            mark: 'rule',\n            positionPrefix: 'lower_whisker',\n            endPositionPrefix: 'lower_box',\n            extraEncoding: whiskerTooltipEncoding\n        }),\n        ...makeBoxPlotExtent({\n            partName: 'rule',\n            mark: 'rule',\n            positionPrefix: 'upper_box',\n            endPositionPrefix: 'upper_whisker',\n            extraEncoding: whiskerTooltipEncoding\n        }),\n        ...makeBoxPlotExtent({\n            partName: 'ticks',\n            mark: endTick,\n            positionPrefix: 'lower_whisker',\n            extraEncoding: whiskerTooltipEncoding\n        }),\n        ...makeBoxPlotExtent({\n            partName: 'ticks',\n            mark: endTick,\n            positionPrefix: 'upper_whisker',\n            extraEncoding: whiskerTooltipEncoding\n        })\n    ];\n    // ## Box Layers\n    // TODO: support hiding certain mark parts\n    const boxLayers = [\n        ...(boxPlotType !== 'tukey' ? whiskerLayers : []),\n        ...makeBoxPlotBox({\n            partName: 'box',\n            mark: Object.assign(Object.assign({ type: 'bar' }, (sizeValue ? { size: sizeValue } : {})), { orient: boxOrient }),\n            positionPrefix: 'lower_box',\n            endPositionPrefix: 'upper_box',\n            extraEncoding: fiveSummaryTooltipEncoding\n        }),\n        ...makeBoxPlotMidTick({\n            partName: 'median',\n            mark: Object.assign(Object.assign(Object.assign({ type: 'tick' }, (isObject(config.boxplot.median) && config.boxplot.median.color ? { color: config.boxplot.median.color } : {})), (sizeValue ? { size: sizeValue } : {})), { orient: ticksOrient }),\n            positionPrefix: 'mid_box',\n            extraEncoding: fiveSummaryTooltipEncoding\n        })\n    ];\n    // ## Filtered Layers\n    let filteredLayersMixins;\n    if (boxPlotType !== 'min-max') {\n        const lowerBoxExpr = `datum[\"lower_box_${continuousAxisChannelDef.field}\"]`;\n        const upperBoxExpr = `datum[\"upper_box_${continuousAxisChannelDef.field}\"]`;\n        const iqrExpr = `(${upperBoxExpr} - ${lowerBoxExpr})`;\n        const lowerWhiskerExpr = `${lowerBoxExpr} - ${extent} * ${iqrExpr}`;\n        const upperWhiskerExpr = `${upperBoxExpr} + ${extent} * ${iqrExpr}`;\n        const fieldExpr = `datum[\"${continuousAxisChannelDef.field}\"]`;\n        const joinaggregateTransform = {\n            joinaggregate: boxParamsQuartiles(continuousAxisChannelDef.field),\n            groupby\n        };\n        let filteredWhiskerSpec = undefined;\n        if (boxPlotType === 'tukey') {\n            filteredWhiskerSpec = {\n                transform: [\n                    {\n                        filter: `(${lowerWhiskerExpr} <= ${fieldExpr}) && (${fieldExpr} <= ${upperWhiskerExpr})`\n                    },\n                    {\n                        aggregate: [\n                            {\n                                op: 'min',\n                                field: continuousAxisChannelDef.field,\n                                as: 'lower_whisker_' + continuousAxisChannelDef.field\n                            },\n                            {\n                                op: 'max',\n                                field: continuousAxisChannelDef.field,\n                                as: 'upper_whisker_' + continuousAxisChannelDef.field\n                            },\n                            // preserve lower_box / upper_box\n                            {\n                                op: 'min',\n                                field: 'lower_box_' + continuousAxisChannelDef.field,\n                                as: 'lower_box_' + continuousAxisChannelDef.field\n                            },\n                            {\n                                op: 'max',\n                                field: 'upper_box_' + continuousAxisChannelDef.field,\n                                as: 'upper_box_' + continuousAxisChannelDef.field\n                            },\n                            ...aggregate\n                        ],\n                        groupby\n                    }\n                ],\n                layer: whiskerLayers\n            };\n        }\n        const { tooltip } = encodingWithoutSizeColorAndContinuousAxis, encodingWithoutSizeColorContinuousAxisAndTooltip = __rest(encodingWithoutSizeColorAndContinuousAxis, [\"tooltip\"]);\n        const outlierLayersMixins = partLayerMixins(markDef, 'outliers', config.boxplot, {\n            transform: [{ filter: `(${fieldExpr} < ${lowerWhiskerExpr}) || (${fieldExpr} > ${upperWhiskerExpr})` }],\n            mark: 'point',\n            encoding: Object.assign(Object.assign({ [continuousAxis]: {\n                    field: continuousAxisChannelDef.field,\n                    type: continuousAxisChannelDef.type\n                } }, encodingWithoutSizeColorContinuousAxisAndTooltip), (customTooltipWithoutAggregatedField ? { tooltip: customTooltipWithoutAggregatedField } : {}))\n        })[0];\n        if (outlierLayersMixins && filteredWhiskerSpec) {\n            filteredLayersMixins = {\n                transform: [joinaggregateTransform],\n                layer: [outlierLayersMixins, filteredWhiskerSpec]\n            };\n        }\n        else if (outlierLayersMixins) {\n            filteredLayersMixins = outlierLayersMixins;\n            filteredLayersMixins.transform.unshift(joinaggregateTransform);\n        }\n        else if (filteredWhiskerSpec) {\n            filteredLayersMixins = filteredWhiskerSpec;\n            filteredLayersMixins.transform.unshift(joinaggregateTransform);\n        }\n    }\n    if (filteredLayersMixins) {\n        // tukey box plot with outliers included\n        return Object.assign(Object.assign({}, outerSpec), { layer: [\n                ...(filteredLayersMixins ? [filteredLayersMixins] : []),\n                {\n                    // boxplot\n                    transform,\n                    layer: boxLayers\n                }\n            ] });\n    }\n    return Object.assign(Object.assign({}, outerSpec), { transform: (outerSpec.transform || []).concat(transform), layer: boxLayers });\n}\nfunction boxParamsQuartiles(continousAxisField) {\n    return [\n        {\n            op: 'q1',\n            field: continousAxisField,\n            as: 'lower_box_' + continousAxisField\n        },\n        {\n            op: 'q3',\n            field: continousAxisField,\n            as: 'upper_box_' + continousAxisField\n        }\n    ];\n}\nfunction boxParams(spec, extent, config) {\n    const orient = compositeMarkOrient(spec, BOXPLOT);\n    const { continuousAxisChannelDef, continuousAxis } = compositeMarkContinuousAxis(spec, orient, BOXPLOT);\n    const continuousFieldName = continuousAxisChannelDef.field;\n    const boxPlotType = getBoxPlotType(extent);\n    const boxplotSpecificAggregate = [\n        ...boxParamsQuartiles(continuousFieldName),\n        {\n            op: 'median',\n            field: continuousFieldName,\n            as: 'mid_box_' + continuousFieldName\n        },\n        {\n            op: 'min',\n            field: continuousFieldName,\n            as: (boxPlotType === 'min-max' ? 'lower_whisker_' : 'min_') + continuousFieldName\n        },\n        {\n            op: 'max',\n            field: continuousFieldName,\n            as: (boxPlotType === 'min-max' ? 'upper_whisker_' : 'max_') + continuousFieldName\n        }\n    ];\n    const postAggregateCalculates = boxPlotType === 'min-max' || boxPlotType === 'tukey'\n        ? []\n        : [\n            // This is for the  original k-IQR, which we do not expose\n            {\n                calculate: `datum[\"upper_box_${continuousFieldName}\"] - datum[\"lower_box_${continuousFieldName}\"]`,\n                as: 'iqr_' + continuousFieldName\n            },\n            {\n                calculate: `min(datum[\"upper_box_${continuousFieldName}\"] + datum[\"iqr_${continuousFieldName}\"] * ${extent}, datum[\"max_${continuousFieldName}\"])`,\n                as: 'upper_whisker_' + continuousFieldName\n            },\n            {\n                calculate: `max(datum[\"lower_box_${continuousFieldName}\"] - datum[\"iqr_${continuousFieldName}\"] * ${extent}, datum[\"min_${continuousFieldName}\"])`,\n                as: 'lower_whisker_' + continuousFieldName\n            }\n        ];\n    const _a = spec.encoding, _b = continuousAxis, oldContinuousAxisChannelDef = _a[_b], oldEncodingWithoutContinuousAxis = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n    const { customTooltipWithoutAggregatedField, filteredEncoding } = filterTooltipWithAggregatedField(oldEncodingWithoutContinuousAxis);\n    const { bins, timeUnits, aggregate, groupby, encoding: encodingWithoutContinuousAxis } = extractTransformsFromEncoding(filteredEncoding, config);\n    const ticksOrient = orient === 'vertical' ? 'horizontal' : 'vertical';\n    const boxOrient = orient;\n    const transform = [\n        ...bins,\n        ...timeUnits,\n        {\n            aggregate: [...aggregate, ...boxplotSpecificAggregate],\n            groupby\n        },\n        ...postAggregateCalculates\n    ];\n    return {\n        transform,\n        groupby,\n        aggregate,\n        continuousAxisChannelDef,\n        continuousAxis,\n        encodingWithoutContinuousAxis,\n        ticksOrient,\n        boxOrient,\n        customTooltipWithoutAggregatedField\n    };\n}\n//# sourceMappingURL=boxplot.js.map","import * as log from '../log';\nimport { keys } from '../util';\nimport { CompositeMarkNormalizer } from './base';\nimport { makeCompositeAggregatePartFactory } from './common';\nimport { errorBarParams } from './errorbar';\nexport const ERRORBAND = 'errorband';\nconst ERRORBAND_PART_INDEX = {\n    band: 1,\n    borders: 1\n};\nexport const ERRORBAND_PARTS = keys(ERRORBAND_PART_INDEX);\nexport const errorBandNormalizer = new CompositeMarkNormalizer(ERRORBAND, normalizeErrorBand);\nexport function normalizeErrorBand(spec, { config }) {\n    const { transform, continuousAxisChannelDef, continuousAxis, encodingWithoutContinuousAxis, markDef, outerSpec, tooltipEncoding } = errorBarParams(spec, ERRORBAND, config);\n    const errorBandDef = markDef;\n    const makeErrorBandPart = makeCompositeAggregatePartFactory(errorBandDef, continuousAxis, continuousAxisChannelDef, encodingWithoutContinuousAxis, config.errorband);\n    const is2D = spec.encoding.x !== undefined && spec.encoding.y !== undefined;\n    let bandMark = { type: is2D ? 'area' : 'rect' };\n    let bordersMark = { type: is2D ? 'line' : 'rule' };\n    const interpolate = Object.assign(Object.assign({}, (errorBandDef.interpolate ? { interpolate: errorBandDef.interpolate } : {})), (errorBandDef.tension && errorBandDef.interpolate ? { interpolate: errorBandDef.tension } : {}));\n    if (is2D) {\n        bandMark = Object.assign(Object.assign({}, bandMark), interpolate);\n        bordersMark = Object.assign(Object.assign({}, bordersMark), interpolate);\n    }\n    else if (errorBandDef.interpolate) {\n        log.warn(log.message.errorBand1DNotSupport('interpolate'));\n    }\n    else if (errorBandDef.tension) {\n        log.warn(log.message.errorBand1DNotSupport('tension'));\n    }\n    return Object.assign(Object.assign({}, outerSpec), { transform, layer: [\n            ...makeErrorBandPart({\n                partName: 'band',\n                mark: bandMark,\n                positionPrefix: 'lower',\n                endPositionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBandPart({\n                partName: 'borders',\n                mark: bordersMark,\n                positionPrefix: 'lower',\n                extraEncoding: tooltipEncoding\n            }),\n            ...makeErrorBandPart({\n                partName: 'borders',\n                mark: bordersMark,\n                positionPrefix: 'upper',\n                extraEncoding: tooltipEncoding\n            })\n        ] });\n}\n//# sourceMappingURL=errorband.js.map","import clear from './clear';\nimport inputs from './inputs';\nimport nearest from './nearest';\nimport project from './project';\nimport scales from './scales';\nimport toggle from './toggle';\nimport translate from './translate';\nimport zoom from './zoom';\nconst compilers = [project, toggle, scales, translate, zoom, inputs, nearest, clear];\nexport function forEachTransform(selCmpt, cb) {\n    for (const t of compilers) {\n        if (t.has(selCmpt)) {\n            cb(t);\n        }\n    }\n}\n//# sourceMappingURL=transforms.js.map","import { SELECTION_ID } from '../../selection';\nimport { DataFlowNode } from './dataflow';\nexport class IdentifierNode extends DataFlowNode {\n    clone() {\n        return new IdentifierNode(null);\n    }\n    constructor(parent) {\n        super(parent);\n    }\n    dependentFields() {\n        return new Set();\n    }\n    producedFields() {\n        return new Set([SELECTION_ID]);\n    }\n    hash() {\n        return 'Identifier';\n    }\n    assemble() {\n        return { type: 'identifier', as: SELECTION_ID };\n    }\n}\n//# sourceMappingURL=identifier.js.map","import { TUPLE, unitName } from '..';\nexport const TOGGLE = '_toggle';\nconst toggle = {\n    has: selCmpt => {\n        return selCmpt.type === 'multi' && selCmpt.toggle;\n    },\n    signals: (model, selCmpt, signals) => {\n        return signals.concat({\n            name: selCmpt.name + TOGGLE,\n            value: false,\n            on: [{ events: selCmpt.events, update: selCmpt.toggle }]\n        });\n    },\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        const signal = selCmpt.name + TOGGLE;\n        return (`${signal} ? null : ${tpl}, ` +\n            (selCmpt.resolve === 'global' ? `${signal} ? null : true, ` : `${signal} ? null : {unit: ${unitName(model)}}, `) +\n            `${signal} ? ${tpl} : null`);\n    }\n};\nexport default toggle;\n//# sourceMappingURL=toggle.js.map","import { isArray } from 'vega-util';\nimport { COLOR, OPACITY } from '../../channel';\nimport { hasConditionalValueDef, isTimeFormatFieldDef, isValueDef } from '../../channeldef';\nimport { FILL_STROKE_CONFIG } from '../../mark';\nimport { ScaleType } from '../../scale';\nimport { getFirstDefined, keys } from '../../util';\nimport { applyMarkConfig, timeFormatExpression } from '../common';\nimport * as mixins from '../mark/mixins';\nimport { defaultType } from './properties';\nfunction type(legendCmp, model, channel) {\n    const scaleType = model.getScaleComponent(channel).get('type');\n    return getFirstDefined(legendCmp.get('type'), defaultType({ channel, scaleType, alwaysReturn: true }));\n}\nexport function symbols(fieldDef, symbolsSpec, model, channel, legendCmp) {\n    if (type(legendCmp, model, channel) !== 'symbol') {\n        return undefined;\n    }\n    let out = Object.assign(Object.assign({}, applyMarkConfig({}, model, FILL_STROKE_CONFIG)), mixins.color(model)); // FIXME: remove this when VgEncodeEntry is compatible with SymbolEncodeEntry\n    const { markDef, encoding, config } = model;\n    const filled = markDef.filled;\n    const opacity = getMaxValue(encoding.opacity) || markDef.opacity;\n    if (out.fill) {\n        // for fill legend, we don't want any fill in symbol\n        if (channel === 'fill' || (filled && channel === COLOR)) {\n            delete out.fill;\n        }\n        else {\n            if (out.fill['field']) {\n                // For others, set fill to some opaque value (or nothing if a color is already set)\n                if (legendCmp.get('symbolFillColor')) {\n                    delete out.fill;\n                }\n                else {\n                    out.fill = { value: config.legend.symbolBaseFillColor || 'black' };\n                    out.fillOpacity = { value: opacity || 1 };\n                }\n            }\n            else if (isArray(out.fill)) {\n                const fill = getFirstConditionValue(encoding.fill || encoding.color) || markDef.fill || (filled && markDef.color);\n                if (fill) {\n                    out.fill = { value: fill };\n                }\n            }\n        }\n    }\n    if (out.stroke) {\n        if (channel === 'stroke' || (!filled && channel === COLOR)) {\n            delete out.stroke;\n        }\n        else {\n            if (out.stroke['field']) {\n                // For others, remove stroke field\n                delete out.stroke;\n            }\n            else if (isArray(out.stroke)) {\n                const stroke = getFirstDefined(getFirstConditionValue(encoding.stroke || encoding.color), markDef.stroke, filled ? markDef.color : undefined);\n                if (stroke) {\n                    out.stroke = { value: stroke };\n                }\n            }\n        }\n    }\n    if (channel !== OPACITY) {\n        if (opacity) {\n            // only apply opacity if it is neither zero or undefined\n            out.opacity = { value: opacity };\n        }\n    }\n    out = Object.assign(Object.assign({}, out), symbolsSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nexport function gradient(fieldDef, gradientSpec, model, channel, legendCmp) {\n    if (type(legendCmp, model, channel) !== 'gradient') {\n        return undefined;\n    }\n    let out = {};\n    const opacity = getMaxValue(model.encoding.opacity) || model.markDef.opacity;\n    if (opacity) {\n        // only apply opacity if it is neither zero or undefined\n        out.opacity = { value: opacity };\n    }\n    out = Object.assign(Object.assign({}, out), gradientSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nexport function labels(fieldDef, labelsSpec, model, channel) {\n    const legend = model.legend(channel);\n    const config = model.config;\n    let out = {};\n    if (isTimeFormatFieldDef(fieldDef)) {\n        const isUTCScale = model.getScaleComponent(channel).get('type') === ScaleType.UTC;\n        const expr = timeFormatExpression('datum.value', fieldDef.timeUnit, legend.format, config.legend.shortTimeLabels, config.timeFormat, isUTCScale);\n        labelsSpec = Object.assign(Object.assign({}, (expr ? { text: { signal: expr } } : {})), labelsSpec);\n    }\n    out = Object.assign(Object.assign({}, out), labelsSpec);\n    return keys(out).length > 0 ? out : undefined;\n}\nfunction getMaxValue(channelDef) {\n    return getConditionValue(channelDef, (v, conditionalDef) => Math.max(v, conditionalDef.value));\n}\nexport function getFirstConditionValue(channelDef) {\n    return getConditionValue(channelDef, (v, conditionalDef) => {\n        return getFirstDefined(v, conditionalDef.value);\n    });\n}\nfunction getConditionValue(channelDef, reducer) {\n    if (hasConditionalValueDef(channelDef)) {\n        return (isArray(channelDef.condition) ? channelDef.condition : [channelDef.condition]).reduce(reducer, channelDef.value);\n    }\n    else if (isValueDef(channelDef)) {\n        return channelDef.value;\n    }\n    return undefined;\n}\n//# sourceMappingURL=encode.js.map","import { isFieldDef } from '../../channeldef';\nimport { pathGroupingFields } from '../../encoding';\nimport { isImputeSequence } from '../../transform';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class ImputeNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new ImputeNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set([this.transform.impute, this.transform.key, ...(this.transform.groupby || [])]);\n    }\n    producedFields() {\n        return new Set([this.transform.impute]);\n    }\n    processSequence(keyvals) {\n        const { start = 0, stop, step } = keyvals;\n        const result = [start, stop, ...(step ? [step] : [])].join(',');\n        return { signal: `sequence(${result})` };\n    }\n    static makeFromTransform(parent, imputeTransform) {\n        return new ImputeNode(parent, imputeTransform);\n    }\n    static makeFromEncoding(parent, model) {\n        const encoding = model.encoding;\n        const xDef = encoding.x;\n        const yDef = encoding.y;\n        if (isFieldDef(xDef) && isFieldDef(yDef)) {\n            const imputedChannel = xDef.impute ? xDef : yDef.impute ? yDef : undefined;\n            if (imputedChannel === undefined) {\n                return undefined;\n            }\n            const keyChannel = xDef.impute ? yDef : yDef.impute ? xDef : undefined;\n            const { method, value, frame, keyvals } = imputedChannel.impute;\n            const groupbyFields = pathGroupingFields(model.mark, encoding);\n            return new ImputeNode(parent, Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ impute: imputedChannel.field, key: keyChannel.field }, (method ? { method } : {})), (value !== undefined ? { value } : {})), (frame ? { frame } : {})), (keyvals !== undefined ? { keyvals } : {})), (groupbyFields.length ? { groupby: groupbyFields } : {})));\n        }\n        return null;\n    }\n    hash() {\n        return `Impute ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { impute, key, keyvals, method, groupby, value, frame = [null, null] } = this.transform;\n        const initialImpute = Object.assign(Object.assign(Object.assign(Object.assign({ type: 'impute', field: impute, key }, (keyvals ? { keyvals: isImputeSequence(keyvals) ? this.processSequence(keyvals) : keyvals } : {})), { method: 'value' }), (groupby ? { groupby } : {})), { value: null });\n        let setImputedField;\n        if (method && method !== 'value') {\n            const deriveNewField = Object.assign({ type: 'window', as: [`imputed_${impute}_value`], ops: [method], fields: [impute], frame, ignorePeers: false }, (groupby ? { groupby } : {}));\n            const replaceOriginal = {\n                type: 'formula',\n                expr: `datum.${impute} === null ? datum.imputed_${impute}_value : datum.${impute}`,\n                as: impute\n            };\n            setImputedField = [deriveNewField, replaceOriginal];\n        }\n        else {\n            const replaceWithValue = {\n                type: 'formula',\n                expr: `datum.${impute} === null ? ${value} : datum.${impute}`,\n                as: impute\n            };\n            setImputedField = [replaceWithValue];\n        }\n        return [initialImpute, ...setImputedField];\n    }\n}\n//# sourceMappingURL=impute.js.map","import { isBoolean, isObject } from 'vega-util';\nimport { COLOR, COLUMN, FILL, FILLOPACITY, OPACITY, ROW, SHAPE, SIZE, STROKE, STROKEOPACITY, STROKEWIDTH } from './channel';\nimport { normalizeBin } from './channeldef';\nimport { keys, varName } from './util';\n/**\n * Create a key for the bin configuration. Not for prebinned bin.\n */\nexport function binToString(bin) {\n    if (isBoolean(bin)) {\n        bin = normalizeBin(bin, undefined);\n    }\n    return ('bin' +\n        keys(bin)\n            .map(p => varName(`_${p}_${bin[p]}`))\n            .join(''));\n}\n/**\n * Vega-Lite should bin the data.\n */\nexport function isBinning(bin) {\n    return bin === true || (isBinParams(bin) && !bin.binned);\n}\n/**\n * The data is already binned and so Vega-Lite should not bin it again.\n */\nexport function isBinned(bin) {\n    return bin === 'binned' || (isBinParams(bin) && bin.binned);\n}\nexport function isBinParams(bin) {\n    return isObject(bin);\n}\nexport function autoMaxBins(channel) {\n    switch (channel) {\n        case ROW:\n        case COLUMN:\n        case SIZE:\n        case COLOR:\n        case FILL:\n        case STROKE:\n        case STROKEWIDTH:\n        case OPACITY:\n        case FILLOPACITY:\n        case STROKEOPACITY:\n        // Facets and Size shouldn't have too many bins\n        // We choose 6 like shape to simplify the rule [falls through]\n        case SHAPE:\n            return 6; // Vega's \"shape\" has 6 distinct values\n        default:\n            return 10;\n    }\n}\n//# sourceMappingURL=bin.js.map","import { keys } from './util';\nexport const HEADER_TITLE_PROPERTIES_MAP = {\n    titleAlign: 'align',\n    titleAnchor: 'anchor',\n    titleAngle: 'angle',\n    titleBaseline: 'baseline',\n    titleColor: 'color',\n    titleFont: 'font',\n    titleFontSize: 'fontSize',\n    titleFontStyle: 'fontStyle',\n    titleFontWeight: 'fontWeight',\n    titleLimit: 'limit',\n    titleOrient: 'orient',\n    titlePadding: 'offset'\n};\nexport const HEADER_LABEL_PROPERTIES_MAP = {\n    labelAlign: 'align',\n    labelAnchor: 'anchor',\n    labelAngle: 'angle',\n    labelColor: 'color',\n    labelFont: 'font',\n    labelFontSize: 'fontSize',\n    labelFontStyle: 'fontStyle',\n    labelLimit: 'limit',\n    labelOrient: 'orient',\n    labelPadding: 'offset'\n};\nexport const HEADER_TITLE_PROPERTIES = keys(HEADER_TITLE_PROPERTIES_MAP);\nexport const HEADER_LABEL_PROPERTIES = keys(HEADER_LABEL_PROPERTIES_MAP);\n//# sourceMappingURL=header.js.map","import { array, isArray, isObject, isString } from 'vega-util';\nimport { isBinned, isBinning } from '../../bin';\nimport { SCALE_CHANNELS, X, X2, Y2 } from '../../channel';\nimport { getTypedFieldDef, isConditionalSelection, isFieldDef, isValueDef } from '../../channeldef';\nimport * as log from '../../log';\nimport { isPathMark } from '../../mark';\nimport { hasContinuousDomain } from '../../scale';\nimport { contains, getFirstDefined, keys } from '../../util';\nimport { VG_MARK_CONFIGS } from '../../vega.schema';\nimport { getMarkConfig, getMarkPropOrConfig, getStyleConfig } from '../common';\nimport { expression } from '../predicate';\nimport { parseSelectionPredicate } from '../selection/parse';\nimport * as ref from './valueref';\nimport { fieldInvalidPredicate } from './valueref';\nexport function color(model) {\n    const { markDef, encoding, config } = model;\n    const { filled, type: markType } = markDef;\n    const configValue = {\n        fill: getMarkConfig('fill', markDef, config),\n        stroke: getMarkConfig('stroke', markDef, config),\n        color: getMarkConfig('color', markDef, config)\n    };\n    const transparentIfNeeded = contains(['bar', 'point', 'circle', 'square', 'geoshape'], markType)\n        ? 'transparent'\n        : undefined;\n    const defaultFill = getFirstDefined(markDef.fill, filled === true ? markDef.color : undefined, configValue.fill, filled === true ? configValue.color : undefined, \n    // If there is no fill, always fill symbols, bar, geoshape\n    // with transparent fills https://github.com/vega/vega-lite/issues/1316\n    transparentIfNeeded);\n    const defaultStroke = getFirstDefined(markDef.stroke, filled === false ? markDef.color : undefined, configValue.stroke, filled === false ? configValue.color : undefined);\n    const colorVgChannel = filled ? 'fill' : 'stroke';\n    const fillStrokeMarkDefAndConfig = Object.assign(Object.assign({}, (defaultFill ? { fill: { value: defaultFill } } : {})), (defaultStroke ? { stroke: { value: defaultStroke } } : {}));\n    if (markDef.color && (filled ? markDef.fill : markDef.stroke)) {\n        log.warn(log.message.droppingColor('property', { fill: 'fill' in markDef, stroke: 'stroke' in markDef }));\n    }\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, fillStrokeMarkDefAndConfig), nonPosition('color', model, {\n        vgChannel: colorVgChannel,\n        defaultValue: filled ? defaultFill : defaultStroke\n    })), nonPosition('fill', model, {\n        // if there is encoding.fill, include default fill just in case we have conditional-only fill encoding\n        defaultValue: encoding.fill ? defaultFill : undefined\n    })), nonPosition('stroke', model, {\n        // if there is encoding.stroke, include default fill just in case we have conditional-only stroke encoding\n        defaultValue: encoding.stroke ? defaultStroke : undefined\n    }));\n}\nexport function baseEncodeEntry(model, ignore) {\n    const { fill = undefined, stroke = undefined } = ignore.color === 'include' ? color(model) : {};\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, markDefProperties(model.markDef, ignore)), wrapAllFieldsInvalid(model, 'fill', fill)), wrapAllFieldsInvalid(model, 'stroke', stroke)), nonPosition('opacity', model)), nonPosition('fillOpacity', model)), nonPosition('strokeOpacity', model)), nonPosition('strokeWidth', model)), tooltip(model)), text(model, 'href'));\n}\nfunction wrapAllFieldsInvalid(model, channel, valueRef) {\n    const { config, mark, markDef } = model;\n    const invalid = getMarkPropOrConfig('invalid', markDef, config);\n    if (invalid === 'hide' && valueRef && !isPathMark(mark)) {\n        // For non-path marks, we have to exclude invalid values (null and NaN) for scales with continuous domains.\n        // For path marks, we will use \"defined\" property and skip these values instead.\n        const test = allFieldsInvalidPredicate(model, { invalid: true, channels: SCALE_CHANNELS });\n        if (test) {\n            return {\n                [channel]: [\n                    // prepend the invalid case\n                    // TODO: support custom value\n                    { test, value: null },\n                    ...array(valueRef)\n                ]\n            };\n        }\n    }\n    return valueRef ? { [channel]: valueRef } : {};\n}\nfunction markDefProperties(mark, ignore) {\n    return VG_MARK_CONFIGS.reduce((m, prop) => {\n        if (mark[prop] !== undefined && ignore[prop] !== 'ignore') {\n            m[prop] = { value: mark[prop] };\n        }\n        return m;\n    }, {});\n}\nexport function valueIfDefined(prop, value) {\n    if (value !== undefined) {\n        return { [prop]: { value: value } };\n    }\n    return undefined;\n}\nfunction allFieldsInvalidPredicate(model, { invalid = false, channels }) {\n    const filterIndex = channels.reduce((aggregator, channel) => {\n        const scaleComponent = model.getScaleComponent(channel);\n        if (scaleComponent) {\n            const scaleType = scaleComponent.get('type');\n            const field = model.vgField(channel, { expr: 'datum' });\n            // While discrete domain scales can handle invalid values, continuous scales can't.\n            if (field && hasContinuousDomain(scaleType)) {\n                aggregator[field] = true;\n            }\n        }\n        return aggregator;\n    }, {});\n    const fields = keys(filterIndex);\n    if (fields.length > 0) {\n        const op = invalid ? '||' : '&&';\n        return fields.map(field => fieldInvalidPredicate(field, invalid)).join(` ${op} `);\n    }\n    return undefined;\n}\nexport function defined(model) {\n    const { config, markDef } = model;\n    const invalid = getMarkPropOrConfig('invalid', markDef, config);\n    if (invalid) {\n        const signal = allFieldsInvalidPredicate(model, { channels: ['x', 'y'] });\n        if (signal) {\n            return { defined: { signal } };\n        }\n    }\n    return {};\n}\n/**\n * Return mixins for non-positional channels with scales.  (Text doesn't have scale.)\n */\nexport function nonPosition(channel, model, opt = {}) {\n    const { markDef, encoding, config } = model;\n    const { vgChannel = channel } = opt;\n    let { defaultRef, defaultValue } = opt;\n    if (defaultRef === undefined) {\n        // prettier-ignore\n        defaultValue = defaultValue ||\n            (vgChannel === channel\n                ? // When vl channel is the same as Vega's, no need to read from config as Vega will apply them correctly\n                    markDef[channel]\n                : // However, when they are different (e.g, vl's text size is vg fontSize), need to read \"size\" from configs\n                    getFirstDefined(markDef[channel], markDef[vgChannel], getMarkConfig(channel, markDef, config, { vgChannel })));\n        defaultRef = defaultValue ? { value: defaultValue } : undefined;\n    }\n    const channelDef = encoding[channel];\n    return wrapCondition(model, channelDef, vgChannel, cDef => {\n        return ref.midPoint({\n            channel,\n            channelDef: cDef,\n            markDef,\n            config,\n            scaleName: model.scaleName(channel),\n            scale: model.getScaleComponent(channel),\n            stack: null,\n            defaultRef\n        });\n    });\n}\n/**\n * Return a mixin that includes a Vega production rule for a Vega-Lite conditional channel definition.\n * or a simple mixin if channel def has no condition.\n */\nexport function wrapCondition(model, channelDef, vgChannel, refFn) {\n    const condition = channelDef && channelDef.condition;\n    const valueRef = refFn(channelDef);\n    if (condition) {\n        const conditions = isArray(condition) ? condition : [condition];\n        const vgConditions = conditions.map(c => {\n            const conditionValueRef = refFn(c);\n            const test = isConditionalSelection(c) ? parseSelectionPredicate(model, c.selection) : expression(model, c.test);\n            return Object.assign({ test }, conditionValueRef);\n        });\n        return {\n            [vgChannel]: [...vgConditions, ...(valueRef !== undefined ? [valueRef] : [])]\n        };\n    }\n    else {\n        return valueRef !== undefined ? { [vgChannel]: valueRef } : {};\n    }\n}\nexport function tooltip(model, opt = {}) {\n    const { encoding, markDef, config } = model;\n    const channelDef = encoding.tooltip;\n    if (isArray(channelDef)) {\n        return { tooltip: ref.tooltipForEncoding({ tooltip: channelDef }, config, opt) };\n    }\n    else {\n        return wrapCondition(model, channelDef, 'tooltip', cDef => {\n            // use valueRef based on channelDef first\n            const tooltipRefFromChannelDef = ref.text(cDef, model.config, opt.reactiveGeom ? 'datum.datum' : 'datum');\n            if (tooltipRefFromChannelDef) {\n                return tooltipRefFromChannelDef;\n            }\n            if (cDef === null) {\n                // Allow using encoding.tooltip = null to disable tooltip\n                return undefined;\n            }\n            // If tooltipDef does not exist, then use value from markDef or config\n            let markTooltip = getFirstDefined(markDef.tooltip, getMarkConfig('tooltip', markDef, config));\n            if (markTooltip === true) {\n                markTooltip = { content: 'encoding' };\n            }\n            if (isString(markTooltip)) {\n                return { value: markTooltip };\n            }\n            else if (isObject(markTooltip)) {\n                // `tooltip` is `{fields: 'encodings' | 'fields'}`\n                if (markTooltip.content === 'encoding') {\n                    return ref.tooltipForEncoding(encoding, config, opt);\n                }\n                else {\n                    return { signal: 'datum' };\n                }\n            }\n            return undefined;\n        });\n    }\n}\nexport function text(model, channel = 'text') {\n    const channelDef = model.encoding[channel];\n    return wrapCondition(model, channelDef, channel, cDef => ref.text(cDef, model.config));\n}\nexport function bandPosition(fieldDef, channel, model, defaultSizeRef) {\n    const scaleName = model.scaleName(channel);\n    const sizeChannel = channel === 'x' ? 'width' : 'height';\n    if (model.encoding.size ||\n        model.markDef.size !== undefined ||\n        (defaultSizeRef && defaultSizeRef.value !== undefined)) {\n        const orient = model.markDef.orient;\n        if (orient) {\n            const centeredBandPositionMixins = {\n                // Use xc/yc and place the mark at the middle of the band\n                // This way we never have to deal with size's condition for x/y position.\n                [channel + 'c']: ref.fieldRef(fieldDef, scaleName, {}, { band: 0.5 })\n            };\n            if (getTypedFieldDef(model.encoding.size)) {\n                return Object.assign(Object.assign({}, centeredBandPositionMixins), nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (isValueDef(model.encoding.size)) {\n                return Object.assign(Object.assign({}, centeredBandPositionMixins), nonPosition('size', model, { vgChannel: sizeChannel }));\n            }\n            else if (model.markDef.size !== undefined) {\n                return Object.assign(Object.assign({}, centeredBandPositionMixins), { [sizeChannel]: { value: model.markDef.size } });\n            }\n            else if (defaultSizeRef && defaultSizeRef.value !== undefined) {\n                return Object.assign(Object.assign({}, centeredBandPositionMixins), { [sizeChannel]: defaultSizeRef });\n            }\n        }\n        else {\n            log.warn(log.message.cannotApplySizeToNonOrientedMark(model.markDef.type));\n        }\n    }\n    const { band = 1 } = fieldDef;\n    return {\n        // FIXME: make offset work correctly here when we support group bar (https://github.com/vega/vega-lite/issues/396)\n        [channel]: ref.fieldRef(fieldDef, scaleName, { binSuffix: 'range' }, { band: (1 - band) / 2 }),\n        [sizeChannel]: defaultSizeRef || ref.bandRef(scaleName, band)\n    };\n}\nexport function centeredPointPositionWithSize(channel, model, defaultPosRef, defaultSizeRef) {\n    const centerChannel = channel === 'x' ? 'xc' : 'yc';\n    const sizeChannel = channel === 'x' ? 'width' : 'height';\n    return Object.assign(Object.assign({}, pointPosition(channel, model, defaultPosRef, { vgChannel: centerChannel })), nonPosition('size', model, { defaultRef: defaultSizeRef, vgChannel: sizeChannel }));\n}\nexport function binPosition({ fieldDef, fieldDef2, channel, band, scaleName, markDef, spacing = 0, reverse }) {\n    const binSpacing = {\n        x: reverse ? spacing : 0,\n        x2: reverse ? 0 : spacing,\n        y: reverse ? 0 : spacing,\n        y2: reverse ? spacing : 0\n    };\n    const channel2 = channel === X ? X2 : Y2;\n    if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {\n        return {\n            [channel2]: ref.bin({\n                channel,\n                fieldDef,\n                scaleName,\n                markDef,\n                band: (1 - band) / 2,\n                offset: binSpacing[`${channel}2`]\n            }),\n            [channel]: ref.bin({\n                channel,\n                fieldDef,\n                scaleName,\n                markDef,\n                band: 1 - (1 - band) / 2,\n                offset: binSpacing[channel]\n            })\n        };\n    }\n    else if (isBinned(fieldDef.bin) && isFieldDef(fieldDef2)) {\n        return {\n            [channel2]: ref.fieldRef(fieldDef, scaleName, {}, { offset: binSpacing[`${channel}2`] }),\n            [channel]: ref.fieldRef(fieldDef2, scaleName, {}, { offset: binSpacing[channel] })\n        };\n    }\n    else {\n        log.warn(log.message.channelRequiredForBinned(channel2));\n        return undefined;\n    }\n}\n/**\n * Return mixins for point (non-band) position channels.\n */\nexport function pointPosition(channel, model, defaultRef, { vgChannel } = {}) {\n    // TODO: refactor how refer to scale as discussed in https://github.com/vega/vega-lite/pull/1613\n    const { encoding, mark, markDef, config, stack } = model;\n    const channelDef = encoding[channel];\n    const channel2Def = encoding[channel === X ? X2 : Y2];\n    const scaleName = model.scaleName(channel);\n    const scale = model.getScaleComponent(channel);\n    const offset = ref.getOffset(channel, model.markDef);\n    const valueRef = !channelDef && (encoding.latitude || encoding.longitude)\n        ? // use geopoint output if there are lat/long and there is no point position overriding lat/long.\n            { field: model.getName(channel) }\n        : ref.position({\n            channel,\n            channelDef,\n            channel2Def,\n            markDef,\n            config,\n            scaleName,\n            scale,\n            stack,\n            offset,\n            defaultRef: ref.positionDefault({\n                markDef,\n                config,\n                defaultRef,\n                channel,\n                scaleName,\n                scale,\n                mark,\n                checkBarAreaWithoutZero: !channel2Def // only check for non-ranged marks\n            })\n        });\n    return {\n        [vgChannel || channel]: valueRef\n    };\n}\nconst ALIGNED_X_CHANNEL = {\n    left: 'x',\n    center: 'xc',\n    right: 'x2'\n};\nconst BASELINED_Y_CHANNEL = {\n    top: 'y',\n    middle: 'yc',\n    bottom: 'y2'\n};\nexport function pointOrRangePosition(channel, model, { defaultRef, defaultRef2, range }) {\n    if (range) {\n        return rangePosition(channel, model, { defaultRef, defaultRef2 });\n    }\n    return pointPosition(channel, model, defaultRef);\n}\nexport function rangePosition(channel, model, { defaultRef, defaultRef2 }) {\n    const { markDef, config } = model;\n    const channel2 = channel === 'x' ? 'x2' : 'y2';\n    const sizeChannel = channel === 'x' ? 'width' : 'height';\n    const pos2Mixins = pointPosition2(model, defaultRef2, channel2);\n    const vgChannel = pos2Mixins[sizeChannel] ? alignedChannel(channel, markDef, config) : channel;\n    return Object.assign(Object.assign({}, pointPosition(channel, model, defaultRef, { vgChannel })), pos2Mixins);\n}\nfunction alignedChannel(channel, markDef, config) {\n    const alignChannel = channel === 'x' ? 'align' : 'baseline';\n    const align = getFirstDefined(markDef[alignChannel], getMarkConfig(alignChannel, markDef, config));\n    if (channel === 'x') {\n        return ALIGNED_X_CHANNEL[align || 'center'];\n    }\n    else {\n        return BASELINED_Y_CHANNEL[align || 'middle'];\n    }\n}\n/**\n * Return mixins for x2, y2.\n * If channel is not specified, return one channel based on orientation.\n */\nfunction pointPosition2(model, defaultRef, channel) {\n    const { encoding, mark, markDef, stack, config } = model;\n    const baseChannel = channel === 'x2' ? 'x' : 'y';\n    const sizeChannel = channel === 'x2' ? 'width' : 'height';\n    const channelDef = encoding[baseChannel];\n    const scaleName = model.scaleName(baseChannel);\n    const scale = model.getScaleComponent(baseChannel);\n    const offset = ref.getOffset(channel, model.markDef);\n    if (!channelDef && (encoding.latitude || encoding.longitude)) {\n        // use geopoint output if there are lat2/long2 and there is no point position2 overriding lat2/long2.\n        return { [channel]: { field: model.getName(channel) } };\n    }\n    const valueRef = ref.position2({\n        channel,\n        channelDef,\n        channel2Def: encoding[channel],\n        markDef,\n        config,\n        scaleName,\n        scale,\n        stack,\n        offset,\n        defaultRef: undefined\n    });\n    if (valueRef !== undefined) {\n        return { [channel]: valueRef };\n    }\n    // TODO: check width/height encoding here once we add them\n    // no x2/y2 encoding, then try to read x2/y2 or width/height based on precedence:\n    // markDef > config.style > mark-specific config (config[mark]) > general mark config (config.mark)\n    return getFirstDefined(position2orSize(channel, markDef), position2orSize(channel, {\n        [channel]: getStyleConfig(channel, markDef, config.style),\n        [sizeChannel]: getStyleConfig(sizeChannel, markDef, config.style)\n    }), position2orSize(channel, config[mark]), position2orSize(channel, config.mark), {\n        [channel]: ref.positionDefault({\n            markDef,\n            config,\n            defaultRef,\n            channel,\n            scaleName,\n            scale,\n            mark,\n            checkBarAreaWithoutZero: !encoding[channel] // only check for non-ranged marks\n        })()\n    });\n}\nfunction position2orSize(channel, markDef) {\n    const sizeChannel = channel === 'x2' ? 'width' : 'height';\n    if (markDef[channel]) {\n        return { [channel]: ref.vgValueRef(channel, markDef[channel]) };\n    }\n    else if (markDef[sizeChannel]) {\n        return { [sizeChannel]: { value: markDef[sizeChannel] } };\n    }\n    return undefined;\n}\n//# sourceMappingURL=mixins.js.map","import { array, isArray } from 'vega-util';\nimport { isBinning } from '../bin';\nimport { isScaleFieldDef, isTimeFormatFieldDef, vgField } from '../channeldef';\nimport { ScaleType } from '../scale';\nimport { formatExpression } from '../timeunit';\nimport { QUANTITATIVE } from '../type';\nimport { getFirstDefined, stringify } from '../util';\nexport function applyMarkConfig(e, model, propsList) {\n    for (const property of propsList) {\n        const value = getMarkConfig(property, model.markDef, model.config);\n        if (value !== undefined) {\n            e[property] = { value: value };\n        }\n    }\n    return e;\n}\nexport function getStyles(mark) {\n    return [].concat(mark.type, mark.style || []);\n}\nexport function getMarkPropOrConfig(channel, mark, config) {\n    return getFirstDefined(mark[channel], getMarkConfig(channel, mark, config));\n}\n/**\n * Return property value from style or mark specific config property if exists.\n * Otherwise, return general mark specific config.\n */\nexport function getMarkConfig(channel, mark, config, { vgChannel } = {} // Note: Ham: I use `any` here as it's too hard to make TS knows that MarkConfig[vgChannel] would have the same type as MarkConfig[P]\n) {\n    return getFirstDefined(\n    // style config has highest precedence\n    vgChannel ? getStyleConfig(channel, mark, config.style) : undefined, getStyleConfig(channel, mark, config.style), \n    // then mark-specific config\n    vgChannel ? config[mark.type][vgChannel] : undefined, config[mark.type][channel], \n    // If there is vgChannel, skip vl channel.\n    // For example, vl size for text is vg fontSize, but config.mark.size is only for point size.\n    vgChannel ? config.mark[vgChannel] : config.mark[channel]);\n}\nexport function getStyleConfig(prop, mark, styleConfigIndex) {\n    const styles = getStyles(mark);\n    let value;\n    for (const style of styles) {\n        const styleConfig = styleConfigIndex[style];\n        // MarkConfig extends VgMarkConfig so a prop may not be a valid property for style\n        // However here we also check if it is defined, so it is okay to cast here\n        const p = prop;\n        if (styleConfig && styleConfig[p] !== undefined) {\n            value = styleConfig[p];\n        }\n    }\n    return value;\n}\nexport function formatSignalRef(fieldDef, specifiedFormat, expr, config) {\n    if (isTimeFormatFieldDef(fieldDef)) {\n        const isUTCScale = isScaleFieldDef(fieldDef) && fieldDef['scale'] && fieldDef['scale'].type === ScaleType.UTC;\n        return {\n            signal: timeFormatExpression(vgField(fieldDef, {\n                expr\n            }), fieldDef.timeUnit, specifiedFormat, config.text.shortTimeLabels, config.timeFormat, isUTCScale, true)\n        };\n    }\n    else {\n        const format = numberFormat(fieldDef, specifiedFormat, config);\n        if (isBinning(fieldDef.bin)) {\n            const startField = vgField(fieldDef, { expr });\n            const endField = vgField(fieldDef, { expr, binSuffix: 'end' });\n            return {\n                signal: binFormatExpression(startField, endField, format, config)\n            };\n        }\n        else if (fieldDef.type === 'quantitative' || format) {\n            return {\n                signal: `${formatExpr(vgField(fieldDef, { expr, binSuffix: 'range' }), format)}`\n            };\n        }\n        else {\n            return { signal: `''+${vgField(fieldDef, { expr })}` };\n        }\n    }\n}\n/**\n * Returns number format for a fieldDef\n */\nexport function numberFormat(fieldDef, specifiedFormat, config) {\n    // Specified format in axis/legend has higher precedence than fieldDef.format\n    if (specifiedFormat) {\n        return specifiedFormat;\n    }\n    if (fieldDef.type === QUANTITATIVE) {\n        // we only apply the default if the field is quantitative\n        return config.numberFormat;\n    }\n    return undefined;\n}\nfunction formatExpr(field, format) {\n    return `format(${field}, \"${format || ''}\")`;\n}\nexport function numberFormatExpr(field, specifiedFormat, config) {\n    return formatExpr(field, specifiedFormat || config.numberFormat);\n}\nexport function binFormatExpression(startField, endField, format, config) {\n    return `${startField} === null || isNaN(${startField}) ? \"null\" : ${numberFormatExpr(startField, format, config)} + \" - \" + ${numberFormatExpr(endField, format, config)}`;\n}\n/**\n * Returns the time expression used for axis/legend labels or text mark for a temporal field\n */\nexport function timeFormatExpression(field, timeUnit, format, shortTimeLabels, rawTimeFormat, // should be provided only for actual text and headers, not axis/legend labels\nisUTCScale, alwaysReturn = false) {\n    if (!timeUnit || format) {\n        // If there is not time unit, or if user explicitly specify format for axis/legend/text.\n        format = format || rawTimeFormat; // only use provided timeFormat if there is no timeUnit.\n        if (format || alwaysReturn) {\n            return `${isUTCScale ? 'utc' : 'time'}Format(${field}, '${format}')`;\n        }\n        else {\n            return undefined;\n        }\n    }\n    else {\n        return formatExpression(timeUnit, field, shortTimeLabels, isUTCScale);\n    }\n}\n/**\n * Return Vega sort parameters (tuple of field and order).\n */\nexport function sortParams(orderDef, fieldRefOption) {\n    return array(orderDef).reduce((s, orderChannelDef) => {\n        s.field.push(vgField(orderChannelDef, fieldRefOption));\n        s.order.push(orderChannelDef.sort || 'ascending');\n        return s;\n    }, { field: [], order: [] });\n}\nexport function mergeTitleFieldDefs(f1, f2) {\n    const merged = [...f1];\n    f2.forEach(fdToMerge => {\n        for (const fieldDef1 of merged) {\n            // If already exists, no need to append to merged array\n            if (stringify(fieldDef1) === stringify(fdToMerge)) {\n                return;\n            }\n        }\n        merged.push(fdToMerge);\n    });\n    return merged;\n}\nexport function mergeTitle(title1, title2) {\n    if (title1 === title2 || !title2) {\n        // if titles are the same or title2 is falsy\n        return title1;\n    }\n    else if (!title1) {\n        // if title1 is falsy\n        return title2;\n    }\n    else {\n        // join title with comma if they are different\n        return title1 + ', ' + title2;\n    }\n}\nexport function mergeTitleComponent(v1, v2) {\n    if (isArray(v1.value) && isArray(v2.value)) {\n        return {\n            explicit: v1.explicit,\n            value: mergeTitleFieldDefs(v1.value, v2.value)\n        };\n    }\n    else if (!isArray(v1.value) && !isArray(v2.value)) {\n        return {\n            explicit: v1.explicit,\n            value: mergeTitle(v1.value, v2.value)\n        };\n    }\n    /* istanbul ignore next: Condition should not happen -- only for warning in development. */\n    throw new Error('It should never reach here');\n}\n//# sourceMappingURL=common.js.map","import * as log from '../log';\nimport { duplicate, getFirstDefined, keys, stringify } from '../util';\n/**\n * Generic class for storing properties that are explicitly specified\n * and implicitly determined by the compiler.\n * This is important for scale/axis/legend merging as\n * we want to prioritize properties that users explicitly specified.\n */\nexport class Split {\n    constructor(explicit = {}, implicit = {}) {\n        this.explicit = explicit;\n        this.implicit = implicit;\n    }\n    clone() {\n        return new Split(duplicate(this.explicit), duplicate(this.implicit));\n    }\n    combine() {\n        // FIXME remove \"as any\".\n        // Add \"as any\" to avoid an error \"Spread types may only be created from object types\".\n        return Object.assign(Object.assign({}, this.explicit), this.implicit);\n    }\n    get(key) {\n        // Explicit has higher precedence\n        return getFirstDefined(this.explicit[key], this.implicit[key]);\n    }\n    getWithExplicit(key) {\n        // Explicit has higher precedence\n        if (this.explicit[key] !== undefined) {\n            return { explicit: true, value: this.explicit[key] };\n        }\n        else if (this.implicit[key] !== undefined) {\n            return { explicit: false, value: this.implicit[key] };\n        }\n        return { explicit: false, value: undefined };\n    }\n    setWithExplicit(key, value) {\n        if (value.value !== undefined) {\n            this.set(key, value.value, value.explicit);\n        }\n    }\n    set(key, value, explicit) {\n        delete this[explicit ? 'implicit' : 'explicit'][key];\n        this[explicit ? 'explicit' : 'implicit'][key] = value;\n        return this;\n    }\n    copyKeyFromSplit(key, s) {\n        // Explicit has higher precedence\n        if (s.explicit[key] !== undefined) {\n            this.set(key, s.explicit[key], true);\n        }\n        else if (s.implicit[key] !== undefined) {\n            this.set(key, s.implicit[key], false);\n        }\n    }\n    copyKeyFromObject(key, s) {\n        // Explicit has higher precedence\n        if (s[key] !== undefined) {\n            this.set(key, s[key], true);\n        }\n    }\n    /**\n     * Merge split object into this split object. Properties from the other split\n     * overwrite properties from this split.\n     */\n    copyAll(other) {\n        for (const key of keys(other.combine())) {\n            const val = other.getWithExplicit(key);\n            this.setWithExplicit(key, val);\n        }\n    }\n}\nexport function makeExplicit(value) {\n    return {\n        explicit: true,\n        value\n    };\n}\nexport function makeImplicit(value) {\n    return {\n        explicit: false,\n        value\n    };\n}\nexport function tieBreakByComparing(compare) {\n    return (v1, v2, property, propertyOf) => {\n        const diff = compare(v1.value, v2.value);\n        if (diff > 0) {\n            return v1;\n        }\n        else if (diff < 0) {\n            return v2;\n        }\n        return defaultTieBreaker(v1, v2, property, propertyOf);\n    };\n}\nexport function defaultTieBreaker(v1, v2, property, propertyOf) {\n    if (v1.explicit && v2.explicit) {\n        log.warn(log.message.mergeConflictingProperty(property, propertyOf, v1.value, v2.value));\n    }\n    // If equal score, prefer v1.\n    return v1;\n}\nexport function mergeValuesWithExplicit(v1, v2, property, propertyOf, tieBreaker = defaultTieBreaker) {\n    if (v1 === undefined || v1.value === undefined) {\n        // For first run\n        return v2;\n    }\n    if (v1.explicit && !v2.explicit) {\n        return v1;\n    }\n    else if (v2.explicit && !v1.explicit) {\n        return v2;\n    }\n    else if (stringify(v1.value) === stringify(v2.value)) {\n        return v1;\n    }\n    else {\n        return tieBreaker(v1, v2, property, propertyOf);\n    }\n}\n//# sourceMappingURL=split.js.map","import { initConfig } from '../config';\nimport { CoreNormalizer } from './core';\nexport function normalize(spec, config) {\n    if (config === undefined) {\n        config = initConfig(spec.config);\n    }\n    return normalizeGenericSpec(spec, config);\n}\nconst normalizer = new CoreNormalizer();\n/**\n * Decompose extended unit specs into composition of pure unit specs.\n */\nfunction normalizeGenericSpec(spec, config = {}) {\n    return normalizer.map(spec, { config });\n}\n//# sourceMappingURL=index.js.map","import { hasOwnProperty, stringValue } from 'vega-util';\nimport { FACET_CHANNELS } from '../../channel';\nimport { SELECTION_ID } from '../../selection';\nimport { accessPathWithDatum } from '../../util';\nimport { isFacetModel } from '../model';\nimport interval from './interval';\nimport multi from './multi';\nimport single from './single';\nexport const STORE = '_store';\nexport const TUPLE = '_tuple';\nexport const MODIFY = '_modify';\nexport const SELECTION_DOMAIN = '_selection_domain_';\nexport const VL_SELECTION_RESOLVE = 'vlSelectionResolve';\nconst compilers = { single, multi, interval };\nexport function forEachSelection(model, cb) {\n    const selections = model.component.selection;\n    for (const name in selections) {\n        if (hasOwnProperty(selections, name)) {\n            const sel = selections[name];\n            cb(sel, compilers[sel.type]);\n        }\n    }\n}\nfunction getFacetModel(model) {\n    let parent = model.parent;\n    while (parent) {\n        if (isFacetModel(parent)) {\n            break;\n        }\n        parent = parent.parent;\n    }\n    return parent;\n}\nexport function unitName(model, { escape } = { escape: true }) {\n    let name = escape ? stringValue(model.name) : model.name;\n    const facetModel = getFacetModel(model);\n    if (facetModel) {\n        const { facet } = facetModel;\n        for (const channel of FACET_CHANNELS) {\n            if (facet[channel]) {\n                name += ` + '__facet_${channel}_' + (${accessPathWithDatum(facetModel.vgField(channel), 'facet')})`;\n            }\n        }\n    }\n    return name;\n}\nexport function requiresSelectionId(model) {\n    let identifier = false;\n    forEachSelection(model, selCmpt => {\n        identifier = identifier || selCmpt.project.items.some(proj => proj.field === SELECTION_ID);\n    });\n    return identifier;\n}\nexport function isRawSelectionDomain(domainRaw) {\n    return domainRaw.signal.indexOf(SELECTION_DOMAIN) >= 0;\n}\n//# sourceMappingURL=index.js.map","export function isUrlData(data) {\n    return !!data['url'];\n}\nexport function isInlineData(data) {\n    return !!data['values'];\n}\nexport function isNamedData(data) {\n    return !!data['name'] && !isUrlData(data) && !isInlineData(data) && !isGenerator(data);\n}\nexport function isGenerator(data) {\n    return data && (isSequenceGenerator(data) || isSphereGenerator(data) || isGraticuleGenerator(data));\n}\nexport function isSequenceGenerator(data) {\n    return !!data['sequence'];\n}\nexport function isSphereGenerator(data) {\n    return !!data['sphere'];\n}\nexport function isGraticuleGenerator(data) {\n    return !!data['graticule'];\n}\nexport const MAIN = 'main';\nexport const RAW = 'raw';\n//# sourceMappingURL=data.js.map","import { keys } from './util';\nexport const defaultLegendConfig = {\n    gradientHorizontalMaxLength: 200,\n    gradientHorizontalMinLength: 100,\n    gradientVerticalMaxLength: 200,\n    gradientVerticalMinLength: 64 // This is the Vega's minimum.\n};\nexport const COMMON_LEGEND_PROPERTY_INDEX = {\n    clipHeight: 1,\n    columnPadding: 1,\n    columns: 1,\n    cornerRadius: 1,\n    direction: 1,\n    fillColor: 1,\n    format: 1,\n    formatType: 1,\n    gradientLength: 1,\n    gradientOpacity: 1,\n    gradientStrokeColor: 1,\n    gradientStrokeWidth: 1,\n    gradientThickness: 1,\n    gridAlign: 1,\n    labelAlign: 1,\n    labelBaseline: 1,\n    labelColor: 1,\n    labelFont: 1,\n    labelFontSize: 1,\n    labelFontStyle: 1,\n    labelFontWeight: 1,\n    labelLimit: 1,\n    labelOffset: 1,\n    labelOpacity: 1,\n    labelOverlap: 1,\n    labelPadding: 1,\n    labelSeparation: 1,\n    legendX: 1,\n    legendY: 1,\n    offset: 1,\n    orient: 1,\n    padding: 1,\n    rowPadding: 1,\n    strokeColor: 1,\n    symbolDash: 1,\n    symbolDashOffset: 1,\n    symbolFillColor: 1,\n    symbolOffset: 1,\n    symbolOpacity: 1,\n    symbolSize: 1,\n    symbolStrokeColor: 1,\n    symbolStrokeWidth: 1,\n    symbolType: 1,\n    tickCount: 1,\n    tickMinStep: 1,\n    title: 1,\n    titleAlign: 1,\n    titleAnchor: 1,\n    titleBaseline: 1,\n    titleColor: 1,\n    titleFont: 1,\n    titleFontSize: 1,\n    titleFontStyle: 1,\n    titleFontWeight: 1,\n    titleLimit: 1,\n    titleOpacity: 1,\n    titleOrient: 1,\n    titlePadding: 1,\n    type: 1,\n    values: 1,\n    zindex: 1\n};\nexport const LEGEND_PROPERTIES = keys(COMMON_LEGEND_PROPERTY_INDEX);\n//# sourceMappingURL=legend.js.map","import { __rest } from \"tslib\";\nexport function extractTitleConfig(titleConfig) {\n    const { \n    // These are non-mark title config that need to be hardcoded\n    anchor, frame, offset, orient, \n    // color needs to be redirect to fill\n    color } = titleConfig, \n    // The rest are mark config.\n    titleMarkConfig = __rest(titleConfig, [\"anchor\", \"frame\", \"offset\", \"orient\", \"color\"]);\n    const mark = Object.assign(Object.assign({}, titleMarkConfig), (color ? { fill: color } : {}));\n    const nonMark = Object.assign(Object.assign(Object.assign(Object.assign({}, (anchor ? { anchor } : {})), (frame ? { frame } : {})), (offset ? { offset } : {})), (orient ? { orient } : {}));\n    return { mark, nonMark };\n}\n//# sourceMappingURL=title.js.map","import { __rest } from \"tslib\";\nimport * as log from '../log';\nimport { isConcatSpec, isHConcatSpec, isVConcatSpec } from './concat';\nimport { isFacetSpec } from './facet';\nimport { isLayerSpec } from './layer';\nimport { isRepeatSpec } from './repeat';\nimport { isUnitSpec } from './unit';\nexport class SpecMapper {\n    map(spec, params) {\n        if (isFacetSpec(spec)) {\n            return this.mapFacet(spec, params);\n        }\n        else if (isRepeatSpec(spec)) {\n            return this.mapRepeat(spec, params);\n        }\n        else if (isHConcatSpec(spec)) {\n            return this.mapHConcat(spec, params);\n        }\n        else if (isVConcatSpec(spec)) {\n            return this.mapVConcat(spec, params);\n        }\n        else if (isConcatSpec(spec)) {\n            return this.mapConcat(spec, params);\n        }\n        else {\n            return this.mapLayerOrUnit(spec, params);\n        }\n    }\n    mapLayerOrUnit(spec, params) {\n        if (isLayerSpec(spec)) {\n            return this.mapLayer(spec, params);\n        }\n        else if (isUnitSpec(spec)) {\n            return this.mapUnit(spec, params);\n        }\n        throw new Error(log.message.invalidSpec(spec));\n    }\n    mapLayer(spec, params) {\n        return Object.assign(Object.assign({}, spec), { layer: spec.layer.map(subspec => this.mapLayerOrUnit(subspec, params)) });\n    }\n    mapHConcat(spec, params) {\n        return Object.assign(Object.assign({}, spec), { hconcat: spec.hconcat.map(subspec => this.map(subspec, params)) });\n    }\n    mapVConcat(spec, params) {\n        return Object.assign(Object.assign({}, spec), { vconcat: spec.vconcat.map(subspec => this.map(subspec, params)) });\n    }\n    mapConcat(spec, params) {\n        const { concat } = spec, rest = __rest(spec, [\"concat\"]);\n        return Object.assign(Object.assign({}, rest), { concat: concat.map(subspec => this.map(subspec, params)) });\n    }\n    mapFacet(spec, params) {\n        return Object.assign(Object.assign({}, spec), { \n            // TODO: remove \"any\" once we support all facet listed in https://github.com/vega/vega-lite/issues/2760\n            spec: this.map(spec.spec, params) });\n    }\n    mapRepeat(spec, params) {\n        return Object.assign(Object.assign({}, spec), { spec: this.map(spec.spec, params) });\n    }\n}\n//# sourceMappingURL=map.js.map","import { isArray, isBoolean } from 'vega-util';\nimport { SUM_OPS } from './aggregate';\nimport { NONPOSITION_CHANNELS, X, X2, Y2 } from './channel';\nimport { getTypedFieldDef, isFieldDef, isStringFieldDef, vgField } from './channeldef';\nimport { channelHasField, isAggregate } from './encoding';\nimport * as log from './log';\nimport { AREA, BAR, CIRCLE, isMarkDef, isPathMark, LINE, POINT, RULE, SQUARE, TEXT, TICK } from './mark';\nimport { ScaleType } from './scale';\nimport { contains } from './util';\nconst STACK_OFFSET_INDEX = {\n    zero: 1,\n    center: 1,\n    normalize: 1\n};\nexport function isStackOffset(s) {\n    return !!STACK_OFFSET_INDEX[s];\n}\nexport const STACKABLE_MARKS = [BAR, AREA, RULE, POINT, CIRCLE, SQUARE, LINE, TEXT, TICK];\nexport const STACK_BY_DEFAULT_MARKS = [BAR, AREA];\nfunction potentialStackedChannel(encoding) {\n    const xDef = encoding.x;\n    const yDef = encoding.y;\n    if (isFieldDef(xDef) && isFieldDef(yDef)) {\n        if (xDef.type === 'quantitative' && yDef.type === 'quantitative') {\n            if (xDef.stack) {\n                return 'x';\n            }\n            else if (yDef.stack) {\n                return 'y';\n            }\n            // if there is no explicit stacking, only apply stack if there is only one aggregate for x or y\n            if (!!xDef.aggregate !== !!yDef.aggregate) {\n                return xDef.aggregate ? 'x' : 'y';\n            }\n        }\n        else if (xDef.type === 'quantitative') {\n            return 'x';\n        }\n        else if (yDef.type === 'quantitative') {\n            return 'y';\n        }\n    }\n    else if (isFieldDef(xDef) && xDef.type === 'quantitative') {\n        return 'x';\n    }\n    else if (isFieldDef(yDef) && yDef.type === 'quantitative') {\n        return 'y';\n    }\n    return undefined;\n}\n// Note: CompassQL uses this method and only pass in required properties of each argument object.\n// If required properties change, make sure to update CompassQL.\nexport function stack(m, encoding, opt = {}) {\n    const mark = isMarkDef(m) ? m.type : m;\n    // Should have stackable mark\n    if (!contains(STACKABLE_MARKS, mark)) {\n        return null;\n    }\n    const fieldChannel = potentialStackedChannel(encoding);\n    if (!fieldChannel) {\n        return null;\n    }\n    const stackedFieldDef = encoding[fieldChannel];\n    const stackedField = isStringFieldDef(stackedFieldDef) ? vgField(stackedFieldDef, {}) : undefined;\n    const dimensionChannel = fieldChannel === 'x' ? 'y' : 'x';\n    const dimensionDef = encoding[dimensionChannel];\n    const dimensionField = isStringFieldDef(dimensionDef) ? vgField(dimensionDef, {}) : undefined;\n    // Should have grouping level of detail that is different from the dimension field\n    const stackBy = NONPOSITION_CHANNELS.reduce((sc, channel) => {\n        // Ignore tooltip in stackBy (https://github.com/vega/vega-lite/issues/4001)\n        if (channel !== 'tooltip' && channelHasField(encoding, channel)) {\n            const channelDef = encoding[channel];\n            (isArray(channelDef) ? channelDef : [channelDef]).forEach(cDef => {\n                const fieldDef = getTypedFieldDef(cDef);\n                if (fieldDef.aggregate) {\n                    return;\n                }\n                // Check whether the channel's field is identical to x/y's field or if the channel is a repeat\n                const f = isStringFieldDef(fieldDef) ? vgField(fieldDef, {}) : undefined;\n                if (\n                // if fielddef is a repeat, just include it in the stack by\n                !f ||\n                    // otherwise, the field must be different from x and y fields.\n                    (f !== dimensionField && f !== stackedField)) {\n                    sc.push({ channel, fieldDef });\n                }\n            });\n        }\n        return sc;\n    }, []);\n    // Automatically determine offset\n    let offset;\n    if (stackedFieldDef.stack !== undefined) {\n        if (isBoolean(stackedFieldDef.stack)) {\n            offset = stackedFieldDef.stack ? 'zero' : null;\n        }\n        else {\n            offset = stackedFieldDef.stack;\n        }\n    }\n    else if (stackBy.length > 0 && contains(STACK_BY_DEFAULT_MARKS, mark)) {\n        // Bar and Area with sum ops are automatically stacked by default\n        offset = 'zero';\n    }\n    if (!offset || !isStackOffset(offset)) {\n        return null;\n    }\n    if (isAggregate(encoding) && stackBy.length === 0) {\n        return null;\n    }\n    // warn when stacking non-linear\n    if (stackedFieldDef.scale && stackedFieldDef.scale.type && stackedFieldDef.scale.type !== ScaleType.LINEAR) {\n        if (opt.disallowNonLinearStack) {\n            return null;\n        }\n        else {\n            log.warn(log.message.cannotStackNonLinearScale(stackedFieldDef.scale.type));\n        }\n    }\n    // Check if it is a ranged mark\n    if (channelHasField(encoding, fieldChannel === X ? X2 : Y2)) {\n        if (stackedFieldDef.stack !== undefined) {\n            log.warn(log.message.cannotStackRangedMark(fieldChannel));\n        }\n        return null;\n    }\n    // Warn if stacking non-summative aggregate\n    if (stackedFieldDef.aggregate && !contains(SUM_OPS, stackedFieldDef.aggregate)) {\n        log.warn(log.message.stackNonSummativeAggregate(stackedFieldDef.aggregate));\n    }\n    return {\n        groupbyChannel: dimensionDef ? dimensionChannel : undefined,\n        fieldChannel,\n        impute: isPathMark(mark),\n        stackBy,\n        offset\n    };\n}\n//# sourceMappingURL=stack.js.map","import { keys } from '../util';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { Model } from './model';\nexport class BaseConcatModel extends Model {\n    constructor(spec, specType, parent, parentGivenName, config, repeater, resolve) {\n        super(spec, specType, parent, parentGivenName, config, repeater, resolve);\n    }\n    parseData() {\n        this.component.data = parseData(this);\n        this.children.forEach(child => {\n            child.parseData();\n        });\n    }\n    parseSelections() {\n        // Merge selections up the hierarchy so that they may be referenced\n        // across unit specs. Persist their definitions within each child\n        // to assemble signals which remain within output Vega unit groups.\n        this.component.selection = {};\n        for (const child of this.children) {\n            child.parseSelections();\n            keys(child.component.selection).forEach(key => {\n                this.component.selection[key] = child.component.selection[key];\n            });\n        }\n    }\n    parseMarkGroup() {\n        for (const child of this.children) {\n            child.parseMarkGroup();\n        }\n    }\n    parseAxesAndHeaders() {\n        for (const child of this.children) {\n            child.parseAxesAndHeaders();\n        }\n        // TODO(#2415): support shared axes\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return this.children.reduce((sg, child) => child.assembleSelectionTopLevelSignals(sg), signals);\n    }\n    assembleSignals() {\n        this.children.forEach(child => child.assembleSignals());\n        return [];\n    }\n    assembleLayoutSignals() {\n        return this.children.reduce((signals, child) => {\n            return [...signals, ...child.assembleLayoutSignals()];\n        }, assembleLayoutSignals(this));\n    }\n    assembleSelectionData(data) {\n        return this.children.reduce((db, child) => child.assembleSelectionData(db), data);\n    }\n    assembleMarks() {\n        // only children have marks\n        return this.children.map(child => {\n            const title = child.assembleTitle();\n            const style = child.assembleGroupStyle();\n            const encodeEntry = child.assembleGroupEncodeEntry(false);\n            return Object.assign(Object.assign(Object.assign(Object.assign({ type: 'group', name: child.getName('group') }, (title ? { title } : {})), (style ? { style } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), child.assembleGroup());\n        });\n    }\n}\n//# sourceMappingURL=baseconcat.js.map","import { TUPLE } from '..';\nimport { accessPathWithDatum, varName } from '../../../util';\nimport { assembleInit } from '../assemble';\nimport nearest from './nearest';\nimport { TUPLE_FIELDS } from './project';\nconst inputBindings = {\n    has: selCmpt => {\n        return selCmpt.type === 'single' && selCmpt.resolve === 'global' && selCmpt.bind && selCmpt.bind !== 'scales';\n    },\n    parse: (model, selCmpt, selDef, origDef) => {\n        // Binding a selection to input widgets disables default direct manipulation interaction.\n        // A user can choose to re-enable it by explicitly specifying triggering input events.\n        if (!origDef.on)\n            delete selCmpt.events;\n        if (!origDef.clear)\n            delete selCmpt.clear;\n    },\n    topLevelSignals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const bind = selCmpt.bind;\n        const init = selCmpt.init && selCmpt.init[0]; // Can only exist on single selections (one initial value).\n        const datum = nearest.has(selCmpt) ? '(item().isVoronoi ? datum.datum : datum)' : 'datum';\n        proj.items.forEach((p, i) => {\n            const sgname = varName(`${name}_${p.field}`);\n            const hasSignal = signals.filter(s => s.name === sgname);\n            if (!hasSignal.length) {\n                signals.unshift(Object.assign(Object.assign({ name: sgname }, (init ? { init: assembleInit(init[i]) } : { value: null })), { on: selCmpt.events\n                        ? [\n                            {\n                                events: selCmpt.events,\n                                update: `datum && item().mark.marktype !== 'group' ? ${accessPathWithDatum(p.field, datum)} : null`\n                            }\n                        ]\n                        : [], bind: bind[p.field] || bind[p.channel] || bind }));\n            }\n        });\n        return signals;\n    },\n    signals: (model, selCmpt, signals) => {\n        const name = selCmpt.name;\n        const proj = selCmpt.project;\n        const signal = signals.filter(s => s.name === name + TUPLE)[0];\n        const fields = name + TUPLE_FIELDS;\n        const values = proj.items.map(p => varName(`${name}_${p.field}`));\n        const valid = values.map(v => `${v} !== null`).join(' && ');\n        if (values.length) {\n            signal.update = `${valid} ? {fields: ${fields}, values: [${values.join(', ')}]} : null`;\n        }\n        delete signal.value;\n        delete signal.on;\n        return signals;\n    }\n};\nexport default inputBindings;\n//# sourceMappingURL=inputs.js.map","import * as log from '../../../log';\nimport { isPathMark } from '../../../mark';\nimport { tooltip } from '../../mark/mixins';\nconst VORONOI = 'voronoi';\nconst nearest = {\n    has: selCmpt => {\n        return selCmpt.type !== 'interval' && selCmpt.nearest;\n    },\n    marks: (model, selCmpt, marks) => {\n        const { x, y } = selCmpt.project.has;\n        const markType = model.mark;\n        if (isPathMark(markType)) {\n            log.warn(log.message.nearestNotSupportForContinuous(markType));\n            return marks;\n        }\n        const cellDef = {\n            name: model.getName(VORONOI),\n            type: 'path',\n            from: { data: model.getName('marks') },\n            encode: {\n                update: Object.assign({ fill: { value: 'transparent' }, strokeWidth: { value: 0.35 }, stroke: { value: 'transparent' }, isVoronoi: { value: true } }, tooltip(model, { reactiveGeom: true }))\n            },\n            transform: [\n                {\n                    type: 'voronoi',\n                    x: { expr: x || (!x && !y) ? 'datum.datum.x || 0' : '0' },\n                    y: { expr: y || (!x && !y) ? 'datum.datum.y || 0' : '0' },\n                    size: [model.getSizeSignalRef('width'), model.getSizeSignalRef('height')]\n                }\n            ]\n        };\n        let index = 0;\n        let exists = false;\n        marks.forEach((mark, i) => {\n            const name = mark.name || '';\n            if (name === model.component.mark[0].name) {\n                index = i;\n            }\n            else if (name.indexOf(VORONOI) >= 0) {\n                exists = true;\n            }\n        });\n        if (!exists) {\n            marks.splice(index + 1, 0, cellDef);\n        }\n        return marks;\n    }\n};\nexport default nearest;\n//# sourceMappingURL=nearest.js.map","import { TUPLE, unitName } from '.';\nimport { accessPathWithDatum } from '../../util';\nimport { TUPLE_FIELDS } from './transforms/project';\nexport function singleOrMultiSignals(model, selCmpt) {\n    const name = selCmpt.name;\n    const fieldsSg = name + TUPLE_FIELDS;\n    const proj = selCmpt.project;\n    const datum = '(item().isVoronoi ? datum.datum : datum)';\n    const values = proj.items\n        .map(p => {\n        const fieldDef = model.fieldDef(p.channel);\n        // Binned fields should capture extents, for a range test against the raw field.\n        return fieldDef && fieldDef.bin\n            ? `[${accessPathWithDatum(model.vgField(p.channel, {}), datum)}, ` +\n                `${accessPathWithDatum(model.vgField(p.channel, { binSuffix: 'end' }), datum)}]`\n            : `${accessPathWithDatum(p.field, datum)}`;\n    })\n        .join(', ');\n    // Only add a discrete selection to the store if a datum is present _and_\n    // the interaction isn't occurring on a group mark. This guards against\n    // polluting interactive state with invalid values in faceted displays\n    // as the group marks are also data-driven. We force the update to account\n    // for constant null states but varying toggles (e.g., shift-click in\n    // whitespace followed by a click in whitespace; the store should only\n    // be cleared on the second click).\n    const update = `unit: ${unitName(model)}, fields: ${fieldsSg}, values`;\n    const signals = [\n        {\n            name: name + TUPLE,\n            on: selCmpt.events\n                ? [\n                    {\n                        events: selCmpt.events,\n                        update: `datum && item().mark.marktype !== 'group' ? {${update}: [${values}]} : null`,\n                        force: true\n                    }\n                ]\n                : []\n        }\n    ];\n    return signals;\n}\nconst multi = {\n    signals: singleOrMultiSignals,\n    modifyExpr: (model, selCmpt) => {\n        const tpl = selCmpt.name + TUPLE;\n        return tpl + ', ' + (selCmpt.resolve === 'global' ? 'null' : `{unit: ${unitName(model)}}`);\n    }\n};\nexport default multi;\n//# sourceMappingURL=multi.js.map","export function getAxisConfig(property, config, channel, orient, scaleType) {\n    // configTypes to loop, starting from higher precedence\n    const configTypes = [\n        ...(scaleType === 'band' ? ['axisBand'] : []),\n        channel === 'x' ? 'axisX' : 'axisY',\n        // axisTop, axisBottom, ...\n        ...(orient ? ['axis' + orient.substr(0, 1).toUpperCase() + orient.substr(1)] : []),\n        'axis'\n    ];\n    for (const configType of configTypes) {\n        if (config[configType] && config[configType][property] !== undefined) {\n            return config[configType][property];\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=config.js.map","import { parse } from 'vega-expression';\nfunction getName(node) {\n    const name = [];\n    if (node.type === 'Identifier') {\n        return [node.name];\n    }\n    if (node.type === 'Literal') {\n        return [node.value];\n    }\n    if (node.type === 'MemberExpression') {\n        name.push(...getName(node.object));\n        name.push(...getName(node.property));\n    }\n    return name;\n}\nfunction startsWithDatum(node) {\n    if (node.object.type === 'MemberExpression') {\n        return startsWithDatum(node.object);\n    }\n    return node.object.name === 'datum';\n}\nexport function getDependentFields(expression) {\n    const ast = parse(expression);\n    const dependents = new Set();\n    ast.visit((node) => {\n        if (node.type === 'MemberExpression' && startsWithDatum(node)) {\n            dependents.add(getName(node)\n                .slice(1)\n                .join('.'));\n        }\n    });\n    return dependents;\n}\n//# sourceMappingURL=expressions.js.map","import { __rest } from \"tslib\";\nimport { keys, stringify, vals } from '../../util';\nimport { isSignalRef } from '../../vega.schema';\nimport { mergeLegendComponent } from './parse';\nfunction setLegendEncode(legend, part, vgProp, vgRef) {\n    legend.encode = legend.encode || {};\n    legend.encode[part] = legend.encode[part] || {};\n    legend.encode[part].update = legend.encode[part].update || {};\n    // TODO: remove as any after https://github.com/prisma/nexus-prisma/issues/291\n    legend.encode[part].update[vgProp] = vgRef;\n}\nexport function assembleLegends(model) {\n    const legendComponentIndex = model.component.legends;\n    const legendByDomain = {};\n    for (const channel of keys(legendComponentIndex)) {\n        const scaleComponent = model.getScaleComponent(channel);\n        const domainHash = stringify(scaleComponent.get('domains'));\n        if (legendByDomain[domainHash]) {\n            for (const mergedLegendComponent of legendByDomain[domainHash]) {\n                const merged = mergeLegendComponent(mergedLegendComponent, legendComponentIndex[channel]);\n                if (!merged) {\n                    // If cannot merge, need to add this legend separately\n                    legendByDomain[domainHash].push(legendComponentIndex[channel]);\n                }\n            }\n        }\n        else {\n            legendByDomain[domainHash] = [legendComponentIndex[channel].clone()];\n        }\n    }\n    return vals(legendByDomain)\n        .flat()\n        .map((legendCmpt) => {\n        const _a = legendCmpt.combine(), { labelExpr } = _a, legend = __rest(_a, [\"labelExpr\"]);\n        if (legend.encode && legend.encode.symbols) {\n            const out = legend.encode.symbols.update;\n            if (out.fill && out.fill['value'] !== 'transparent' && !out.stroke && !legend.stroke) {\n                // For non color channel's legend, we need to override symbol stroke config from Vega config if stroke channel is not used.\n                out.stroke = { value: 'transparent' };\n            }\n            if (legend.fill) {\n                // If top-level fill is defined, for non color channel's legend, we need remove fill.\n                delete out.fill;\n            }\n        }\n        if (labelExpr !== undefined) {\n            let expr = labelExpr;\n            if (legend.encode &&\n                legend.encode.labels &&\n                legend.encode.labels.update &&\n                isSignalRef(legend.encode.labels.update.text)) {\n                expr = labelExpr.replace('datum.label', legend.encode.labels.update.text.signal);\n            }\n            setLegendEncode(legend, 'labels', 'text', { signal: expr });\n        }\n        return legend;\n    });\n}\n//# sourceMappingURL=assemble.js.map","import { COLOR, FILL, FILLOPACITY, OPACITY, SHAPE, SIZE, STROKE, STROKEOPACITY, STROKEWIDTH } from '../../channel';\nimport { getTypedFieldDef, isFieldDef, isTimeFormatFieldDef, title as fieldDefTitle } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport { deleteNestedProperty, getFirstDefined, keys } from '../../util';\nimport { mergeTitleComponent, numberFormat } from '../common';\nimport { guideEncodeEntry } from '../guide';\nimport { isUnitModel } from '../model';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, makeImplicit, mergeValuesWithExplicit } from '../split';\nimport { LegendComponent, LEGEND_COMPONENT_PROPERTIES } from './component';\nimport * as encode from './encode';\nimport * as properties from './properties';\nimport { direction, type } from './properties';\nexport function parseLegend(model) {\n    if (isUnitModel(model)) {\n        model.component.legends = parseUnitLegend(model);\n    }\n    else {\n        model.component.legends = parseNonUnitLegend(model);\n    }\n}\nfunction parseUnitLegend(model) {\n    const { encoding } = model;\n    return [COLOR, FILL, STROKE, STROKEWIDTH, SIZE, SHAPE, OPACITY, FILLOPACITY, STROKEOPACITY].reduce((legendComponent, channel) => {\n        const def = encoding[channel];\n        if (model.legend(channel) &&\n            model.getScaleComponent(channel) &&\n            !(isFieldDef(def) && (channel === SHAPE && def.type === GEOJSON))) {\n            legendComponent[channel] = parseLegendForChannel(model, channel);\n        }\n        return legendComponent;\n    }, {});\n}\nfunction getLegendDefWithScale(model, channel) {\n    const scale = model.scaleName(COLOR);\n    if (channel === 'color') {\n        return model.markDef.filled ? { fill: scale } : { stroke: scale };\n    }\n    return { [channel]: model.scaleName(channel) };\n}\nfunction isExplicit(value, property, legend, fieldDef) {\n    switch (property) {\n        case 'values':\n            // specified legend.values is already respected, but may get transformed.\n            return !!legend.values;\n        case 'title':\n            // title can be explicit if fieldDef.title is set\n            if (property === 'title' && value === fieldDef.title) {\n                return true;\n            }\n    }\n    // Otherwise, things are explicit if the returned value matches the specified property\n    return value === legend[property];\n}\nexport function parseLegendForChannel(model, channel) {\n    const fieldDef = model.fieldDef(channel);\n    const legend = model.legend(channel);\n    const legendCmpt = new LegendComponent({}, getLegendDefWithScale(model, channel));\n    for (const property of LEGEND_COMPONENT_PROPERTIES) {\n        const value = getProperty(property, legend, channel, model);\n        if (value !== undefined) {\n            const explicit = isExplicit(value, property, legend, fieldDef);\n            if (explicit || model.config.legend[property] === undefined) {\n                legendCmpt.set(property, value, explicit);\n            }\n        }\n    }\n    const legendEncoding = legend.encoding || {};\n    const legendEncode = ['labels', 'legend', 'title', 'symbols', 'gradient'].reduce((e, part) => {\n        const legendEncodingPart = guideEncodeEntry(legendEncoding[part] || {}, model);\n        const value = encode[part]\n            ? encode[part](fieldDef, legendEncodingPart, model, channel, legendCmpt) // apply rule\n            : legendEncodingPart; // no rule -- just default values\n        if (value !== undefined && keys(value).length > 0) {\n            e[part] = { update: value };\n        }\n        return e;\n    }, {});\n    if (keys(legendEncode).length > 0) {\n        legendCmpt.set('encode', legendEncode, !!legend.encoding);\n    }\n    return legendCmpt;\n}\nfunction getProperty(property, legend, channel, model) {\n    const { encoding, mark } = model;\n    const fieldDef = getTypedFieldDef(encoding[channel]);\n    const legendConfig = model.config.legend;\n    const { timeUnit } = fieldDef;\n    const scaleType = model.getScaleComponent(channel).get('type');\n    switch (property) {\n        // TODO: enable when https://github.com/vega/vega/issues/1351 is fixed\n        // case 'clipHeight':\n        //   return getFirstDefined(specifiedLegend.clipHeight, properties.clipHeight(properties.type(...)));\n        case 'direction':\n            return direction({\n                legend,\n                legendConfig,\n                timeUnit,\n                channel,\n                scaleType\n            });\n        case 'format':\n            // We don't include temporal field here as we apply format in encode block\n            if (isTimeFormatFieldDef(fieldDef)) {\n                return undefined;\n            }\n            return numberFormat(fieldDef, legend.format, model.config);\n        case 'formatType':\n            // As with format, we don't include temporal field here as we apply format in encode block\n            if (isTimeFormatFieldDef(fieldDef)) {\n                return undefined;\n            }\n            return legend.formatType;\n        case 'gradientLength':\n            return getFirstDefined(\n            // do specified gradientLength first\n            legend.gradientLength, legendConfig.gradientLength, \n            // Otherwise, use smart default based on plot height\n            properties.defaultGradientLength({\n                model,\n                legend,\n                legendConfig,\n                channel,\n                scaleType\n            }));\n        case 'labelOverlap':\n            return getFirstDefined(legend.labelOverlap, properties.defaultLabelOverlap(scaleType));\n        case 'symbolType':\n            return getFirstDefined(legend.symbolType, properties.defaultSymbolType(mark, channel, encoding.shape, model.markDef.shape));\n        case 'title':\n            return (fieldDefTitle(fieldDef, model.config, { allowDisabling: true }) || undefined);\n        case 'type':\n            return type({ legend, channel, timeUnit, scaleType, alwaysReturn: false });\n        case 'values':\n            return properties.values(legend, fieldDef);\n    }\n    // Otherwise, return specified property.\n    return legend[property];\n}\nfunction parseNonUnitLegend(model) {\n    const { legends, resolve } = model.component;\n    for (const child of model.children) {\n        parseLegend(child);\n        keys(child.component.legends).forEach((channel) => {\n            resolve.legend[channel] = parseGuideResolve(model.component.resolve, channel);\n            if (resolve.legend[channel] === 'shared') {\n                // If the resolve says shared (and has not been overridden)\n                // We will try to merge and see if there is a conflict\n                legends[channel] = mergeLegendComponent(legends[channel], child.component.legends[channel]);\n                if (!legends[channel]) {\n                    // If merge returns nothing, there is a conflict so we cannot make the legend shared.\n                    // Thus, mark legend as independent and remove the legend component.\n                    resolve.legend[channel] = 'independent';\n                    delete legends[channel];\n                }\n            }\n        });\n    }\n    keys(legends).forEach((channel) => {\n        for (const child of model.children) {\n            if (!child.component.legends[channel]) {\n                // skip if the child does not have a particular legend\n                continue;\n            }\n            if (resolve.legend[channel] === 'shared') {\n                // After merging shared legend, make sure to remove legend from child\n                delete child.component.legends[channel];\n            }\n        }\n    });\n    return legends;\n}\nexport function mergeLegendComponent(mergedLegend, childLegend) {\n    if (!mergedLegend) {\n        return childLegend.clone();\n    }\n    const mergedOrient = mergedLegend.getWithExplicit('orient');\n    const childOrient = childLegend.getWithExplicit('orient');\n    if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n        // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n        // Cannot merge due to inconsistent orient\n        return undefined;\n    }\n    let typeMerged = false;\n    // Otherwise, let's merge\n    for (const prop of LEGEND_COMPONENT_PROPERTIES) {\n        const mergedValueWithExplicit = mergeValuesWithExplicit(mergedLegend.getWithExplicit(prop), childLegend.getWithExplicit(prop), prop, 'legend', \n        // Tie breaker function\n        (v1, v2) => {\n            switch (prop) {\n                case 'symbolType':\n                    return mergeSymbolType(v1, v2);\n                case 'title':\n                    return mergeTitleComponent(v1, v2);\n                case 'type':\n                    // There are only two types. If we have different types, then prefer symbol over gradient.\n                    typeMerged = true;\n                    return makeImplicit('symbol');\n            }\n            return defaultTieBreaker(v1, v2, prop, 'legend');\n        });\n        mergedLegend.setWithExplicit(prop, mergedValueWithExplicit);\n    }\n    if (typeMerged) {\n        if (((mergedLegend.implicit || {}).encode || {}).gradient) {\n            deleteNestedProperty(mergedLegend.implicit, ['encode', 'gradient']);\n        }\n        if (((mergedLegend.explicit || {}).encode || {}).gradient) {\n            deleteNestedProperty(mergedLegend.explicit, ['encode', 'gradient']);\n        }\n    }\n    return mergedLegend;\n}\nfunction mergeSymbolType(st1, st2) {\n    if (st2.value === 'circle') {\n        // prefer \"circle\" over \"stroke\"\n        return st2;\n    }\n    return st1;\n}\n//# sourceMappingURL=parse.js.map","import { keys } from '../util';\nimport { wrapCondition } from './mark/mixins';\nexport function guideEncodeEntry(encoding, model) {\n    return keys(encoding).reduce((encode, channel) => {\n        const valueDef = encoding[channel];\n        return Object.assign(Object.assign({}, encode), wrapCondition(model, valueDef, channel, (x) => ({ value: x.value })));\n    }, {});\n}\n//# sourceMappingURL=guide.js.map","import { __rest } from \"tslib\";\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for density transform nodes\n */\nexport class DensityTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = this.transform.as || [undefined, undefined];\n        this.transform.as = [specifiedAs[0] || 'value', specifiedAs[1] || 'density'];\n    }\n    clone() {\n        return new DensityTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set([this.transform.density, ...(this.transform.groupby || [])]);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `DensityTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const _a = this.transform, { density } = _a, rest = __rest(_a, [\"density\"]);\n        const result = Object.assign({ type: 'kde', field: density }, rest);\n        return result;\n    }\n}\n//# sourceMappingURL=density.js.map","import { isScaleChannel } from '../../channel';\nimport { vgField as fieldRef } from '../../channeldef';\nimport { isPathMark } from '../../mark';\nimport { hasContinuousDomain } from '../../scale';\nimport { keys, hash } from '../../util';\nimport { getMarkPropOrConfig } from '../common';\nimport { DataFlowNode } from './dataflow';\nexport class FilterInvalidNode extends DataFlowNode {\n    constructor(parent, filter) {\n        super(parent);\n        this.filter = filter;\n    }\n    clone() {\n        return new FilterInvalidNode(null, Object.assign({}, this.filter));\n    }\n    static make(parent, model) {\n        const { config, mark, markDef } = model;\n        const invalid = getMarkPropOrConfig('invalid', markDef, config);\n        if (invalid !== 'filter') {\n            return null;\n        }\n        const filter = model.reduceFieldDef((aggregator, fieldDef, channel) => {\n            const scaleComponent = isScaleChannel(channel) && model.getScaleComponent(channel);\n            if (scaleComponent) {\n                const scaleType = scaleComponent.get('type');\n                // While discrete domain scales can handle invalid values, continuous scales can't.\n                // Thus, for non-path marks, we have to filter null for scales with continuous domains.\n                // (For path marks, we will use \"defined\" property and skip these values instead.)\n                if (hasContinuousDomain(scaleType) && !fieldDef.aggregate && !isPathMark(mark)) {\n                    aggregator[fieldDef.field] = fieldDef;\n                }\n            }\n            return aggregator;\n        }, {});\n        if (!keys(filter).length) {\n            return null;\n        }\n        return new FilterInvalidNode(parent, filter);\n    }\n    dependentFields() {\n        return new Set(keys(this.filter));\n    }\n    producedFields() {\n        return new Set(); // filter does not produce any new fields\n    }\n    hash() {\n        return `FilterInvalid ${hash(this.filter)}`;\n    }\n    /**\n     * Create the VgTransforms for each of the filtered fields.\n     */\n    assemble() {\n        const filters = keys(this.filter).reduce((vegaFilters, field) => {\n            const fieldDef = this.filter[field];\n            const ref = fieldRef(fieldDef, { expr: 'datum' });\n            if (fieldDef !== null) {\n                vegaFilters.push(`${ref} !== null`);\n                vegaFilters.push(`!isNaN(${ref})`);\n            }\n            return vegaFilters;\n        }, []);\n        return filters.length > 0\n            ? {\n                type: 'filter',\n                expr: filters.join(' && ')\n            }\n            : null;\n    }\n}\n//# sourceMappingURL=filterinvalid.js.map","import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FlattenTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const { flatten, as = [] } = this.transform;\n        this.transform.as = flatten.map((f, i) => as[i] || f);\n    }\n    clone() {\n        return new FlattenTransformNode(this.parent, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set(this.transform.flatten);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FlattenTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { flatten: fields, as } = this.transform;\n        const result = {\n            type: 'flatten',\n            fields,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=flatten.js.map","import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for flatten transform nodes\n */\nexport class FoldTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = this.transform.as || [undefined, undefined];\n        this.transform.as = [specifiedAs[0] || 'key', specifiedAs[1] || 'value'];\n    }\n    clone() {\n        return new FoldTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set(this.transform.fold);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `FoldTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { fold, as } = this.transform;\n        const result = {\n            type: 'fold',\n            fields: fold,\n            as\n        };\n        return result;\n    }\n}\n//# sourceMappingURL=fold.js.map","import { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2, SHAPE } from '../../channel';\nimport { isValueDef } from '../../channeldef';\nimport { GEOJSON } from '../../type';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nimport { isString } from 'vega-util';\nexport class GeoJSONNode extends DataFlowNode {\n    constructor(parent, fields, geojson, signal) {\n        super(parent);\n        this.fields = fields;\n        this.geojson = geojson;\n        this.signal = signal;\n    }\n    clone() {\n        return new GeoJSONNode(null, duplicate(this.fields), this.geojson, this.signal);\n    }\n    static parseAll(parent, model) {\n        if (model.component.projection && !model.component.projection.isFit) {\n            return parent;\n        }\n        let geoJsonCounter = 0;\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach((coordinates) => {\n            const pair = coordinates.map(channel => model.channelHasField(channel)\n                ? model.fieldDef(channel).field\n                : isValueDef(model.encoding[channel])\n                    ? { expr: model.encoding[channel].value + '' }\n                    : undefined);\n            if (pair[0] || pair[1]) {\n                parent = new GeoJSONNode(parent, pair, null, model.getName(`geojson_${geoJsonCounter++}`));\n            }\n        });\n        if (model.channelHasField(SHAPE)) {\n            const fieldDef = model.fieldDef(SHAPE);\n            if (fieldDef.type === GEOJSON) {\n                parent = new GeoJSONNode(parent, null, fieldDef.field, model.getName(`geojson_${geoJsonCounter++}`));\n            }\n        }\n        return parent;\n    }\n    dependentFields() {\n        return new Set([...(this.geojson ? [this.geojson] : []), ...(this.fields || []).filter(isString)]);\n    }\n    producedFields() {\n        return new Set();\n    }\n    hash() {\n        return `GeoJSON ${this.geojson} ${this.signal} ${hash(this.fields)}`;\n    }\n    assemble() {\n        return Object.assign(Object.assign(Object.assign({ type: 'geojson' }, (this.fields ? { fields: this.fields } : {})), (this.geojson ? { geojson: this.geojson } : {})), { signal: this.signal });\n    }\n}\n//# sourceMappingURL=geojson.js.map","import { isString } from 'vega-util';\nimport { LATITUDE, LATITUDE2, LONGITUDE, LONGITUDE2 } from '../../channel';\nimport { isValueDef } from '../../channeldef';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class GeoPointNode extends DataFlowNode {\n    constructor(parent, projection, fields, as) {\n        super(parent);\n        this.projection = projection;\n        this.fields = fields;\n        this.as = as;\n    }\n    clone() {\n        return new GeoPointNode(null, this.projection, duplicate(this.fields), duplicate(this.as));\n    }\n    static parseAll(parent, model) {\n        if (!model.projectionName()) {\n            return parent;\n        }\n        [[LONGITUDE, LATITUDE], [LONGITUDE2, LATITUDE2]].forEach((coordinates) => {\n            const pair = coordinates.map(channel => model.channelHasField(channel)\n                ? model.fieldDef(channel).field\n                : isValueDef(model.encoding[channel])\n                    ? { expr: model.encoding[channel].value + '' }\n                    : undefined);\n            const suffix = coordinates[0] === LONGITUDE2 ? '2' : '';\n            if (pair[0] || pair[1]) {\n                parent = new GeoPointNode(parent, model.projectionName(), pair, [\n                    model.getName('x' + suffix),\n                    model.getName('y' + suffix)\n                ]);\n            }\n        });\n        return parent;\n    }\n    dependentFields() {\n        return new Set(this.fields.filter(isString));\n    }\n    producedFields() {\n        return new Set(this.as);\n    }\n    hash() {\n        return `Geopoint ${this.projection} ${hash(this.fields)} ${hash(this.as)}`;\n    }\n    assemble() {\n        return {\n            type: 'geopoint',\n            projection: this.projection,\n            fields: this.fields,\n            as: this.as\n        };\n    }\n}\n//# sourceMappingURL=geopoint.js.map","import { isArray } from 'vega-util';\nimport { isBinning } from '../bin';\nimport { COLUMN, FACET_CHANNELS, ROW } from '../channel';\nimport { normalize, vgField } from '../channeldef';\nimport { reduce } from '../encoding';\nimport * as log from '../log';\nimport { hasDiscreteDomain } from '../scale';\nimport { DEFAULT_SORT_OP, isSortField } from '../sort';\nimport { isFacetMapping } from '../spec/facet';\nimport { contains } from '../util';\nimport { isVgRangeStep } from '../vega.schema';\nimport { buildModel } from './buildmodel';\nimport { assembleFacetData } from './data/assemble';\nimport { sortArrayIndexField } from './data/calculate';\nimport { parseData } from './data/parse';\nimport { assembleLabelTitle } from './header/assemble';\nimport { getHeaderChannel, getHeaderProperty } from './header/common';\nimport { HEADER_CHANNELS, HEADER_TYPES } from './header/component';\nimport { parseFacetHeaders } from './header/parse';\nimport { parseChildrenLayoutSize } from './layoutsize/parse';\nimport { ModelWithField } from './model';\nimport { replaceRepeaterInFacet } from './repeater';\nimport { assembleDomain, getFieldFromDomain } from './scale/domain';\nimport { assembleFacetSignals } from './selection/assemble';\nexport function facetSortFieldName(fieldDef, sort, opt) {\n    return vgField(sort, Object.assign({ suffix: `by_${vgField(fieldDef)}` }, (opt || {})));\n}\nexport class FacetModel extends ModelWithField {\n    constructor(spec, parent, parentGivenName, repeater, config) {\n        super(spec, 'facet', parent, parentGivenName, config, repeater, spec.resolve);\n        this.child = buildModel(spec.spec, this, this.getName('child'), undefined, repeater, config);\n        this.children = [this.child];\n        const facet = replaceRepeaterInFacet(spec.facet, repeater);\n        this.facet = this.initFacet(facet);\n    }\n    initFacet(facet) {\n        // clone to prevent side effect to the original spec\n        if (!isFacetMapping(facet)) {\n            return { facet: normalize(facet, 'facet') };\n        }\n        return reduce(facet, (normalizedFacet, fieldDef, channel) => {\n            if (!contains([ROW, COLUMN], channel)) {\n                // Drop unsupported channel\n                log.warn(log.message.incompatibleChannel(channel, 'facet'));\n                return normalizedFacet;\n            }\n            if (fieldDef.field === undefined) {\n                log.warn(log.message.emptyFieldDef(fieldDef, channel));\n                return normalizedFacet;\n            }\n            // Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n            normalizedFacet[channel] = normalize(fieldDef, channel);\n            return normalizedFacet;\n        }, {});\n    }\n    channelHasField(channel) {\n        return !!this.facet[channel];\n    }\n    fieldDef(channel) {\n        return this.facet[channel];\n    }\n    parseData() {\n        this.component.data = parseData(this);\n        this.child.parseData();\n    }\n    parseLayoutSize() {\n        parseChildrenLayoutSize(this);\n    }\n    parseSelections() {\n        // As a facet has a single child, the selection components are the same.\n        // The child maintains its selections to assemble signals, which remain\n        // within its unit.\n        this.child.parseSelections();\n        this.component.selection = this.child.component.selection;\n    }\n    parseMarkGroup() {\n        this.child.parseMarkGroup();\n    }\n    parseAxesAndHeaders() {\n        this.child.parseAxesAndHeaders();\n        parseFacetHeaders(this);\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return this.child.assembleSelectionTopLevelSignals(signals);\n    }\n    assembleSignals() {\n        this.child.assembleSignals();\n        return [];\n    }\n    assembleSelectionData(data) {\n        return this.child.assembleSelectionData(data);\n    }\n    getHeaderLayoutMixins() {\n        const layoutMixins = {};\n        for (const channel of FACET_CHANNELS) {\n            for (const headerType of HEADER_TYPES) {\n                const layoutHeaderComponent = this.component.layoutHeaders[channel];\n                const headerComponent = layoutHeaderComponent[headerType];\n                const { facetFieldDef } = layoutHeaderComponent;\n                if (facetFieldDef) {\n                    const titleOrient = getHeaderProperty('titleOrient', facetFieldDef, this.config, channel);\n                    if (contains(['right', 'bottom'], titleOrient)) {\n                        const headerChannel = getHeaderChannel(channel, titleOrient);\n                        layoutMixins.titleAnchor = layoutMixins.titleAnchor || {};\n                        layoutMixins.titleAnchor[headerChannel] = 'end';\n                    }\n                }\n                if (headerComponent && headerComponent[0]) {\n                    // set header/footerBand\n                    const sizeType = channel === 'row' ? 'height' : 'width';\n                    const bandType = headerType === 'header' ? 'headerBand' : 'footerBand';\n                    if (channel !== 'facet' && !this.child.component.layoutSize.get(sizeType)) {\n                        // If facet child does not have size signal, then apply headerBand\n                        layoutMixins[bandType] = layoutMixins[bandType] || {};\n                        layoutMixins[bandType][channel] = 0.5;\n                    }\n                    if (layoutHeaderComponent.title) {\n                        layoutMixins.offset = layoutMixins.offset || {};\n                        layoutMixins.offset[channel === 'row' ? 'rowTitle' : 'columnTitle'] = 10;\n                    }\n                }\n            }\n        }\n        return layoutMixins;\n    }\n    assembleDefaultLayout() {\n        const { column, row } = this.facet;\n        const columns = column ? this.columnDistinctSignal() : row ? 1 : undefined;\n        let align = 'all';\n        // Do not align the cells if the scale corresponding to the direction is indepent.\n        // We always align when we facet into both row and column.\n        if (!row && this.component.resolve.scale.x === 'independent') {\n            align = 'none';\n        }\n        else if (!column && this.component.resolve.scale.y === 'independent') {\n            align = 'none';\n        }\n        return Object.assign(Object.assign(Object.assign({}, this.getHeaderLayoutMixins()), (columns ? { columns } : {})), { bounds: 'full', align });\n    }\n    assembleLayoutSignals() {\n        // FIXME(https://github.com/vega/vega-lite/issues/1193): this can be incorrect if we have independent scales.\n        return this.child.assembleLayoutSignals();\n    }\n    columnDistinctSignal() {\n        if (this.parent && this.parent instanceof FacetModel) {\n            // For nested facet, we will add columns to group mark instead\n            // See discussion in https://github.com/vega/vega/issues/952\n            // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n            return undefined;\n        }\n        else {\n            // In facetNode.assemble(), the name is always this.getName('column') + '_layout'.\n            const facetLayoutDataName = this.getName('column_domain');\n            return { signal: `length(data('${facetLayoutDataName}'))` };\n        }\n    }\n    assembleGroup(signals) {\n        if (this.parent && this.parent instanceof FacetModel) {\n            // Provide number of columns for layout.\n            // See discussion in https://github.com/vega/vega/issues/952\n            // and https://github.com/vega/vega-view/releases/tag/v1.2.6\n            return Object.assign(Object.assign({}, (this.channelHasField('column')\n                ? {\n                    encode: {\n                        update: {\n                            // TODO(https://github.com/vega/vega-lite/issues/2759):\n                            // Correct the signal for facet of concat of facet_column\n                            columns: { field: vgField(this.facet.column, { prefix: 'distinct' }) }\n                        }\n                    }\n                }\n                : {})), super.assembleGroup(signals));\n        }\n        return super.assembleGroup(signals);\n    }\n    /**\n     * Aggregate cardinality for calculating size\n     */\n    getCardinalityAggregateForChild() {\n        const fields = [];\n        const ops = [];\n        const as = [];\n        if (this.child instanceof FacetModel) {\n            if (this.child.channelHasField('column')) {\n                const field = vgField(this.child.facet.column);\n                fields.push(field);\n                ops.push('distinct');\n                as.push(`distinct_${field}`);\n            }\n        }\n        else {\n            for (const channel of ['x', 'y']) {\n                const childScaleComponent = this.child.component.scales[channel];\n                if (childScaleComponent && !childScaleComponent.merged) {\n                    const type = childScaleComponent.get('type');\n                    const range = childScaleComponent.get('range');\n                    if (hasDiscreteDomain(type) && isVgRangeStep(range)) {\n                        const domain = assembleDomain(this.child, channel);\n                        const field = getFieldFromDomain(domain);\n                        if (field) {\n                            fields.push(field);\n                            ops.push('distinct');\n                            as.push(`distinct_${field}`);\n                        }\n                        else {\n                            log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                        }\n                    }\n                }\n            }\n        }\n        return { fields, ops, as };\n    }\n    assembleFacet() {\n        const { name, data } = this.component.data.facetRoot;\n        const { row, column } = this.facet;\n        const { fields, ops, as } = this.getCardinalityAggregateForChild();\n        const groupby = [];\n        for (const channel of FACET_CHANNELS) {\n            const fieldDef = this.facet[channel];\n            if (fieldDef) {\n                groupby.push(vgField(fieldDef));\n                const { bin, sort } = fieldDef;\n                if (isBinning(bin)) {\n                    groupby.push(vgField(fieldDef, { binSuffix: 'end' }));\n                }\n                if (isSortField(sort)) {\n                    const { field, op = DEFAULT_SORT_OP } = sort;\n                    const outputName = facetSortFieldName(fieldDef, sort);\n                    if (row && column) {\n                        // For crossed facet, use pre-calculate field as it requires a different groupby\n                        // For each calculated field, apply max and assign them to the same name as\n                        // all values of the same group should be the same anyway.\n                        fields.push(outputName);\n                        ops.push('max');\n                        as.push(outputName);\n                    }\n                    else {\n                        fields.push(field);\n                        ops.push(op);\n                        as.push(outputName);\n                    }\n                }\n                else if (isArray(sort)) {\n                    const outputName = sortArrayIndexField(fieldDef, channel);\n                    fields.push(outputName);\n                    ops.push('max');\n                    as.push(outputName);\n                }\n            }\n        }\n        const cross = !!row && !!column;\n        return Object.assign({ name,\n            data,\n            groupby }, (cross || fields.length\n            ? {\n                aggregate: Object.assign(Object.assign({}, (cross ? { cross } : {})), (fields.length ? { fields, ops, as } : {}))\n            }\n            : {}));\n    }\n    facetSortFields(channel) {\n        const { facet } = this;\n        const fieldDef = facet[channel];\n        if (fieldDef) {\n            if (isSortField(fieldDef.sort)) {\n                return [facetSortFieldName(fieldDef, fieldDef.sort, { expr: 'datum' })];\n            }\n            else if (isArray(fieldDef.sort)) {\n                return [sortArrayIndexField(fieldDef, channel, { expr: 'datum' })];\n            }\n            return [vgField(fieldDef, { expr: 'datum' })];\n        }\n        return [];\n    }\n    facetSortOrder(channel) {\n        const { facet } = this;\n        const fieldDef = facet[channel];\n        if (fieldDef) {\n            const { sort } = fieldDef;\n            const order = (isSortField(sort) ? sort.order : !isArray(sort) && sort) || 'ascending';\n            return [order];\n        }\n        return [];\n    }\n    assembleLabelTitle() {\n        const { facet, config } = this;\n        if (facet.facet) {\n            // Facet always uses title to display labels\n            return assembleLabelTitle(facet.facet, 'facet', config);\n        }\n        const ORTHOGONAL_ORIENT = {\n            row: ['top', 'bottom'],\n            column: ['left', 'right']\n        };\n        for (const channel of HEADER_CHANNELS) {\n            if (facet[channel]) {\n                const labelOrient = getHeaderProperty('labelOrient', facet[channel], config, channel);\n                if (contains(ORTHOGONAL_ORIENT[channel], labelOrient)) {\n                    // Row/Column with orthogonal labelOrient must use title to display labels\n                    return assembleLabelTitle(facet[channel], channel, config);\n                }\n            }\n        }\n        return undefined;\n    }\n    assembleMarks() {\n        const { child } = this;\n        // If we facet by two dimensions, we need to add a cross operator to the aggregation\n        // so that we create all groups\n        const facetRoot = this.component.data.facetRoot;\n        const data = assembleFacetData(facetRoot);\n        const encodeEntry = child.assembleGroupEncodeEntry(false);\n        const title = this.assembleLabelTitle() || child.assembleTitle();\n        const style = child.assembleGroupStyle();\n        const markGroup = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: this.getName('cell'), type: 'group' }, (title ? { title } : {})), (style ? { style } : {})), { from: {\n                facet: this.assembleFacet()\n            }, \n            // TODO: move this to after data\n            sort: {\n                field: FACET_CHANNELS.map(c => this.facetSortFields(c)).flat(),\n                order: FACET_CHANNELS.map(c => this.facetSortOrder(c)).flat()\n            } }), (data.length > 0 ? { data: data } : {})), (encodeEntry ? { encode: { update: encodeEntry } } : {})), child.assembleGroup(assembleFacetSignals(this, [])));\n        return [markGroup];\n    }\n    getMapping() {\n        return this.facet;\n    }\n}\n//# sourceMappingURL=facet.js.map","import { isUrlData } from '../../data';\nimport { AggregateNode } from './aggregate';\nimport { BinNode } from './bin';\nimport { CalculateNode } from './calculate';\nimport { OutputNode } from './dataflow';\nimport { DensityTransformNode } from './density';\nimport { FacetNode } from './facet';\nimport { FilterNode } from './filter';\nimport { FilterInvalidNode } from './filterinvalid';\nimport { FlattenTransformNode } from './flatten';\nimport { FoldTransformNode } from './fold';\nimport { ParseNode } from './formatparse';\nimport { GeoJSONNode } from './geojson';\nimport { GeoPointNode } from './geopoint';\nimport { GraticuleNode } from './graticule';\nimport { IdentifierNode } from './identifier';\nimport { ImputeNode } from './impute';\nimport { JoinAggregateTransformNode } from './joinaggregate';\nimport { LoessTransformNode } from './loess';\nimport { LookupNode } from './lookup';\nimport { RegressionTransformNode } from './regression';\nimport { PivotTransformNode } from './pivot';\nimport { SampleTransformNode } from './sample';\nimport { SequenceNode } from './sequence';\nimport { SourceNode } from './source';\nimport { StackNode } from './stack';\nimport { TimeUnitNode } from './timeunit';\nimport { WindowTransformNode } from './window';\nfunction makeWalkTree(data) {\n    // to name datasources\n    let datasetIndex = 0;\n    /**\n     * Recursively walk down the tree.\n     */\n    function walkTree(node, dataSource) {\n        if (node instanceof SourceNode) {\n            // If the source is a named data source or a data source with values, we need\n            // to put it in a different data source. Otherwise, Vega may override the data.\n            if (!node.isGenerator && !isUrlData(node.data)) {\n                data.push(dataSource);\n                const newData = {\n                    name: null,\n                    source: dataSource.name,\n                    transform: []\n                };\n                dataSource = newData;\n            }\n        }\n        if (node instanceof ParseNode) {\n            if (node.parent instanceof SourceNode && !dataSource.source) {\n                // If node's parent is a root source and the data source does not refer to another data source, use normal format parse\n                dataSource.format = Object.assign(Object.assign({}, (dataSource.format || {})), { parse: node.assembleFormatParse() });\n                // add calculates for all nested fields\n                dataSource.transform.push(...node.assembleTransforms(true));\n            }\n            else {\n                // Otherwise use Vega expression to parse\n                dataSource.transform.push(...node.assembleTransforms());\n            }\n        }\n        if (node instanceof FacetNode) {\n            if (!dataSource.name) {\n                dataSource.name = `data_${datasetIndex++}`;\n            }\n            if (!dataSource.source || dataSource.transform.length > 0) {\n                data.push(dataSource);\n                node.data = dataSource.name;\n            }\n            else {\n                node.data = dataSource.source;\n            }\n            node.assemble().forEach(d => data.push(d));\n            // break here because the rest of the tree has to be taken care of by the facet.\n            return;\n        }\n        if (node instanceof GraticuleNode ||\n            node instanceof SequenceNode ||\n            node instanceof FilterInvalidNode ||\n            node instanceof FilterNode ||\n            node instanceof CalculateNode ||\n            node instanceof GeoPointNode ||\n            node instanceof GeoJSONNode ||\n            node instanceof AggregateNode ||\n            node instanceof LookupNode ||\n            node instanceof WindowTransformNode ||\n            node instanceof JoinAggregateTransformNode ||\n            node instanceof FoldTransformNode ||\n            node instanceof FlattenTransformNode ||\n            node instanceof DensityTransformNode ||\n            node instanceof LoessTransformNode ||\n            node instanceof RegressionTransformNode ||\n            node instanceof IdentifierNode ||\n            node instanceof SampleTransformNode ||\n            node instanceof PivotTransformNode) {\n            dataSource.transform.push(node.assemble());\n        }\n        if (node instanceof BinNode ||\n            node instanceof TimeUnitNode ||\n            node instanceof ImputeNode ||\n            node instanceof StackNode) {\n            dataSource.transform.push(...node.assemble());\n        }\n        if (node instanceof OutputNode) {\n            if (dataSource.source && dataSource.transform.length === 0) {\n                node.setSource(dataSource.source);\n            }\n            else if (node.parent instanceof OutputNode) {\n                // Note that an output node may be required but we still do not assemble a\n                // separate data source for it.\n                node.setSource(dataSource.name);\n            }\n            else {\n                if (!dataSource.name) {\n                    dataSource.name = `data_${datasetIndex++}`;\n                }\n                // Here we set the name of the datasource we generated. From now on\n                // other assemblers can use it.\n                node.setSource(dataSource.name);\n                // if this node has more than one child, we will add a datasource automatically\n                if (node.numChildren() === 1) {\n                    data.push(dataSource);\n                    const newData = {\n                        name: null,\n                        source: dataSource.name,\n                        transform: []\n                    };\n                    dataSource = newData;\n                }\n            }\n        }\n        switch (node.numChildren()) {\n            case 0:\n                // done\n                if (node instanceof OutputNode && (!dataSource.source || dataSource.transform.length > 0)) {\n                    // do not push empty datasources that are simply references\n                    data.push(dataSource);\n                }\n                break;\n            case 1:\n                walkTree(node.children[0], dataSource);\n                break;\n            default: {\n                if (!dataSource.name) {\n                    dataSource.name = `data_${datasetIndex++}`;\n                }\n                let source = dataSource.name;\n                if (!dataSource.source || dataSource.transform.length > 0) {\n                    data.push(dataSource);\n                }\n                else {\n                    source = dataSource.source;\n                }\n                node.children.forEach(child => {\n                    const newData = {\n                        name: null,\n                        source: source,\n                        transform: []\n                    };\n                    walkTree(child, newData);\n                });\n                break;\n            }\n        }\n    }\n    return walkTree;\n}\n/**\n * Assemble data sources that are derived from faceted data.\n */\nexport function assembleFacetData(root) {\n    const data = [];\n    const walkTree = makeWalkTree(data);\n    root.children.forEach(child => walkTree(child, {\n        source: root.name,\n        name: null,\n        transform: []\n    }));\n    return data;\n}\n/**\n * Create Vega Data array from a given compiled model and append all of them to the given array\n *\n * @param  model\n * @param  data array\n * @return modified data array\n */\nexport function assembleRootData(dataComponent, datasets) {\n    const data = [];\n    // dataComponent.sources.forEach(debug);\n    // draw(dataComponent.sources);\n    const walkTree = makeWalkTree(data);\n    let sourceIndex = 0;\n    dataComponent.sources.forEach(root => {\n        // assign a name if the source does not have a name yet\n        if (!root.hasName()) {\n            root.dataName = `source_${sourceIndex++}`;\n        }\n        const newData = root.assemble();\n        walkTree(root, newData);\n    });\n    // remove empty transform arrays for cleaner output\n    data.forEach(d => {\n        if (d.transform.length === 0) {\n            delete d.transform;\n        }\n    });\n    // move sources without transforms (the ones that are potentially used in lookups) to the beginning\n    let whereTo = 0;\n    for (const [i, d] of data.entries()) {\n        if ((d.transform || []).length === 0 && !d.source) {\n            data.splice(whereTo++, 0, data.splice(i, 1)[0]);\n        }\n    }\n    // now fix the from references in lookup transforms\n    for (const d of data) {\n        for (const t of d.transform || []) {\n            if (t.type === 'lookup') {\n                t.from = dataComponent.outputNodes[t.from].getSource();\n            }\n        }\n    }\n    // inline values for datasets that are in the datastore\n    for (const d of data) {\n        if (d.name in datasets) {\n            d.values = datasets[d.name];\n        }\n    }\n    return data;\n}\n//# sourceMappingURL=assemble.js.map","import { __rest } from \"tslib\";\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for loess transform nodes\n */\nexport class LoessTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = this.transform.as || [undefined, undefined];\n        this.transform.as = [specifiedAs[0] || transform.on, specifiedAs[1] || transform.loess];\n    }\n    clone() {\n        return new LoessTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set([this.transform.loess, this.transform.on, ...(this.transform.groupby || [])]);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `LoessTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const _a = this.transform, { loess, on } = _a, rest = __rest(_a, [\"loess\", \"on\"]);\n        const result = Object.assign({ type: 'loess', x: on, y: loess }, rest);\n        return result;\n    }\n}\n//# sourceMappingURL=loess.js.map","import { isString, array } from 'vega-util';\nimport * as log from '../../log';\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode, OutputNode } from './dataflow';\nimport { findSource } from './parse';\nimport { SourceNode } from './source';\nexport class LookupNode extends DataFlowNode {\n    constructor(parent, transform, secondary) {\n        super(parent);\n        this.transform = transform;\n        this.secondary = secondary;\n    }\n    clone() {\n        return new LookupNode(null, duplicate(this.transform), this.secondary);\n    }\n    static make(parent, model, transform, counter) {\n        const sources = model.component.data.sources;\n        let fromSource = findSource(transform.from.data, sources);\n        if (!fromSource) {\n            fromSource = new SourceNode(transform.from.data);\n            sources.push(fromSource);\n        }\n        const fromOutputName = model.getName(`lookup_${counter}`);\n        const fromOutputNode = new OutputNode(fromSource, fromOutputName, 'lookup', model.component.data.outputNodeRefCounts);\n        model.component.data.outputNodes[fromOutputName] = fromOutputNode;\n        return new LookupNode(parent, transform, fromOutputNode.getSource());\n    }\n    dependentFields() {\n        return new Set([this.transform.lookup]);\n    }\n    producedFields() {\n        return new Set(this.transform.as ? array(this.transform.as) : this.transform.from.fields);\n    }\n    hash() {\n        return `Lookup ${hash({ transform: this.transform, secondary: this.secondary })}`;\n    }\n    assemble() {\n        let foreign;\n        if (this.transform.from.fields) {\n            // lookup a few fields and add create a flat output\n            foreign = Object.assign({ values: this.transform.from.fields }, (this.transform.as ? { as: array(this.transform.as) } : {}));\n        }\n        else {\n            // lookup full record and nest it\n            let asName = this.transform.as;\n            if (!isString(asName)) {\n                log.warn(log.message.NO_FIELDS_NEEDS_AS);\n                asName = '_lookup';\n            }\n            foreign = {\n                as: [asName]\n            };\n        }\n        return Object.assign(Object.assign({ type: 'lookup', from: this.secondary, key: this.transform.from.key, fields: [this.transform.lookup] }, foreign), (this.transform.default ? { default: this.transform.default } : {}));\n    }\n}\n//# sourceMappingURL=lookup.js.map","import { __rest } from \"tslib\";\nimport { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for regression transform nodes\n */\nexport class RegressionTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n        this.transform = duplicate(transform); // duplicate to prevent side effects\n        const specifiedAs = this.transform.as || [undefined, undefined];\n        this.transform.as = [specifiedAs[0] || transform.on, specifiedAs[1] || transform.regression];\n    }\n    clone() {\n        return new RegressionTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set([this.transform.regression, this.transform.on, ...(this.transform.groupby || [])]);\n    }\n    producedFields() {\n        return new Set(this.transform.as);\n    }\n    hash() {\n        return `RegressionTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const _a = this.transform, { regression, on } = _a, rest = __rest(_a, [\"regression\", \"on\"]);\n        const result = Object.assign({ type: 'regression', x: on, y: regression }, rest);\n        return result;\n    }\n}\n//# sourceMappingURL=regression.js.map","import { duplicate, hash, unique } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for pivot transform nodes.\n */\nexport class PivotTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new PivotTransformNode(null, duplicate(this.transform));\n    }\n    addDimensions(fields) {\n        this.transform.groupby = unique((this.transform.groupby || []).concat(fields), d => d);\n    }\n    producedFields() {\n        return undefined; // return undefined so that potentially everything can depend on the pivot\n    }\n    dependentFields() {\n        return new Set([this.transform.pivot, this.transform.value, ...(this.transform.groupby || [])]);\n    }\n    hash() {\n        return `PivotTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        const { pivot, value, groupby, limit, op } = this.transform;\n        return Object.assign(Object.assign(Object.assign({ type: 'pivot', field: pivot, value }, (limit !== undefined ? { limit } : {})), (op !== undefined ? { op } : {})), (groupby !== undefined ? { groupby } : {}));\n    }\n}\n//# sourceMappingURL=pivot.js.map","import { duplicate, hash } from '../../util';\nimport { DataFlowNode } from './dataflow';\n/**\n * A class for the sample transform nodes\n */\nexport class SampleTransformNode extends DataFlowNode {\n    constructor(parent, transform) {\n        super(parent);\n        this.transform = transform;\n    }\n    clone() {\n        return new SampleTransformNode(null, duplicate(this.transform));\n    }\n    dependentFields() {\n        return new Set();\n    }\n    producedFields() {\n        return new Set();\n    }\n    hash() {\n        return `SampleTransform ${hash(this.transform)}`;\n    }\n    assemble() {\n        return {\n            type: 'sample',\n            size: this.transform.sample\n        };\n    }\n}\n//# sourceMappingURL=sample.js.map","import { __rest } from \"tslib\";\nimport { hasOwnProperty, isArray } from 'vega-util';\nimport { hasConditionalFieldDef, isConditionalDef, isFieldDef, isRepeatRef, isSortableFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isSortField } from '../sort';\nimport { isFacetMapping } from '../spec/facet';\nexport function replaceRepeaterInFacet(facet, repeater) {\n    if (isFacetMapping(facet)) {\n        return replaceRepeater(facet, repeater);\n    }\n    return replaceRepeaterInFieldDef(facet, repeater);\n}\nexport function replaceRepeaterInEncoding(encoding, repeater) {\n    return replaceRepeater(encoding, repeater);\n}\n/**\n * Replaces repeated value and returns if the repeated value is valid.\n */\nfunction replaceRepeat(o, repeater) {\n    if (isRepeatRef(o.field)) {\n        if (o.field.repeat in repeater) {\n            // any needed to calm down ts compiler\n            return Object.assign(Object.assign({}, o), { field: repeater[o.field.repeat] });\n        }\n        else {\n            log.warn(log.message.noSuchRepeatedValue(o.field.repeat));\n            return undefined;\n        }\n    }\n    return o;\n}\n/**\n * Replace repeater values in a field def with the concrete field name.\n */\nfunction replaceRepeaterInFieldDef(fieldDef, repeater) {\n    fieldDef = replaceRepeat(fieldDef, repeater);\n    if (fieldDef === undefined) {\n        // the field def should be ignored\n        return undefined;\n    }\n    else if (fieldDef === null) {\n        return null;\n    }\n    if (isSortableFieldDef(fieldDef) && isSortField(fieldDef.sort)) {\n        const sort = replaceRepeat(fieldDef.sort, repeater);\n        fieldDef = Object.assign(Object.assign({}, fieldDef), (sort ? { sort } : {}));\n    }\n    return fieldDef;\n}\nfunction replaceRepeaterInChannelDef(channelDef, repeater) {\n    if (isFieldDef(channelDef)) {\n        const fd = replaceRepeaterInFieldDef(channelDef, repeater);\n        if (fd) {\n            return fd;\n        }\n        else if (isConditionalDef(channelDef)) {\n            return { condition: channelDef.condition };\n        }\n    }\n    else {\n        if (hasConditionalFieldDef(channelDef)) {\n            const fd = replaceRepeaterInFieldDef(channelDef.condition, repeater);\n            if (fd) {\n                return Object.assign(Object.assign({}, channelDef), { condition: fd });\n            }\n            else {\n                const { condition } = channelDef, channelDefWithoutCondition = __rest(channelDef, [\"condition\"]);\n                return channelDefWithoutCondition;\n            }\n        }\n        return channelDef;\n    }\n    return undefined;\n}\nfunction replaceRepeater(mapping, repeater) {\n    const out = {};\n    for (const channel in mapping) {\n        if (hasOwnProperty(mapping, channel)) {\n            const channelDef = mapping[channel];\n            if (isArray(channelDef)) {\n                // array cannot have condition\n                out[channel] = channelDef.map(cd => replaceRepeaterInChannelDef(cd, repeater)).filter(cd => cd);\n            }\n            else {\n                const cd = replaceRepeaterInChannelDef(channelDef, repeater);\n                if (cd !== undefined) {\n                    out[channel] = cd;\n                }\n            }\n        }\n    }\n    return out;\n}\n//# sourceMappingURL=repeater.js.map","import { AXIS_PARTS, isAxisProperty } from '../../axis';\nimport { isBinned } from '../../bin';\nimport { POSITION_SCALE_CHANNELS, X, Y } from '../../channel';\nimport { isTimeFormatFieldDef, toFieldDefBase } from '../../channeldef';\nimport { contains, getFirstDefined, keys, normalizeAngle } from '../../util';\nimport { mergeTitle, mergeTitleComponent, mergeTitleFieldDefs, numberFormat } from '../common';\nimport { guideEncodeEntry } from '../guide';\nimport { parseGuideResolve } from '../resolve';\nimport { defaultTieBreaker, mergeValuesWithExplicit } from '../split';\nimport { AxisComponent, AXIS_COMPONENT_PROPERTIES } from './component';\nimport { getAxisConfig } from './config';\nimport * as encode from './encode';\nimport * as properties from './properties';\nexport function parseUnitAxes(model) {\n    return POSITION_SCALE_CHANNELS.reduce((axis, channel) => {\n        if (model.component.scales[channel] && model.axis(channel)) {\n            axis[channel] = [parseAxis(channel, model)];\n        }\n        return axis;\n    }, {});\n}\nconst OPPOSITE_ORIENT = {\n    bottom: 'top',\n    top: 'bottom',\n    left: 'right',\n    right: 'left'\n};\nexport function parseLayerAxes(model) {\n    const { axes, resolve } = model.component;\n    const axisCount = { top: 0, bottom: 0, right: 0, left: 0 };\n    for (const child of model.children) {\n        child.parseAxesAndHeaders();\n        for (const channel of keys(child.component.axes)) {\n            resolve.axis[channel] = parseGuideResolve(model.component.resolve, channel);\n            if (resolve.axis[channel] === 'shared') {\n                // If the resolve says shared (and has not been overridden)\n                // We will try to merge and see if there is a conflict\n                axes[channel] = mergeAxisComponents(axes[channel], child.component.axes[channel]);\n                if (!axes[channel]) {\n                    // If merge returns nothing, there is a conflict so we cannot make the axis shared.\n                    // Thus, mark axis as independent and remove the axis component.\n                    resolve.axis[channel] = 'independent';\n                    delete axes[channel];\n                }\n            }\n        }\n    }\n    // Move axes to layer's axis component and merge shared axes\n    for (const channel of [X, Y]) {\n        for (const child of model.children) {\n            if (!child.component.axes[channel]) {\n                // skip if the child does not have a particular axis\n                continue;\n            }\n            if (resolve.axis[channel] === 'independent') {\n                // If axes are independent, concat the axisComponent array.\n                axes[channel] = (axes[channel] || []).concat(child.component.axes[channel]);\n                // Automatically adjust orient\n                for (const axisComponent of child.component.axes[channel]) {\n                    const { value: orient, explicit } = axisComponent.getWithExplicit('orient');\n                    if (axisCount[orient] > 0 && !explicit) {\n                        // Change axis orient if the number do not match\n                        const oppositeOrient = OPPOSITE_ORIENT[orient];\n                        if (axisCount[orient] > axisCount[oppositeOrient]) {\n                            axisComponent.set('orient', oppositeOrient, false);\n                        }\n                    }\n                    axisCount[orient]++;\n                    // TODO(https://github.com/vega/vega-lite/issues/2634): automatically add extra offset?\n                }\n            }\n            // After merging, make sure to remove axes from child\n            delete child.component.axes[channel];\n        }\n        // Suppress grid lines for dual axis charts (https://github.com/vega/vega-lite/issues/4676)\n        if (resolve.axis[channel] === 'independent' && axes[channel] && axes[channel].length > 1) {\n            for (const axisCmpt of axes[channel]) {\n                if (!!axisCmpt.get('grid') && !axisCmpt.explicit.grid) {\n                    axisCmpt.implicit.grid = false;\n                }\n            }\n        }\n    }\n}\nfunction mergeAxisComponents(mergedAxisCmpts, childAxisCmpts) {\n    if (mergedAxisCmpts) {\n        // FIXME: this is a bit wrong once we support multiple axes\n        if (mergedAxisCmpts.length !== childAxisCmpts.length) {\n            return undefined; // Cannot merge axis component with different number of axes.\n        }\n        const length = mergedAxisCmpts.length;\n        for (let i = 0; i < length; i++) {\n            const merged = mergedAxisCmpts[i];\n            const child = childAxisCmpts[i];\n            if (!!merged !== !!child) {\n                return undefined;\n            }\n            else if (merged && child) {\n                const mergedOrient = merged.getWithExplicit('orient');\n                const childOrient = child.getWithExplicit('orient');\n                if (mergedOrient.explicit && childOrient.explicit && mergedOrient.value !== childOrient.value) {\n                    // TODO: throw warning if resolve is explicit (We don't have info about explicit/implicit resolve yet.)\n                    // Cannot merge due to inconsistent orient\n                    return undefined;\n                }\n                else {\n                    mergedAxisCmpts[i] = mergeAxisComponent(merged, child);\n                }\n            }\n        }\n    }\n    else {\n        // For first one, return a copy of the child\n        return childAxisCmpts.map(axisComponent => axisComponent.clone());\n    }\n    return mergedAxisCmpts;\n}\nfunction mergeAxisComponent(merged, child) {\n    for (const prop of AXIS_COMPONENT_PROPERTIES) {\n        const mergedValueWithExplicit = mergeValuesWithExplicit(merged.getWithExplicit(prop), child.getWithExplicit(prop), prop, 'axis', \n        // Tie breaker function\n        (v1, v2) => {\n            switch (prop) {\n                case 'title':\n                    return mergeTitleComponent(v1, v2);\n                case 'gridScale':\n                    return {\n                        explicit: v1.explicit,\n                        value: getFirstDefined(v1.value, v2.value)\n                    };\n            }\n            return defaultTieBreaker(v1, v2, prop, 'axis');\n        });\n        merged.setWithExplicit(prop, mergedValueWithExplicit);\n    }\n    return merged;\n}\nfunction getFieldDefTitle(model, channel) {\n    const channel2 = channel === 'x' ? 'x2' : 'y2';\n    const fieldDef = model.fieldDef(channel);\n    const fieldDef2 = model.fieldDef(channel2);\n    const title1 = fieldDef ? fieldDef.title : undefined;\n    const title2 = fieldDef2 ? fieldDef2.title : undefined;\n    if (title1 && title2) {\n        return mergeTitle(title1, title2);\n    }\n    else if (title1) {\n        return title1;\n    }\n    else if (title2) {\n        return title2;\n    }\n    else if (title1 !== undefined) {\n        // falsy value to disable config\n        return title1;\n    }\n    else if (title2 !== undefined) {\n        // falsy value to disable config\n        return title2;\n    }\n    return undefined;\n}\nfunction isExplicit(value, property, axis, model, channel) {\n    switch (property) {\n        case 'titleAngle':\n        case 'labelAngle':\n            return value === normalizeAngle(axis[property]);\n        case 'values':\n            return !!axis.values;\n        // specified axis.values is already respected, but may get transformed.\n        case 'encode':\n            // both VL axis.encoding and axis.labelAngle affect VG axis.encode\n            return !!axis.encoding || !!axis.labelAngle;\n        case 'title':\n            // title can be explicit if fieldDef.title is set\n            if (value === getFieldDefTitle(model, channel)) {\n                return true;\n            }\n    }\n    // Otherwise, things are explicit if the returned value matches the specified property\n    return value === axis[property];\n}\nfunction parseAxis(channel, model) {\n    const axis = model.axis(channel);\n    const axisComponent = new AxisComponent();\n    // 1.2. Add properties\n    AXIS_COMPONENT_PROPERTIES.forEach(property => {\n        const value = getProperty(property, axis, channel, model);\n        if (value !== undefined) {\n            const explicit = isExplicit(value, property, axis, model, channel);\n            const configValue = getAxisConfig(property, model.config, channel, axisComponent.get('orient'), model.getScaleComponent(channel).get('type'));\n            // only set property if it is explicitly set or has no config value (otherwise we will accidentally override config)\n            if (explicit || configValue === undefined) {\n                // Do not apply implicit rule if there is a config value\n                axisComponent.set(property, value, explicit);\n            }\n            else if (contains(['grid', 'orient'], property) && configValue) {\n                // - Grid is an exception because we need to set grid = true to generate another grid axis\n                // - Orient is not an axis config in Vega, so we need to set too.\n                axisComponent.set(property, configValue, false);\n            }\n        }\n    });\n    // 2) Add guide encode definition groups\n    const axisEncoding = axis.encoding || {};\n    const axisEncode = AXIS_PARTS.reduce((e, part) => {\n        if (!axisComponent.hasAxisPart(part)) {\n            // No need to create encode for a disabled part.\n            return e;\n        }\n        const axisEncodingPart = guideEncodeEntry(axisEncoding[part] || {}, model);\n        const value = part === 'labels' ? encode.labels(model, channel, axisEncodingPart) : axisEncodingPart;\n        if (value !== undefined && keys(value).length > 0) {\n            e[part] = { update: value };\n        }\n        return e;\n    }, {});\n    // FIXME: By having encode as one property, we won't have fine grained encode merging.\n    if (keys(axisEncode).length > 0) {\n        axisComponent.set('encode', axisEncode, !!axis.encoding || axis.labelAngle !== undefined);\n    }\n    return axisComponent;\n}\nfunction getProperty(property, specifiedAxis, channel, model) {\n    const fieldDef = model.fieldDef(channel);\n    // Some properties depend on labelAngle so we have to declare it here.\n    // Also, we don't use `getFirstDefined` for labelAngle\n    // as we want to normalize specified value to be within [0,360)\n    const labelAngle = properties.labelAngle(model, specifiedAxis, channel, fieldDef);\n    const orient = getFirstDefined(specifiedAxis.orient, properties.orient(channel));\n    const { mark, config } = model;\n    switch (property) {\n        case 'scale':\n            return model.scaleName(channel);\n        case 'gridScale':\n            return properties.gridScale(model, channel);\n        case 'format':\n            // We don't include temporal field here as we apply format in encode block\n            if (isTimeFormatFieldDef(fieldDef)) {\n                return undefined;\n            }\n            return numberFormat(fieldDef, specifiedAxis.format, config);\n        case 'formatType':\n            // As with format, we don't include temporal field here as we apply format in encode block\n            if (isTimeFormatFieldDef(fieldDef)) {\n                return undefined;\n            }\n            return specifiedAxis.formatType;\n        case 'grid': {\n            if (isBinned(model.fieldDef(channel).bin)) {\n                return false;\n            }\n            else {\n                const scaleType = model.getScaleComponent(channel).get('type');\n                return getFirstDefined(specifiedAxis.grid, properties.defaultGrid(scaleType, fieldDef));\n            }\n        }\n        case 'labelAlign':\n            return getFirstDefined(specifiedAxis.labelAlign, properties.defaultLabelAlign(labelAngle, orient));\n        case 'labelAngle':\n            return labelAngle;\n        case 'labelBaseline':\n            return getFirstDefined(specifiedAxis.labelBaseline, properties.defaultLabelBaseline(labelAngle, orient));\n        case 'labelFlush':\n            return getFirstDefined(specifiedAxis.labelFlush, properties.defaultLabelFlush(fieldDef, channel));\n        case 'labelOverlap': {\n            const scaleType = model.getScaleComponent(channel).get('type');\n            return getFirstDefined(specifiedAxis.labelOverlap, properties.defaultLabelOverlap(fieldDef, scaleType));\n        }\n        case 'orient':\n            return orient;\n        case 'tickCount': {\n            const scaleType = model.getScaleComponent(channel).get('type');\n            const sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n            const size = sizeType ? model.getSizeSignalRef(sizeType) : undefined;\n            return getFirstDefined(specifiedAxis.tickCount, properties.defaultTickCount({ fieldDef, scaleType, size }));\n        }\n        case 'title': {\n            const channel2 = channel === 'x' ? 'x2' : 'y2';\n            const fieldDef2 = model.fieldDef(channel2);\n            // Keep undefined so we use default if title is unspecified.\n            // For other falsy value, keep them so we will hide the title.\n            return getFirstDefined(specifiedAxis.title, getFieldDefTitle(model, channel), // If title not specified, store base parts of fieldDef (and fieldDef2 if exists)\n            mergeTitleFieldDefs([toFieldDefBase(fieldDef)], fieldDef2 ? [toFieldDefBase(fieldDef2)] : []));\n        }\n        case 'values':\n            return properties.values(specifiedAxis, model, fieldDef);\n        case 'zindex':\n            return getFirstDefined(specifiedAxis.zindex, properties.defaultZindex(mark, fieldDef));\n    }\n    // Otherwise, return specified property.\n    return isAxisProperty(property) ? specifiedAxis[property] : undefined;\n}\n//# sourceMappingURL=parse.js.map","import { GEOPOSITION_CHANNELS, NONPOSITION_SCALE_CHANNELS, SCALE_CHANNELS, supportLegend, X, Y } from '../channel';\nimport { getTypedFieldDef, hasConditionalFieldDef, isFieldDef } from '../channeldef';\nimport { isGraticuleGenerator } from '../data';\nimport * as vlEncoding from '../encoding';\nimport { normalizeEncoding } from '../encoding';\nimport { GEOSHAPE, isMarkDef } from '../mark';\nimport { stack } from '../stack';\nimport { assembleAxisSignals } from './axis/assemble';\nimport { parseUnitAxes } from './axis/parse';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { initLayoutSize } from './layoutsize/init';\nimport { parseUnitLayoutSize } from './layoutsize/parse';\nimport { normalizeMarkDef } from './mark/init';\nimport { parseMarkGroups } from './mark/mark';\nimport { isLayerModel, ModelWithField } from './model';\nimport { replaceRepeaterInEncoding } from './repeater';\nimport { assembleTopLevelSignals, assembleUnitSelectionData, assembleUnitSelectionMarks, assembleUnitSelectionSignals } from './selection/assemble';\nimport { parseUnitSelection } from './selection/parse';\n/**\n * Internal model of Vega-Lite specification for the compiler.\n */\nexport class UnitModel extends ModelWithField {\n    constructor(spec, parent, parentGivenName, parentGivenSize = {}, repeater, config) {\n        super(spec, 'unit', parent, parentGivenName, config, repeater, undefined, spec.view);\n        this.specifiedScales = {};\n        this.specifiedAxes = {};\n        this.specifiedLegends = {};\n        this.specifiedProjection = {};\n        this.selection = {};\n        this.children = [];\n        const mark = isMarkDef(spec.mark) ? spec.mark.type : spec.mark;\n        const encodingWithRepeaterReplaced = replaceRepeaterInEncoding(spec.encoding || {}, repeater);\n        this.markDef = normalizeMarkDef(spec.mark, encodingWithRepeaterReplaced, config, {\n            graticule: spec.data && isGraticuleGenerator(spec.data)\n        });\n        const encoding = (this.encoding = normalizeEncoding(encodingWithRepeaterReplaced, this.markDef));\n        this.size = initLayoutSize({\n            encoding,\n            size: Object.assign(Object.assign(Object.assign({}, parentGivenSize), (spec.width ? { width: spec.width } : {})), (spec.height ? { height: spec.height } : {}))\n        });\n        // calculate stack properties\n        this.stack = stack(mark, encoding);\n        this.specifiedScales = this.initScales(mark, encoding);\n        this.specifiedAxes = this.initAxes(encoding);\n        this.specifiedLegends = this.initLegend(encoding);\n        this.specifiedProjection = spec.projection;\n        // Selections will be initialized upon parse.\n        this.selection = spec.selection;\n    }\n    get hasProjection() {\n        const { encoding } = this;\n        const isGeoShapeMark = this.mark === GEOSHAPE;\n        const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(channel => isFieldDef(encoding[channel]));\n        return isGeoShapeMark || hasGeoPosition;\n    }\n    /**\n     * Return specified Vega-lite scale domain for a particular channel\n     * @param channel\n     */\n    scaleDomain(channel) {\n        const scale = this.specifiedScales[channel];\n        return scale ? scale.domain : undefined;\n    }\n    axis(channel) {\n        return this.specifiedAxes[channel];\n    }\n    legend(channel) {\n        return this.specifiedLegends[channel];\n    }\n    initScales(mark, encoding) {\n        return SCALE_CHANNELS.reduce((scales, channel) => {\n            let fieldDef;\n            let specifiedScale;\n            const channelDef = encoding[channel];\n            if (isFieldDef(channelDef)) {\n                fieldDef = channelDef;\n                specifiedScale = channelDef.scale;\n            }\n            else if (hasConditionalFieldDef(channelDef)) {\n                // Need to specify generic for hasConditionalFieldDef as the value type can vary across channels\n                fieldDef = channelDef.condition;\n                specifiedScale = channelDef.condition['scale'];\n            }\n            if (fieldDef) {\n                scales[channel] = specifiedScale || {};\n            }\n            return scales;\n        }, {});\n    }\n    initAxes(encoding) {\n        return [X, Y].reduce((_axis, channel) => {\n            // Position Axis\n            // TODO: handle ConditionFieldDef\n            const channelDef = encoding[channel];\n            if (isFieldDef(channelDef) ||\n                (channel === X && isFieldDef(encoding.x2)) ||\n                (channel === Y && isFieldDef(encoding.y2))) {\n                const axisSpec = isFieldDef(channelDef) ? channelDef.axis : null;\n                if (axisSpec !== null) {\n                    _axis[channel] = Object.assign({}, axisSpec);\n                }\n            }\n            return _axis;\n        }, {});\n    }\n    initLegend(encoding) {\n        return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {\n            const channelDef = encoding[channel];\n            if (channelDef) {\n                const legend = isFieldDef(channelDef)\n                    ? channelDef.legend\n                    : hasConditionalFieldDef(channelDef) // Need to specify generic for hasConditionalFieldDef as the value type can vary across channels\n                        ? channelDef.condition['legend']\n                        : null;\n                if (legend !== null && legend !== false && supportLegend(channel)) {\n                    _legend[channel] = Object.assign({}, legend);\n                }\n            }\n            return _legend;\n        }, {});\n    }\n    parseData() {\n        this.component.data = parseData(this);\n    }\n    parseLayoutSize() {\n        parseUnitLayoutSize(this);\n    }\n    parseSelections() {\n        this.component.selection = parseUnitSelection(this, this.selection);\n    }\n    parseMarkGroup() {\n        this.component.mark = parseMarkGroups(this);\n    }\n    parseAxesAndHeaders() {\n        this.component.axes = parseUnitAxes(this);\n    }\n    assembleSelectionTopLevelSignals(signals) {\n        return assembleTopLevelSignals(this, signals);\n    }\n    assembleSignals() {\n        return [...assembleAxisSignals(this), ...assembleUnitSelectionSignals(this, [])];\n    }\n    assembleSelectionData(data) {\n        return assembleUnitSelectionData(this, data);\n    }\n    assembleLayout() {\n        return null;\n    }\n    assembleLayoutSignals() {\n        return assembleLayoutSignals(this);\n    }\n    assembleMarks() {\n        let marks = this.component.mark || [];\n        // If this unit is part of a layer, selections should augment\n        // all in concert rather than each unit individually. This\n        // ensures correct interleaving of clipping and brushed marks.\n        if (!this.parent || !isLayerModel(this.parent)) {\n            marks = assembleUnitSelectionMarks(this, marks);\n        }\n        return marks.map(this.correctDataNames);\n    }\n    getMapping() {\n        return this.encoding;\n    }\n    get mark() {\n        return this.markDef.type;\n    }\n    channelHasField(channel) {\n        return vlEncoding.channelHasField(this.encoding, channel);\n    }\n    fieldDef(channel) {\n        const channelDef = this.encoding[channel];\n        return getTypedFieldDef(channelDef);\n    }\n}\n//# sourceMappingURL=unit.js.map","import { isFunction, isString, stringValue } from 'vega-util';\nimport { isCountingAggregateOp } from '../../aggregate';\nimport { isBinned, isBinning } from '../../bin';\nimport { getMainRangeChannel, X, X2, Y, Y2 } from '../../channel';\nimport { binRequiresRange, format, getBand, getFieldDef, hasConditionalFieldDef, isFieldDef, isPositionFieldDef, isTypedFieldDef, isValueDef, title, vgField } from '../../channeldef';\nimport { forEach } from '../../encoding';\nimport * as log from '../../log';\nimport { isPathMark } from '../../mark';\nimport { hasDiscreteDomain, isContinuousToContinuous, ScaleType } from '../../scale';\nimport { QUANTITATIVE, TEMPORAL } from '../../type';\nimport { contains, getFirstDefined } from '../../util';\nimport { binFormatExpression, formatSignalRef, getMarkConfig } from '../common';\nfunction midPointWithPositionInvalidTest(params) {\n    const { channel, channelDef, markDef, scale } = params;\n    const ref = midPoint(params);\n    // Wrap to check if the positional value is invalid, if so, plot the point on the min value\n    if (\n    // Only this for field def without counting aggregate (as count wouldn't be null)\n    isFieldDef(channelDef) &&\n        !isCountingAggregateOp(channelDef.aggregate) &&\n        // and only for continuous scale without zero (otherwise, null / invalid will be interpreted as zero, which doesn't cause layout problem)\n        scale &&\n        isContinuousToContinuous(scale.get('type')) &&\n        scale.get('zero') === false) {\n        return wrapPositionInvalidTest({\n            fieldDef: channelDef,\n            channel,\n            markDef,\n            ref\n        });\n    }\n    return ref;\n}\nfunction wrapPositionInvalidTest({ fieldDef, channel, markDef, ref }) {\n    if (!isPathMark(markDef.type)) {\n        // Only do this for non-path mark (as path marks will already use \"defined\" to skip points)\n        return [fieldInvalidTestValueRef(fieldDef, channel), ref];\n    }\n    return ref;\n}\nexport function fieldInvalidTestValueRef(fieldDef, channel) {\n    const test = fieldInvalidPredicate(fieldDef, true);\n    const mainChannel = getMainRangeChannel(channel);\n    const zeroValueRef = mainChannel === 'x' ? { value: 0 } : { field: { group: 'height' } };\n    return Object.assign({ test }, zeroValueRef);\n}\nexport function fieldInvalidPredicate(field, invalid = true) {\n    field = isString(field) ? field : vgField(field, { expr: 'datum' });\n    const op = invalid ? '||' : '&&';\n    const eq = invalid ? '===' : '!==';\n    return `${field} ${eq} null ${op} ${invalid ? '' : '!'}isNaN(${field})`;\n}\n// TODO: we need to find a way to refactor these so that scaleName is a part of scale\n// but that's complicated.  For now, this is a huge step moving forward.\n/**\n * @return Vega ValueRef for normal x- or y-position without projection\n */\nexport function position(params) {\n    const { channel, channelDef, scaleName, stack, offset } = params;\n    if (isFieldDef(channelDef) && stack && channel === stack.fieldChannel) {\n        if (isPositionFieldDef(channelDef) && channelDef.band !== undefined) {\n            return interpolatedPositionSignal({\n                scaleName,\n                fieldDef: channelDef,\n                startSuffix: 'start',\n                band: channelDef.band,\n                offset: 0\n            });\n        }\n        // x or y use stack_end so that stacked line's point mark use stack_end too.\n        return fieldRef(channelDef, scaleName, { suffix: 'end' }, { offset });\n    }\n    return midPointWithPositionInvalidTest(params);\n}\n/**\n * @return Vega ValueRef for normal x2- or y2-position without projection\n */\nexport function position2({ channel, channelDef, channel2Def, markDef, config, scaleName, scale, stack, offset, defaultRef }) {\n    if (isFieldDef(channelDef) &&\n        stack &&\n        // If fieldChannel is X and channel is X2 (or Y and Y2)\n        channel.charAt(0) === stack.fieldChannel.charAt(0)) {\n        return fieldRef(channelDef, scaleName, { suffix: 'start' }, { offset });\n    }\n    return midPointWithPositionInvalidTest({\n        channel,\n        channelDef: channel2Def,\n        scaleName,\n        scale,\n        stack,\n        markDef,\n        config,\n        offset,\n        defaultRef\n    });\n}\nexport function getOffset(channel, markDef) {\n    const offsetChannel = (channel + 'Offset'); // Need to cast as the type can't be inferred automatically\n    // TODO: in the future read from encoding channel too\n    const markDefOffsetValue = markDef[offsetChannel];\n    if (markDefOffsetValue) {\n        return markDefOffsetValue;\n    }\n    return undefined;\n}\n/**\n * Value Ref for binned fields\n */\nexport function bin({ channel, fieldDef, scaleName, markDef, band, offset }) {\n    const ref = interpolatedPositionSignal({\n        scaleName,\n        fieldDef,\n        band,\n        offset\n    });\n    return wrapPositionInvalidTest({\n        fieldDef,\n        channel,\n        markDef,\n        ref\n    });\n}\nexport function fieldRef(fieldDef, scaleName, opt, mixins) {\n    const ref = Object.assign(Object.assign({}, (scaleName ? { scale: scaleName } : {})), { field: vgField(fieldDef, opt) });\n    if (mixins) {\n        const { offset, band } = mixins;\n        return Object.assign(Object.assign(Object.assign({}, ref), (offset ? { offset } : {})), (band ? { band } : {}));\n    }\n    return ref;\n}\nexport function bandRef(scaleName, band = true) {\n    return {\n        scale: scaleName,\n        band: band\n    };\n}\n/**\n * Signal that returns the middle of a bin from start and end field. Should only be used with x and y.\n */\nfunction interpolatedPositionSignal({ scaleName, fieldDef, fieldDef2, offset, startSuffix, band = 0.5 }) {\n    const expr = 0 < band && band < 1 ? 'datum' : undefined;\n    const start = vgField(fieldDef, { expr, suffix: startSuffix });\n    const end = fieldDef2 !== undefined ? vgField(fieldDef2, { expr }) : vgField(fieldDef, { suffix: 'end', expr });\n    if (band === 0) {\n        return Object.assign({ scale: scaleName, field: start }, (offset ? { offset } : {}));\n    }\n    else if (band === 1) {\n        return Object.assign({ scale: scaleName, field: end }, (offset ? { offset } : {}));\n    }\n    else {\n        const datum = `${band} * ${start} + ${1 - band} * ${end}`;\n        return Object.assign({ signal: `scale(\"${scaleName}\", ${datum})` }, (offset ? { offset } : {}));\n    }\n}\n/**\n * @returns {VgValueRef} Value Ref for xc / yc or mid point for other channels.\n */\nexport function midPoint({ channel, channelDef, channel2Def, markDef, config, scaleName, scale, stack, offset, defaultRef }) {\n    // TODO: datum support\n    if (channelDef) {\n        /* istanbul ignore else */\n        if (isFieldDef(channelDef)) {\n            if (isTypedFieldDef(channelDef)) {\n                const band = getBand(channel, channelDef, channel2Def, markDef, config, { isMidPoint: true });\n                if (isBinning(channelDef.bin) || (band && channelDef.timeUnit)) {\n                    // Use middle only for x an y to place marks in the center between start and end of the bin range.\n                    // We do not use the mid point for other channels (e.g. size) so that properties of legends and marks match.\n                    if (contains([X, Y], channel) && contains([QUANTITATIVE, TEMPORAL], channelDef.type)) {\n                        if (stack && stack.impute) {\n                            // For stack, we computed bin_mid so we can impute.\n                            return fieldRef(channelDef, scaleName, { binSuffix: 'mid' }, { offset });\n                        }\n                        // For non-stack, we can just calculate bin mid on the fly using signal.\n                        return interpolatedPositionSignal({ scaleName, fieldDef: channelDef, band, offset });\n                    }\n                    return fieldRef(channelDef, scaleName, binRequiresRange(channelDef, channel) ? { binSuffix: 'range' } : {}, {\n                        offset\n                    });\n                }\n                else if (isBinned(channelDef.bin)) {\n                    if (isFieldDef(channel2Def)) {\n                        return interpolatedPositionSignal({ scaleName, fieldDef: channelDef, fieldDef2: channel2Def, band, offset });\n                    }\n                    else {\n                        const channel2 = channel === X ? X2 : Y2;\n                        log.warn(log.message.channelRequiredForBinned(channel2));\n                    }\n                }\n            }\n            if (scale) {\n                const scaleType = scale.get('type');\n                if (hasDiscreteDomain(scaleType)) {\n                    if (scaleType === 'band') {\n                        // For band, to get mid point, need to offset by half of the band\n                        const band = getFirstDefined(isPositionFieldDef(channelDef) ? channelDef.band : undefined, 0.5);\n                        return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { band, offset });\n                    }\n                    return fieldRef(channelDef, scaleName, { binSuffix: 'range' }, { offset });\n                }\n            }\n            return fieldRef(channelDef, scaleName, {}, { offset }); // no need for bin suffix\n        }\n        else if (isValueDef(channelDef)) {\n            const value = channelDef.value;\n            const offsetMixins = offset ? { offset } : {};\n            return Object.assign(Object.assign({}, vgValueRef(channel, value)), offsetMixins);\n        }\n        // If channelDef is neither field def or value def, it's a condition-only def.\n        // In such case, we will use default ref.\n    }\n    return isFunction(defaultRef) ? defaultRef() : defaultRef;\n}\n/**\n * Convert special \"width\" and \"height\" values in Vega-Lite into Vega value ref.\n */\nexport function vgValueRef(channel, value) {\n    if (contains(['x', 'x2'], channel) && value === 'width') {\n        return { field: { group: 'width' } };\n    }\n    else if (contains(['y', 'y2'], channel) && value === 'height') {\n        return { field: { group: 'height' } };\n    }\n    return { value };\n}\nexport function tooltipForEncoding(encoding, config, { reactiveGeom } = {}) {\n    const keyValues = [];\n    const usedKey = {};\n    const toSkip = {};\n    const expr = reactiveGeom ? 'datum.datum' : 'datum';\n    const tooltipTuples = [];\n    function add(fDef, channel) {\n        const mainChannel = getMainRangeChannel(channel);\n        const fieldDef = isTypedFieldDef(fDef)\n            ? fDef\n            : Object.assign(Object.assign({}, fDef), { type: encoding[mainChannel].type // for secondary field def, copy type from main channel\n             });\n        const key = title(fieldDef, config, { allowDisabling: false });\n        let value = text(fieldDef, config, expr).signal;\n        if (channel === 'x' || channel === 'y') {\n            const channel2 = channel === 'x' ? 'x2' : 'y2';\n            const fieldDef2 = getFieldDef(encoding[channel2]);\n            if (isBinned(fieldDef.bin) && fieldDef2) {\n                const startField = vgField(fieldDef, { expr });\n                const endField = vgField(fieldDef2, { expr });\n                value = binFormatExpression(startField, endField, format(fieldDef), config);\n                toSkip[channel2] = true;\n            }\n        }\n        tooltipTuples.push({ channel, key, value });\n    }\n    forEach(encoding, (channelDef, channel) => {\n        if (isFieldDef(channelDef)) {\n            add(channelDef, channel);\n        }\n        else if (hasConditionalFieldDef(channelDef)) {\n            add(channelDef.condition, channel);\n        }\n    });\n    for (const { channel, key, value } of tooltipTuples) {\n        if (!toSkip[channel] && !usedKey[key]) {\n            keyValues.push(`${stringValue(key)}: ${value}`);\n            usedKey[key] = true;\n        }\n    }\n    return keyValues.length ? { signal: `{${keyValues.join(', ')}}` } : undefined;\n}\nexport function text(channelDef, config, expr = 'datum') {\n    // text\n    if (channelDef) {\n        if (isValueDef(channelDef)) {\n            return { value: channelDef.value };\n        }\n        if (isTypedFieldDef(channelDef)) {\n            return formatSignalRef(channelDef, format(channelDef), expr, config);\n        }\n    }\n    return undefined;\n}\nexport function mid(sizeRef) {\n    return Object.assign(Object.assign({}, sizeRef), { mult: 0.5 });\n}\nexport function positionDefault({ markDef, config, defaultRef, channel, scaleName, scale, mark, checkBarAreaWithoutZero: checkBarAreaWithZero }) {\n    return () => {\n        const mainChannel = getMainRangeChannel(channel);\n        const definedValueOrConfig = getFirstDefined(markDef[channel], getMarkConfig(channel, markDef, config));\n        if (definedValueOrConfig !== undefined) {\n            return vgValueRef(channel, definedValueOrConfig);\n        }\n        if (isString(defaultRef)) {\n            if (scaleName) {\n                const scaleType = scale.get('type');\n                if (contains([ScaleType.LOG, ScaleType.TIME, ScaleType.UTC], scaleType)) {\n                    // Log scales cannot have zero.\n                    // Zero in time scale is arbitrary, and does not affect ratio.\n                    // (Time is an interval level of measurement, not ratio).\n                    // See https://en.wikipedia.org/wiki/Level_of_measurement for more info.\n                    if (checkBarAreaWithZero && (mark === 'bar' || mark === 'area')) {\n                        log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, mainChannel, { scaleType }));\n                    }\n                }\n                else {\n                    if (scale.domainDefinitelyIncludesZero()) {\n                        return {\n                            scale: scaleName,\n                            value: 0\n                        };\n                    }\n                    if (checkBarAreaWithZero && (mark === 'bar' || mark === 'area')) {\n                        log.warn(log.message.nonZeroScaleUsedWithLengthMark(mark, mainChannel, { zeroFalse: scale.explicit.zero === false }));\n                    }\n                }\n            }\n            if (defaultRef === 'zeroOrMin') {\n                return mainChannel === 'x' ? { value: 0 } : { field: { group: 'height' } };\n            }\n            else {\n                // zeroOrMax\n                return mainChannel === 'x' ? { field: { group: 'width' } } : { value: 0 };\n            }\n        }\n        return defaultRef;\n    };\n}\n//# sourceMappingURL=valueref.js.map","export const VL_ONLY_GUIDE_CONFIG = ['shortTimeLabels'];\nexport const VL_ONLY_LEGEND_CONFIG = [\n    'gradientHorizontalMaxLength',\n    'gradientHorizontalMinLength',\n    'gradientVerticalMaxLength',\n    'gradientVerticalMinLength'\n];\n//# sourceMappingURL=guide.js.map","import { COMMON_LEGEND_PROPERTY_INDEX } from '../../legend';\nimport { keys } from '../../util';\nimport { Split } from '../split';\nconst LEGEND_COMPONENT_PROPERTY_INDEX = Object.assign(Object.assign({}, COMMON_LEGEND_PROPERTY_INDEX), { labelExpr: 1, \n    // channel scales\n    opacity: 1, shape: 1, stroke: 1, fill: 1, size: 1, strokeWidth: 1, strokeDash: 1, \n    // encode\n    encode: 1 });\nexport const LEGEND_COMPONENT_PROPERTIES = keys(LEGEND_COMPONENT_PROPERTY_INDEX);\nexport class LegendComponent extends Split {\n}\n//# sourceMappingURL=component.js.map","import { COMMON_AXIS_PROPERTIES_INDEX } from '../../axis';\nimport { duplicate, keys } from '../../util';\nimport { Split } from '../split';\nfunction isFalseOrNull(v) {\n    return v === false || v === null;\n}\nconst AXIS_COMPONENT_PROPERTIES_INDEX = Object.assign(Object.assign({ gridScale: 1, scale: 1 }, COMMON_AXIS_PROPERTIES_INDEX), { labelExpr: 1, encode: 1 });\nexport const AXIS_COMPONENT_PROPERTIES = keys(AXIS_COMPONENT_PROPERTIES_INDEX);\nexport class AxisComponent extends Split {\n    constructor(explicit = {}, implicit = {}, mainExtracted = false) {\n        super();\n        this.explicit = explicit;\n        this.implicit = implicit;\n        this.mainExtracted = mainExtracted;\n    }\n    clone() {\n        return new AxisComponent(duplicate(this.explicit), duplicate(this.implicit), this.mainExtracted);\n    }\n    hasAxisPart(part) {\n        // FIXME(https://github.com/vega/vega-lite/issues/2552) this method can be wrong if users use a Vega theme.\n        if (part === 'axis') {\n            // always has the axis container part\n            return true;\n        }\n        if (part === 'grid' || part === 'title') {\n            return !!this.get(part);\n        }\n        // Other parts are enabled by default, so they should not be false or null.\n        return !isFalseOrNull(this.get(part));\n    }\n}\n//# sourceMappingURL=component.js.map","import * as mixins from './mixins';\nimport * as ref from './valueref';\nfunction encodeEntry(model, fixedShape) {\n    const { config, width, height } = model;\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, mixins.baseEncodeEntry(model, {\n        align: 'ignore',\n        baseline: 'ignore',\n        color: 'include',\n        size: 'include',\n        orient: 'ignore'\n    })), mixins.pointPosition('x', model, ref.mid(width))), mixins.pointPosition('y', model, ref.mid(height))), mixins.nonPosition('size', model)), shapeMixins(model, config, fixedShape));\n}\nexport function shapeMixins(model, config, fixedShape) {\n    if (fixedShape) {\n        return { shape: { value: fixedShape } };\n    }\n    return mixins.nonPosition('shape', model);\n}\nexport const point = {\n    vgMark: 'symbol',\n    encodeEntry: (model) => {\n        return encodeEntry(model);\n    }\n};\nexport const circle = {\n    vgMark: 'symbol',\n    encodeEntry: (model) => {\n        return encodeEntry(model, 'circle');\n    }\n};\nexport const square = {\n    vgMark: 'symbol',\n    encodeEntry: (model) => {\n        return encodeEntry(model, 'square');\n    }\n};\n//# sourceMappingURL=point.js.map","import { isArray } from 'vega-util';\nimport { keys } from './util';\nexport function isSignalRef(o) {\n    return !!o['signal'];\n}\nexport function isVgRangeStep(range) {\n    return !!range['step'];\n}\nexport function isDataRefUnionedDomain(domain) {\n    if (!isArray(domain)) {\n        return 'fields' in domain && !('data' in domain);\n    }\n    return false;\n}\nexport function isFieldRefUnionDomain(domain) {\n    if (!isArray(domain)) {\n        return 'fields' in domain && 'data' in domain;\n    }\n    return false;\n}\nexport function isDataRefDomain(domain) {\n    if (!isArray(domain)) {\n        return 'field' in domain && 'data' in domain;\n    }\n    return false;\n}\nconst VG_MARK_CONFIG_INDEX = {\n    opacity: 1,\n    fill: 1,\n    fillOpacity: 1,\n    stroke: 1,\n    strokeCap: 1,\n    strokeWidth: 1,\n    strokeOpacity: 1,\n    strokeDash: 1,\n    strokeDashOffset: 1,\n    strokeJoin: 1,\n    strokeMiterLimit: 1,\n    size: 1,\n    shape: 1,\n    interpolate: 1,\n    tension: 1,\n    orient: 1,\n    align: 1,\n    baseline: 1,\n    text: 1,\n    dir: 1,\n    dx: 1,\n    dy: 1,\n    ellipsis: 1,\n    limit: 1,\n    radius: 1,\n    theta: 1,\n    angle: 1,\n    font: 1,\n    fontSize: 1,\n    fontWeight: 1,\n    fontStyle: 1,\n    cursor: 1,\n    href: 1,\n    tooltip: 1,\n    cornerRadius: 1,\n    x: 1,\n    y: 1,\n    x2: 1,\n    y2: 1,\n    width: 1,\n    height: 1,\n    aspect: 1\n    // commented below are vg channel that do not have mark config.\n    // xc'|'yc'\n    // clip: 1,\n    // endAngle: 1,\n    // innerRadius: 1,\n    // outerRadius: 1,\n    // path: 1,\n    // startAngle: 1,\n    // url: 1,\n};\nexport const VG_MARK_CONFIGS = keys(VG_MARK_CONFIG_INDEX);\n//# sourceMappingURL=vega.schema.js.map","/** Constants and utilities for data type */\n/** Data type based on level of measurement */\nexport const TYPE_INDEX = {\n    quantitative: 1,\n    ordinal: 1,\n    temporal: 1,\n    nominal: 1,\n    geojson: 1\n};\nexport function isType(t) {\n    return !!TYPE_INDEX[t];\n}\nexport const QUANTITATIVE = 'quantitative';\nexport const ORDINAL = 'ordinal';\nexport const TEMPORAL = 'temporal';\nexport const NOMINAL = 'nominal';\nexport const GEOJSON = 'geojson';\n/**\n * Get full, lowercase type name for a given type.\n * @param  type\n * @return Full type name.\n */\nexport function getFullName(type) {\n    if (type) {\n        type = type.toLowerCase();\n        switch (type) {\n            case 'q':\n            case QUANTITATIVE:\n                return 'quantitative';\n            case 't':\n            case TEMPORAL:\n                return 'temporal';\n            case 'o':\n            case ORDINAL:\n                return 'ordinal';\n            case 'n':\n            case NOMINAL:\n                return 'nominal';\n            case GEOJSON:\n                return 'geojson';\n        }\n    }\n    // If we get invalid input, return undefined type.\n    return undefined;\n}\n//# sourceMappingURL=type.js.map"],"sourceRoot":""}