(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{102:function(e,t,i){"use strict";i.d(t,"f",function(){return n}),i.d(t,"d",function(){return o}),i.d(t,"c",function(){return a}),i.d(t,"e",function(){return r}),i.d(t,"b",function(){return s}),i.d(t,"a",function(){return l}),i.d(t,"g",function(){return d});const n={quantitative:1,ordinal:1,temporal:1,nominal:1,geojson:1};const o="quantitative",a="ordinal",r="temporal",s="nominal",l="geojson";function d(e){if(e)switch(e=e.toLowerCase()){case"q":case o:return"quantitative";case"t":case r:return"temporal";case"o":case a:return"ordinal";case"n":case s:return"nominal";case l:return"geojson"}}},113:function(e,t,i){"use strict";i.d(t,"a",function(){return u}),i.d(t,"e",function(){return p}),i.d(t,"b",function(){return h}),i.d(t,"f",function(){return g}),i.d(t,"c",function(){return m}),i.d(t,"d",function(){return b}),i.d(t,"g",function(){return y});var n=i(57),o=i(1),a=i(199),r=i(62),s=i(19),l=i(15),d=i(18),c=i(205),f=i(5);function u(e,t){const i=e&&e[t];return!!i&&(Object(o.z)(i)?Object(f.B)(i,e=>!!e.field):Object(l.l)(i)||Object(l.g)(i))}function p(e){return Object(f.B)(s.a,t=>{if(u(e,t)){const i=e[t];if(Object(o.z)(i))return Object(f.B)(i,e=>!!e.aggregate);{const e=Object(l.d)(i);return e&&!!e.aggregate}}return!1})}function h(e,t){const i=[],o=[],d=[],f=[],u={};return b(e,(p,h)=>{if(Object(l.l)(p)){const{field:g,aggregate:m,timeUnit:b,bin:y}=p,v=n.b(p,["field","aggregate","timeUnit","bin"]);if(m||b||y){const e=Object(l.e)(p),n=e&&e.title,_=Object(l.D)(p,{forAs:!0}),w=Object.assign({},n?[]:{title:Object(l.z)(p,t,{allowDisabling:!0})},v,{field:_}),x="x"===h||"y"===h;if(m&&Object(a.c)(m)){const e={op:m,as:_};g&&(e.field=g),f.push(e)}else if(Object(l.s)(p)&&Object(r.e)(y)){if(o.push({bin:y,field:g,as:_}),i.push(Object(l.D)(p,{binSuffix:"end"})),Object(l.a)(p,h)&&i.push(Object(l.D)(p,{binSuffix:"range"})),x){const e={field:_+"_end"};u[h+"2"]=e}w.bin="binned",Object(s.I)(h)||(w.type="quantitative")}else if(b){d.push({timeUnit:b,field:g,as:_});const e=Object(c.c)(b,t.axis.shortTimeLabels).join(" ");Object(s.G)(h)?w.legend=Object.assign({format:e},w.legend):x?w.axis=Object.assign({format:e},w.axis):"text"!==h&&"tooltip"!==h||(w.format=w.format||e)}m||i.push(_),u[h]=w}else i.push(g),u[h]=e[h]}else u[h]=e[h]}),{bins:o,timeUnits:d,aggregate:f,groupby:i,encoding:u}}function g(e,t){return Object(f.s)(e).reduce((i,n)=>{if(!Object(s.D)(n))return d.e(d.b.invalidEncodingChannel(n)),i;if(!function(e,t,i){const n=Object(s.M)(t,i);if(!n)return!1;if("binned"===n){const i=e["x2"===t?"x":"y"];return!(!Object(l.l)(i)||!Object(l.l)(e[t])||"binned"!==i.bin)}return!0}(e,n,t))return d.e(d.b.incompatibleChannel(n,t)),i;if("size"===n&&"line"===t){const t=Object(l.f)(e[n]);if(t&&t.aggregate)return d.e(d.b.LINE_WITH_VARYING_SIZE),i}if("color"===n&&("fill"in e||"stroke"in e))return d.e(d.b.droppingColor("encoding",{fill:"fill"in e,stroke:"stroke"in e})),i;const a=e[n];if("detail"===n||"order"===n&&!Object(o.z)(a)&&!Object(l.t)(a)||"tooltip"===n&&Object(o.z)(a))a&&(i[n]=(Object(o.z)(a)?a:[a]).reduce((e,t)=>(Object(l.l)(t)?e.push(Object(l.w)(t,n)):d.e(d.b.emptyFieldDef(t,n)),e),[]));else{if("tooltip"===n&&null===a)i[n]=null;else if(!Object(l.l)(a)&&!Object(l.t)(a)&&!Object(l.i)(a))return d.e(d.b.emptyFieldDef(a,n)),i;i[n]=Object(l.u)(a,n)}return i},{})}function m(e){const t=[];for(const i of Object(f.s)(e))if(u(e,i)){const n=e[i];(Object(o.z)(n)?n:[n]).forEach(e=>{Object(l.l)(e)?t.push(e):Object(l.g)(e)&&t.push(e.condition)})}return t}function b(e,t,i){if(e)for(const n of Object(f.s)(e)){const a=e[n];Object(o.z)(a)?a.forEach(e=>{t.call(i,e,n)}):t.call(i,a,n)}}function y(e,t,i,n){return e?Object(f.s)(e).reduce((i,a)=>{const r=e[a];return Object(o.z)(r)?r.reduce((e,i)=>t.call(n,e,i,a),i):t.call(n,i,r,a)},i):i}},125:function(e,t,i){"use strict";i.d(t,"a",function(){return o}),i.d(t,"c",function(){return a}),i.d(t,"d",function(){return r}),i.d(t,"b",function(){return s});var n=i(1);const o="mean";function a(e){return!!e&&!!e.encoding}function r(e){return!(!e||"count"!==e.op&&!e.field)}function s(e){return!!e&&Object(n.z)(e)}},1258:function(e,t,i){"use strict";i.d(t,"a",function(){return p});var n=i(578),o=i(15),a=i(18),r=i(717),s=i(158),l=i(831),d=i(5),c=i(378),f=i(783),u=i(429);function p(e,t={}){t.logger&&a.d(t.logger),t.fieldTitle&&o.y(t.fieldTitle);try{const i=Object(n.a)(Object(d.u)({},t.config,e.config)),p=Object(r.a)(e,i),h=Object(l.b)(e.autosize,i.autosize,Object(s.d)(p)||Object(s.f)(p)),g=Object(c.a)(p,null,"",void 0,void 0,i,"fit"===h.type);return g.parse(),Object(u.b)(g.component.data,g),function(e,t,i={},o){const a=e.config?Object(n.b)(e.config):void 0,r=[].concat(e.assembleSelectionData([]),Object(f.b)(e.component.data,i)),s=e.assembleProjections(),l=e.assembleTitle(),d=e.assembleGroupStyle(),c=e.assembleGroupEncodeEntry(!0);let u=e.assembleLayoutSignals();return u=u.filter(e=>"width"!==e.name&&"height"!==e.name||void 0===e.value||(t[e.name]=+e.value,!1)),{spec:Object.assign({$schema:"https://vega.github.io/schema/vega/v5.json"},e.description?{description:e.description}:{},t,l?{title:l}:{},d?{style:d}:{},c?{encode:{update:c}}:{},{data:r},s.length>0?{projections:s}:{},e.assembleGroup([...u,...e.assembleSelectionTopLevelSignals([])]),a?{config:a}:{},o?{usermeta:o}:{})}}(g,function(e,t,i){return Object.assign({autosize:1===Object(d.s)(i).length&&i.type?i.type:i},Object(l.a)(t),Object(l.a)(e))}(e,i,h),e.datasets,e.usermeta)}finally{t.logger&&a.c(),t.fieldTitle&&o.x()}}},1259:function(e,t,i){"use strict";i.d(t,"a",function(){return r});var n=i(113),o=i(766);const a=new class extends o.a{mapUnit(e,{config:t}){if(e.encoding){const{encoding:i,transform:o}=e,{bins:a,timeUnits:r,aggregate:s,groupby:l,encoding:d}=Object(n.b)(i,t),c=[...o||[],...a,...r,...s.length?[{aggregate:s,groupby:l}]:[]];return Object.assign({},e,c.length>0?{transform:c}:{},{encoding:d})}return e}};function r(e,t){return a.map(e,{config:t})}},1277:function(e){e.exports={$ref:"#/definitions/TopLevelSpec",$schema:"http://json-schema.org/draft-06/schema#",definitions:{Aggregate:{$ref:"#/definitions/AggregateOp"},AggregateOp:{enum:["argmax","argmin","average","count","distinct","max","mean","median","min","missing","q1","q3","ci0","ci1","stderr","stdev","stdevp","sum","valid","values","variance","variancep"],type:"string"},AggregateTransform:{additionalProperties:!1,properties:{aggregate:{description:"Array of objects that define fields to aggregate.",items:{$ref:"#/definitions/AggregatedFieldDef"},type:"array"},groupby:{description:"The data fields to group by. If not specified, a single group containing all data objects will be used.",items:{type:"string"},type:"array"}},required:["aggregate"],type:"object"},AggregatedFieldDef:{additionalProperties:!1,properties:{as:{description:"The output field names to use for each aggregated field.",type:"string"},field:{description:'The data field for which to compute aggregate function. This is required for all aggregation operations except `"count"`.',type:"string"},op:{$ref:"#/definitions/AggregateOp",description:"The aggregation operation to apply to the fields (e.g., sum, average or count).\nSee the [full list of supported aggregation operations](https://vega.github.io/vega-lite/docs/aggregate.html#ops)\nfor more information."}},required:["op","as"],type:"object"},Align:{enum:["left","center","right"],type:"string"},AnyMark:{anyOf:[{$ref:"#/definitions/CompositeMark"},{$ref:"#/definitions/CompositeMarkDef"},{$ref:"#/definitions/Mark"},{$ref:"#/definitions/MarkDef"}]},AreaConfig:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},filled:{description:"Whether the mark's color should be used as fill color instead of stroke color.\n\n__Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",type:"boolean"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},line:{anyOf:[{type:"boolean"},{$ref:"#/definitions/OverlayMarkDef"}],description:"A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.\n\n- If this value is an empty object (`{}`) or `true`, lines with default properties will be used.\n\n- If this value is `false`, no lines would be automatically added to area marks.\n\n__Default value:__ `false`."},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},order:{description:"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.",type:["null","boolean"]},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},point:{anyOf:[{type:"boolean"},{$ref:"#/definitions/OverlayMarkDef"},{enum:["transparent"],type:"string"}],description:'A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\n\n- If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).\n\n- If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\n\n- If this property is `false`, no points would be automatically added to line or area marks.\n\n__Default value:__ `false`.'},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},size:{description:"Default size for marks.\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n- For `bar`, this represents the band size of the bar, in pixels.\n- For `text`, this represents the font size, in pixels.\n\n__Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},tooltip:{anyOf:[{type:"string"},{$ref:"#/definitions/TooltipContent"},{type:"null"}],description:'The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n\n- If `tooltip` is `{"content": "encoding"}`, then all fields from `encoding` will be used.\n- If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.\n- If set to `null`, then no tooltip will be used.'},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"}},type:"object"},AutoSizeParams:{additionalProperties:!1,properties:{contains:{description:'Determines how size calculation should be performed, one of `"content"` or `"padding"`. The default setting (`"content"`) interprets the width and height settings as the data rectangle (plotting) dimensions, to which padding is then added. In contrast, the `"padding"` setting includes the padding within the view size calculations, such that the width and height settings indicate the **total** intended size of the view.\n\n__Default value__: `"content"`',enum:["content","padding"],type:"string"},resize:{description:"A boolean flag indicating if autosize layout should be re-calculated on every view update.\n\n__Default value__: `false`",type:"boolean"},type:{$ref:"#/definitions/AutosizeType",description:'The sizing format type. One of `"pad"`, `"fit"` or `"none"`. See the [autosize type](https://vega.github.io/vega-lite/docs/size.html#autosize) documentation for descriptions of each.\n\n__Default value__: `"pad"`'}},type:"object"},AutosizeType:{enum:["pad","fit","none"],type:"string"},Axis:{additionalProperties:!1,properties:{bandPosition:{description:"An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n\n  __Default value:__ `0.5`",type:"number"},domain:{description:"A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.\n\n__Default value:__ `true`",type:"boolean"},domainColor:{$ref:"#/definitions/Color",description:'Color of axis domain line.\n\n__Default value:__ `"gray"`.'},domainDash:{description:"An array of alternating [stroke, space] lengths for dashed domain lines.",items:{type:"number"},type:"array"},domainDashOffset:{description:"The pixel offset at which to start drawing with the domain dash array.",type:"number"},domainOpacity:{description:"Opacity of the axis domain line.",type:"number"},domainWidth:{description:"Stroke width of axis domain line\n\n__Default value:__ `1`",type:"number"},format:{description:"The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field. To override the default type, set `formatType`.\n\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more information.\n\n__Default value:__  derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for quantitative fields and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for temporal fields.",type:"string"},formatType:{description:"The format type for labels (number or time).",enum:["number","time"],type:"string"},grid:{description:"A boolean flag indicating if grid lines should be included as part of the axis\n\n__Default value:__ `true` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, `false`.",type:"boolean"},gridColor:{$ref:"#/definitions/Color",description:'Color of gridlines.\n\n__Default value:__ `"lightGray"`.'},gridDash:{description:"An array of alternating [stroke, space] lengths for dashed grid lines.",items:{type:"number"},type:"array"},gridDashOffset:{description:"The pixel offset at which to start drawing with the grid dash array.",type:"number"},gridOpacity:{description:"The stroke opacity of grid (value between [0,1])\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},gridWidth:{description:"The grid width, in pixels.\n\n__Default value:__ `1`",minimum:0,type:"number"},labelAlign:{$ref:"#/definitions/Align",description:"Horizontal text alignment of axis tick labels, overriding the default setting for the current axis orientation."},labelAngle:{description:"The rotation angle of the axis labels.\n\n__Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.",maximum:360,minimum:-360,type:"number"},labelBaseline:{$ref:"#/definitions/TextBaseline",description:'Vertical text baseline of axis tick labels, overriding the default setting for the current axis orientation. Can be `"top"`, `"middle"`, `"bottom"`, or `"alphabetic"`.'},labelBound:{description:"Indicates if labels should be hidden if they exceed the axis range. If `false` (the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.\n\n__Default value:__ `false`.",type:["number","boolean"]},labelColor:{$ref:"#/definitions/Color",description:"The color of the tick label, can be in hex color code or regular color name."},labelFlush:{description:"Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.\n\n__Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.",type:["boolean","number"]},labelFlushOffset:{description:"Indicates the number of pixels by which to offset flush-adjusted labels. For example, a value of `2` will push flush-adjusted labels 2 pixels outward from the center of the axis. Offsets can help the labels better visually group with corresponding axis ticks.\n\n__Default value:__ `0`.",type:"number"},labelFont:{description:"The font of the tick label.",type:"string"},labelFontSize:{description:"The font size of the label, in pixels.",minimum:0,type:"number"},labelFontStyle:{$ref:"#/definitions/FontStyle",description:"Font style of the title."},labelFontWeight:{$ref:"#/definitions/FontWeight",description:"Font weight of axis tick labels."},labelLimit:{description:"Maximum allowed pixel width of axis tick labels.\n\n__Default value:__ `180`",type:"number"},labelOpacity:{description:"The opacity of the labels.",type:"number"},labelOverlap:{$ref:"#/definitions/LabelOverlap",description:'The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).\n\n__Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.'},labelPadding:{description:"The padding, in pixels, between axis and text labels.\n\n__Default value:__ `2`",type:"number"},labelSeparation:{description:"The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.",type:"number"},labels:{description:"A boolean flag indicating if labels should be included as part of the axis.\n\n__Default value:__ `true`.",type:"boolean"},maxExtent:{description:"The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.\n\n__Default value:__ `undefined`.",type:"number"},minExtent:{description:"The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.\n\n__Default value:__ `30` for y-axis; `undefined` for x-axis.",type:"number"},offset:{description:"The offset, in pixels, by which to displace the axis from the edge of the enclosing group or data rectangle.\n\n__Default value:__ derived from the [axis config](https://vega.github.io/vega-lite/docs/config.html#facet-scale-config)'s `offset` (`0` by default)",type:"number"},orient:{$ref:"#/definitions/AxisOrient",description:'The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).\n\n__Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.'},position:{description:"The anchor position of the axis in pixels. For x-axes with top or bottom orientation, this sets the axis group x coordinate. For y-axes with left or right orientation, this sets the axis group y coordinate.\n\n__Default value__: `0`",type:"number"},tickColor:{$ref:"#/definitions/Color",description:'The color of the axis\'s tick.\n\n__Default value:__ `"gray"`'},tickCount:{description:'A desired number of ticks, for axes visualizing quantitative scales. The resulting number may be different so that values are "nice" (multiples of 2, 5, 10) and lie within the underlying scale\'s range.',type:"number"},tickDash:{description:"An array of alternating [stroke, space] lengths for dashed tick mark lines.",items:{type:"number"},type:"array"},tickDashOffset:{description:"The pixel offset at which to start drawing with the tick mark dash array.",type:"number"},tickExtra:{description:'Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for `band` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with `"bandPosition": 1` and an axis `"padding"` value of `0`.',type:"boolean"},tickMinStep:{description:"The minimum desired step between axis ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.\n\n__Default value__: `undefined`",type:"number"},tickOffset:{description:"Position offset in pixels to apply to ticks, labels, and gridlines.",type:"number"},tickOpacity:{description:"Opacity of the ticks.",type:"number"},tickRound:{description:"Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n\n__Default value:__ `true`",type:"boolean"},tickSize:{description:"The size in pixels of axis ticks.\n\n__Default value:__ `5`",minimum:0,type:"number"},tickWidth:{description:"The width, in pixels, of ticks.\n\n__Default value:__ `1`",minimum:0,type:"number"},ticks:{description:"Boolean value that determines whether the axis should include ticks.\n\n__Default value:__ `true`",type:"boolean"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},titleAlign:{$ref:"#/definitions/Align",description:"Horizontal text alignment of axis titles."},titleAnchor:{$ref:"#/definitions/TitleAnchor",description:"Text anchor position for placing axis titles."},titleAngle:{description:"Angle in degrees of axis titles.",type:"number"},titleBaseline:{$ref:"#/definitions/TextBaseline",description:"Vertical text baseline for axis titles."},titleColor:{$ref:"#/definitions/Color",description:"Color of the title, can be in hex color code or regular color name."},titleFont:{description:'Font of the title. (e.g., `"Helvetica Neue"`).',type:"string"},titleFontSize:{description:"Font size of the title.",minimum:0,type:"number"},titleFontStyle:{$ref:"#/definitions/FontStyle",description:"Font style of the title."},titleFontWeight:{$ref:"#/definitions/FontWeight",description:'Font weight of the title.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},titleLimit:{description:"Maximum allowed pixel width of axis titles.",minimum:0,type:"number"},titleOpacity:{description:"Opacity of the axis title.",type:"number"},titlePadding:{description:"The padding, in pixels, between title and axis.",type:"number"},titleX:{description:"X-coordinate of the axis title relative to the axis group.",type:"number"},titleY:{description:"Y-coordinate of the axis title relative to the axis group.",type:"number"},values:{anyOf:[{items:{type:"number"},type:"array"},{items:{type:"string"},type:"array"},{items:{type:"boolean"},type:"array"},{items:{$ref:"#/definitions/DateTime"},type:"array"}],description:"Explicitly set the visible axis tick values."},zindex:{description:'A non-positive integer indicating z-index of the axis.\nIf zindex is 0, axes should be drawn behind all chart elements.\nTo put them in front, use `"zindex = 1"`.\n\n__Default value:__ `1` (in front of the marks) for actual axis and `0` (behind the marks) for grids.',minimum:0,type:"number"}},type:"object"},AxisConfig:{additionalProperties:!1,properties:{bandPosition:{description:"An interpolation fraction indicating where, for `band` scales, axis ticks should be positioned. A value of `0` places ticks at the left edge of their bands. A value of `0.5` places ticks in the middle of their bands.\n\n  __Default value:__ `0.5`",type:"number"},domain:{description:"A boolean flag indicating if the domain (the axis baseline) should be included as part of the axis.\n\n__Default value:__ `true`",type:"boolean"},domainColor:{$ref:"#/definitions/Color",description:'Color of axis domain line.\n\n__Default value:__ `"gray"`.'},domainDash:{description:"An array of alternating [stroke, space] lengths for dashed domain lines.",items:{type:"number"},type:"array"},domainDashOffset:{description:"The pixel offset at which to start drawing with the domain dash array.",type:"number"},domainOpacity:{description:"Opacity of the axis domain line.",type:"number"},domainWidth:{description:"Stroke width of axis domain line\n\n__Default value:__ `1`",type:"number"},grid:{description:"A boolean flag indicating if grid lines should be included as part of the axis\n\n__Default value:__ `true` for [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous) that are not binned; otherwise, `false`.",type:"boolean"},gridColor:{$ref:"#/definitions/Color",description:'Color of gridlines.\n\n__Default value:__ `"lightGray"`.'},gridDash:{description:"An array of alternating [stroke, space] lengths for dashed grid lines.",items:{type:"number"},type:"array"},gridDashOffset:{description:"The pixel offset at which to start drawing with the grid dash array.",type:"number"},gridOpacity:{description:"The stroke opacity of grid (value between [0,1])\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},gridWidth:{description:"The grid width, in pixels.\n\n__Default value:__ `1`",minimum:0,type:"number"},labelAlign:{$ref:"#/definitions/Align",description:"Horizontal text alignment of axis tick labels, overriding the default setting for the current axis orientation."},labelAngle:{description:"The rotation angle of the axis labels.\n\n__Default value:__ `-90` for nominal and ordinal fields; `0` otherwise.",maximum:360,minimum:-360,type:"number"},labelBaseline:{$ref:"#/definitions/TextBaseline",description:'Vertical text baseline of axis tick labels, overriding the default setting for the current axis orientation. Can be `"top"`, `"middle"`, `"bottom"`, or `"alphabetic"`.'},labelBound:{description:"Indicates if labels should be hidden if they exceed the axis range. If `false` (the default) no bounds overlap analysis is performed. If `true`, labels will be hidden if they exceed the axis range by more than 1 pixel. If this property is a number, it specifies the pixel tolerance: the maximum amount by which a label bounding box may exceed the axis range.\n\n__Default value:__ `false`.",type:["number","boolean"]},labelColor:{$ref:"#/definitions/Color",description:"The color of the tick label, can be in hex color code or regular color name."},labelFlush:{description:"Indicates if the first and last axis labels should be aligned flush with the scale range. Flush alignment for a horizontal axis will left-align the first label and right-align the last label. For vertical axes, bottom and top text baselines are applied instead. If this property is a number, it also indicates the number of pixels by which to offset the first and last labels; for example, a value of 2 will flush-align the first and last labels and also push them 2 pixels outward from the center of the axis. The additional adjustment can sometimes help the labels better visually group with corresponding axis ticks.\n\n__Default value:__ `true` for axis of a continuous x-scale. Otherwise, `false`.",type:["boolean","number"]},labelFlushOffset:{description:"Indicates the number of pixels by which to offset flush-adjusted labels. For example, a value of `2` will push flush-adjusted labels 2 pixels outward from the center of the axis. Offsets can help the labels better visually group with corresponding axis ticks.\n\n__Default value:__ `0`.",type:"number"},labelFont:{description:"The font of the tick label.",type:"string"},labelFontSize:{description:"The font size of the label, in pixels.",minimum:0,type:"number"},labelFontStyle:{$ref:"#/definitions/FontStyle",description:"Font style of the title."},labelFontWeight:{$ref:"#/definitions/FontWeight",description:"Font weight of axis tick labels."},labelLimit:{description:"Maximum allowed pixel width of axis tick labels.\n\n__Default value:__ `180`",type:"number"},labelOpacity:{description:"The opacity of the labels.",type:"number"},labelOverlap:{$ref:"#/definitions/LabelOverlap",description:'The strategy to use for resolving overlap of axis labels. If `false` (the default), no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used (this works well for standard linear axes). If set to `"greedy"`, a linear scan of the labels is performed, removing any labels that overlaps with the last visible label (this often works better for log-scaled axes).\n\n__Default value:__ `true` for non-nominal fields with non-log scales; `"greedy"` for log scales; otherwise `false`.'},labelPadding:{description:"The padding, in pixels, between axis and text labels.\n\n__Default value:__ `2`",type:"number"},labelSeparation:{description:"The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.",type:"number"},labels:{description:"A boolean flag indicating if labels should be included as part of the axis.\n\n__Default value:__ `true`.",type:"boolean"},maxExtent:{description:"The maximum extent in pixels that axis ticks and labels should use. This determines a maximum offset value for axis titles.\n\n__Default value:__ `undefined`.",type:"number"},minExtent:{description:"The minimum extent in pixels that axis ticks and labels should use. This determines a minimum offset value for axis titles.\n\n__Default value:__ `30` for y-axis; `undefined` for x-axis.",type:"number"},orient:{$ref:"#/definitions/AxisOrient",description:'The orientation of the axis. One of `"top"`, `"bottom"`, `"left"` or `"right"`. The orientation can be used to further specialize the axis type (e.g., a y-axis oriented towards the right edge of the chart).\n\n__Default value:__ `"bottom"` for x-axes and `"left"` for y-axes.'},shortTimeLabels:{description:"Whether month names and weekday names should be abbreviated.\n\n__Default value:__  `false`",type:"boolean"},tickColor:{$ref:"#/definitions/Color",description:'The color of the axis\'s tick.\n\n__Default value:__ `"gray"`'},tickDash:{description:"An array of alternating [stroke, space] lengths for dashed tick mark lines.",items:{type:"number"},type:"array"},tickDashOffset:{description:"The pixel offset at which to start drawing with the tick mark dash array.",type:"number"},tickExtra:{description:'Boolean flag indicating if an extra axis tick should be added for the initial position of the axis. This flag is useful for styling axes for `band` scales such that ticks are placed on band boundaries rather in the middle of a band. Use in conjunction with `"bandPosition": 1` and an axis `"padding"` value of `0`.',type:"boolean"},tickOffset:{description:"Position offset in pixels to apply to ticks, labels, and gridlines.",type:"number"},tickOpacity:{description:"Opacity of the ticks.",type:"number"},tickRound:{description:"Boolean flag indicating if pixel position values should be rounded to the nearest integer.\n\n__Default value:__ `true`",type:"boolean"},tickSize:{description:"The size in pixels of axis ticks.\n\n__Default value:__ `5`",minimum:0,type:"number"},tickWidth:{description:"The width, in pixels, of ticks.\n\n__Default value:__ `1`",minimum:0,type:"number"},ticks:{description:"Boolean value that determines whether the axis should include ticks.\n\n__Default value:__ `true`",type:"boolean"},title:{description:"Set to null to disable title for the axis, legend, or header.",type:"null"},titleAlign:{$ref:"#/definitions/Align",description:"Horizontal text alignment of axis titles."},titleAnchor:{$ref:"#/definitions/TitleAnchor",description:"Text anchor position for placing axis titles."},titleAngle:{description:"Angle in degrees of axis titles.",type:"number"},titleBaseline:{$ref:"#/definitions/TextBaseline",description:"Vertical text baseline for axis titles."},titleColor:{$ref:"#/definitions/Color",description:"Color of the title, can be in hex color code or regular color name."},titleFont:{description:'Font of the title. (e.g., `"Helvetica Neue"`).',type:"string"},titleFontSize:{description:"Font size of the title.",minimum:0,type:"number"},titleFontStyle:{$ref:"#/definitions/FontStyle",description:"Font style of the title."},titleFontWeight:{$ref:"#/definitions/FontWeight",description:'Font weight of the title.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},titleLimit:{description:"Maximum allowed pixel width of axis titles.",minimum:0,type:"number"},titleOpacity:{description:"Opacity of the axis title.",type:"number"},titlePadding:{description:"The padding, in pixels, between title and axis.",type:"number"},titleX:{description:"X-coordinate of the axis title relative to the axis group.",type:"number"},titleY:{description:"Y-coordinate of the axis title relative to the axis group.",type:"number"}},type:"object"},AxisOrient:{enum:["top","bottom","left","right"],type:"string"},AxisResolveMap:{additionalProperties:!1,properties:{x:{$ref:"#/definitions/ResolveMode"},y:{$ref:"#/definitions/ResolveMode"}},type:"object"},BarConfig:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},binSpacing:{description:"Offset between bars for binned field.  Ideal value for this is either 0 (Preferred by statisticians) or 1 (Vega-Lite Default, D3 example style).\n\n__Default value:__ `1`",minimum:0,type:"number"},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},continuousBandSize:{description:"The default size of the bars on continuous scales.\n\n__Default value:__ `5`",minimum:0,type:"number"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},discreteBandSize:{description:"The default size of the bars with discrete dimensions.  If unspecified, the default size is  `bandSize-1`,\nwhich provides 1 pixel offset between bars.",minimum:0,type:"number"},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},filled:{description:"Whether the mark's color should be used as fill color instead of stroke color.\n\n__Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",type:"boolean"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},order:{description:"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.",type:["null","boolean"]},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},size:{description:"Default size for marks.\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n- For `bar`, this represents the band size of the bar, in pixels.\n- For `text`, this represents the font size, in pixels.\n\n__Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},tooltip:{anyOf:[{type:"string"},{$ref:"#/definitions/TooltipContent"},{type:"null"}],description:'The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n\n- If `tooltip` is `{"content": "encoding"}`, then all fields from `encoding` will be used.\n- If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.\n- If set to `null`, then no tooltip will be used.'},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"}},type:"object"},BaseBinding:{additionalProperties:!1,properties:{debounce:{type:"number"},element:{$ref:"#/definitions/Element"},name:{type:"string"},type:{type:"string"}},type:"object"},BaseLegendLayout:{additionalProperties:!1,properties:{anchor:{$ref:"#/definitions/TitleAnchor",description:"The anchor point for legend orient group layout."},bounds:{$ref:"#/definitions/LayoutBounds",description:"The bounds calculation to use for legend orient group layout."},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/SignalRef"}],description:"A flag to center legends within a shared orient group."},direction:{anyOf:[{$ref:"#/definitions/Orientation"},{$ref:"#/definitions/SignalRef"}],description:"The layout direction for legend orient group layout."},margin:{anyOf:[{type:"number"},{$ref:"#/definitions/SignalRef"}],description:"The pixel margin between legends within a orient group."},offset:{anyOf:[{type:"number"},{$ref:"#/definitions/SignalRef"}],description:"The pixel offset from the chart body for a legend orient group."}},type:"object"},BaseMarkConfig:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},size:{description:"The pixel area each the point/circle/square.\nFor example: in the case of circles, the radius is determined in part by the square root of the size value.\n\n__Default value:__ `30`",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},tooltip:{description:"The tooltip text to show upon mouse hover."},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"}},type:"object"},BaseTitleConfig:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align"},anchor:{$ref:"#/definitions/TitleAnchor",description:'The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.'},angle:{description:"Angle in degrees of title text.",type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'Vertical text baseline for title text. One of `"top"`, `"middle"`, `"bottom"`, or `"alphabetic"`.'},color:{$ref:"#/definitions/Color",description:"Text color for title text."},dx:{description:"Delta offset for title text x-coordinate.",type:"number"},dy:{description:"Delta offset for title text y-coordinate.",type:"number"},font:{description:"Font name for title text.",type:"string"},fontSize:{description:"Font size in pixels for title text.\n\n__Default value:__ `10`.",minimum:0,type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:"Font style for title text."},fontWeight:{$ref:"#/definitions/FontWeight",description:'Font weight for title text.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},frame:{$ref:"#/definitions/TitleFrame",description:'The reference frame for the anchor position, one of `"bounds"` (to anchor relative to the full bounding box) or `"group"` (to anchor relative to the group width or height).'},limit:{description:"The maximum allowed length in pixels of legend labels.",minimum:0,type:"number"},offset:{description:"The orthogonal offset in pixels by which to displace the title from its position along the edge of the chart.",type:"number"},orient:{$ref:"#/definitions/TitleOrient",description:'Default title orientation (`"top"`, `"bottom"`, `"left"`, or `"right"`)'}},type:"object"},Baseline:{enum:["top","middle","bottom"],type:"string"},BinParams:{additionalProperties:!1,description:"Binning properties or boolean flag for determining whether to bin data or not.",properties:{anchor:{description:"A value in the binned domain at which to anchor the bins, shifting the bin boundaries if necessary to ensure that a boundary aligns with the anchor value.\n\n__Default Value:__ the minimum bin extent value",type:"number"},base:{description:"The number base to use for automatic bin determination (default is base 10).\n\n__Default value:__ `10`",type:"number"},binned:{description:"When set to true, Vega-Lite treats the input data as already binned.",type:"boolean"},divide:{description:"Scale factors indicating allowable subdivisions. The default value is [5, 2], which indicates that for base 10 numbers (the default base), the method may consider dividing bin sizes by 5 and/or 2. For example, for an initial step size of 10, the method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1 (= 10/(5*2)) might also satisfy the given constraints.\n\n__Default value:__ `[5, 2]`",items:{type:"number"},minItems:1,type:"array"},extent:{description:"A two-element (`[min, max]`) array indicating the range of desired bin values.",items:{type:"number"},maxItems:2,minItems:2,type:"array"},maxbins:{description:"Maximum number of bins.\n\n__Default value:__ `6` for `row`, `column` and `shape` channels; `10` for other channels",minimum:2,type:"number"},minstep:{description:"A minimum allowable step size (particularly useful for integer values).",type:"number"},nice:{description:"If true (the default), attempts to make the bin boundaries use human-friendly boundaries, such as multiples of ten.",type:"boolean"},step:{description:"An exact step size to use between bins.\n\n__Note:__ If provided, options such as maxbins will be ignored.",type:"number"},steps:{description:"An array of allowable step sizes to choose from.",items:{type:"number"},minItems:1,type:"array"}},type:"object"},BinTransform:{additionalProperties:!1,properties:{as:{anyOf:[{type:"string"},{items:{type:"string"},type:"array"}],description:"The output fields at which to write the start and end bin values."},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"}],description:"An object indicating bin properties, or simply `true` for using default bin parameters."},field:{description:"The data field to bin.",type:"string"}},required:["bin","field","as"],type:"object"},BindCheckbox:{additionalProperties:!1,properties:{debounce:{type:"number"},element:{$ref:"#/definitions/Element"},input:{enum:["checkbox"],type:"string"},name:{type:"string"},type:{type:"string"}},required:["input"],type:"object"},BindRadioSelect:{additionalProperties:!1,properties:{debounce:{type:"number"},element:{$ref:"#/definitions/Element"},input:{enum:["radio","select"],type:"string"},name:{type:"string"},options:{items:{},type:"array"},type:{type:"string"}},required:["input","options"],type:"object"},BindRange:{additionalProperties:!1,properties:{debounce:{type:"number"},element:{$ref:"#/definitions/Element"},input:{enum:["range"],type:"string"},max:{type:"number"},min:{type:"number"},name:{type:"string"},step:{type:"number"},type:{type:"string"}},required:["input"],type:"object"},Binding:{anyOf:[{$ref:"#/definitions/BaseBinding"},{$ref:"#/definitions/BindCheckbox"},{$ref:"#/definitions/BindRadioSelect"},{$ref:"#/definitions/BindRange"}]},BoxPlot:{enum:["boxplot"],type:"string"},BoxPlotConfig:{additionalProperties:!1,properties:{box:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},extent:{anyOf:[{enum:["min-max"],type:"string"},{type:"number"}],description:'The extent of the whiskers. Available options include:\n- `"min-max"`: min and max are the lower and upper whiskers respectively.\n- A number representing multiple of the interquartile range.  This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).\n\n__Default value:__ `1.5`.'},median:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},outliers:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},rule:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},size:{description:"Size of the box and median tick of a box plot",type:"number"},ticks:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]}},type:"object"},BoxPlotDef:{additionalProperties:!1,properties:{box:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},clip:{description:"Whether a composite mark be clipped to the enclosing group’s width and height.",type:"boolean"},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},extent:{anyOf:[{enum:["min-max"],type:"string"},{type:"number"}],description:'The extent of the whiskers. Available options include:\n- `"min-max"`: min and max are the lower and upper whiskers respectively.\n- A number representing multiple of the interquartile range.  This number will be multiplied by the IQR to determine whisker boundary, which spans from the smallest data to the largest data within the range _[Q1 - k * IQR, Q3 + k * IQR]_ where _Q1_ and _Q3_ are the first and third quartiles while _IQR_ is the interquartile range (_Q3-Q1_).\n\n__Default value:__ `1.5`.'},median:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},opacity:{description:"The opacity (value between [0,1]) of the mark.",type:"number"},orient:{$ref:"#/definitions/Orientation",description:'Orientation of the box plot.  This is normally automatically determined based on types of fields on x and y channels. However, an explicit `orient` be specified when the orientation is ambiguous.\n\n__Default value:__ `"vertical"`.'},outliers:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},rule:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},size:{description:"Size of the box and median tick of a box plot",type:"number"},ticks:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},type:{$ref:"#/definitions/BoxPlot",description:'The mark type. This could a primitive mark type\n(one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,\n`"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`)\nor a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).'}},required:["type"],type:"object"},BrushConfig:{additionalProperties:!1,properties:{fill:{description:"The fill color of the interval mark.\n\n__Default value:__ `#333333`",type:"string"},fillOpacity:{description:"The fill opacity of the interval mark (a value between 0 and 1).\n\n__Default value:__ `0.125`",type:"number"},stroke:{description:"The stroke color of the interval mark.\n\n__Default value:__ `#ffffff`",type:"string"},strokeDash:{description:"An array of alternating stroke and space lengths,\nfor creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) with which to begin drawing the stroke dash array.",type:"number"},strokeOpacity:{description:"The stroke opacity of the interval mark (a value between 0 and 1).",type:"number"},strokeWidth:{description:"The stroke width of the interval mark.",type:"number"}},type:"object"},CalculateTransform:{additionalProperties:!1,properties:{as:{description:"The field for storing the computed formula value.",type:"string"},calculate:{description:"A [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string. Use the variable `datum` to refer to the current data object.",type:"string"}},required:["calculate","as"],type:"object"},Color:{type:"string"},ColorFieldDefWithCondition:{$ref:"#/definitions/FieldDefWithCondition<MarkPropFieldDef,(string|null)>"},ColorValueDefWithCondition:{$ref:"#/definitions/ValueDefWithCondition<MarkPropFieldDef,(string|null)>"},Encoding:{additionalProperties:!1,properties:{color:{anyOf:[{$ref:"#/definitions/ColorFieldDefWithCondition"},{$ref:"#/definitions/ColorValueDefWithCondition"}],description:'Color of the marks – either fill or stroke color based on  the `filled` property of mark definition.\nBy default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,\n`"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and `"point"`.\n\n__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)\'s `color` property.\n\n_Note:_\n1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels.  If either `fill` or `stroke` channel is specified, `color` channel will be ignored.\n2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).'},detail:{anyOf:[{$ref:"#/definitions/FieldDef"},{items:{$ref:"#/definitions/FieldDef"},type:"array"}],description:"Additional levels of detail for grouping data in aggregate views and\nin line, trail, and area marks without mapping data to a specific visual channel."},fill:{anyOf:[{$ref:"#/definitions/ColorFieldDefWithCondition"},{$ref:"#/definitions/ColorValueDefWithCondition"}],description:"Fill color of the marks.\n__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `color` property.\n\n_Note:_ When using `fill` channel, `color ` channel will be ignored. To customize both fill and stroke, please use `fill` and `stroke` channels (not `fill` and `color`)."},fillOpacity:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:"Fill opacity of the marks.\n\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `fillOpacity` property."},href:{anyOf:[{$ref:"#/definitions/StringFieldDefWithCondition"},{$ref:"#/definitions/StringValueDefWithCondition"}],description:"A URL to load upon mouse click."},key:{$ref:"#/definitions/FieldDef",description:"A data field to use as a unique key for data binding. When a visualization’s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data."},latitude:{$ref:"#/definitions/LatLongFieldDef",description:"Latitude position of geographically projected marks."},latitude2:{$ref:"#/definitions/SecondaryFieldDef",description:'Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.'},longitude:{$ref:"#/definitions/LatLongFieldDef",description:"Longitude position of geographically projected marks."},longitude2:{$ref:"#/definitions/SecondaryFieldDef",description:'Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.'},opacity:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:"Opacity of the marks.\n\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `opacity` property."},order:{anyOf:[{$ref:"#/definitions/OrderFieldDef"},{items:{$ref:"#/definitions/OrderFieldDef"},type:"array"},{$ref:"#/definitions/NumberValueDef"}],description:'Order of the marks.\n- For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).\n- For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html).  Setting `order` to `{"value": null}` makes the line marks use the original order in the data sources.\n- Otherwise, this `order` channel encodes layer order of the marks.\n\n__Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.'},shape:{anyOf:[{$ref:"#/definitions/ShapeFieldDefWithCondition"},{$ref:"#/definitions/ShapeValueDefWithCondition"}],description:'Shape of the mark.\n\n1. For `point` marks the supported values include:\n   - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n   - the line symbol `"stroke"`\n   - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n2. For `geoshape` marks it should be a field definition of the geojson data\n\n__Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)\'s `shape` property. (`"circle"` if unset.)'},size:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:'Size of the mark.\n- For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.\n- For `"bar"` and `"tick"` – the bar and tick\'s size.\n- For `"text"` – the text\'s font size.\n- Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of line with varying size)'},stroke:{anyOf:[{$ref:"#/definitions/ColorFieldDefWithCondition"},{$ref:"#/definitions/ColorValueDefWithCondition"}],description:"Stroke color of the marks.\n__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `color` property.\n\n_Note:_ When using `stroke` channel, `color ` channel will be ignored. To customize both stroke and fill, please use `stroke` and `fill` channels (not `stroke` and `color`)."},strokeOpacity:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:"Stroke opacity of the marks.\n\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `strokeOpacity` property."},strokeWidth:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:"Stroke width of the marks.\n\n__Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `strokeWidth` property."},text:{anyOf:[{$ref:"#/definitions/TextFieldDefWithCondition"},{$ref:"#/definitions/TextValueDefWithCondition"}],description:"Text of the `text` mark."},tooltip:{anyOf:[{$ref:"#/definitions/TextFieldDefWithCondition"},{$ref:"#/definitions/TextValueDefWithCondition"},{items:{$ref:"#/definitions/TextFieldDef"},type:"array"},{type:"null"}],description:"The tooltip text to show upon mouse hover."},x:{anyOf:[{$ref:"#/definitions/PositionFieldDef"},{$ref:"#/definitions/XValueDef"}],description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.\n\nThe `value` of this channel can be a number or a string `"width"`.'},x2:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/XValueDef"}],description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.\n\nThe `value` of this channel can be a number or a string `"width"`.'},xError:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/NumberValueDef"}],description:'Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.'},xError2:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/NumberValueDef"}],description:'Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.'},y:{anyOf:[{$ref:"#/definitions/PositionFieldDef"},{$ref:"#/definitions/YValueDef"}],description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`\n\nThe `value` of this channel can be a number or a string `"height"`.'},y2:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/YValueDef"}],description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.\n\nThe `value` of this channel can be a number or a string `"height"`.'},yError:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/NumberValueDef"}],description:'Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.'},yError2:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/NumberValueDef"}],description:'Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.'}},type:"object"},CompositeMark:{anyOf:[{$ref:"#/definitions/BoxPlot"},{$ref:"#/definitions/ErrorBar"},{$ref:"#/definitions/ErrorBand"}]},CompositeMarkDef:{anyOf:[{$ref:"#/definitions/BoxPlotDef"},{$ref:"#/definitions/ErrorBarDef"},{$ref:"#/definitions/ErrorBandDef"}]},CompositionConfig:{additionalProperties:!1,properties:{columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},spacing:{description:"The default spacing in pixels between composed sub-views.\n\n__Default value__: `20`",type:"number"}},type:"object"},'ConditionOnlyDef<MarkPropFieldDef<"nominal">>':{additionalProperties:!1,description:"A Condition<ValueDef | FieldDef> only definition.\n{\n   condition: {field: ...} | {value: ...}\n}",properties:{condition:{anyOf:[{$ref:'#/definitions/ConditionalMarkPropFieldDef<"nominal">'},{$ref:"#/definitions/ConditionalValueDef"},{items:{$ref:"#/definitions/ConditionalValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."}},required:["condition"],type:"object"},"ConditionOnlyDef<MarkPropFieldDef>":{additionalProperties:!1,description:"A Condition<ValueDef | FieldDef> only definition.\n{\n   condition: {field: ...} | {value: ...}\n}",properties:{condition:{anyOf:[{$ref:"#/definitions/ConditionalMarkPropFieldDef"},{$ref:"#/definitions/ConditionalValueDef"},{items:{$ref:"#/definitions/ConditionalValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."}},required:["condition"],type:"object"},"ConditionOnlyDef<MarkPropFieldDef<TypeForShape>>":{additionalProperties:!1,description:"A Condition<ValueDef | FieldDef> only definition.\n{\n   condition: {field: ...} | {value: ...}\n}",properties:{condition:{anyOf:[{$ref:"#/definitions/ConditionalMarkPropFieldDef<TypeForShape>"},{$ref:"#/definitions/ConditionalValueDef"},{items:{$ref:"#/definitions/ConditionalValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."}},required:["condition"],type:"object"},"ConditionOnlyDef<TextFieldDef>":{additionalProperties:!1,description:"A Condition<ValueDef | FieldDef> only definition.\n{\n   condition: {field: ...} | {value: ...}\n}",properties:{condition:{anyOf:[{$ref:"#/definitions/ConditionalTextFieldDef"},{$ref:"#/definitions/ConditionalValueDef"},{items:{$ref:"#/definitions/ConditionalValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."}},required:["condition"],type:"object"},'ConditionalMarkPropFieldDef<"nominal">':{anyOf:[{$ref:'#/definitions/ConditionalPredicate<MarkPropFieldDef<"nominal">>'},{$ref:'#/definitions/ConditionalSelection<MarkPropFieldDef<"nominal">>'}]},ConditionalMarkPropFieldDef:{anyOf:[{$ref:"#/definitions/ConditionalPredicate<MarkPropFieldDef>"},{$ref:"#/definitions/ConditionalSelection<MarkPropFieldDef>"}]},"ConditionalMarkPropFieldDef<TypeForShape>":{anyOf:[{$ref:"#/definitions/ConditionalPredicate<MarkPropFieldDef<TypeForShape>>"},{$ref:"#/definitions/ConditionalSelection<MarkPropFieldDef<TypeForShape>>"}]},ConditionalTextFieldDef:{anyOf:[{$ref:"#/definitions/ConditionalPredicate<TextFieldDef>"},{$ref:"#/definitions/ConditionalSelection<TextFieldDef>"}]},ConditionalValueDef:{anyOf:[{$ref:"#/definitions/ConditionalPredicate<ValueDef>"},{$ref:"#/definitions/ConditionalSelection<ValueDef>"}]},ConditionalColorValueDef:{anyOf:[{$ref:"#/definitions/ConditionalPredicate<ColorValueDef>"},{$ref:"#/definitions/ConditionalSelection<ColorValueDef>"}]},ConditionalTextValueDef:{anyOf:[{$ref:"#/definitions/ConditionalPredicate<TextValueDef>"},{$ref:"#/definitions/ConditionalSelection<TextValueDef>"}]},ConditionalNumberValueDef:{anyOf:[{$ref:"#/definitions/ConditionalPredicate<NumberValueDef>"},{$ref:"#/definitions/ConditionalSelection<NumberValueDef>"}]},ConditionalStringValueDef:{anyOf:[{$ref:"#/definitions/ConditionalPredicate<StringValueDef>"},{$ref:"#/definitions/ConditionalSelection<StringValueDef>"}]},'ConditionalPredicate<MarkPropFieldDef<"nominal">>':{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},test:{$ref:"#/definitions/LogicalOperand<Predicate>"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).',enum:["nominal"],type:"string"}},required:["test","type"],type:"object"},"ConditionalPredicate<MarkPropFieldDef>":{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},test:{$ref:"#/definitions/LogicalOperand<Predicate>"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["test","type"],type:"object"},"ConditionalPredicate<MarkPropFieldDef<TypeForShape>>":{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},test:{$ref:"#/definitions/LogicalOperand<Predicate>"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/TypeForShape",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["test","type"],type:"object"},"ConditionalPredicate<TextFieldDef>":{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},format:{description:"The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically.",type:"string"},test:{$ref:"#/definitions/LogicalOperand<Predicate>"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["test","type"],type:"object"},"ConditionalPredicate<ValueDef>":{additionalProperties:!1,properties:{test:{$ref:"#/definitions/LogicalOperand<Predicate>"},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:["number","string","boolean","null"]}},required:["test","value"],type:"object"},"ConditionalPredicate<ColorValueDef>":{additionalProperties:!1,properties:{test:{$ref:"#/definitions/LogicalOperand<Predicate>"},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:["string","null"]}},required:["test","value"],type:"object"},"ConditionalPredicate<TextValueDef>":{additionalProperties:!1,properties:{test:{$ref:"#/definitions/LogicalOperand<Predicate>"},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:["string","number","boolean"]}},required:["test","value"],type:"object"},"ConditionalPredicate<NumberValueDef>":{additionalProperties:!1,properties:{test:{$ref:"#/definitions/LogicalOperand<Predicate>"},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:"number"}},required:["test","value"],type:"object"},"ConditionalPredicate<StringValueDef>":{additionalProperties:!1,properties:{test:{$ref:"#/definitions/LogicalOperand<Predicate>"},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:"string"}},required:["test","value"],type:"object"},'ConditionalSelection<MarkPropFieldDef<"nominal">>':{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).',enum:["nominal"],type:"string"}},required:["selection","type"],type:"object"},"ConditionalSelection<MarkPropFieldDef>":{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["selection","type"],type:"object"},"ConditionalSelection<MarkPropFieldDef<TypeForShape>>":{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/TypeForShape",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["selection","type"],type:"object"},"ConditionalSelection<TextFieldDef>":{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},format:{description:"The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically.",type:"string"},selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["selection","type"],type:"object"},"ConditionalSelection<ValueDef>":{additionalProperties:!1,properties:{selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:["number","string","boolean","null"]}},required:["selection","value"],type:"object"},"ConditionalSelection<ColorValueDef>":{additionalProperties:!1,properties:{selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:["string","null"]}},required:["selection","value"],type:"object"},"ConditionalSelection<TextValueDef>":{additionalProperties:!1,properties:{selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:["string","number","boolean"]}},required:["selection","value"],type:"object"},"ConditionalSelection<NumberValueDef>":{additionalProperties:!1,properties:{selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:"number"}},required:["selection","value"],type:"object"},"ConditionalSelection<StringValueDef>":{additionalProperties:!1,properties:{selection:{$ref:"#/definitions/SelectionOperand",description:"A [selection name](https://vega.github.io/vega-lite/docs/selection.html), or a series of [composed selections](https://vega.github.io/vega-lite/docs/selection.html#compose)."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:"string"}},required:["selection","value"],type:"object"},Config:{additionalProperties:!1,properties:{area:{$ref:"#/definitions/AreaConfig",description:"Area-Specific Config"},autosize:{anyOf:[{$ref:"#/definitions/AutosizeType"},{$ref:"#/definitions/AutoSizeParams"}],description:'Sets how the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`.\nObject values can additionally specify parameters for content sizing and automatic resizing.\n`"fit"` is only supported for single and layered views that don\'t use `rangeStep`.\n\n__Default value__: `pad`'},axis:{$ref:"#/definitions/AxisConfig",description:"Axis configuration, which determines default properties for all `x` and `y` [axes](https://vega.github.io/vega-lite/docs/axis.html). For a full list of axis configuration options, please see the [corresponding section of the axis documentation](https://vega.github.io/vega-lite/docs/axis.html#config)."},axisBand:{$ref:"#/definitions/AxisConfig",description:'Specific axis config for axes with "band" scales.'},axisBottom:{$ref:"#/definitions/AxisConfig",description:"Specific axis config for x-axis along the bottom edge of the chart."},axisLeft:{$ref:"#/definitions/AxisConfig",description:"Specific axis config for y-axis along the left edge of the chart."},axisRight:{$ref:"#/definitions/AxisConfig",description:"Specific axis config for y-axis along the right edge of the chart."},axisTop:{$ref:"#/definitions/AxisConfig",description:"Specific axis config for x-axis along the top edge of the chart."},axisX:{$ref:"#/definitions/AxisConfig",description:"X-axis specific config."},axisY:{$ref:"#/definitions/AxisConfig",description:"Y-axis specific config."},background:{description:"CSS color property to use as the background of the whole Vega-Lite view\n\n__Default value:__ none (transparent)",type:"string"},bar:{$ref:"#/definitions/BarConfig",description:"Bar-Specific Config"},boxplot:{$ref:"#/definitions/BoxPlotConfig",description:"Box Config"},circle:{$ref:"#/definitions/MarkConfig",description:"Circle-Specific Config"},concat:{$ref:"#/definitions/CompositionConfig",description:"Default configuration for all concatenation view composition operators (`concat`, `hconcat`, and `vconcat`)"},countTitle:{description:"Default axis and legend title for count fields.\n\n__Default value:__ `'Count of Records`.",type:"string"},errorband:{$ref:"#/definitions/ErrorBandConfig",description:"ErrorBand Config"},errorbar:{$ref:"#/definitions/ErrorBarConfig",description:"ErrorBar Config"},facet:{$ref:"#/definitions/CompositionConfig",description:"Default configuration for the `facet` view composition operator"},fieldTitle:{description:'Defines how Vega-Lite generates title for fields.  There are three possible styles:\n- `"verbal"` (Default) - displays function in a verbal style (e.g., "Sum of field", "Year-month of date", "field (binned)").\n- `"function"` - displays function using parentheses and capitalized texts (e.g., "SUM(field)", "YEARMONTH(date)", "BIN(field)").\n- `"plain"` - displays only the field name without functions (e.g., "field", "date", "field").',enum:["verbal","functional","plain"],type:"string"},geoshape:{$ref:"#/definitions/MarkConfig",description:"Geoshape-Specific Config"},header:{$ref:"#/definitions/HeaderConfig",description:"Header configuration, which determines default properties for all [headers](https://vega.github.io/vega-lite/docs/header.html).\n\nFor a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config)."},headerColumn:{$ref:"#/definitions/HeaderConfig",description:"Header configuration, which determines default properties for column [headers](https://vega.github.io/vega-lite/docs/header.html).\n\nFor a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config)."},headerFacet:{$ref:"#/definitions/HeaderConfig",description:"Header configuration, which determines default properties for non-row/column facet [headers](https://vega.github.io/vega-lite/docs/header.html).\n\nFor a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config)."},headerRow:{$ref:"#/definitions/HeaderConfig",description:"Header configuration, which determines default properties for row [headers](https://vega.github.io/vega-lite/docs/header.html).\n\nFor a full list of header configuration options, please see the [corresponding section of in the header documentation](https://vega.github.io/vega-lite/docs/header.html#config)."},invalidValues:{description:'Defines how Vega-Lite should handle invalid values (`null` and `NaN`).\n- If set to `"filter"` (default), all data items with null values will be skipped (for line, trail, and area marks) or filtered (for other marks).\n- If `null`, all data items are included. In this case, invalid values will be interpreted as zeroes.',enum:["filter",null],type:["string","null"]},legend:{$ref:"#/definitions/LegendConfig",description:"Legend configuration, which determines default properties for all [legends](https://vega.github.io/vega-lite/docs/legend.html). For a full list of legend configuration options, please see the [corresponding section of in the legend documentation](https://vega.github.io/vega-lite/docs/legend.html#config)."},line:{$ref:"#/definitions/LineConfig",description:"Line-Specific Config"},mark:{$ref:"#/definitions/MarkConfig",description:"Mark Config"},numberFormat:{description:'D3 Number format for guide labels and text marks. For example "s" for SI units. Use [D3\'s number format pattern](https://github.com/d3/d3-format#locale_format).',type:"string"},padding:{$ref:"#/definitions/Padding",description:'The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\nIf an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.\n\n__Default value__: `5`'},point:{$ref:"#/definitions/MarkConfig",description:"Point-Specific Config"},projection:{$ref:"#/definitions/ProjectionConfig",description:"Projection configuration, which determines default properties for all [projections](https://vega.github.io/vega-lite/docs/projection.html). For a full list of projection configuration options, please see the [corresponding section of the projection documentation](https://vega.github.io/vega-lite/docs/projection.html#config)."},range:{$ref:"#/definitions/RangeConfig",description:"An object hash that defines default range arrays or schemes for using with scales.\nFor a full list of scale range configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config)."},rect:{$ref:"#/definitions/MarkConfig",description:"Rect-Specific Config"},repeat:{$ref:"#/definitions/CompositionConfig",description:"Default configuration for the `repeat` view composition operator"},rule:{$ref:"#/definitions/MarkConfig",description:"Rule-Specific Config"},scale:{$ref:"#/definitions/ScaleConfig",description:"Scale configuration determines default properties for all [scales](https://vega.github.io/vega-lite/docs/scale.html). For a full list of scale configuration options, please see the [corresponding section of the scale documentation](https://vega.github.io/vega-lite/docs/scale.html#config)."},selection:{$ref:"#/definitions/SelectionConfig",description:"An object hash for defining default properties for each type of selections."},square:{$ref:"#/definitions/MarkConfig",description:"Square-Specific Config"},stack:{$ref:"#/definitions/StackOffset",description:"Default stack offset for stackable mark."},style:{$ref:"#/definitions/StyleConfigIndex",description:"An object hash that defines key-value mappings to determine default properties for marks with a given [style](https://vega.github.io/vega-lite/docs/mark.html#mark-def).  The keys represent styles names; the values have to be valid [mark configuration objects](https://vega.github.io/vega-lite/docs/mark.html#config)."},text:{$ref:"#/definitions/TextConfig",description:"Text-Specific Config"},tick:{$ref:"#/definitions/TickConfig",description:"Tick-Specific Config"},timeFormat:{description:'Default time format for raw time values (without time units) in text marks, legend labels and header labels.\n\n__Default value:__ `"%b %d, %Y"`\n__Note:__ Axes automatically determine format each label automatically so this config would not affect axes.',type:"string"},title:{$ref:"#/definitions/TitleConfig",description:"Title configuration, which determines default properties for all [titles](https://vega.github.io/vega-lite/docs/title.html). For a full list of title configuration options, please see the [corresponding section of the title documentation](https://vega.github.io/vega-lite/docs/title.html#config)."},trail:{$ref:"#/definitions/LineConfig",description:"Trail-Specific Config"},view:{$ref:"#/definitions/ViewConfig",description:"Default properties for [single view plots](https://vega.github.io/vega-lite/docs/spec.html#single)."}},type:"object"},CsvDataFormat:{additionalProperties:!1,properties:{parse:{anyOf:[{$ref:"#/definitions/Parse"},{type:"null"}],description:'If set to `null`, disable type inference based on the spec and only use type inference based on the data.\nAlternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)).\nFor example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.\n\nFor `"date"`, we parse data based using Javascript\'s [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\nFor Specific date formats can be provided (e.g., `{foo: "date:\'%m%d%Y\'"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: "utc:\'%m%d%Y\'"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)'},type:{description:'Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.\nThe default format type is determined by the extension of the file URL.\nIf no extension is detected, `"json"` will be used by default.',enum:["csv","tsv"],type:"string"}},type:"object"},Cursor:{enum:["auto","default","none","context-menu","help","pointer","progress","wait","cell","crosshair","text","vertical-text","alias","copy","move","no-drop","not-allowed","e-resize","n-resize","ne-resize","nw-resize","s-resize","se-resize","sw-resize","w-resize","ew-resize","ns-resize","nesw-resize","nwse-resize","col-resize","row-resize","all-scroll","zoom-in","zoom-out","grab","grabbing"],type:"string"},Data:{anyOf:[{$ref:"#/definitions/UrlData"},{$ref:"#/definitions/InlineData"},{$ref:"#/definitions/NamedData"}]},DataFormat:{anyOf:[{$ref:"#/definitions/CsvDataFormat"},{$ref:"#/definitions/DsvDataFormat"},{$ref:"#/definitions/JsonDataFormat"},{$ref:"#/definitions/TopoDataFormat"}]},Datasets:{$ref:"#/definitions/Dict<InlineDataset>"},DateTime:{additionalProperties:!1,description:"Object for defining datetime in Vega-Lite Filter.\nIf both month and quarter are provided, month has higher precedence.\n`day` cannot be combined with other date.\nWe accept string for month and day names.",properties:{date:{description:"Integer value representing the date from 1-31.",maximum:31,minimum:1,type:"number"},day:{anyOf:[{$ref:"#/definitions/Day"},{type:"string"}],description:'Value representing the day of a week.  This can be one of: (1) integer value -- `1` represents Monday; (2) case-insensitive day name (e.g., `"Monday"`);  (3) case-insensitive, 3-character short day name (e.g., `"Mon"`).   <br/> **Warning:** A DateTime definition object with `day`** should not be combined with `year`, `quarter`, `month`, or `date`.'},hours:{description:"Integer value representing the hour of a day from 0-23.",maximum:23,minimum:0,type:"number"},milliseconds:{description:"Integer value representing the millisecond segment of time.",maximum:999,minimum:0,type:"number"},minutes:{description:"Integer value representing the minute segment of time from 0-59.",maximum:59,minimum:0,type:"number"},month:{anyOf:[{$ref:"#/definitions/Month"},{type:"string"}],description:'One of: (1) integer value representing the month from `1`-`12`. `1` represents January;  (2) case-insensitive month name (e.g., `"January"`);  (3) case-insensitive, 3-character short month name (e.g., `"Jan"`).'},quarter:{description:"Integer value representing the quarter of the year (from 1-4).",maximum:4,minimum:1,type:"number"},seconds:{description:"Integer value representing the second segment (0-59) of a time value",maximum:59,minimum:0,type:"number"},utc:{description:"A boolean flag indicating if date time is in utc time. If false, the date time is in local time",type:"boolean"},year:{description:"Integer value representing the year.",type:"number"}},type:"object"},Day:{maximum:7,minimum:1,type:"number"},"Dict<InlineDataset>":{additionalProperties:{$ref:"#/definitions/InlineDataset"},type:"object"},Dir:{enum:["ltr","rtl"],type:"string"},DsvDataFormat:{additionalProperties:!1,properties:{delimiter:{description:"The delimiter between records. The delimiter must be a single character (i.e., a single 16-bit code unit); so, ASCII delimiters are fine, but emoji delimiters are not.",maxLength:1,minLength:1,type:"string"},parse:{anyOf:[{$ref:"#/definitions/Parse"},{type:"null"}],description:'If set to `null`, disable type inference based on the spec and only use type inference based on the data.\nAlternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)).\nFor example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.\n\nFor `"date"`, we parse data based using Javascript\'s [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\nFor Specific date formats can be provided (e.g., `{foo: "date:\'%m%d%Y\'"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: "utc:\'%m%d%Y\'"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)'},type:{description:'Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.\nThe default format type is determined by the extension of the file URL.\nIf no extension is detected, `"json"` will be used by default.',enum:["dsv"],type:"string"}},required:["delimiter"],type:"object"},Element:{type:"string"},EncodingSortField:{additionalProperties:!1,description:"A sort definition for sorting a discrete scale in an encoding field definition.",properties:{field:{$ref:"#/definitions/Field",description:"The data [field](https://vega.github.io/vega-lite/docs/field.html) to sort by.\n\n__Default value:__ If unspecified, defaults to the field specified in the outer data reference."},op:{$ref:"#/definitions/AggregateOp",description:'An [aggregate operation](https://vega.github.io/vega-lite/docs/aggregate.html#ops) to perform on the field prior to sorting (e.g., `"count"`, `"mean"` and `"median"`).\nAn aggregation is required when there are multiple values of the sort field for each encoded data field.\nThe input data objects will be aggregated, grouped by the encoded data field.\n\nFor a full list of operations, please see the documentation for [aggregate](https://vega.github.io/vega-lite/docs/aggregate.html#ops).\n\n__Default value:__ `"sum"` for stacked plots. Otherwise, `"mean"`.'},order:{anyOf:[{$ref:"#/definitions/SortOrder"},{type:"null"}],description:'The sort order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).'}},type:"object"},ErrorBand:{enum:["errorband"],type:"string"},ErrorBandConfig:{additionalProperties:!1,properties:{band:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},borders:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},extent:{$ref:"#/definitions/ErrorBarExtent",description:'The extent of the band. Available options include:\n- `"ci"`: Extend the band to the confidence interval of the mean.\n- `"stderr"`: The size of band are set to the value of standard error, extending from the mean.\n- `"stdev"`: The size of band are set to the value of standard deviation, extending from the mean.\n- `"iqr"`: Extend the band to the q1 and q3.\n\n__Default value:__ `"stderr"`.'},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method for the error band. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.\n- `"step-before"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.\n- `"step-after"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},tension:{description:"The tension parameter for the interpolation type of the error band.",maximum:1,minimum:0,type:"number"}},type:"object"},ErrorBandDef:{additionalProperties:!1,properties:{band:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},borders:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},clip:{description:"Whether a composite mark be clipped to the enclosing group’s width and height.",type:"boolean"},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},extent:{$ref:"#/definitions/ErrorBarExtent",description:'The extent of the band. Available options include:\n- `"ci"`: Extend the band to the confidence interval of the mean.\n- `"stderr"`: The size of band are set to the value of standard error, extending from the mean.\n- `"stdev"`: The size of band are set to the value of standard deviation, extending from the mean.\n- `"iqr"`: Extend the band to the q1 and q3.\n\n__Default value:__ `"stderr"`.'},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method for the error band. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes at the midpoint of each pair of adjacent x-values.\n- `"step-before"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes before the x-value.\n- `"step-after"`: a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines. The y-value changes after the x-value.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},opacity:{description:"The opacity (value between [0,1]) of the mark.",type:"number"},orient:{$ref:"#/definitions/Orientation",description:"Orientation of the error band. This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined."},tension:{description:"The tension parameter for the interpolation type of the error band.",maximum:1,minimum:0,type:"number"},type:{$ref:"#/definitions/ErrorBand",description:'The mark type. This could a primitive mark type\n(one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,\n`"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`)\nor a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).'}},required:["type"],type:"object"},ErrorBar:{enum:["errorbar"],type:"string"},ErrorBarConfig:{additionalProperties:!1,properties:{extent:{$ref:"#/definitions/ErrorBarExtent",description:'The extent of the rule. Available options include:\n- `"ci"`: Extend the rule to the confidence interval of the mean.\n- `"stderr"`: The size of rule are set to the value of standard error, extending from the mean.\n- `"stdev"`: The size of rule are set to the value of standard deviation, extending from the mean.\n- `"iqr"`: Extend the rule to the q1 and q3.\n\n__Default value:__ `"stderr"`.'},rule:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},ticks:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]}},type:"object"},ErrorBarDef:{additionalProperties:!1,properties:{clip:{description:"Whether a composite mark be clipped to the enclosing group’s width and height.",type:"boolean"},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},extent:{$ref:"#/definitions/ErrorBarExtent",description:'The extent of the rule. Available options include:\n- `"ci"`: Extend the rule to the confidence interval of the mean.\n- `"stderr"`: The size of rule are set to the value of standard error, extending from the mean.\n- `"stdev"`: The size of rule are set to the value of standard deviation, extending from the mean.\n- `"iqr"`: Extend the rule to the q1 and q3.\n\n__Default value:__ `"stderr"`.'},opacity:{description:"The opacity (value between [0,1]) of the mark.",type:"number"},orient:{$ref:"#/definitions/Orientation",description:"Orientation of the error bar.  This is normally automatically determined, but can be specified when the orientation is ambiguous and cannot be automatically determined."},rule:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},ticks:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},type:{$ref:"#/definitions/ErrorBar",description:'The mark type. This could a primitive mark type\n(one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,\n`"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`)\nor a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).'}},required:["type"],type:"object"},ErrorBarExtent:{enum:["ci","iqr","stderr","stdev"],type:"string"},EventStream:{},FacetFieldDef:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},header:{$ref:"#/definitions/Header",description:"An object defining properties of a facet's header."},sort:{anyOf:[{$ref:"#/definitions/SortArray"},{$ref:"#/definitions/SortOrder"},{$ref:"#/definitions/EncodingSortField"},{type:"null"}],description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/Type",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},FacetMapping:{additionalProperties:!1,properties:{column:{$ref:"#/definitions/FacetFieldDef",description:"A field definition for the horizontal facet of trellis plots."},row:{$ref:"#/definitions/FacetFieldDef",description:"A field definition for the vertical facet of trellis plots."}},type:"object"},FacetedEncoding:{additionalProperties:!1,properties:{color:{anyOf:[{$ref:"#/definitions/ColorFieldDefWithCondition"},{$ref:"#/definitions/ColorValueDefWithCondition"}],description:'Color of the marks – either fill or stroke color based on  the `filled` property of mark definition.\nBy default, `color` represents fill color for `"area"`, `"bar"`, `"tick"`,\n`"text"`, `"trail"`, `"circle"`, and `"square"` / stroke color for `"line"` and `"point"`.\n\n__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)\'s `color` property.\n\n_Note:_\n1) For fine-grained control over both fill and stroke colors of the marks, please use the `fill` and `stroke` channels.  If either `fill` or `stroke` channel is specified, `color` channel will be ignored.\n2) See the scale documentation for more information about customizing [color scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme).'},column:{$ref:"#/definitions/FacetFieldDef",description:"A field definition for the horizontal facet of trellis plots."},detail:{anyOf:[{$ref:"#/definitions/FieldDef"},{items:{$ref:"#/definitions/FieldDef"},type:"array"}],description:"Additional levels of detail for grouping data in aggregate views and\nin line, trail, and area marks without mapping data to a specific visual channel."},facet:{$ref:"#/definitions/FacetFieldDef",description:"A field definition for the (flexible) facet of trellis plots.\n\nIf either `row` or `column` is specified, this channel will be ignored."},fill:{anyOf:[{$ref:"#/definitions/ColorFieldDefWithCondition"},{$ref:"#/definitions/ColorValueDefWithCondition"}],description:"Fill color of the marks.\n__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `color` property.\n\n_Note:_ When using `fill` channel, `color ` channel will be ignored. To customize both fill and stroke, please use `fill` and `stroke` channels (not `fill` and `color`)."},fillOpacity:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:"Fill opacity of the marks.\n\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `fillOpacity` property."},href:{anyOf:[{$ref:"#/definitions/StringFieldDefWithCondition"},{$ref:"#/definitions/StringValueDefWithCondition"}],description:"A URL to load upon mouse click."},key:{$ref:"#/definitions/FieldDef",description:"A data field to use as a unique key for data binding. When a visualization’s data is updated, the key value will be used to match data elements to existing mark instances. Use a key channel to enable object constancy for transitions over dynamic data."},latitude:{$ref:"#/definitions/LatLongFieldDef",description:"Latitude position of geographically projected marks."},latitude2:{$ref:"#/definitions/SecondaryFieldDef",description:'Latitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.'},longitude:{$ref:"#/definitions/LatLongFieldDef",description:"Longitude position of geographically projected marks."},longitude2:{$ref:"#/definitions/SecondaryFieldDef",description:'Longitude-2 position for geographically projected ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.'},opacity:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:"Opacity of the marks.\n\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `opacity` property."},order:{anyOf:[{$ref:"#/definitions/OrderFieldDef"},{items:{$ref:"#/definitions/OrderFieldDef"},type:"array"},{$ref:"#/definitions/NumberValueDef"}],description:'Order of the marks.\n- For stacked marks, this `order` channel encodes [stack order](https://vega.github.io/vega-lite/docs/stack.html#order).\n- For line and trail marks, this `order` channel encodes order of data points in the lines. This can be useful for creating [a connected scatterplot](https://vega.github.io/vega-lite/examples/connected_scatterplot.html).  Setting `order` to `{"value": null}` makes the line marks use the original order in the data sources.\n- Otherwise, this `order` channel encodes layer order of the marks.\n\n__Note__: In aggregate plots, `order` field should be `aggregate`d to avoid creating additional aggregation grouping.'},row:{$ref:"#/definitions/FacetFieldDef",description:"A field definition for the vertical facet of trellis plots."},shape:{anyOf:[{$ref:"#/definitions/ShapeFieldDefWithCondition"},{$ref:"#/definitions/ShapeValueDefWithCondition"}],description:'Shape of the mark.\n\n1. For `point` marks the supported values include:\n   - plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n   - the line symbol `"stroke"`\n   - centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n   - a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n2. For `geoshape` marks it should be a field definition of the geojson data\n\n__Default value:__ If undefined, the default shape depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#point-config)\'s `shape` property. (`"circle"` if unset.)'},size:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:'Size of the mark.\n- For `"point"`, `"square"` and `"circle"`, – the symbol size, or pixel area of the mark.\n- For `"bar"` and `"tick"` – the bar and tick\'s size.\n- For `"text"` – the text\'s font size.\n- Size is unsupported for `"line"`, `"area"`, and `"rect"`. (Use `"trail"` instead of line with varying size)'},stroke:{anyOf:[{$ref:"#/definitions/ColorFieldDefWithCondition"},{$ref:"#/definitions/ColorValueDefWithCondition"}],description:"Stroke color of the marks.\n__Default value:__ If undefined, the default color depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `color` property.\n\n_Note:_ When using `stroke` channel, `color ` channel will be ignored. To customize both stroke and fill, please use `stroke` and `fill` channels (not `stroke` and `color`)."},strokeOpacity:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:"Stroke opacity of the marks.\n\n__Default value:__ If undefined, the default opacity depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `strokeOpacity` property."},strokeWidth:{anyOf:[{$ref:"#/definitions/NumericFieldDefWithCondition"},{$ref:"#/definitions/NumericValueDefWithCondition"}],description:"Stroke width of the marks.\n\n__Default value:__ If undefined, the default stroke width depends on [mark config](https://vega.github.io/vega-lite/docs/config.html#mark)'s `strokeWidth` property."},text:{anyOf:[{$ref:"#/definitions/TextFieldDefWithCondition"},{$ref:"#/definitions/TextValueDefWithCondition"}],description:"Text of the `text` mark."},tooltip:{anyOf:[{$ref:"#/definitions/TextFieldDefWithCondition"},{$ref:"#/definitions/TextValueDefWithCondition"},{items:{$ref:"#/definitions/TextFieldDef"},type:"array"},{type:"null"}],description:"The tooltip text to show upon mouse hover."},x:{anyOf:[{$ref:"#/definitions/PositionFieldDef"},{$ref:"#/definitions/XValueDef"}],description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.\n\nThe `value` of this channel can be a number or a string `"width"`.'},x2:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/XValueDef"}],description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.\n\nThe `value` of this channel can be a number or a string `"width"`.'},xError:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/NumberValueDef"}],description:'Error value of x coordinates for error specified `"errorbar"` and `"errorband"`.'},xError2:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/NumberValueDef"}],description:'Secondary error value of x coordinates for error specified `"errorbar"` and `"errorband"`.'},y:{anyOf:[{$ref:"#/definitions/PositionFieldDef"},{$ref:"#/definitions/YValueDef"}],description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`\n\nThe `value` of this channel can be a number or a string `"height"`.'},y2:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/YValueDef"}],description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.\n\nThe `value` of this channel can be a number or a string `"height"`.'},yError:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/NumberValueDef"}],description:'Error value of y coordinates for error specified `"errorbar"` and `"errorband"`.'},yError2:{anyOf:[{$ref:"#/definitions/SecondaryFieldDef"},{$ref:"#/definitions/NumberValueDef"}],description:'Secondary error value of y coordinates for error specified `"errorbar"` and `"errorband"`.'}},type:"object"},FacetedUnitSpec:{additionalProperties:!1,description:"Unit spec that can have a composite mark and row or column channels (shorthand for a facet spec).",properties:{align:{anyOf:[{$ref:"#/definitions/LayoutAlign"},{$ref:"#/definitions/RowCol<LayoutAlign>"}],description:'The alignment to apply to grid rows and columns.\nThe supported string values are `"all"`, `"each"`, and `"none"`.\n\n- For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n- For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n- For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n\nAlternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.\n\n__Default value:__ `"all"`.'},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/RowCol<boolean>"}],description:'Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\nAn object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.\n\n__Default value:__ `false`'},columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},description:{description:"Description of this mark for commenting purpose.",type:"string"},encoding:{$ref:"#/definitions/FacetedEncoding",description:"A key-value mapping between encoding channels and definition of fields."},height:{description:'The height of a visualization.\n\n__Default value:__\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.\n\n__Note__: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"},mark:{$ref:"#/definitions/AnyMark",description:'A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,\n`"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).'},name:{description:"Name of the visualization for later reference.",type:"string"},projection:{$ref:"#/definitions/Projection",description:'An object defining properties of geographic projection, which will be applied to `shape` path for `"geoshape"` marks\nand to `latitude` and `"longitude"` channels for other marks.'},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},selection:{additionalProperties:{$ref:"#/definitions/SelectionDef"},description:"A key-value mapping between selection names and definitions.",type:"object"},spacing:{anyOf:[{type:"number"},{$ref:"#/definitions/RowCol<number>"}],description:'The spacing in pixels between sub-views of the composition operator.\nAn object of the form `{"row": number, "column": number}` can be used to set\ndifferent spacing values for rows and columns.\n\n__Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)'},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},view:{$ref:"#/definitions/ViewBackground",description:"An object defining the view background's fill and stroke.\n\n__Default value:__ none (transparent)"},width:{description:'The width of a visualization.\n\n__Default value:__ This will be determined by the following rules:\n\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.\n\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"}},required:["mark"],type:"object"},Field:{anyOf:[{type:"string"},{$ref:"#/definitions/RepeatRef"}]},'FieldDefWithCondition<MarkPropFieldDef<"nominal">,string>':{additionalProperties:!1,description:"A FieldDef with Condition<ValueDef>\n{\n   condition: {value: ...},\n   field: ...,\n   ...\n}",properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},condition:{anyOf:[{$ref:"#/definitions/ConditionalStringValueDef"},{items:{$ref:"#/definitions/ConditionalStringValueDef"},type:"array"}],description:"One or more value definition(s) with a selection predicate.\n\n__Note:__ A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def)\nsince Vega-Lite only allows at most one encoded field per encoding channel."},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).',enum:["nominal"],type:"string"}},required:["type"],type:"object"},"FieldDefWithCondition<MarkPropFieldDef,(string|null)>":{additionalProperties:!1,description:"A FieldDef with Condition<ValueDef>\n{\n   condition: {value: ...},\n   field: ...,\n   ...\n}",properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},condition:{anyOf:[{$ref:"#/definitions/ConditionalColorValueDef"},{items:{$ref:"#/definitions/ConditionalColorValueDef"},type:"array"}],description:"One or more value definition(s) with a selection predicate.\n\n__Note:__ A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def)\nsince Vega-Lite only allows at most one encoded field per encoding channel."},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},"FieldDefWithCondition<MarkPropFieldDef,number>":{additionalProperties:!1,description:"A FieldDef with Condition<ValueDef>\n{\n   condition: {value: ...},\n   field: ...,\n   ...\n}",properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},condition:{anyOf:[{$ref:"#/definitions/ConditionalNumberValueDef"},{items:{$ref:"#/definitions/ConditionalNumberValueDef"},type:"array"}],description:"One or more value definition(s) with a selection predicate.\n\n__Note:__ A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def)\nsince Vega-Lite only allows at most one encoded field per encoding channel."},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},"FieldDefWithCondition<MarkPropFieldDef<TypeForShape>,string>":{additionalProperties:!1,description:"A FieldDef with Condition<ValueDef>\n{\n   condition: {value: ...},\n   field: ...,\n   ...\n}",properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},condition:{anyOf:[{$ref:"#/definitions/ConditionalStringValueDef"},{items:{$ref:"#/definitions/ConditionalStringValueDef"},type:"array"}],description:"One or more value definition(s) with a selection predicate.\n\n__Note:__ A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def)\nsince Vega-Lite only allows at most one encoded field per encoding channel."},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},legend:{anyOf:[{$ref:"#/definitions/Legend"},{type:"null"}],description:"An object defining properties of the legend.\nIf `null`, the legend for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [legend properties](https://vega.github.io/vega-lite/docs/legend.html) are applied."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/TypeForShape",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},"FieldDefWithCondition<TextFieldDef,(string|number|boolean)>":{additionalProperties:!1,description:"A FieldDef with Condition<ValueDef>\n{\n   condition: {value: ...},\n   field: ...,\n   ...\n}",properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},condition:{anyOf:[{$ref:"#/definitions/ConditionalTextValueDef"},{items:{$ref:"#/definitions/ConditionalTextValueDef"},type:"array"}],description:"One or more value definition(s) with a selection predicate.\n\n__Note:__ A field definition's `condition` property can only contain [value definitions](https://vega.github.io/vega-lite/docs/encoding.html#value-def)\nsince Vega-Lite only allows at most one encoded field per encoding channel."},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},format:{description:"The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically.",type:"string"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},FieldDef:{additionalProperties:!1,description:'Field Def without scale (and without bin: "binned" support).',properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},FieldEqualPredicate:{additionalProperties:!1,properties:{equal:{anyOf:[{type:"string"},{type:"number"},{type:"boolean"},{$ref:"#/definitions/DateTime"}],description:"The value that the field should be equal to."},field:{description:"Field to be filtered.",type:"string"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit for the field to be filtered."}},required:["equal","field"],type:"object"},FieldGTEPredicate:{additionalProperties:!1,properties:{field:{description:"Field to be filtered.",type:"string"},gte:{anyOf:[{type:"string"},{type:"number"},{$ref:"#/definitions/DateTime"}],description:"The value that the field should be greater than or equals to."},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit for the field to be filtered."}},required:["field","gte"],type:"object"},FieldGTPredicate:{additionalProperties:!1,properties:{field:{description:"Field to be filtered.",type:"string"},gt:{anyOf:[{type:"string"},{type:"number"},{$ref:"#/definitions/DateTime"}],description:"The value that the field should be greater than."},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit for the field to be filtered."}},required:["field","gt"],type:"object"},FieldLTEPredicate:{additionalProperties:!1,properties:{field:{description:"Field to be filtered.",type:"string"},lte:{anyOf:[{type:"string"},{type:"number"},{$ref:"#/definitions/DateTime"}],description:"The value that the field should be less than or equals to."},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit for the field to be filtered."}},required:["field","lte"],type:"object"},FieldLTPredicate:{additionalProperties:!1,properties:{field:{description:"Field to be filtered.",type:"string"},lt:{anyOf:[{type:"string"},{type:"number"},{$ref:"#/definitions/DateTime"}],description:"The value that the field should be less than."},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit for the field to be filtered."}},required:["field","lt"],type:"object"},FieldOneOfPredicate:{additionalProperties:!1,properties:{field:{description:"Field to be filtered.",type:"string"},oneOf:{anyOf:[{items:{type:"string"},type:"array"},{items:{type:"number"},type:"array"},{items:{type:"boolean"},type:"array"},{items:{$ref:"#/definitions/DateTime"},type:"array"}],description:"A set of values that the `field`'s value should be a member of,\nfor a data item included in the filtered data."},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit for the field to be filtered."}},required:["field","oneOf"],type:"object"},FieldRangePredicate:{additionalProperties:!1,properties:{field:{description:"Field to be filtered.",type:"string"},range:{description:"An array of inclusive minimum and maximum values\nfor a field value of a data item to be included in the filtered data.",items:{anyOf:[{type:"number"},{$ref:"#/definitions/DateTime"},{type:"null"}]},maxItems:2,minItems:2,type:"array"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit for the field to be filtered."}},required:["field","range"],type:"object"},FieldValidPredicate:{additionalProperties:!1,properties:{field:{description:"Field to be filtered.",type:"string"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit for the field to be filtered."},valid:{description:"If set to true the field's value has to be valid, meaning both not `null` and not [`NaN`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN).",type:"boolean"}},required:["field","valid"],type:"object"},FilterTransform:{additionalProperties:!1,properties:{filter:{$ref:"#/definitions/LogicalOperand<Predicate>",description:"The `filter` property must be one of the predicate definitions:\n\n1) an [expression](https://vega.github.io/vega-lite/docs/types.html#expression) string,\nwhere `datum` can be used to refer to the current data object\n\n2) one of the field predicates: [`equal`](https://vega.github.io/vega-lite/docs/filter.html#equal-predicate),\n[`lt`](https://vega.github.io/vega-lite/docs/filter.html#lt-predicate),\n[`lte`](https://vega.github.io/vega-lite/docs/filter.html#lte-predicate),\n[`gt`](https://vega.github.io/vega-lite/docs/filter.html#gt-predicate),\n[`gte`](https://vega.github.io/vega-lite/docs/filter.html#gte-predicate),\n[`range`](https://vega.github.io/vega-lite/docs/filter.html#range-predicate),\n[`oneOf`](https://vega.github.io/vega-lite/docs/filter.html#one-of-predicate),\nor [`valid`](https://vega.github.io/vega-lite/docs/filter.html#valid-predicate),\n\n3) a [selection predicate](https://vega.github.io/vega-lite/docs/filter.html#selection-predicate)\n\n4) a logical operand that combines (1), (2), or (3)."}},required:["filter"],type:"object"},FlattenTransform:{additionalProperties:!1,properties:{as:{description:"The output field names for extracted array values.\n\n__Default value:__ The field name of the corresponding array field",items:{type:"string"},type:"array"},flatten:{description:"An array of one or more data fields containing arrays to flatten.\nIf multiple fields are specified, their array values should have a parallel structure, ideally with the same length.\nIf the lengths of parallel arrays do not match,\nthe longest array will be used with `null` values added for missing entries.",items:{type:"string"},type:"array"}},required:["flatten"],type:"object"},FoldTransform:{additionalProperties:!1,properties:{as:{description:'The output field names for the key and value properties produced by the fold transform.\n__Default value:__ `["key", "value"]`',items:[{type:"string"},{type:"string"}],maxItems:2,minItems:2,type:"array"},fold:{description:"An array of data fields indicating the properties to fold.",items:{type:"string"},type:"array"}},required:["fold"],type:"object"},FontStyle:{type:"string"},FontWeight:{enum:["normal","bold","lighter","bolder",100,200,300,400,500,600,700,800,900],type:["string","number"]},"GenericBinMixins<(boolean|BinParams)>":{additionalProperties:!1,properties:{bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'}},type:"object"},'GenericBinMixins<(boolean|BinParams|"binned"|null)>':{additionalProperties:!1,properties:{bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'}},type:"object"},ConcatSpec:{additionalProperties:!1,description:"Base interface for a generalized concatenation specification.",properties:{align:{anyOf:[{$ref:"#/definitions/LayoutAlign"},{$ref:"#/definitions/RowCol<LayoutAlign>"}],description:'The alignment to apply to grid rows and columns.\nThe supported string values are `"all"`, `"each"`, and `"none"`.\n\n- For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n- For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n- For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n\nAlternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.\n\n__Default value:__ `"all"`.'},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/RowCol<boolean>"}],description:'Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\nAn object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.\n\n__Default value:__ `false`'},columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},concat:{description:"A list of views to be concatenated.",items:{$ref:"#/definitions/Spec"},type:"array"},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},description:{description:"Description of this mark for commenting purpose.",type:"string"},name:{description:"Name of the visualization for later reference.",type:"string"},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{anyOf:[{type:"number"},{$ref:"#/definitions/RowCol<number>"}],description:'The spacing in pixels between sub-views of the composition operator.\nAn object of the form `{"row": number, "column": number}` can be used to set\ndifferent spacing values for rows and columns.\n\n__Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)'},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"}},required:["concat"],type:"object"},FacetSpec:{additionalProperties:!1,description:"Base interface for a facet specification.",properties:{align:{anyOf:[{$ref:"#/definitions/LayoutAlign"},{$ref:"#/definitions/RowCol<LayoutAlign>"}],description:'The alignment to apply to grid rows and columns.\nThe supported string values are `"all"`, `"each"`, and `"none"`.\n\n- For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n- For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n- For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n\nAlternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.\n\n__Default value:__ `"all"`.'},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/RowCol<boolean>"}],description:'Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\nAn object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.\n\n__Default value:__ `false`'},columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},description:{description:"Description of this mark for commenting purpose.",type:"string"},facet:{anyOf:[{$ref:"#/definitions/FacetFieldDef"},{$ref:"#/definitions/FacetMapping"}],description:"Definition for how to facet the data.  One of:\n1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def)\n2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)"},name:{description:"Name of the visualization for later reference.",type:"string"},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{anyOf:[{type:"number"},{$ref:"#/definitions/RowCol<number>"}],description:'The spacing in pixels between sub-views of the composition operator.\nAn object of the form `{"row": number, "column": number}` can be used to set\ndifferent spacing values for rows and columns.\n\n__Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)'},spec:{anyOf:[{$ref:"#/definitions/LayerSpec"},{$ref:"#/definitions/FacetedUnitSpec"}],description:"A specification of the view that gets faceted."},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"}},required:["facet","spec"],type:"object"},HConcatSpec:{additionalProperties:!1,description:"Base interface for a horizontal concatenation specification.",properties:{bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{description:"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\n__Default value:__ `false`",type:"boolean"},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},description:{description:"Description of this mark for commenting purpose.",type:"string"},hconcat:{description:"A list of views to be concatenated and put into a row.",items:{$ref:"#/definitions/Spec"},type:"array"},name:{description:"Name of the visualization for later reference.",type:"string"},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{description:"The spacing in pixels between sub-views of the concat operator.\n\n__Default value__: `10`",type:"number"},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"}},required:["hconcat"],type:"object"},RepeatSpec:{additionalProperties:!1,description:"Base interface for a repeat specification.",properties:{align:{anyOf:[{$ref:"#/definitions/LayoutAlign"},{$ref:"#/definitions/RowCol<LayoutAlign>"}],description:'The alignment to apply to grid rows and columns.\nThe supported string values are `"all"`, `"each"`, and `"none"`.\n\n- For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n- For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n- For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n\nAlternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.\n\n__Default value:__ `"all"`.'},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/RowCol<boolean>"}],description:'Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\nAn object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.\n\n__Default value:__ `false`'},columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},description:{description:"Description of this mark for commenting purpose.",type:"string"},name:{description:"Name of the visualization for later reference.",type:"string"},repeat:{anyOf:[{items:{type:"string"},type:"array"},{$ref:"#/definitions/RepeatMapping"}],description:'Definition for fields to be repeated.  One of:\n1) An array of fields to be repeated.  If `"repeat"` is an array, the field can be referred using `{"repeat": "repeat"}`\n2) An object that mapped `"row"` and/or `"column"` to the listed of fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.'},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{anyOf:[{type:"number"},{$ref:"#/definitions/RowCol<number>"}],description:'The spacing in pixels between sub-views of the composition operator.\nAn object of the form `{"row": number, "column": number}` can be used to set\ndifferent spacing values for rows and columns.\n\n__Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)'},spec:{$ref:"#/definitions/Spec",description:"A specification of the view that gets repeated."},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"}},required:["repeat","spec"],type:"object"},Spec:{anyOf:[{$ref:"#/definitions/FacetedUnitSpec"},{$ref:"#/definitions/LayerSpec"},{$ref:"#/definitions/FacetSpec"},{$ref:"#/definitions/RepeatSpec"},{$ref:"#/definitions/ConcatSpec"},{$ref:"#/definitions/VConcatSpec"},{$ref:"#/definitions/HConcatSpec"}],description:"Any specification in Vega-Lite."},"GenericUnitSpec<Encoding,AnyMark>":{additionalProperties:!1,description:"Base interface for a unit (single-view) specification.",properties:{data:{$ref:"#/definitions/Data",description:"An object describing the data source"},description:{description:"Description of this mark for commenting purpose.",type:"string"},encoding:{$ref:"#/definitions/Encoding",description:"A key-value mapping between encoding channels and definition of fields."},height:{description:'The height of a visualization.\n\n__Default value:__\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.\n\n__Note__: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"},mark:{$ref:"#/definitions/AnyMark",description:'A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,\n`"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).'},name:{description:"Name of the visualization for later reference.",type:"string"},projection:{$ref:"#/definitions/Projection",description:'An object defining properties of geographic projection, which will be applied to `shape` path for `"geoshape"` marks\nand to `latitude` and `"longitude"` channels for other marks.'},selection:{additionalProperties:{$ref:"#/definitions/SelectionDef"},description:"A key-value mapping between selection names and definitions.",type:"object"},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},view:{$ref:"#/definitions/ViewBackground",description:"An object defining the view background's fill and stroke.\n\n__Default value:__ none (transparent)"},width:{description:'The width of a visualization.\n\n__Default value:__ This will be determined by the following rules:\n\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.\n\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"}},required:["mark"],type:"object"},VConcatSpec:{additionalProperties:!1,description:"Base interface for a vertical concatenation specification.",properties:{bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{description:"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\n__Default value:__ `false`",type:"boolean"},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},description:{description:"Description of this mark for commenting purpose.",type:"string"},name:{description:"Name of the visualization for later reference.",type:"string"},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{description:"The spacing in pixels between sub-views of the concat operator.\n\n__Default value__: `10`",type:"number"},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},vconcat:{description:"A list of views to be concatenated and put into a column.",items:{$ref:"#/definitions/Spec"},type:"array"}},required:["vconcat"],type:"object"},Header:{additionalProperties:!1,description:"Headers of row / column channels for faceted plots.",properties:{format:{description:"The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field. To override the default type, set `formatType`.\n\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more information.\n\n__Default value:__  derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for quantitative fields and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for temporal fields.",type:"string"},formatType:{description:"The format type for labels (number or time).",enum:["number","time"],type:"string"},labelAlign:{$ref:"#/definitions/Align",description:"Horizontal text alignment of header labels."},labelAnchor:{$ref:"#/definitions/TitleAnchor",description:'The anchor position for placing the labels. One of `"start"`, `"middle"`, or `"end"`. For example, with a label orientation of top these anchor positions map to a left-, center-, or right-aligned label.'},labelAngle:{description:"The rotation angle of the header labels.\n\n__Default value:__ `0` for column header, `-90` for row header.",maximum:360,minimum:-360,type:"number"},labelColor:{description:"The color of the header label, can be in hex color code or regular color name.",type:"string"},labelFont:{description:"The font of the header label.",type:"string"},labelFontSize:{description:"The font size of the header label, in pixels.",minimum:0,type:"number"},labelLimit:{description:"The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},labelOrient:{$ref:"#/definitions/Orient",description:'The orientation of the header label. One of `"top"`, `"bottom"`, `"left"` or `"right"`.'},labelPadding:{description:"The padding, in pixel, between facet header's label and the plot.\n\n__Default value:__ `10`",type:"number"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},titleAlign:{$ref:"#/definitions/Align",description:"Horizontal text alignment (to the anchor) of header titles."},titleAnchor:{$ref:"#/definitions/TitleAnchor",description:'The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.'},titleAngle:{description:"The rotation angle of the header title.\n\n__Default value:__ `0`.",maximum:360,minimum:-360,type:"number"},titleBaseline:{$ref:"#/definitions/TextBaseline",description:'Vertical text baseline for the header title. One of `"top"`, `"bottom"`, `"middle"`.\n\n__Default value:__ `"middle"`'},titleColor:{description:"Color of the header title, can be in hex color code or regular color name.",type:"string"},titleFont:{description:'Font of the header title. (e.g., `"Helvetica Neue"`).',type:"string"},titleFontSize:{description:"Font size of the header title.",minimum:0,type:"number"},titleFontWeight:{$ref:"#/definitions/FontWeight",description:'Font weight of the header title.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},titleLimit:{description:"The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},titleOrient:{$ref:"#/definitions/Orient",description:'The orientation of the header title. One of `"top"`, `"bottom"`, `"left"` or `"right"`.'},titlePadding:{description:"The padding, in pixel, between facet header's title and the label.\n\n__Default value:__ `10`",type:"number"}},type:"object"},HeaderConfig:{additionalProperties:!1,properties:{format:{description:"The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field. To override the default type, set `formatType`.\n\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more information.\n\n__Default value:__  derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for quantitative fields and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for temporal fields.",type:"string"},formatType:{description:"The format type for labels (number or time).",enum:["number","time"],type:"string"},labelAlign:{$ref:"#/definitions/Align",description:"Horizontal text alignment of header labels."},labelAnchor:{$ref:"#/definitions/TitleAnchor",description:'The anchor position for placing the labels. One of `"start"`, `"middle"`, or `"end"`. For example, with a label orientation of top these anchor positions map to a left-, center-, or right-aligned label.'},labelAngle:{description:"The rotation angle of the header labels.\n\n__Default value:__ `0` for column header, `-90` for row header.",maximum:360,minimum:-360,type:"number"},labelColor:{description:"The color of the header label, can be in hex color code or regular color name.",type:"string"},labelFont:{description:"The font of the header label.",type:"string"},labelFontSize:{description:"The font size of the header label, in pixels.",minimum:0,type:"number"},labelLimit:{description:"The maximum length of the header label in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},labelOrient:{$ref:"#/definitions/Orient",description:'The orientation of the header label. One of `"top"`, `"bottom"`, `"left"` or `"right"`.'},labelPadding:{description:"The padding, in pixel, between facet header's label and the plot.\n\n__Default value:__ `10`",type:"number"},shortTimeLabels:{description:"Whether month names and weekday names should be abbreviated.\n\n__Default value:__  `false`",type:"boolean"},title:{description:"Set to null to disable title for the axis, legend, or header.",type:"null"},titleAlign:{$ref:"#/definitions/Align",description:"Horizontal text alignment (to the anchor) of header titles."},titleAnchor:{$ref:"#/definitions/TitleAnchor",description:'The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.'},titleAngle:{description:"The rotation angle of the header title.\n\n__Default value:__ `0`.",maximum:360,minimum:-360,type:"number"},titleBaseline:{$ref:"#/definitions/TextBaseline",description:'Vertical text baseline for the header title. One of `"top"`, `"bottom"`, `"middle"`.\n\n__Default value:__ `"middle"`'},titleColor:{description:"Color of the header title, can be in hex color code or regular color name.",type:"string"},titleFont:{description:'Font of the header title. (e.g., `"Helvetica Neue"`).',type:"string"},titleFontSize:{description:"Font size of the header title.",minimum:0,type:"number"},titleFontWeight:{$ref:"#/definitions/FontWeight",description:'Font weight of the header title.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},titleLimit:{description:"The maximum length of the header title in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},titleOrient:{$ref:"#/definitions/Orient",description:'The orientation of the header title. One of `"top"`, `"bottom"`, `"left"` or `"right"`.'},titlePadding:{description:"The padding, in pixel, between facet header's title and the label.\n\n__Default value:__ `10`",type:"number"}},type:"object"},ImputeMethod:{enum:["value","median","max","min","mean"],type:"string"},ImputeParams:{additionalProperties:!1,properties:{frame:{description:"A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object.  For example, the value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object.\n\n__Default value:__:  `[null, null]` indicating that the window includes all objects.",items:{type:["null","number"]},type:"array"},keyvals:{anyOf:[{items:{},type:"array"},{$ref:"#/definitions/ImputeSequence"}],description:"Defines the key values that should be considered for imputation.\nAn array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).\n\nIf provided, this will be used in addition to the key values observed within the input data.  If not provided, the values will be derived from all unique values of the `key` field. For `impute` in `encoding`, the key field is the x-field if the y-field is imputed, or vice versa.\n\nIf there is no impute grouping, this property _must_ be specified."},method:{$ref:"#/definitions/ImputeMethod",description:'The imputation method to use for the field value of imputed data objects.\nOne of `value`, `mean`, `median`, `max` or `min`.\n\n__Default value:__  `"value"`'},value:{description:'The field value to use when the imputation `method` is `"value"`.'}},type:"object"},ImputeSequence:{additionalProperties:!1,properties:{start:{description:"The starting value of the sequence.\n__Default value:__ `0`",type:"number"},step:{description:"The step value between sequence entries.\n__Default value:__ `1` or `-1` if `stop < start`",type:"number"},stop:{description:"The ending value(exclusive) of the sequence.",type:"number"}},required:["stop"],type:"object"},ImputeTransform:{additionalProperties:!1,properties:{frame:{description:"A frame specification as a two-element array used to control the window over which the specified method is applied. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object.  For example, the value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object.\n\n__Default value:__:  `[null, null]` indicating that the window includes all objects.",items:{type:["null","number"]},type:"array"},groupby:{description:"An optional array of fields by which to group the values.\nImputation will then be performed on a per-group basis.",items:{type:"string"},type:"array"},impute:{description:"The data field for which the missing values should be imputed.",type:"string"},key:{description:"A key field that uniquely identifies data objects within a group.\nMissing key values (those occurring in the data but not in the current group) will be imputed.",type:"string"},keyvals:{anyOf:[{items:{},type:"array"},{$ref:"#/definitions/ImputeSequence"}],description:"Defines the key values that should be considered for imputation.\nAn array of key values or an object defining a [number sequence](https://vega.github.io/vega-lite/docs/impute.html#sequence-def).\n\nIf provided, this will be used in addition to the key values observed within the input data.  If not provided, the values will be derived from all unique values of the `key` field. For `impute` in `encoding`, the key field is the x-field if the y-field is imputed, or vice versa.\n\nIf there is no impute grouping, this property _must_ be specified."},method:{$ref:"#/definitions/ImputeMethod",description:'The imputation method to use for the field value of imputed data objects.\nOne of `value`, `mean`, `median`, `max` or `min`.\n\n__Default value:__  `"value"`'},value:{description:'The field value to use when the imputation `method` is `"value"`.'}},required:["impute","key"],type:"object"},InlineData:{additionalProperties:!1,properties:{format:{$ref:"#/definitions/DataFormat",description:"An object that specifies the format for parsing the data."},name:{description:"Provide a placeholder name and bind data at runtime.",type:"string"},values:{$ref:"#/definitions/InlineDataset",description:"The full data set, included inline. This can be an array of objects or primitive values, an object, or a string.\nArrays of primitive values are ingested as objects with a `data` property. Strings are parsed according to the specified format type."}},required:["values"],type:"object"},InlineDataset:{anyOf:[{items:{type:"number"},type:"array"},{items:{type:"string"},type:"array"},{items:{type:"boolean"},type:"array"},{items:{type:"object"},type:"array"},{type:"string"},{type:"object"}]},Interpolate:{enum:["linear","linear-closed","step","step-before","step-after","basis","basis-open","basis-closed","cardinal","cardinal-open","cardinal-closed","bundle","monotone"],type:"string"},IntervalSelection:{additionalProperties:!1,properties:{bind:{description:"Establishes a two-way binding between the interval selection and the scales\nused within the same view. This allows a user to interactively pan and\nzoom the view.",enum:["scales"],type:"string"},empty:{description:"By default, all data values are considered to lie within an empty selection.\nWhen set to `none`, empty selections contain no data values.",enum:["all","none"],type:"string"},encodings:{description:"An array of encoding channels. The corresponding data field values\nmust match for a data tuple to fall within the selection.",items:{$ref:"#/definitions/SingleDefUnitChannel"},type:"array"},fields:{description:"An array of field names whose values must match for a data tuple to\nfall within the selection.",items:{type:"string"},type:"array"},init:{$ref:"#/definitions/SelectionInitArrayMapping",description:"Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and arrays of\ninitial values."},mark:{$ref:"#/definitions/BrushConfig",description:"An interval selection also adds a rectangle mark to depict the\nextents of the interval. The `mark` property can be used to customize the\nappearance of the mark."},on:{$ref:"#/definitions/EventStream",description:"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.\nFor interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters)."},resolve:{$ref:"#/definitions/SelectionResolution",description:"With layered and multi-view displays, a strategy that determines how\nselections' data queries are resolved when applied in a filter transform,\nconditional encoding rule, or scale domain."},translate:{description:"When truthy, allows a user to interactively move an interval selection\nback-and-forth. Can be `true`, `false` (to disable panning), or a\n[Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)\nwhich must include a start and end event to trigger continuous panning.\n\n__Default value:__ `true`, which corresponds to\n`[mousedown, window:mouseup] > window:mousemove!` which corresponds to\nclicks and dragging within an interval selection to reposition it.",type:["string","boolean"]},type:{enum:["interval"],type:"string"},zoom:{description:"When truthy, allows a user to interactively resize an interval selection.\nCan be `true`, `false` (to disable zooming), or a [Vega event stream\ndefinition](https://vega.github.io/vega/docs/event-streams/). Currently,\nonly `wheel` events are supported.\n\n\n__Default value:__ `true`, which corresponds to `wheel!`.",type:["string","boolean"]}},required:["type"],type:"object"},IntervalSelectionConfig:{additionalProperties:!1,properties:{bind:{description:"Establishes a two-way binding between the interval selection and the scales\nused within the same view. This allows a user to interactively pan and\nzoom the view.",enum:["scales"],type:"string"},empty:{description:"By default, all data values are considered to lie within an empty selection.\nWhen set to `none`, empty selections contain no data values.",enum:["all","none"],type:"string"},encodings:{description:"An array of encoding channels. The corresponding data field values\nmust match for a data tuple to fall within the selection.",items:{$ref:"#/definitions/SingleDefUnitChannel"},type:"array"},fields:{description:"An array of field names whose values must match for a data tuple to\nfall within the selection.",items:{type:"string"},type:"array"},init:{$ref:"#/definitions/SelectionInitArrayMapping",description:"Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and arrays of\ninitial values."},mark:{$ref:"#/definitions/BrushConfig",description:"An interval selection also adds a rectangle mark to depict the\nextents of the interval. The `mark` property can be used to customize the\nappearance of the mark."},on:{$ref:"#/definitions/EventStream",description:"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.\nFor interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters)."},resolve:{$ref:"#/definitions/SelectionResolution",description:"With layered and multi-view displays, a strategy that determines how\nselections' data queries are resolved when applied in a filter transform,\nconditional encoding rule, or scale domain."},translate:{description:"When truthy, allows a user to interactively move an interval selection\nback-and-forth. Can be `true`, `false` (to disable panning), or a\n[Vega event stream definition](https://vega.github.io/vega/docs/event-streams/)\nwhich must include a start and end event to trigger continuous panning.\n\n__Default value:__ `true`, which corresponds to\n`[mousedown, window:mouseup] > window:mousemove!` which corresponds to\nclicks and dragging within an interval selection to reposition it.",type:["string","boolean"]},zoom:{description:"When truthy, allows a user to interactively resize an interval selection.\nCan be `true`, `false` (to disable zooming), or a [Vega event stream\ndefinition](https://vega.github.io/vega/docs/event-streams/). Currently,\nonly `wheel` events are supported.\n\n\n__Default value:__ `true`, which corresponds to `wheel!`.",type:["string","boolean"]}},type:"object"},JoinAggregateFieldDef:{additionalProperties:!1,properties:{as:{description:"The output name for the join aggregate operation.",type:"string"},field:{description:"The data field for which to compute the aggregate function. This can be omitted for functions that do not operate over a field such as `count`.",type:"string"},op:{$ref:"#/definitions/AggregateOp",description:"The aggregation operation to apply (e.g., sum, average or count). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/aggregate.html#ops)."}},required:["op","as"],type:"object"},JoinAggregateTransform:{additionalProperties:!1,properties:{groupby:{description:"The data fields for partitioning the data objects into separate groups. If unspecified, all data points will be in a single group.",items:{type:"string"},type:"array"},joinaggregate:{description:"The definition of the fields in the join aggregate, and what calculations to use.",items:{$ref:"#/definitions/JoinAggregateFieldDef"},type:"array"}},required:["joinaggregate"],type:"object"},JsonDataFormat:{additionalProperties:!1,properties:{parse:{anyOf:[{$ref:"#/definitions/Parse"},{type:"null"}],description:'If set to `null`, disable type inference based on the spec and only use type inference based on the data.\nAlternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)).\nFor example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.\n\nFor `"date"`, we parse data based using Javascript\'s [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\nFor Specific date formats can be provided (e.g., `{foo: "date:\'%m%d%Y\'"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: "utc:\'%m%d%Y\'"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)'},property:{description:'The JSON property containing the desired data.\nThis parameter can be used when the loaded JSON file may have surrounding structure or meta-data.\nFor example `"property": "values.features"` is equivalent to retrieving `json.values.features`\nfrom the loaded JSON object.',type:"string"},type:{description:'Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.\nThe default format type is determined by the extension of the file URL.\nIf no extension is detected, `"json"` will be used by default.',enum:["json"],type:"string"}},type:"object"},LabelOverlap:{anyOf:[{type:"boolean"},{enum:["parity"],type:"string"},{enum:["greedy"],type:"string"}]},LatLongFieldDef:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).',enum:["quantitative"],type:"string"}},type:"object"},LayerSpec:{additionalProperties:!1,description:"A full layered plot specification, which may contains `encoding` and `projection` properties that will be applied to underlying unit (single-view) specifications.",properties:{data:{$ref:"#/definitions/Data",description:"An object describing the data source"},description:{description:"Description of this mark for commenting purpose.",type:"string"},encoding:{$ref:"#/definitions/Encoding",description:"A shared key-value mapping between encoding channels and definition of fields in the underlying layers."},height:{description:'The height of a visualization.\n\n__Default value:__\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.\n\n__Note__: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"},layer:{description:"Layer or single view specifications to be layered.\n\n__Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.",items:{anyOf:[{$ref:"#/definitions/LayerSpec"},{$ref:"#/definitions/UnitSpec"}]},type:"array"},name:{description:"Name of the visualization for later reference.",type:"string"},projection:{$ref:"#/definitions/Projection",description:"An object defining properties of the geographic projection shared by underlying layers."},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},view:{$ref:"#/definitions/ViewBackground",description:"An object defining the view background's fill and stroke.\n\n__Default value:__ none (transparent)"},width:{description:'The width of a visualization.\n\n__Default value:__ This will be determined by the following rules:\n\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.\n\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"}},required:["layer"],type:"object"},LayoutAlign:{enum:["all","each","none"],type:"string"},LayoutBounds:{anyOf:[{enum:["full"],type:"string"},{enum:["flush"],type:"string"},{$ref:"#/definitions/SignalRef"}]},Legend:{additionalProperties:!1,description:"Properties of a legend or boolean flag for determining whether to show it.",properties:{clipHeight:{description:"The height in pixels to clip symbol legend entries and limit their size.",type:"number"},columnPadding:{description:"The horizontal padding in pixels between symbol legend entries.\n\n__Default value:__ `10`.",type:"number"},columns:{description:"The number of columns in which to arrange symbol legend entries. A value of `0` or lower indicates a single row with one column per entry.",type:"number"},cornerRadius:{description:"Corner radius for the full legend.",type:"number"},direction:{$ref:"#/definitions/Orientation",description:'The direction of the legend, one of `"vertical"` or `"horizontal"`.\n\n__Default value:__\n- For top-/bottom-`orient`ed legends, `"horizontal"`\n- For left-/right-`orient`ed legends, `"vertical"`\n- For top/bottom-left/right-`orient`ed legends, `"horizontal"` for gradient legends and `"vertical"` for symbol legends.'},fillColor:{$ref:"#/definitions/Color",description:"Background fill color for the full legend."},format:{description:"The formatting pattern for labels. This is D3's [number format pattern](https://github.com/d3/d3-format#locale_format) for quantitative fields and D3's [time format pattern](https://github.com/d3/d3-time-format#locale_format) for time field. To override the default type, set `formatType`.\n\nSee the [format documentation](https://vega.github.io/vega-lite/docs/format.html) for more information.\n\n__Default value:__  derived from [numberFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for quantitative fields and from [timeFormat](https://vega.github.io/vega-lite/docs/config.html#format) config for temporal fields.",type:"string"},formatType:{description:"The format type for labels (number or time).",enum:["number","time"],type:"string"},gradientLength:{description:"The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.\n\n__Default value:__ `200`.",minimum:0,type:"number"},gradientOpacity:{description:"Opacity of the color gradient.",type:"number"},gradientStrokeColor:{$ref:"#/definitions/Color",description:'The color of the gradient stroke, can be in hex color code or regular color name.\n\n__Default value:__ `"lightGray"`.'},gradientStrokeWidth:{description:"The width of the gradient stroke, in pixels.\n\n__Default value:__ `0`.",minimum:0,type:"number"},gradientThickness:{description:"The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.\n\n__Default value:__ `16`.",minimum:0,type:"number"},gridAlign:{$ref:"#/definitions/LayoutAlign",description:'The alignment to apply to symbol legends rows and columns. The supported string values are `"all"`, `"each"` (the default), and `none`. For more information, see the [grid layout documentation](https://vega.github.io/vega/docs/layout).\n\n__Default value:__ `"each"`.'},labelAlign:{$ref:"#/definitions/Align",description:"The alignment of the legend label, can be left, center, or right."},labelBaseline:{$ref:"#/definitions/TextBaseline",description:'The position of the baseline of legend label, can be `"top"`, `"middle"`, `"bottom"`, or `"alphabetic"`.\n\n__Default value:__ `"middle"`.'},labelColor:{$ref:"#/definitions/Color",description:"The color of the legend label, can be in hex color code or regular color name."},labelFont:{description:"The font of the legend label.",type:"string"},labelFontSize:{description:"The font size of legend label.\n\n__Default value:__ `10`.",minimum:0,type:"number"},labelFontStyle:{$ref:"#/definitions/FontStyle",description:"The font style of legend label."},labelFontWeight:{$ref:"#/definitions/FontWeight",description:"The font weight of legend label."},labelLimit:{description:"Maximum allowed pixel width of axis tick labels.\n\n__Default value:__ `160`.",type:"number"},labelOffset:{description:"The offset of the legend label.",type:"number"},labelOpacity:{description:"Opacity of labels.",type:"number"},labelOverlap:{$ref:"#/definitions/LabelOverlap",description:'The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` (default) or `"parity"`, a strategy of removing every other label is used. If set to `"greedy"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).\n\n__Default value:__ `true`.'},labelPadding:{description:"Padding in pixels between the legend and legend labels.",type:"number"},labelSeparation:{description:"The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.",type:"number"},offset:{description:"The offset in pixels by which to displace the legend from the data rectangle and axes.\n\n__Default value:__ `18`.",type:"number"},orient:{$ref:"#/definitions/LegendOrient",description:'The orientation of the legend, which determines how the legend is positioned within the scene. One of `"left"`, `"right"`, `"top-left"`, `"top-right"`, `"bottom-left"`, `"bottom-right"`, `"none"`.\n\n__Default value:__ `"right"`'},padding:{description:"The padding between the border and content of the legend group.\n\n__Default value:__ `0`.",type:"number"},rowPadding:{description:"The vertical padding in pixels between symbol legend entries.\n\n__Default value:__ `2`.",type:"number"},strokeColor:{$ref:"#/definitions/Color",description:"Border stroke color for the full legend."},symbolDash:{description:"An array of alternating [stroke, space] lengths for dashed symbol strokes.",items:{type:"number"},type:"array"},symbolDashOffset:{description:"The pixel offset at which to start drawing with the symbol stroke dash array.",type:"number"},symbolFillColor:{$ref:"#/definitions/Color",description:"The color of the legend symbol,"},symbolOffset:{description:"Horizontal pixel offset for legend symbols.\n\n__Default value:__ `0`.",type:"number"},symbolOpacity:{description:"Opacity of the legend symbols.",type:"number"},symbolSize:{description:"The size of the legend symbol, in pixels.\n\n__Default value:__ `100`.",minimum:0,type:"number"},symbolStrokeColor:{$ref:"#/definitions/Color",description:"Stroke color for legend symbols."},symbolStrokeWidth:{description:"The width of the symbol's stroke.\n\n__Default value:__ `1.5`.",minimum:0,type:"number"},symbolType:{$ref:"#/definitions/SymbolShape",description:'Default shape type (such as "circle") for legend symbols.\nCan be one of ``"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n   * In addition to a set of built-in shapes, custom shapes can be defined using [SVG path strings](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths).\n   *\n   * __Default value:__ `"circle"`.\n   *'},tickCount:{description:"The desired number of tick values for quantitative legends.",type:"number"},tickMinStep:{description:"The minimum desired step between legend ticks, in terms of scale domain values. For example, a value of `1` indicates that ticks should not be less than 1 unit apart. If `tickMinStep` is specified, the `tickCount` value will be adjusted, if necessary, to enforce the minimum step value.\n\n__Default value__: `undefined`",type:"number"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},titleAlign:{$ref:"#/definitions/Align",description:'Horizontal text alignment for legend titles.\n\n__Default value:__ `"left"`.'},titleAnchor:{$ref:"#/definitions/TitleAnchor",description:"Text anchor position for placing legend titles."},titleBaseline:{$ref:"#/definitions/TextBaseline",description:'Vertical text baseline for legend titles.\n\n__Default value:__ `"top"`.'},titleColor:{$ref:"#/definitions/Color",description:"The color of the legend title, can be in hex color code or regular color name."},titleFont:{description:"The font of the legend title.",type:"string"},titleFontSize:{description:"The font size of the legend title.",type:"number"},titleFontStyle:{$ref:"#/definitions/FontStyle",description:"The font style of the legend title."},titleFontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight of the legend title.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},titleLimit:{description:"Maximum allowed pixel width of axis titles.\n\n__Default value:__ `180`.",minimum:0,type:"number"},titleOpacity:{description:"Opacity of the legend title.",type:"number"},titleOrient:{$ref:"#/definitions/Orient",description:"Orientation of the legend title."},titlePadding:{description:"The padding, in pixels, between title and legend.\n\n__Default value:__ `5`.",type:"number"},type:{description:'The type of the legend. Use `"symbol"` to create a discrete legend and `"gradient"` for a continuous color gradient.\n\n__Default value:__ `"gradient"` for non-binned quantitative fields and temporal fields; `"symbol"` otherwise.',enum:["symbol","gradient"],type:"string"},values:{description:"Explicitly set the visible legend values.",items:{anyOf:[{type:"number"},{type:"string"},{type:"boolean"},{$ref:"#/definitions/DateTime"}]},type:"array"},zindex:{description:"A non-positive integer indicating z-index of the legend.\nIf zindex is 0, legend should be drawn behind all chart elements.\nTo put them in front, use zindex = 1.",minimum:0,type:"number"}},type:"object"},LegendConfig:{additionalProperties:!1,properties:{clipHeight:{description:"The height in pixels to clip symbol legend entries and limit their size.",type:"number"},columnPadding:{description:"The horizontal padding in pixels between symbol legend entries.\n\n__Default value:__ `10`.",type:"number"},columns:{description:"The number of columns in which to arrange symbol legend entries. A value of `0` or lower indicates a single row with one column per entry.",type:"number"},cornerRadius:{description:"Corner radius for the full legend.",type:"number"},fillColor:{$ref:"#/definitions/Color",description:"Background fill color for the full legend."},gradientDirection:{$ref:"#/definitions/Orientation",description:'The default direction (`"horizontal"` or `"vertical"`) for gradient legends.\n\n__Default value:__ `"vertical"`.'},gradientHorizontalMaxLength:{description:"Max legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.\n\n__Default value:__ `200`",type:"number"},gradientHorizontalMinLength:{description:"Min legend length for a horizontal gradient when `config.legend.gradientLength` is undefined.\n\n__Default value:__ `100`",type:"number"},gradientLabelLimit:{description:"The maximum allowed length in pixels of color ramp gradient labels.",type:"number"},gradientLabelOffset:{description:"Vertical offset in pixels for color ramp gradient labels.\n\n__Default value:__ `2`.",type:"number"},gradientLength:{description:"The length in pixels of the primary axis of a color gradient. This value corresponds to the height of a vertical gradient or the width of a horizontal gradient.\n\n__Default value:__ `200`.",minimum:0,type:"number"},gradientOpacity:{description:"Opacity of the color gradient.",type:"number"},gradientStrokeColor:{$ref:"#/definitions/Color",description:'The color of the gradient stroke, can be in hex color code or regular color name.\n\n__Default value:__ `"lightGray"`.'},gradientStrokeWidth:{description:"The width of the gradient stroke, in pixels.\n\n__Default value:__ `0`.",minimum:0,type:"number"},gradientThickness:{description:"The thickness in pixels of the color gradient. This value corresponds to the width of a vertical gradient or the height of a horizontal gradient.\n\n__Default value:__ `16`.",minimum:0,type:"number"},gradientVerticalMaxLength:{description:"Max legend length for a vertical gradient when `config.legend.gradientLength` is undefined.\n\n__Default value:__ `200`",type:"number"},gradientVerticalMinLength:{description:"Min legend length for a vertical gradient when `config.legend.gradientLength` is undefined.\n\n__Default value:__ `100`",type:"number"},gridAlign:{$ref:"#/definitions/LayoutAlign",description:'The alignment to apply to symbol legends rows and columns. The supported string values are `"all"`, `"each"` (the default), and `none`. For more information, see the [grid layout documentation](https://vega.github.io/vega/docs/layout).\n\n__Default value:__ `"each"`.'},labelAlign:{$ref:"#/definitions/Align",description:"The alignment of the legend label, can be left, center, or right."},labelBaseline:{$ref:"#/definitions/TextBaseline",description:'The position of the baseline of legend label, can be `"top"`, `"middle"`, `"bottom"`, or `"alphabetic"`.\n\n__Default value:__ `"middle"`.'},labelColor:{$ref:"#/definitions/Color",description:"The color of the legend label, can be in hex color code or regular color name."},labelFont:{description:"The font of the legend label.",type:"string"},labelFontSize:{description:"The font size of legend label.\n\n__Default value:__ `10`.",minimum:0,type:"number"},labelFontStyle:{$ref:"#/definitions/FontStyle",description:"The font style of legend label."},labelFontWeight:{$ref:"#/definitions/FontWeight",description:"The font weight of legend label."},labelLimit:{description:"Maximum allowed pixel width of axis tick labels.\n\n__Default value:__ `160`.",type:"number"},labelOffset:{description:"The offset of the legend label.",type:"number"},labelOpacity:{description:"Opacity of labels.",type:"number"},labelOverlap:{$ref:"#/definitions/LabelOverlap",description:'The strategy to use for resolving overlap of labels in gradient legends. If `false`, no overlap reduction is attempted. If set to `true` or `"parity"`, a strategy of removing every other label is used. If set to `"greedy"`, a linear scan of the labels is performed, removing any label that overlaps with the last visible label (this often works better for log-scaled axes).\n\n__Default value:__ `"greedy"` for `log scales otherwise `true`.\n   *'},labelPadding:{description:"Padding in pixels between the legend and legend labels.",type:"number"},labelSeparation:{description:"The minimum separation that must be between label bounding boxes for them to be considered non-overlapping (default `0`). This property is ignored if *labelOverlap* resolution is not enabled.",type:"number"},layout:{$ref:"#/definitions/LegendLayout",description:"Legend orient group layout parameters."},offset:{description:"The offset in pixels by which to displace the legend from the data rectangle and axes.\n\n__Default value:__ `18`.",type:"number"},orient:{$ref:"#/definitions/LegendOrient",description:'The orientation of the legend, which determines how the legend is positioned within the scene. One of "left", "right", "top-left", "top-right", "bottom-left", "bottom-right", "none".\n\n__Default value:__ `"right"`'},padding:{description:"The padding between the border and content of the legend group.\n\n__Default value:__ `0`.",type:"number"},rowPadding:{description:"The vertical padding in pixels between symbol legend entries.\n\n__Default value:__ `2`.",type:"number"},shortTimeLabels:{description:"Whether month names and weekday names should be abbreviated.\n\n__Default value:__  `false`",type:"boolean"},strokeColor:{$ref:"#/definitions/Color",description:"Border stroke color for the full legend."},strokeDash:{description:"Border stroke dash pattern for the full legend.",items:{type:"number"},type:"array"},strokeWidth:{description:"Border stroke width for the full legend.",type:"number"},symbolBaseFillColor:{$ref:"#/definitions/Color",description:'Default fill color for legend symbols. Only applied if there is no `"fill"` scale color encoding for the legend.\n\n__Default value:__ `"transparent"`.'},symbolBaseStrokeColor:{$ref:"#/definitions/Color",description:'Default stroke color for legend symbols. Only applied if there is no `"fill"` scale color encoding for the legend.\n\n__Default value:__ `"gray"`.'},symbolDash:{description:"An array of alternating [stroke, space] lengths for dashed symbol strokes.",items:{type:"number"},type:"array"},symbolDashOffset:{description:"The pixel offset at which to start drawing with the symbol stroke dash array.",type:"number"},symbolDirection:{$ref:"#/definitions/Orientation",description:'The default direction (`"horizontal"` or `"vertical"`) for symbol legends.\n\n__Default value:__ `"vertical"`.'},symbolFillColor:{$ref:"#/definitions/Color",description:"The color of the legend symbol,"},symbolOffset:{description:"Horizontal pixel offset for legend symbols.\n\n__Default value:__ `0`.",type:"number"},symbolOpacity:{description:"Opacity of the legend symbols.",type:"number"},symbolSize:{description:"The size of the legend symbol, in pixels.\n\n__Default value:__ `100`.",minimum:0,type:"number"},symbolStrokeColor:{$ref:"#/definitions/Color",description:"Stroke color for legend symbols."},symbolStrokeWidth:{description:"The width of the symbol's stroke.\n\n__Default value:__ `1.5`.",minimum:0,type:"number"},symbolType:{$ref:"#/definitions/SymbolShape",description:'Default shape type (such as "circle") for legend symbols.\nCan be one of ``"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n   * In addition to a set of built-in shapes, custom shapes can be defined using [SVG path strings](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths).\n   *\n   * __Default value:__ `"circle"`.\n   *'},title:{description:"Set to null to disable title for the axis, legend, or header.",type:"null"},titleAlign:{$ref:"#/definitions/Align",description:'Horizontal text alignment for legend titles.\n\n__Default value:__ `"left"`.'},titleAnchor:{$ref:"#/definitions/TitleAnchor",description:"Text anchor position for placing legend titles."},titleBaseline:{$ref:"#/definitions/TextBaseline",description:'Vertical text baseline for legend titles.\n\n__Default value:__ `"top"`.'},titleColor:{$ref:"#/definitions/Color",description:"The color of the legend title, can be in hex color code or regular color name."},titleFont:{description:"The font of the legend title.",type:"string"},titleFontSize:{description:"The font size of the legend title.",type:"number"},titleFontStyle:{$ref:"#/definitions/FontStyle",description:"The font style of the legend title."},titleFontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight of the legend title.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},titleLimit:{description:"Maximum allowed pixel width of axis titles.\n\n__Default value:__ `180`.",minimum:0,type:"number"},titleOpacity:{description:"Opacity of the legend title.",type:"number"},titleOrient:{$ref:"#/definitions/Orient",description:"Orientation of the legend title."},titlePadding:{description:"The padding, in pixels, between title and legend.\n\n__Default value:__ `5`.",type:"number"}},type:"object"},LegendLayout:{additionalProperties:!1,properties:{anchor:{$ref:"#/definitions/TitleAnchor",description:"The anchor point for legend orient group layout."},bottom:{$ref:"#/definitions/BaseLegendLayout"},"bottom-left":{$ref:"#/definitions/BaseLegendLayout"},"bottom-right":{$ref:"#/definitions/BaseLegendLayout"},bounds:{$ref:"#/definitions/LayoutBounds",description:"The bounds calculation to use for legend orient group layout."},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/SignalRef"}],description:"A flag to center legends within a shared orient group."},direction:{anyOf:[{$ref:"#/definitions/Orientation"},{$ref:"#/definitions/SignalRef"}],description:"The layout direction for legend orient group layout."},left:{$ref:"#/definitions/BaseLegendLayout"},margin:{anyOf:[{type:"number"},{$ref:"#/definitions/SignalRef"}],description:"The pixel margin between legends within a orient group."},offset:{anyOf:[{type:"number"},{$ref:"#/definitions/SignalRef"}],description:"The pixel offset from the chart body for a legend orient group."},right:{$ref:"#/definitions/BaseLegendLayout"},top:{$ref:"#/definitions/BaseLegendLayout"},"top-left":{$ref:"#/definitions/BaseLegendLayout"},"top-right":{$ref:"#/definitions/BaseLegendLayout"}},type:"object"},LegendOrient:{enum:["none","left","right","top","bottom","top-left","top-right","bottom-left","bottom-right"],type:"string"},LegendResolveMap:{additionalProperties:!1,properties:{color:{$ref:"#/definitions/ResolveMode"},fill:{$ref:"#/definitions/ResolveMode"},fillOpacity:{$ref:"#/definitions/ResolveMode"},opacity:{$ref:"#/definitions/ResolveMode"},shape:{$ref:"#/definitions/ResolveMode"},size:{$ref:"#/definitions/ResolveMode"},stroke:{$ref:"#/definitions/ResolveMode"},strokeOpacity:{$ref:"#/definitions/ResolveMode"},strokeWidth:{$ref:"#/definitions/ResolveMode"}},type:"object"},LineConfig:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},filled:{description:"Whether the mark's color should be used as fill color instead of stroke color.\n\n__Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",type:"boolean"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},order:{description:"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.",type:["null","boolean"]},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},point:{anyOf:[{type:"boolean"},{$ref:"#/definitions/OverlayMarkDef"},{enum:["transparent"],type:"string"}],description:'A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\n\n- If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).\n\n- If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\n\n- If this property is `false`, no points would be automatically added to line or area marks.\n\n__Default value:__ `false`.'},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},size:{description:"Default size for marks.\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n- For `bar`, this represents the band size of the bar, in pixels.\n- For `text`, this represents the font size, in pixels.\n\n__Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},tooltip:{anyOf:[{type:"string"},{$ref:"#/definitions/TooltipContent"},{type:"null"}],description:'The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n\n- If `tooltip` is `{"content": "encoding"}`, then all fields from `encoding` will be used.\n- If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.\n- If set to `null`, then no tooltip will be used.'},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"}},type:"object"},LocalMultiTimeUnit:{enum:["yearquarter","yearquartermonth","yearmonth","yearmonthdate","yearmonthdatehours","yearmonthdatehoursminutes","yearmonthdatehoursminutesseconds","quartermonth","monthdate","monthdatehours","hoursminutes","hoursminutesseconds","minutesseconds","secondsmilliseconds"],type:"string"},LocalSingleTimeUnit:{enum:["year","quarter","month","day","date","hours","minutes","seconds","milliseconds"],type:"string"},"LogicalAnd<Predicate>":{additionalProperties:!1,properties:{and:{items:{$ref:"#/definitions/LogicalOperand<Predicate>"},type:"array"}},required:["and"],type:"object"},SelectionAnd:{additionalProperties:!1,properties:{and:{items:{$ref:"#/definitions/SelectionOperand"},type:"array"}},required:["and"],type:"object"},"LogicalNot<Predicate>":{additionalProperties:!1,properties:{not:{$ref:"#/definitions/LogicalOperand<Predicate>"}},required:["not"],type:"object"},SelectionNot:{additionalProperties:!1,properties:{not:{$ref:"#/definitions/SelectionOperand"}},required:["not"],type:"object"},"LogicalOperand<Predicate>":{anyOf:[{$ref:"#/definitions/LogicalNot<Predicate>"},{$ref:"#/definitions/LogicalAnd<Predicate>"},{$ref:"#/definitions/LogicalOr<Predicate>"},{$ref:"#/definitions/Predicate"}]},SelectionOperand:{anyOf:[{$ref:"#/definitions/SelectionNot"},{$ref:"#/definitions/SelectionAnd"},{$ref:"#/definitions/SelectionOr"},{type:"string"}]},"LogicalOr<Predicate>":{additionalProperties:!1,properties:{or:{items:{$ref:"#/definitions/LogicalOperand<Predicate>"},type:"array"}},required:["or"],type:"object"},SelectionOr:{additionalProperties:!1,properties:{or:{items:{$ref:"#/definitions/SelectionOperand"},type:"array"}},required:["or"],type:"object"},LookupData:{additionalProperties:!1,properties:{data:{$ref:"#/definitions/Data",description:"Secondary data source to lookup in."},fields:{description:"Fields in foreign data to lookup.\nIf not specified, the entire object is queried.",items:{type:"string"},type:"array"},key:{description:"Key in data to lookup.",type:"string"}},required:["data","key"],type:"object"},LookupTransform:{additionalProperties:!1,properties:{as:{anyOf:[{type:"string"},{items:{type:"string"},type:"array"}],description:"The field or fields for storing the computed formula value.\nIf `from.fields` is specified, the transform will use the same names for `as`.\nIf `from.fields` is not specified, `as` has to be a string and we put the whole object into the data under the specified name."},default:{description:"The default value to use if lookup fails.\n\n__Default value:__ `null`",type:"string"},from:{$ref:"#/definitions/LookupData",description:"Secondary data reference."},lookup:{description:"Key in primary data source.",type:"string"}},required:["lookup","from"],type:"object"},Mark:{description:"All types of primitive marks.",enum:["area","bar","line","trail","point","text","tick","rect","rule","circle","square","geoshape"],type:"string"},MarkConfig:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},filled:{description:"Whether the mark's color should be used as fill color instead of stroke color.\n\n__Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",type:"boolean"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},order:{description:"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.",type:["null","boolean"]},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},size:{description:"Default size for marks.\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n- For `bar`, this represents the band size of the bar, in pixels.\n- For `text`, this represents the font size, in pixels.\n\n__Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},tooltip:{anyOf:[{type:"string"},{$ref:"#/definitions/TooltipContent"},{type:"null"}],description:'The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n\n- If `tooltip` is `{"content": "encoding"}`, then all fields from `encoding` will be used.\n- If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.\n- If set to `null`, then no tooltip will be used.'},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"}},type:"object"},MarkDef:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},binSpacing:{description:"Offset between bars for binned field.  Ideal value for this is either 0 (Preferred by statisticians) or 1 (Vega-Lite Default, D3 example style).\n\n__Default value:__ `1`",minimum:0,type:"number"},clip:{description:"Whether a mark be clipped to the enclosing group’s width and height.",type:"boolean"},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},filled:{description:"Whether the mark's color should be used as fill color instead of stroke color.\n\n__Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",type:"boolean"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},line:{anyOf:[{type:"boolean"},{$ref:"#/definitions/OverlayMarkDef"}],description:"A flag for overlaying line on top of area marks, or an object defining the properties of the overlayed lines.\n\n- If this value is an empty object (`{}`) or `true`, lines with default properties will be used.\n\n- If this value is `false`, no lines would be automatically added to area marks.\n\n__Default value:__ `false`."},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},order:{description:"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.",type:["null","boolean"]},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},point:{anyOf:[{type:"boolean"},{$ref:"#/definitions/OverlayMarkDef"},{enum:["transparent"],type:"string"}],description:'A flag for overlaying points on top of line or area marks, or an object defining the properties of the overlayed points.\n\n- If this property is `"transparent"`, transparent points will be used (for enhancing tooltips and selections).\n\n- If this property is an empty object (`{}`) or `true`, filled points with default properties will be used.\n\n- If this property is `false`, no points would be automatically added to line or area marks.\n\n__Default value:__ `false`.'},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},size:{description:"Default size for marks.\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n- For `bar`, this represents the band size of the bar, in pixels.\n- For `text`, this represents the font size, in pixels.\n\n__Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},style:{anyOf:[{type:"string"},{items:{type:"string"},type:"array"}],description:'A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.\n\n__Default value:__ The mark\'s name.  For example, a bar mark will have style `"bar"` by default.\n__Note:__ Any specified style will augment the default style. For example, a bar mark with `"style": "foo"` will receive from `config.style.bar` and `config.style.foo` (the specified style `"foo"` has higher precedence).'},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},thickness:{description:"Thickness of the tick mark.\n\n__Default value:__  `1`",minimum:0,type:"number"},tooltip:{anyOf:[{type:"string"},{$ref:"#/definitions/TooltipContent"},{type:"null"}],description:'The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n\n- If `tooltip` is `{"content": "encoding"}`, then all fields from `encoding` will be used.\n- If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.\n- If set to `null`, then no tooltip will be used.'},type:{$ref:"#/definitions/Mark",description:'The mark type. This could a primitive mark type\n(one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,\n`"area"`, `"point"`, `"geoshape"`, `"rule"`, and `"text"`)\nor a composite mark type (`"boxplot"`, `"errorband"`, `"errorbar"`).'},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},x2Offset:{description:"Offset for x2-position.",type:"number"},xOffset:{description:"Offset for x-position.",type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y2Offset:{description:"Offset for y2-position.",type:"number"},yOffset:{description:"Offset for y-position.",type:"number"}},required:["type"],type:"object"},Month:{maximum:12,minimum:1,type:"number"},MultiSelection:{additionalProperties:!1,properties:{empty:{description:"By default, all data values are considered to lie within an empty selection.\nWhen set to `none`, empty selections contain no data values.",enum:["all","none"],type:"string"},encodings:{description:"An array of encoding channels. The corresponding data field values\nmust match for a data tuple to fall within the selection.",items:{$ref:"#/definitions/SingleDefUnitChannel"},type:"array"},fields:{description:"An array of field names whose values must match for a data tuple to\nfall within the selection.",items:{type:"string"},type:"array"},init:{anyOf:[{$ref:"#/definitions/SelectionInitMapping"},{items:{$ref:"#/definitions/SelectionInitMapping"},type:"array"}],description:"Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and an initial\nvalue (or array of values)."},nearest:{description:"When true, an invisible voronoi diagram is computed to accelerate discrete\nselection. The data value _nearest_ the mouse cursor is added to the selection.\n\nSee the [nearest transform](https://vega.github.io/vega-lite/docs/nearest.html) documentation for more information.",type:"boolean"},on:{$ref:"#/definitions/EventStream",description:"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.\nFor interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters)."},resolve:{$ref:"#/definitions/SelectionResolution",description:"With layered and multi-view displays, a strategy that determines how\nselections' data queries are resolved when applied in a filter transform,\nconditional encoding rule, or scale domain."},toggle:{description:"Controls whether data values should be toggled or only ever inserted into\nmulti selections. Can be `true`, `false` (for insertion only), or a\n[Vega expression](https://vega.github.io/vega/docs/expressions/).\n\n__Default value:__ `true`, which corresponds to `event.shiftKey` (i.e.,\ndata values are toggled when a user interacts with the shift-key pressed).\n\nSee the [toggle transform](https://vega.github.io/vega-lite/docs/toggle.html) documentation for more information.",type:["string","boolean"]},type:{enum:["multi"],type:"string"}},required:["type"],type:"object"},MultiSelectionConfig:{additionalProperties:!1,properties:{empty:{description:"By default, all data values are considered to lie within an empty selection.\nWhen set to `none`, empty selections contain no data values.",enum:["all","none"],type:"string"},encodings:{description:"An array of encoding channels. The corresponding data field values\nmust match for a data tuple to fall within the selection.",items:{$ref:"#/definitions/SingleDefUnitChannel"},type:"array"},fields:{description:"An array of field names whose values must match for a data tuple to\nfall within the selection.",items:{type:"string"},type:"array"},init:{anyOf:[{$ref:"#/definitions/SelectionInitMapping"},{items:{$ref:"#/definitions/SelectionInitMapping"},type:"array"}],description:"Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and an initial\nvalue (or array of values)."},nearest:{description:"When true, an invisible voronoi diagram is computed to accelerate discrete\nselection. The data value _nearest_ the mouse cursor is added to the selection.\n\nSee the [nearest transform](https://vega.github.io/vega-lite/docs/nearest.html) documentation for more information.",type:"boolean"},on:{$ref:"#/definitions/EventStream",description:"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.\nFor interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters)."},resolve:{$ref:"#/definitions/SelectionResolution",description:"With layered and multi-view displays, a strategy that determines how\nselections' data queries are resolved when applied in a filter transform,\nconditional encoding rule, or scale domain."},toggle:{description:"Controls whether data values should be toggled or only ever inserted into\nmulti selections. Can be `true`, `false` (for insertion only), or a\n[Vega expression](https://vega.github.io/vega/docs/expressions/).\n\n__Default value:__ `true`, which corresponds to `event.shiftKey` (i.e.,\ndata values are toggled when a user interacts with the shift-key pressed).\n\nSee the [toggle transform](https://vega.github.io/vega-lite/docs/toggle.html) documentation for more information.",type:["string","boolean"]}},type:"object"},MultiTimeUnit:{anyOf:[{$ref:"#/definitions/LocalMultiTimeUnit"},{$ref:"#/definitions/UtcMultiTimeUnit"}]},NamedData:{additionalProperties:!1,properties:{format:{$ref:"#/definitions/DataFormat",description:"An object that specifies the format for parsing the data."},name:{description:"Provide a placeholder name and bind data at runtime.",type:"string"}},required:["name"],type:"object"},NiceTime:{enum:["second","minute","hour","day","week","month","year"],type:"string"},NumericFieldDefWithCondition:{$ref:"#/definitions/FieldDefWithCondition<MarkPropFieldDef,number>"},NumericValueDefWithCondition:{$ref:"#/definitions/ValueDefWithCondition<MarkPropFieldDef,number>"},OrderFieldDef:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},sort:{$ref:"#/definitions/SortOrder",description:'The sort order. One of `"ascending"` (default) or `"descending"`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},Orient:{enum:["left","right","top","bottom"],type:"string"},Orientation:{enum:["horizontal","vertical"],type:"string"},OverlayMarkDef:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},clip:{description:"Whether a mark be clipped to the enclosing group’s width and height.",type:"boolean"},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},filled:{description:"Whether the mark's color should be used as fill color instead of stroke color.\n\n__Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",type:"boolean"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},order:{description:"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.",type:["null","boolean"]},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},size:{description:"Default size for marks.\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n- For `bar`, this represents the band size of the bar, in pixels.\n- For `text`, this represents the font size, in pixels.\n\n__Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},style:{anyOf:[{type:"string"},{items:{type:"string"},type:"array"}],description:'A string or array of strings indicating the name of custom styles to apply to the mark. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles. Any [mark properties](https://vega.github.io/vega-lite/docs/encoding.html#mark-prop) explicitly defined within the `encoding` will override a style default.\n\n__Default value:__ The mark\'s name.  For example, a bar mark will have style `"bar"` by default.\n__Note:__ Any specified style will augment the default style. For example, a bar mark with `"style": "foo"` will receive from `config.style.bar` and `config.style.foo` (the specified style `"foo"` has higher precedence).'},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},tooltip:{anyOf:[{type:"string"},{$ref:"#/definitions/TooltipContent"},{type:"null"}],description:'The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n\n- If `tooltip` is `{"content": "encoding"}`, then all fields from `encoding` will be used.\n- If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.\n- If set to `null`, then no tooltip will be used.'},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},x2Offset:{description:"Offset for x2-position.",type:"number"},xOffset:{description:"Offset for x-position.",type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y2Offset:{description:"Offset for y2-position.",type:"number"},yOffset:{description:"Offset for y-position.",type:"number"}},type:"object"},Padding:{anyOf:[{type:"number"},{additionalProperties:!1,properties:{bottom:{type:"number"},left:{type:"number"},right:{type:"number"},top:{type:"number"}},type:"object"}],minimum:0},Parse:{additionalProperties:{$ref:"#/definitions/ParseValue"},type:"object"},ParseValue:{anyOf:[{type:"null"},{type:"string"},{enum:["string"],type:"string"},{enum:["boolean"],type:"string"},{enum:["date"],type:"string"},{enum:["number"],type:"string"}]},"PartsMixins<BoxPlotPart>":{additionalProperties:!1,description:"Make all properties in T optional",properties:{box:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},median:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},outliers:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},rule:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},ticks:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]}},type:"object"},"PartsMixins<ErrorBandPart>":{additionalProperties:!1,description:"Make all properties in T optional",properties:{band:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},borders:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]}},type:"object"},"PartsMixins<ErrorBarPart>":{additionalProperties:!1,description:"Make all properties in T optional",properties:{rule:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]},ticks:{anyOf:[{type:"boolean"},{$ref:"#/definitions/MarkConfig"}]}},type:"object"},PositionFieldDef:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},axis:{anyOf:[{$ref:"#/definitions/Axis"},{type:"null"}],description:"An object defining properties of axis's gridlines, ticks and labels.\nIf `null`, the axis for the encoding channel will be removed.\n\n__Default value:__ If undefined, default [axis properties](https://vega.github.io/vega-lite/docs/axis.html) are applied."},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},impute:{$ref:"#/definitions/ImputeParams",description:"An object defining the properties of the Impute Operation to be applied.\nThe field value of the other positional channel is taken as `key` of the `Impute` Operation.\nThe field of the `color` channel if specified is used as `groupby` of the `Impute` Operation."},scale:{anyOf:[{$ref:"#/definitions/Scale"},{type:"null"}],description:"An object defining properties of the channel's scale, which is the function that transforms values in the data domain (numbers, dates, strings, etc) to visual values (pixels, colors, sizes) of the encoding channels.\n\nIf `null`, the scale will be [disabled and the data value will be directly encoded](https://vega.github.io/vega-lite/docs/scale.html#disable).\n\n__Default value:__ If undefined, default [scale properties](https://vega.github.io/vega-lite/docs/scale.html) are applied."},sort:{$ref:"#/definitions/Sort",description:'Sort order for the encoded field.\n\nFor continuous fields (quantitative or temporal), `sort` can be either `"ascending"` or `"descending"`.\n\nFor discrete fields, `sort` can be one of the following:\n- `"ascending"` or `"descending"` -- for sorting by the values\' natural order in Javascript.\n- [A sort-by-encoding definition](https://vega.github.io/vega-lite/docs/sort.html#sort-by-encoding) for sorting by another encoding channel. (This type of sort definition is not available for `row` and `column` channels.)\n- [A sort field definition](https://vega.github.io/vega-lite/docs/sort.html#sort-field) for sorting by another field.\n- [An array specifying the field values in preferred order](https://vega.github.io/vega-lite/docs/sort.html#sort-array). In this case, the sort order will obey the values in the array, followed by any unspecified values in their original order.  For discrete time field, values in the sort array can be [date-time definition objects](types#datetime). In addition, for time units `"month"` and `"day"`, the values can be the month or day names (case insensitive) or their 3-letter initials (e.g., `"Mon"`, `"Tue"`).\n- `null` indicating no sort.\n\n__Default value:__ `"ascending"`\n\n__Note:__ `null` is not supported for `row` and `column`.'},stack:{anyOf:[{$ref:"#/definitions/StackOffset"},{type:"null"}],description:'Type of stacking offset if the field should be stacked.\n`stack` is only applicable for `x` and `y` channels with continuous domains.\nFor example, `stack` of `y` can be used to customize stacking for a vertical bar chart.\n\n`stack` can be one of the following values:\n- `"zero"`: stacking with baseline offset at zero value of the scale (for creating typical stacked [bar](https://vega.github.io/vega-lite/docs/stack.html#bar) and [area](https://vega.github.io/vega-lite/docs/stack.html#area) chart).\n- `"normalize"` - stacking with normalized domain (for creating [normalized stacked bar and area charts](https://vega.github.io/vega-lite/docs/stack.html#normalized). <br/>\n-`"center"` - stacking with center baseline (for [streamgraph](https://vega.github.io/vega-lite/docs/stack.html#streamgraph)).\n- `null` - No-stacking. This will produce layered [bar](https://vega.github.io/vega-lite/docs/stack.html#layered-bar-chart) and area chart.\n\n__Default value:__ `zero` for plots with all of the following conditions are true:\n(1) the mark is `bar` or `area`;\n(2) the stacked measure channel (x or y) has a linear scale;\n(3) At least one of non-position channels mapped to an unaggregated field that is different from x and y.  Otherwise, `null` by default.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},Predicate:{anyOf:[{$ref:"#/definitions/FieldEqualPredicate"},{$ref:"#/definitions/FieldRangePredicate"},{$ref:"#/definitions/FieldOneOfPredicate"},{$ref:"#/definitions/FieldLTPredicate"},{$ref:"#/definitions/FieldGTPredicate"},{$ref:"#/definitions/FieldLTEPredicate"},{$ref:"#/definitions/FieldGTEPredicate"},{$ref:"#/definitions/FieldValidPredicate"},{$ref:"#/definitions/SelectionPredicate"},{type:"string"}]},Projection:{additionalProperties:!1,properties:{center:{description:"Sets the projection’s center to the specified center, a two-element array of longitude and latitude in degrees.\n\n__Default value:__ `[0, 0]`",items:{type:"number"},type:"array"},clipAngle:{description:"Sets the projection’s clipping circle radius to the specified angle in degrees. If `null`, switches to [antimeridian](http://bl.ocks.org/mbostock/3788999) cutting rather than small-circle clipping.",type:"number"},clipExtent:{description:"Sets the projection’s viewport clip extent to the specified bounds in pixels. The extent bounds are specified as an array `[[x0, y0], [x1, y1]]`, where `x0` is the left-side of the viewport, `y0` is the top, `x1` is the right and `y1` is the bottom. If `null`, no viewport clipping is performed.",items:{items:{type:"number"},type:"array"},type:"array"},coefficient:{type:"number"},distance:{type:"number"},fraction:{type:"number"},lobes:{type:"number"},parallel:{type:"number"},precision:{description:"Sets the threshold for the projection’s [adaptive resampling](http://bl.ocks.org/mbostock/3795544) to the specified value in pixels. This value corresponds to the [Douglas–Peucker distance](http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm). If precision is not specified, returns the projection’s current resampling precision which defaults to `√0.5 ≅ 0.70710…`.",type:"string"},radius:{type:"number"},ratio:{type:"number"},rotate:{description:"Sets the projection’s three-axis rotation to the specified angles, which must be a two- or three-element array of numbers [`lambda`, `phi`, `gamma`] specifying the rotation angles in degrees about each spherical axis. (These correspond to yaw, pitch and roll.)\n\n__Default value:__ `[0, 0, 0]`",items:{type:"number"},type:"array"},spacing:{type:"number"},tilt:{type:"number"},type:{$ref:"#/definitions/ProjectionType",description:'The cartographic projection to use. This value is case-insensitive, for example `"albers"` and `"Albers"` indicate the same projection type. You can find all valid projection types [in the documentation](https://vega.github.io/vega-lite/docs/projection.html#projection-types).\n\n__Default value:__ `mercator`'}},type:"object"},ProjectionConfig:{$ref:"#/definitions/Projection",description:"Any property of Projection can be in config"},ProjectionType:{enum:["albers","albersUsa","azimuthalEqualArea","azimuthalEquidistant","conicConformal","conicEqualArea","conicEquidistant","equirectangular","gnomonic","identity","mercator","orthographic","stereographic","transverseMercator"],type:"string"},RangeConfig:{additionalProperties:{$ref:"#/definitions/RangeConfigValue"},properties:{category:{anyOf:[{items:{type:"string"},type:"array"},{$ref:"#/definitions/SchemeConfig"}],description:"Default range for _nominal_ (categorical) fields."},diverging:{anyOf:[{items:{type:"string"},type:"array"},{$ref:"#/definitions/SchemeConfig"}],description:"Default range for diverging _quantitative_ fields."},heatmap:{anyOf:[{items:{type:"string"},type:"array"},{$ref:"#/definitions/SchemeConfig"}],description:"Default range for _quantitative_ heatmaps."},ordinal:{anyOf:[{items:{type:"string"},type:"array"},{$ref:"#/definitions/SchemeConfig"}],description:"Default range for _ordinal_ fields."},ramp:{anyOf:[{items:{type:"string"},type:"array"},{$ref:"#/definitions/SchemeConfig"}],description:"Default range for _quantitative_ and _temporal_ fields."},symbol:{description:"Default range palette for the `shape` channel.",items:{type:"string"},type:"array"}},type:"object"},RangeConfigValue:{anyOf:[{items:{type:["number","string"]},type:"array"},{$ref:"#/definitions/SchemeConfig"},{additionalProperties:!1,properties:{step:{type:"number"}},required:["step"],type:"object"}]},RepeatMapping:{additionalProperties:!1,properties:{column:{description:"An array of fields to be repeated horizontally.",items:{type:"string"},type:"array"},row:{description:"An array of fields to be repeated vertically.",items:{type:"string"},type:"array"}},type:"object"},RepeatRef:{additionalProperties:!1,description:"Reference to a repeated value.",properties:{repeat:{enum:["row","column","repeat"],type:"string"}},required:["repeat"],type:"object"},Resolve:{additionalProperties:!1,description:"Defines how scales, axes, and legends from different specs should be combined. Resolve is a mapping from `scale`, `axis`, and `legend` to a mapping from channels to resolutions.",properties:{axis:{$ref:"#/definitions/AxisResolveMap"},legend:{$ref:"#/definitions/LegendResolveMap"},scale:{$ref:"#/definitions/ScaleResolveMap"}},type:"object"},ResolveMode:{enum:["independent","shared"],type:"string"},"RowCol<LayoutAlign>":{additionalProperties:!1,properties:{column:{$ref:"#/definitions/LayoutAlign"},row:{$ref:"#/definitions/LayoutAlign"}},type:"object"},"RowCol<boolean>":{additionalProperties:!1,properties:{column:{type:"boolean"},row:{type:"boolean"}},type:"object"},"RowCol<number>":{additionalProperties:!1,properties:{column:{type:"number"},row:{type:"number"}},type:"object"},SampleTransform:{additionalProperties:!1,properties:{sample:{description:"The maximum number of data objects to include in the sample.\n\n__Default value:__ `1000`",type:"number"}},required:["sample"],type:"object"},Scale:{additionalProperties:!1,properties:{base:{description:"The logarithm base of the `log` scale (default `10`).",type:"number"},bins:{description:"An array of bin boundaries over the scale domain. If provided, axes and legends will use the bin boundaries to inform the choice of tick marks and text labels.",items:{type:"number"},type:"array"},clamp:{description:"If `true`, values that exceed the data domain are clamped to either the minimum or maximum range value\n\n__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s `clamp` (`true` by default).",type:"boolean"},constant:{description:"A constant determining the slope of the symlog function around zero. Only used for `symlog` scales.\n\n__Default value:__ `1`",type:"number"},domain:{anyOf:[{items:{type:"number"},type:"array"},{items:{type:"string"},type:"array"},{items:{type:"boolean"},type:"array"},{items:{$ref:"#/definitions/DateTime"},type:"array"},{enum:["unaggregated"],type:"string"},{$ref:"#/definitions/SelectionDomain"}],description:'Customized domain values.\n\nFor _quantitative_ fields, `domain` can take the form of a two-element array with minimum and maximum values.  [Piecewise scales](https://vega.github.io/vega-lite/docs/scale.html#piecewise) can be created by providing a `domain` with more than two entries.\nIf the input field is aggregated, `domain` can also be a string value `"unaggregated"`, indicating that the domain should include the raw data values prior to the aggregation.\n\nFor _temporal_ fields, `domain` can be a two-element array minimum and maximum values, in the form of either timestamps or the [DateTime definition objects](https://vega.github.io/vega-lite/docs/types.html#datetime).\n\nFor _ordinal_ and _nominal_ fields, `domain` can be an array that lists valid input values.\n\nThe `selection` property can be used to [interactively determine](https://vega.github.io/vega-lite/docs/selection.html#scale-domains) the scale domain.'},exponent:{description:"The exponent of the `pow` scale.",type:"number"},interpolate:{anyOf:[{$ref:"#/definitions/ScaleInterpolate"},{$ref:"#/definitions/ScaleInterpolateParams"}],description:"The interpolation method for range values. By default, a general interpolator for numbers, dates, strings and colors (in HCL space) is used. For color ranges, this property allows interpolation in alternative color spaces. Legal values include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`, `cubehelix` and `cubehelix-long` ('-long' variants use longer paths in polar coordinate spaces). If object-valued, this property accepts an object with a string-valued _type_ property and an optional numeric _gamma_ property applicable to rgb and cubehelix interpolators. For more, see the [d3-interpolate documentation](https://github.com/d3/d3-interpolate).\n\n* __Default value:__ `hcl`"},nice:{anyOf:[{type:"boolean"},{type:"number"},{$ref:"#/definitions/NiceTime"},{additionalProperties:!1,properties:{interval:{type:"string"},step:{type:"number"}},required:["interval","step"],type:"object"}],description:'Extending the domain so that it starts and ends on nice round values. This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value. Nicing is useful if the domain is computed from data and may be irregular. For example, for a domain of _[0.201479…, 0.996679…]_, a nice domain might be _[0.2, 1.0]_.\n\nFor quantitative scales such as linear, `nice` can be either a boolean flag or a number. If `nice` is a number, it will represent a desired tick count. This allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.\n\nFor temporal fields with time and utc scales, the `nice` value can be a string indicating the desired time interval. Legal values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`, `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively, `time` and `utc` scales can accept an object-valued interval specifier of the form `{"interval": "month", "step": 3}`, which includes a desired number of interval steps. Here, the domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.\n\n__Default value:__ `true` for unbinned _quantitative_ fields; `false` otherwise.'},padding:{description:"For _[continuous](https://vega.github.io/vega-lite/docs/scale.html#continuous)_ scales, expands the scale domain to accommodate the specified number of pixels on each of the scale range. The scale range must represent pixels for this parameter to function as intended. Padding adjustment is performed prior to all other adjustments, including the effects of the zero, nice, domainMin, and domainMax properties.\n\nFor _[band](https://vega.github.io/vega-lite/docs/scale.html#band)_ scales, shortcut for setting `paddingInner` and `paddingOuter` to the same value.\n\nFor _[point](https://vega.github.io/vega-lite/docs/scale.html#point)_ scales, alias for `paddingOuter`.\n\n__Default value:__ For _continuous_ scales, derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `continuousPadding`.\nFor _band and point_ scales, see `paddingInner` and `paddingOuter`.",minimum:0,type:"number"},paddingInner:{description:"The inner padding (spacing) within each band step of band scales, as a fraction of the step size. This value must lie in the range [0,1].\n\nFor point scale, this property is invalid as point scales do not have internal band widths (only step sizes between bands).\n\n__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingInner`.",maximum:1,minimum:0,type:"number"},paddingOuter:{description:"The outer padding (spacing) at the ends of the range of band and point scales,\nas a fraction of the step size. This value must lie in the range [0,1].\n\n__Default value:__ derived from the [scale config](https://vega.github.io/vega-lite/docs/scale.html#config)'s `bandPaddingOuter` for band scales and `pointPadding` for point scales.",maximum:1,minimum:0,type:"number"},range:{anyOf:[{items:{type:"number"},type:"array"},{items:{type:"string"},type:"array"},{type:"string"}],description:'The range of the scale. One of:\n\n- A string indicating a [pre-defined named scale range](https://vega.github.io/vega-lite/docs/scale.html#range-config) (e.g., example, `"symbol"`, or `"diverging"`).\n\n- For [continuous scales](https://vega.github.io/vega-lite/docs/scale.html#continuous), two-element array indicating  minimum and maximum values, or an array with more than two entries for specifying a [piecewise scale](https://vega.github.io/vega-lite/docs/scale.html#piecewise).\n\n- For [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) and [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales, an array of desired output values.\n\n__Notes:__\n\n1) For color scales you can also specify a color [`scheme`](https://vega.github.io/vega-lite/docs/scale.html#scheme) instead of `range`.\n\n2) Any directly specified `range` for `x` and `y` channels will be ignored. Range can be customized via the view\'s corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (`width` and `height`) or via [range steps and paddings properties](#range-step) for [band](#band) and [point](#point) scales.'},rangeStep:{description:"The distance between the starts of adjacent bands or points in [band](https://vega.github.io/vega-lite/docs/scale.html#band) and [point](https://vega.github.io/vega-lite/docs/scale.html#point) scales.\n\nIf `rangeStep` is `null` or if the view contains the scale's corresponding [size](https://vega.github.io/vega-lite/docs/size.html) (`width` for `x` scales and `height` for `y` scales), `rangeStep` will be automatically determined to fit the size of the view.\n\n__Default value:__  derived the [scale config](https://vega.github.io/vega-lite/docs/config.html#scale-config)'s `textXRangeStep` (`90` by default) for x-scales of `text` marks and `rangeStep` (`21` by default) for x-scales of other marks and y-scales.\n\n__Warning__: If `rangeStep` is `null` and the cardinality of the scale's domain is higher than `width` or `height`, the rangeStep might become less than one pixel and the mark might not appear correctly.",minimum:0,type:["number","null"]},round:{description:"If `true`, rounds numeric output values to integers. This can be helpful for snapping to the pixel grid.\n\n__Default value:__ `false`.",type:"boolean"},scheme:{anyOf:[{type:"string"},{$ref:"#/definitions/SchemeParams"}],description:'A string indicating a color [scheme](https://vega.github.io/vega-lite/docs/scale.html#scheme) name (e.g., `"category10"` or `"blues"`) or a [scheme parameter object](https://vega.github.io/vega-lite/docs/scale.html#scheme-params).\n\nDiscrete color schemes may be used with [discrete](https://vega.github.io/vega-lite/docs/scale.html#discrete) or [discretizing](https://vega.github.io/vega-lite/docs/scale.html#discretizing) scales. Continuous color schemes are intended for use with color scales.\n\nFor the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.'},type:{$ref:"#/definitions/ScaleType",description:'The type of scale.  Vega-Lite supports the following categories of scale types:\n\n1) [**Continuous Scales**](https://vega.github.io/vega-lite/docs/scale.html#continuous) -- mapping continuous domains to continuous output ranges ([`"linear"`](https://vega.github.io/vega-lite/docs/scale.html#linear), [`"pow"`](https://vega.github.io/vega-lite/docs/scale.html#pow), [`"sqrt"`](https://vega.github.io/vega-lite/docs/scale.html#sqrt), [`"symlog"`](https://vega.github.io/vega-lite/docs/scale.html#symlog), [`"log"`](https://vega.github.io/vega-lite/docs/scale.html#log), [`"time"`](https://vega.github.io/vega-lite/docs/scale.html#time), [`"utc"`](https://vega.github.io/vega-lite/docs/scale.html#utc).\n\n2) [**Discrete Scales**](https://vega.github.io/vega-lite/docs/scale.html#discrete) -- mapping discrete domains to discrete ([`"ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#ordinal)) or continuous ([`"band"`](https://vega.github.io/vega-lite/docs/scale.html#band) and [`"point"`](https://vega.github.io/vega-lite/docs/scale.html#point)) output ranges.\n\n3) [**Discretizing Scales**](https://vega.github.io/vega-lite/docs/scale.html#discretizing) -- mapping continuous domains to discrete output ranges [`"bin-ordinal"`](https://vega.github.io/vega-lite/docs/scale.html#bin-ordinal), [`"quantile"`](https://vega.github.io/vega-lite/docs/scale.html#quantile), [`"quantize"`](https://vega.github.io/vega-lite/docs/scale.html#quantize) and [`"threshold"`](https://vega.github.io/vega-lite/docs/scale.html#threshold).\n\n__Default value:__ please see the [scale type table](https://vega.github.io/vega-lite/docs/scale.html#type).'},zero:{description:"If `true`, ensures that a zero baseline value is included in the scale domain.\n\n__Default value:__ `true` for x and y channels if the quantitative field is not binned and no custom `domain` is provided; `false` otherwise.\n\n__Note:__ Log, time, and utc scales do not support `zero`.",type:"boolean"}},type:"object"},ScaleConfig:{additionalProperties:!1,properties:{bandPaddingInner:{description:"Default inner padding for `x` and `y` band-ordinal scales.\n\n__Default value:__\n- `barBandPaddingInner` for bar marks (`0.1` by default)\n- `rectBandPaddingInner` for rect and other marks (`0` by default)",maximum:1,minimum:0,type:"number"},bandPaddingOuter:{description:"Default outer padding for `x` and `y` band-ordinal scales.\n\nIf not specified, by default, band scale's paddingOuter is paddingInner/2.",maximum:1,minimum:0,type:"number"},barBandPaddingInner:{description:'Default inner padding for `x` and `y` band-ordinal scales of `"bar"` marks.\n\n__Default value:__ `0.1`',maximum:1,minimum:0,type:"number"},barBandPaddingOuter:{description:'Default outer padding for `x` and `y` band-ordinal scales of `"bar"` marks.\nIf not specified, by default, band scale\'s paddingOuter is paddingInner/2.',maximum:1,minimum:0,type:"number"},clamp:{description:"If true, values that exceed the data domain are clamped to either the minimum or maximum range value",type:"boolean"},continuousPadding:{description:"Default padding for continuous scales.\n\n__Default:__ `5` for continuous x-scale of a vertical bar and continuous y-scale of a horizontal bar.; `0` otherwise.",minimum:0,type:"number"},maxBandSize:{description:"The default max value for mapping quantitative fields to bar's size/bandSize.\n\nIf undefined (default), we will use the scale's `rangeStep` - 1.",minimum:0,type:"number"},maxFontSize:{description:"The default max value for mapping quantitative fields to text's size/fontSize.\n\n__Default value:__ `40`",minimum:0,type:"number"},maxOpacity:{description:"Default max opacity for mapping a field to opacity.\n\n__Default value:__ `0.8`",maximum:1,minimum:0,type:"number"},maxSize:{description:"Default max value for point size scale.",minimum:0,type:"number"},maxStrokeWidth:{description:"Default max strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks.\n\n__Default value:__ `4`",minimum:0,type:"number"},minBandSize:{description:"The default min value for mapping quantitative fields to bar and tick's size/bandSize scale with zero=false.\n\n__Default value:__ `2`",minimum:0,type:"number"},minFontSize:{description:"The default min value for mapping quantitative fields to tick's size/fontSize scale with zero=false\n\n__Default value:__ `8`",minimum:0,type:"number"},minOpacity:{description:"Default minimum opacity for mapping a field to opacity.\n\n__Default value:__ `0.3`",maximum:1,minimum:0,type:"number"},minSize:{description:"Default minimum value for point size scale with zero=false.\n\n__Default value:__ `9`",minimum:0,type:"number"},minStrokeWidth:{description:"Default minimum strokeWidth for the scale of strokeWidth for rule and line marks and of size for trail marks with zero=false.\n\n__Default value:__ `1`",minimum:0,type:"number"},pointPadding:{description:"Default outer padding for `x` and `y` point-ordinal scales.\n\n__Default value:__ `0.5`",maximum:1,minimum:0,type:"number"},quantileCount:{description:"Default range cardinality for [`quantile`](https://vega.github.io/vega-lite/docs/scale.html#quantile) scale.\n\n__Default value:__ `4`",minimum:0,type:"number"},quantizeCount:{description:"Default range cardinality for [`quantize`](https://vega.github.io/vega-lite/docs/scale.html#quantize) scale.\n\n__Default value:__ `4`",minimum:0,type:"number"},rangeStep:{description:"Default range step for band and point scales of (1) the `y` channel\nand (2) the `x` channel when the mark is not `text`.\n\n__Default value:__ `20`",minimum:0,type:["number","null"]},rectBandPaddingInner:{description:'Default inner padding for `x` and `y` band-ordinal scales of `"rect"` marks.\n\n__Default value:__ `0`',maximum:1,minimum:0,type:"number"},rectBandPaddingOuter:{description:'Default outer padding for `x` and `y` band-ordinal scales of `"rect"` marks.\nIf not specified, by default, band scale\'s paddingOuter is paddingInner/2.',maximum:1,minimum:0,type:"number"},round:{description:"If true, rounds numeric output values to integers.\nThis can be helpful for snapping to the pixel grid.\n(Only available for `x`, `y`, and `size` scales.)",type:"boolean"},textXRangeStep:{description:"Default range step for `x` band and point scales of text marks.\n\n__Default value:__ `90`",minimum:0,type:"number"},useUnaggregatedDomain:{description:'Use the source data range before aggregation as scale domain instead of aggregated data for aggregate axis.\n\nThis is equivalent to setting `domain` to `"unaggregate"` for aggregated _quantitative_ fields by default.\n\nThis property only works with aggregate functions that produce values within the raw data domain (`"mean"`, `"average"`, `"median"`, `"q1"`, `"q3"`, `"min"`, `"max"`). For other aggregations that produce values outside of the raw data domain (e.g. `"count"`, `"sum"`), this property is ignored.\n\n__Default value:__ `false`',type:"boolean"}},type:"object"},ScaleInterpolate:{enum:["rgb","lab","hcl","hsl","hsl-long","hcl-long","cubehelix","cubehelix-long"],type:"string"},ScaleInterpolateParams:{additionalProperties:!1,properties:{gamma:{type:"number"},type:{enum:["rgb","cubehelix","cubehelix-long"],type:"string"}},required:["type"],type:"object"},ScaleResolveMap:{additionalProperties:!1,properties:{color:{$ref:"#/definitions/ResolveMode"},fill:{$ref:"#/definitions/ResolveMode"},fillOpacity:{$ref:"#/definitions/ResolveMode"},opacity:{$ref:"#/definitions/ResolveMode"},shape:{$ref:"#/definitions/ResolveMode"},size:{$ref:"#/definitions/ResolveMode"},stroke:{$ref:"#/definitions/ResolveMode"},strokeOpacity:{$ref:"#/definitions/ResolveMode"},strokeWidth:{$ref:"#/definitions/ResolveMode"},x:{$ref:"#/definitions/ResolveMode"},y:{$ref:"#/definitions/ResolveMode"}},type:"object"},ScaleType:{enum:["linear","log","pow","sqrt","symlog","time","utc","quantile","quantize","threshold","bin-ordinal","ordinal","point","band"],type:"string"},SchemeConfig:{additionalProperties:!1,properties:{count:{type:"number"},extent:{items:{type:"number"},type:"array"},scheme:{type:"string"}},required:["scheme"],type:"object"},SchemeParams:{additionalProperties:!1,properties:{count:{description:'The number of colors to use in the scheme. This can be useful for scale types such as `"quantize"`, which use the length of the scale range to determine the number of discrete bins for the scale domain.',type:"number"},extent:{description:"The extent of the color range to use. For example `[0.2, 1]` will rescale the color scheme such that color values in the range _[0, 0.2)_ are excluded from the scheme.",items:{type:"number"},type:"array"},name:{description:'A color scheme name for ordinal scales (e.g., `"category10"` or `"blues"`).\n\nFor the full list of supported schemes, please refer to the [Vega Scheme](https://vega.github.io/vega/docs/schemes/#reference) reference.',type:"string"}},required:["name"],type:"object"},SecondaryFieldDef:{additionalProperties:!1,description:"A field definition of a secondary channel that shares a scale with another primary channel.  For example, `x2`, `xError` and `xError2` share the same scale with `x`.",properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]}},type:"object"},SelectionConfig:{additionalProperties:!1,properties:{interval:{$ref:"#/definitions/IntervalSelectionConfig",description:'The default definition for an [`interval`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\nfor an interval selection definition (except `type`) may be specified here.\n\nFor instance, setting `interval` to `{"translate": false}` disables the ability to move\ninterval selections by default.'},multi:{$ref:"#/definitions/MultiSelectionConfig",description:'The default definition for a [`multi`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\nfor a multi selection definition (except `type`) may be specified here.\n\nFor instance, setting `multi` to `{"toggle": "event.altKey"}` adds additional values to\nmulti selections when clicking with the alt-key pressed by default.'},single:{$ref:"#/definitions/SingleSelectionConfig",description:'The default definition for a [`single`](https://vega.github.io/vega-lite/docs/selection.html#type) selection. All properties and transformations\n  for a single selection definition (except `type`) may be specified here.\n\nFor instance, setting `single` to `{"on": "dblclick"}` populates single selections on double-click by default.'}},type:"object"},SelectionDef:{anyOf:[{$ref:"#/definitions/SingleSelection"},{$ref:"#/definitions/MultiSelection"},{$ref:"#/definitions/IntervalSelection"}]},SelectionDomain:{anyOf:[{additionalProperties:!1,properties:{field:{description:"The field name to extract selected values for, when a selection is [projected](https://vega.github.io/vega-lite/docs/project.html)\nover multiple fields or encodings.",type:"string"},selection:{description:"The name of a selection.",type:"string"}},required:["selection"],type:"object"},{additionalProperties:!1,properties:{encoding:{description:"The encoding channel to extract selected values for, when a selection is [projected](https://vega.github.io/vega-lite/docs/project.html)\nover multiple fields or encodings.",type:"string"},selection:{description:"The name of a selection.",type:"string"}},required:["selection"],type:"object"}]},SelectionInit:{anyOf:[{type:"boolean"},{type:"number"},{type:"string"},{$ref:"#/definitions/DateTime"}]},SelectionInitArray:{anyOf:[{items:{type:"boolean"},type:"array"},{items:{type:"number"},type:"array"},{items:{type:"string"},type:"array"},{items:{$ref:"#/definitions/DateTime"},type:"array"}]},SelectionInitArrayMapping:{additionalProperties:{$ref:"#/definitions/SelectionInitArray"},type:"object"},SelectionInitMapping:{additionalProperties:{$ref:"#/definitions/SelectionInit"},type:"object"},SelectionPredicate:{additionalProperties:!1,properties:{selection:{$ref:"#/definitions/SelectionOperand",description:"Filter using a selection name."}},required:["selection"],type:"object"},SelectionResolution:{enum:["global","union","intersect"],type:"string"},ShapeFieldDefWithCondition:{$ref:"#/definitions/StringFieldDefWithCondition<TypeForShape>"},ShapeValueDefWithCondition:{$ref:"#/definitions/StringValueDefWithCondition<TypeForShape>"},SignalRef:{additionalProperties:!1,properties:{signal:{type:"string"}},required:["signal"],type:"object"},SingleDefUnitChannel:{enum:["x","y","x2","y2","longitude","latitude","longitude2","latitude2","color","fill","stroke","strokeWidth","size","shape","fillOpacity","strokeOpacity","opacity","text","tooltip","href","key"],type:"string"},SingleSelection:{additionalProperties:!1,properties:{bind:{anyOf:[{$ref:"#/definitions/Binding"},{additionalProperties:{$ref:"#/definitions/Binding"},type:"object"}],description:"Establish a two-way binding between a single selection and input elements\n(also known as dynamic query widgets). A binding takes the form of\nVega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind)\nor can be a mapping between projected field/encodings and binding definitions.\n\nSee the [bind transform](https://vega.github.io/vega-lite/docs/bind.html) documentation for more information."},empty:{description:"By default, all data values are considered to lie within an empty selection.\nWhen set to `none`, empty selections contain no data values.",enum:["all","none"],type:"string"},encodings:{description:"An array of encoding channels. The corresponding data field values\nmust match for a data tuple to fall within the selection.",items:{$ref:"#/definitions/SingleDefUnitChannel"},type:"array"},fields:{description:"An array of field names whose values must match for a data tuple to\nfall within the selection.",items:{type:"string"},type:"array"},init:{$ref:"#/definitions/SelectionInitMapping",description:"Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and initial values."},nearest:{description:"When true, an invisible voronoi diagram is computed to accelerate discrete\nselection. The data value _nearest_ the mouse cursor is added to the selection.\n\nSee the [nearest transform](https://vega.github.io/vega-lite/docs/nearest.html) documentation for more information.",type:"boolean"},on:{$ref:"#/definitions/EventStream",description:"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.\nFor interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters)."},resolve:{$ref:"#/definitions/SelectionResolution",description:"With layered and multi-view displays, a strategy that determines how\nselections' data queries are resolved when applied in a filter transform,\nconditional encoding rule, or scale domain."},type:{enum:["single"],type:"string"}},required:["type"],type:"object"},SingleSelectionConfig:{additionalProperties:!1,properties:{bind:{anyOf:[{$ref:"#/definitions/Binding"},{additionalProperties:{$ref:"#/definitions/Binding"},type:"object"}],description:"Establish a two-way binding between a single selection and input elements\n(also known as dynamic query widgets). A binding takes the form of\nVega's [input element binding definition](https://vega.github.io/vega/docs/signals/#bind)\nor can be a mapping between projected field/encodings and binding definitions.\n\nSee the [bind transform](https://vega.github.io/vega-lite/docs/bind.html) documentation for more information."},empty:{description:"By default, all data values are considered to lie within an empty selection.\nWhen set to `none`, empty selections contain no data values.",enum:["all","none"],type:"string"},encodings:{description:"An array of encoding channels. The corresponding data field values\nmust match for a data tuple to fall within the selection.",items:{$ref:"#/definitions/SingleDefUnitChannel"},type:"array"},fields:{description:"An array of field names whose values must match for a data tuple to\nfall within the selection.",items:{type:"string"},type:"array"},init:{$ref:"#/definitions/SelectionInitMapping",description:"Initialize the selection with a mapping between [projected channels or field names](https://vega.github.io/vega-lite/docs/project.html) and initial values."},nearest:{description:"When true, an invisible voronoi diagram is computed to accelerate discrete\nselection. The data value _nearest_ the mouse cursor is added to the selection.\n\nSee the [nearest transform](https://vega.github.io/vega-lite/docs/nearest.html) documentation for more information.",type:"boolean"},on:{$ref:"#/definitions/EventStream",description:"A [Vega event stream](https://vega.github.io/vega/docs/event-streams/) (object or selector) that triggers the selection.\nFor interval selections, the event stream must specify a [start and end](https://vega.github.io/vega/docs/event-streams/#between-filters)."},resolve:{$ref:"#/definitions/SelectionResolution",description:"With layered and multi-view displays, a strategy that determines how\nselections' data queries are resolved when applied in a filter transform,\nconditional encoding rule, or scale domain."}},type:"object"},SingleTimeUnit:{anyOf:[{$ref:"#/definitions/LocalSingleTimeUnit"},{$ref:"#/definitions/UtcSingleTimeUnit"}]},Sort:{anyOf:[{$ref:"#/definitions/SortArray"},{$ref:"#/definitions/SortOrder"},{$ref:"#/definitions/EncodingSortField"},{$ref:"#/definitions/SortByEncoding"},{type:"null"}]},SortArray:{anyOf:[{items:{type:"number"},type:"array"},{items:{type:"string"},type:"array"},{items:{type:"boolean"},type:"array"},{items:{$ref:"#/definitions/DateTime"},type:"array"}]},SortByEncoding:{additionalProperties:!1,properties:{encoding:{$ref:"#/definitions/SingleDefUnitChannel",description:'The [encoding channel](https://vega.github.io/vega-lite/docs/encoding.html#channels) to sort by (e.g., `"x"`, `"y"`)'},order:{anyOf:[{$ref:"#/definitions/SortOrder"},{type:"null"}],description:'The sort order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).'}},required:["encoding"],type:"object"},SortField:{additionalProperties:!1,description:"A sort definition for transform",properties:{field:{description:"The name of the field to sort.",type:"string"},order:{anyOf:[{$ref:"#/definitions/SortOrder"},{type:"null"}],description:'Whether to sort the field in ascending or descending order. One of `"ascending"` (default), `"descending"`, or `null` (no not sort).'}},required:["field"],type:"object"},SortOrder:{enum:["ascending","descending"],type:"string"},StackOffset:{enum:["zero","center","normalize"],type:"string"},StackTransform:{additionalProperties:!1,properties:{as:{anyOf:[{type:"string"},{items:{type:"string"},type:"array"}],description:'Output field names. This can be either a string or an array of strings with\ntwo elements denoting the name for the fields for stack start and stack end\nrespectively.\nIf a single string(eg."val") is provided, the end field will be "val_end".'},groupby:{description:"The data fields to group by.",items:{type:"string"},type:"array"},offset:{description:'Mode for stacking marks.\n__Default value:__ `"zero"`',enum:["zero","center","normalize"],type:"string"},sort:{description:"Field that determines the order of leaves in the stacked charts.",items:{$ref:"#/definitions/SortField"},type:"array"},stack:{description:"The field which is stacked.",type:"string"}},required:["stack","groupby","as"],type:"object"},StandardType:{enum:["quantitative","ordinal","temporal","nominal"],type:"string"},"StringFieldDefWithCondition<TypeForShape>":{$ref:"#/definitions/FieldDefWithCondition<MarkPropFieldDef<TypeForShape>,string>"},StringFieldDefWithCondition:{$ref:'#/definitions/FieldDefWithCondition<MarkPropFieldDef<"nominal">,string>'},"StringValueDefWithCondition<TypeForShape>":{$ref:"#/definitions/ValueDefWithCondition<MarkPropFieldDef<TypeForShape>,string>"},StringValueDefWithCondition:{$ref:'#/definitions/ValueDefWithCondition<MarkPropFieldDef<"nominal">,string>'},StrokeCap:{enum:["butt","round","square"],type:"string"},StrokeJoin:{enum:["miter","round","bevel"],type:"string"},StyleConfigIndex:{additionalProperties:{$ref:"#/definitions/BaseMarkConfig"},type:"object"},SymbolShape:{type:"string"},TextBaseline:{anyOf:[{enum:["alphabetic"],type:"string"},{$ref:"#/definitions/Baseline"}]},TextConfig:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},filled:{description:"Whether the mark's color should be used as fill color instead of stroke color.\n\n__Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",type:"boolean"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},order:{description:"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.",type:["null","boolean"]},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},shortTimeLabels:{description:"Whether month names and weekday names should be abbreviated.",type:"boolean"},size:{description:"Default size for marks.\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n- For `bar`, this represents the band size of the bar, in pixels.\n- For `text`, this represents the font size, in pixels.\n\n__Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},tooltip:{anyOf:[{type:"string"},{$ref:"#/definitions/TooltipContent"},{type:"null"}],description:'The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n\n- If `tooltip` is `{"content": "encoding"}`, then all fields from `encoding` will be used.\n- If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.\n- If set to `null`, then no tooltip will be used.'},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"}},type:"object"},TextFieldDef:{additionalProperties:!1,properties:{aggregate:{$ref:"#/definitions/Aggregate",description:"Aggregation function for the field\n(e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).\n\n__Default value:__ `undefined` (None)"},bin:{anyOf:[{type:"boolean"},{$ref:"#/definitions/BinParams"},{enum:["binned"],type:"string"},{type:"null"}],description:'A flag for binning a `quantitative` field, [an object defining binning parameters](https://vega.github.io/vega-lite/docs/bin.html#params), or indicating that the data for `x` or `y` channel are binned before they are imported into Vega-Lite (`"binned"`).\n\n- If `true`, default [binning parameters](https://vega.github.io/vega-lite/docs/bin.html) will be applied.\n\n- To indicate that the data for the `x` (or `y`) channel are already binned, you can set the `bin` property of the `x` (or `y`) channel to `"binned"` and map the bin-start field to `x` (or `y`) and the bin-end field to `x2` (or `y2`). The scale and axis will be formatted similar to binning in Vega-lite.  To adjust the axis ticks based on the bin step, you can also set the axis\'s [`tickMinStep`](https://vega.github.io/vega-lite/docs/axis.html#ticks) property.\n\n__Default value:__ `false`'},field:{$ref:"#/definitions/Field",description:'__Required.__ A string defining the name of the field from which to pull a data value\nor an object defining iterated values from the [`repeat`](https://vega.github.io/vega-lite/docs/repeat.html) operator.\n\n__Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to access nested objects (e.g., `"field": "foo.bar"` and `"field": "foo[\'bar\']"`).\nIf field names contain dots or brackets but are not nested, you can use `\\\\` to escape dots and brackets (e.g., `"a\\\\.b"` and `"a\\\\[0\\\\]"`).\nSee more details about escaping in the [field documentation](https://vega.github.io/vega-lite/docs/field.html).\n\n__Note:__ `field` is not required if `aggregate` is `count`.'},format:{description:"The [formatting pattern](https://vega.github.io/vega-lite/docs/format.html) for a text field. If not defined, this will be determined automatically.",type:"string"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a temporal field.\nor [a temporal field that gets casted as ordinal](https://vega.github.io/vega-lite/docs/type.html#cast).\n\n__Default value:__ `undefined` (None)"},title:{description:'A title for the field. If `null`, the title will be removed.\n\n__Default value:__  derived from the field\'s name and transformation function (`aggregate`, `bin` and `timeUnit`).  If the field has an aggregate function, the function is displayed as part of the title (e.g., `"Sum of Profit"`). If the field is binned or has a time unit applied, the applied function is shown in parentheses (e.g., `"Profit (binned)"`, `"Transaction Date (year-month)"`).  Otherwise, the title is simply the field name.\n\n__Notes__:\n\n1) You can customize the default field title format by providing the [`fieldTitle`](https://vega.github.io/vega-lite/docs/config.html#top-level-config) property in the [config](https://vega.github.io/vega-lite/docs/config.html) or [`fieldTitle` function via the `compile` function\'s options](https://vega.github.io/vega-lite/docs/compile.html#field-title).\n\n2) If both field definition\'s `title` and axis, header, or legend `title` are defined, axis/header/legend title will be used.',type:["string","null"]},type:{$ref:"#/definitions/StandardType",description:'The encoded field\'s type of measurement (`"quantitative"`, `"temporal"`, `"ordinal"`, or `"nominal"`).\nIt can also be a `"geojson"` type for encoding [\'geoshape\'](https://vega.github.io/vega-lite/docs/geoshape.html).\n\n\n__Note:__\n\n- Data values for a temporal field can be either a date-time string (e.g., `"2015-03-07 12:32:17"`, `"17:01"`, `"2015-03-16"`. `"2015"`) or a timestamp number (e.g., `1552199579097`).\n- Data `type` describes the semantics of the data rather than the primitive data types (`number`, `string`, etc.). The same primitive data type can have different types of measurement. For example, numeric data can represent quantitative, ordinal, or nominal data.\n- When using with [`bin`](https://vega.github.io/vega-lite/docs/bin.html), the `type` property can be either `"quantitative"` (for using a linear bin scale) or [`"ordinal"` (for using an ordinal bin scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`timeUnit`](https://vega.github.io/vega-lite/docs/timeunit.html), the `type` property can be either `"temporal"` (for using a temporal scale) or [`"ordinal"` (for using an ordinal scale)](https://vega.github.io/vega-lite/docs/type.html#cast-bin).\n- When using with [`aggregate`](https://vega.github.io/vega-lite/docs/aggregate.html), the `type` property refers to the post-aggregation data type. For example, we can calculate count `distinct` of a categorical field `"cat"` using `{"aggregate": "distinct", "field": "cat", "type": "quantitative"}`. The `"type"` of the aggregate output is `"quantitative"`.\n- Secondary channels (e.g., `x2`, `y2`, `xError`, `yError`) do not have `type` as they have exactly the same type as their primary channels (e.g., `x`, `y`).'}},required:["type"],type:"object"},TextFieldDefWithCondition:{$ref:"#/definitions/FieldDefWithCondition<TextFieldDef,(string|number|boolean)>"},TextValueDefWithCondition:{$ref:"#/definitions/ValueDefWithCondition<TextFieldDef,(string|number|boolean)>"},TickConfig:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align",description:'The horizontal alignment of the text. One of `"left"`, `"right"`, `"center"`.'},angle:{description:"The rotation angle of the text, in degrees.",maximum:360,minimum:0,type:"number"},bandSize:{description:"The width of the ticks.\n\n__Default value:__  3/4 of rangeStep.",minimum:0,type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'The vertical alignment of the text. One of `"top"`, `"middle"`, `"bottom"`.\n\n__Default value:__ `"middle"`'},color:{description:'Default color.  Note that `fill` and `stroke` have higher precedence than `color` and will override `color`.\n\n__Default value:__ <span style="color: #4682b4;">&#9632;</span> `"#4682b4"`\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).',type:"string"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},cursor:{$ref:"#/definitions/Cursor",description:"The mouse cursor used over the mark. Any valid [CSS cursor type](https://developer.mozilla.org/en-US/docs/Web/CSS/cursor#Values) can be used."},dir:{$ref:"#/definitions/Dir",description:'The direction of the text. One of `"ltr"` (left-to-right) or `"rtl"` (right-to-left). This property determines on which side is truncated in response to the limit parameter.\n\n__Default value:__ `"ltr"`'},dx:{description:"The horizontal offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},dy:{description:"The vertical offset, in pixels, between the text label and its anchor point. The offset is applied after rotation by the _angle_ property.",type:"number"},ellipsis:{description:'The ellipsis string for text truncated in response to the limit parameter.\n\n__Default value:__ `"…"`',type:"string"},fill:{$ref:"#/definitions/Color",description:"Default Fill Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},filled:{description:"Whether the mark's color should be used as fill color instead of stroke color.\n\n__Default value:__ `false` for `point`, `line` and `rule`; otherwise, `true`.\n\n__Note:__ This property cannot be used in a [style config](https://vega.github.io/vega-lite/docs/mark.html#style-config).",type:"boolean"},font:{description:'The typeface to set the text in (e.g., `"Helvetica Neue"`).',type:"string"},fontSize:{description:"The font size, in pixels.",type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:'The font style (e.g., `"italic"`).'},fontWeight:{$ref:"#/definitions/FontWeight",description:'The font weight.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},href:{description:"A URL to load upon mouse click. If defined, the mark acts as a hyperlink.",format:"uri",type:"string"},interpolate:{$ref:"#/definitions/Interpolate",description:'The line interpolation method to use for line and area marks. One of the following:\n- `"linear"`: piecewise linear segments, as in a polyline.\n- `"linear-closed"`: close the linear segments to form a polygon.\n- `"step"`: alternate between horizontal and vertical segments, as in a step function.\n- `"step-before"`: alternate between vertical and horizontal segments, as in a step function.\n- `"step-after"`: alternate between horizontal and vertical segments, as in a step function.\n- `"basis"`: a B-spline, with control point duplication on the ends.\n- `"basis-open"`: an open B-spline; may not intersect the start or end.\n- `"basis-closed"`: a closed B-spline, as in a loop.\n- `"cardinal"`: a Cardinal spline, with control point duplication on the ends.\n- `"cardinal-open"`: an open Cardinal spline; may not intersect the start or end, but will intersect other control points.\n- `"cardinal-closed"`: a closed Cardinal spline, as in a loop.\n- `"bundle"`: equivalent to basis, except the tension parameter is used to straighten the spline.\n- `"monotone"`: cubic interpolation that preserves monotonicity in y.'},limit:{description:"The maximum length of the text mark in pixels. The text value will be automatically truncated if the rendered size exceeds the limit.\n\n__Default value:__ `0`, indicating no limit",type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},order:{description:"For line and trail marks, this `order` property can be set to `null` or `false` to make the lines use the original order in the data sources.",type:["null","boolean"]},orient:{$ref:"#/definitions/Orientation",description:"The orientation of a non-stacked bar, tick, area, and line charts.\nThe value is either horizontal (default) or vertical.\n- For bar, rule and tick, this determines whether the size of the bar and tick\nshould be applied to x or y dimension.\n- For area, this property determines the orient property of the Vega output.\n- For line and trail marks, this property determines the sort order of the points in the line\nif `config.sortLineBy` is not specified.\nFor stacked charts, this is always determined by the orientation of the stack;\ntherefore explicitly specified value will be ignored."},radius:{description:"Polar coordinate radial offset, in pixels, of the text label from the origin determined by the `x` and `y` properties.",minimum:0,type:"number"},shape:{description:'Shape of the point marks. Supported values include:\n- plotting shapes: `"circle"`, `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, `"triangle-down"`, `"triangle-right"`, or `"triangle-left"`.\n- the line symbol `"stroke"`\n- centered directional shapes `"arrow"`, `"wedge"`, or `"triangle"`\n- a custom [SVG path string](https://developer.mozilla.org/en-US/docs/Web/SVG/Tutorial/Paths) (For correct sizing, custom shape paths should be defined within a square bounding box with coordinates ranging from -1 to 1 along both the x and y dimensions.)\n\n__Default value:__ `"circle"`',type:"string"},size:{description:"Default size for marks.\n- For `point`/`circle`/`square`, this represents the pixel area of the marks. For example: in the case of circles, the radius is determined in part by the square root of the size value.\n- For `bar`, this represents the band size of the bar, in pixels.\n- For `text`, this represents the font size, in pixels.\n\n__Default value:__ `30` for point, circle, square marks; `rangeStep` - 1 for bar marks with discrete dimensions; `5` for bar marks with continuous dimensions; `11` for text marks.",minimum:0,type:"number"},stroke:{$ref:"#/definitions/Color",description:"Default Stroke Color.  This has higher precedence than `config.color`\n\n__Default value:__ (None)"},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},tension:{description:"Depending on the interpolation type, sets the tension parameter (for line and area marks).",maximum:1,minimum:0,type:"number"},text:{description:"Placeholder text if the `text` channel is not specified",type:"string"},theta:{description:'Polar coordinate angle, in radians, of the text label from the origin determined by the `x` and `y` properties. Values for `theta` follow the same convention of `arc` mark `startAngle` and `endAngle` properties: angles are measured in radians, with `0` indicating "north".',type:"number"},thickness:{description:"Thickness of the tick mark.\n\n__Default value:__  `1`",minimum:0,type:"number"},tooltip:{anyOf:[{type:"string"},{$ref:"#/definitions/TooltipContent"},{type:"null"}],description:'The tooltip text string to show upon mouse hover or an object defining which fields should the tooltip be derived from.\n\n- If `tooltip` is `{"content": "encoding"}`, then all fields from `encoding` will be used.\n- If `tooltip` is `{"content": "data"}`, then all fields that appear in the highlighted data point will be used.\n- If set to `null`, then no tooltip will be used.'},x:{description:'X coordinates of the marks, or width of horizontal `"bar"` and `"area"` without `x2`.',type:"number"},x2:{description:'X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"},y:{description:'Y coordinates of the marks, or height of vertical `"bar"` and `"area"` without `y2`',type:"number"},y2:{description:'Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and  `"rule"`.',type:"number"}},type:"object"},TimeUnit:{anyOf:[{$ref:"#/definitions/SingleTimeUnit"},{$ref:"#/definitions/MultiTimeUnit"}]},TimeUnitTransform:{additionalProperties:!1,properties:{as:{description:"The output field to write the timeUnit value.",type:"string"},field:{description:"The data field to apply time unit.",type:"string"},timeUnit:{$ref:"#/definitions/TimeUnit",description:"The timeUnit."}},required:["timeUnit","field","as"],type:"object"},TitleAnchor:{enum:[null,"start","middle","end"],type:["null","string"]},TitleConfig:{$ref:"#/definitions/BaseTitleConfig"},TitleFrame:{enum:["bounds","group"],type:"string"},TitleOrient:{enum:["none","left","right","top","bottom"],type:"string"},TitleParams:{additionalProperties:!1,properties:{align:{$ref:"#/definitions/Align"},anchor:{$ref:"#/definitions/TitleAnchor",description:'The anchor position for placing the title. One of `"start"`, `"middle"`, or `"end"`. For example, with an orientation of top these anchor positions map to a left-, center-, or right-aligned title.\n\n__Default value:__ `"middle"` for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.\n`"start"` for other composite views.\n\n__Note:__ [For now](https://github.com/vega/vega-lite/issues/2875), `anchor` is only customizable only for [single](https://vega.github.io/vega-lite/docs/spec.html) and [layered](https://vega.github.io/vega-lite/docs/layer.html) views.  For other composite views, `anchor` is always `"start"`.'},angle:{description:"Angle in degrees of title text.",type:"number"},baseline:{$ref:"#/definitions/TextBaseline",description:'Vertical text baseline for title text. One of `"top"`, `"middle"`, `"bottom"`, or `"alphabetic"`.'},color:{$ref:"#/definitions/Color",description:"Text color for title text."},dx:{description:"Delta offset for title text x-coordinate.",type:"number"},dy:{description:"Delta offset for title text y-coordinate.",type:"number"},font:{description:"Font name for title text.",type:"string"},fontSize:{description:"Font size in pixels for title text.\n\n__Default value:__ `10`.",minimum:0,type:"number"},fontStyle:{$ref:"#/definitions/FontStyle",description:"Font style for title text."},fontWeight:{$ref:"#/definitions/FontWeight",description:'Font weight for title text.\nThis can be either a string (e.g `"bold"`, `"normal"`) or a number (`100`, `200`, `300`, ..., `900` where `"normal"` = `400` and `"bold"` = `700`).'},frame:{$ref:"#/definitions/TitleFrame",description:'The reference frame for the anchor position, one of `"bounds"` (to anchor relative to the full bounding box) or `"group"` (to anchor relative to the group width or height).'},limit:{description:"The maximum allowed length in pixels of legend labels.",minimum:0,type:"number"},offset:{description:"The orthogonal offset in pixels by which to displace the title from its position along the edge of the chart.",type:"number"},orient:{$ref:"#/definitions/TitleOrient",description:'Default title orientation (`"top"`, `"bottom"`, `"left"`, or `"right"`)'},style:{anyOf:[{type:"string"},{items:{type:"string"},type:"array"}],description:'A [mark style property](https://vega.github.io/vega-lite/docs/config.html#style) to apply to the title text mark.\n\n__Default value:__ `"group-title"`.'},text:{description:"The title text.",type:"string"},zindex:{description:"The integer z-index indicating the layering of the title group relative to other axis, mark and legend groups.\n\n__Default value:__ `0`.",minimum:0,type:"number"}},required:["text"],type:"object"},TooltipContent:{additionalProperties:!1,properties:{content:{enum:["encoding","data"],type:"string"}},required:["content"],type:"object"},TopLevelConcatSpec:{additionalProperties:!1,properties:{$schema:{description:"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v3.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.",format:"uri",type:"string"},align:{anyOf:[{$ref:"#/definitions/LayoutAlign"},{$ref:"#/definitions/RowCol<LayoutAlign>"}],description:'The alignment to apply to grid rows and columns.\nThe supported string values are `"all"`, `"each"`, and `"none"`.\n\n- For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n- For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n- For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n\nAlternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.\n\n__Default value:__ `"all"`.'},autosize:{anyOf:[{$ref:"#/definitions/AutosizeType"},{$ref:"#/definitions/AutoSizeParams"}],description:'Sets how the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`.\nObject values can additionally specify parameters for content sizing and automatic resizing.\n`"fit"` is only supported for single and layered views that don\'t use `rangeStep`.\n\n__Default value__: `pad`'},background:{description:"CSS color property to use as the background of the entire view.\n\n__Default value:__ none (transparent)",type:"string"},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/RowCol<boolean>"}],description:'Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\nAn object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.\n\n__Default value:__ `false`'},columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},concat:{description:"A list of views to be concatenated.",items:{$ref:"#/definitions/Spec"},type:"array"},config:{$ref:"#/definitions/Config",description:"Vega-Lite configuration object.  This property can only be defined at the top-level of a specification."},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},datasets:{$ref:"#/definitions/Datasets",description:"A global data store for named datasets. This is a mapping from names to inline datasets.\nThis can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},description:{description:"Description of this mark for commenting purpose.",type:"string"},name:{description:"Name of the visualization for later reference.",type:"string"},padding:{$ref:"#/definitions/Padding",description:'The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\nIf an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.\n\n__Default value__: `5`'},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{anyOf:[{type:"number"},{$ref:"#/definitions/RowCol<number>"}],description:'The spacing in pixels between sub-views of the composition operator.\nAn object of the form `{"row": number, "column": number}` can be used to set\ndifferent spacing values for rows and columns.\n\n__Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)'},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},usermeta:{description:"Optional metadata that will be passed to Vega.\nThis object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",type:"object"}},required:["concat"],type:"object"},TopLevelHConcatSpec:{additionalProperties:!1,properties:{$schema:{description:"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v3.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.",format:"uri",type:"string"},autosize:{anyOf:[{$ref:"#/definitions/AutosizeType"},{$ref:"#/definitions/AutoSizeParams"}],description:'Sets how the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`.\nObject values can additionally specify parameters for content sizing and automatic resizing.\n`"fit"` is only supported for single and layered views that don\'t use `rangeStep`.\n\n__Default value__: `pad`'},background:{description:"CSS color property to use as the background of the entire view.\n\n__Default value:__ none (transparent)",type:"string"},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{description:"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\n__Default value:__ `false`",type:"boolean"},config:{$ref:"#/definitions/Config",description:"Vega-Lite configuration object.  This property can only be defined at the top-level of a specification."},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},datasets:{$ref:"#/definitions/Datasets",description:"A global data store for named datasets. This is a mapping from names to inline datasets.\nThis can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},description:{description:"Description of this mark for commenting purpose.",type:"string"},hconcat:{description:"A list of views to be concatenated and put into a row.",items:{$ref:"#/definitions/Spec"},type:"array"},name:{description:"Name of the visualization for later reference.",type:"string"},padding:{$ref:"#/definitions/Padding",description:'The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\nIf an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.\n\n__Default value__: `5`'},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{description:"The spacing in pixels between sub-views of the concat operator.\n\n__Default value__: `10`",type:"number"},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},usermeta:{description:"Optional metadata that will be passed to Vega.\nThis object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",type:"object"}},required:["hconcat"],type:"object"},TopLevelRepeatSpec:{additionalProperties:!1,properties:{$schema:{description:"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v3.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.",format:"uri",type:"string"},align:{anyOf:[{$ref:"#/definitions/LayoutAlign"},{$ref:"#/definitions/RowCol<LayoutAlign>"}],description:'The alignment to apply to grid rows and columns.\nThe supported string values are `"all"`, `"each"`, and `"none"`.\n\n- For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n- For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n- For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n\nAlternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.\n\n__Default value:__ `"all"`.'},autosize:{anyOf:[{$ref:"#/definitions/AutosizeType"},{$ref:"#/definitions/AutoSizeParams"}],description:'Sets how the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`.\nObject values can additionally specify parameters for content sizing and automatic resizing.\n`"fit"` is only supported for single and layered views that don\'t use `rangeStep`.\n\n__Default value__: `pad`'},background:{description:"CSS color property to use as the background of the entire view.\n\n__Default value:__ none (transparent)",type:"string"},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/RowCol<boolean>"}],description:'Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\nAn object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.\n\n__Default value:__ `false`'},columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},config:{$ref:"#/definitions/Config",description:"Vega-Lite configuration object.  This property can only be defined at the top-level of a specification."},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},datasets:{$ref:"#/definitions/Datasets",description:"A global data store for named datasets. This is a mapping from names to inline datasets.\nThis can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},description:{description:"Description of this mark for commenting purpose.",type:"string"},name:{description:"Name of the visualization for later reference.",type:"string"},padding:{$ref:"#/definitions/Padding",description:'The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\nIf an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.\n\n__Default value__: `5`'},repeat:{anyOf:[{items:{type:"string"},type:"array"},{$ref:"#/definitions/RepeatMapping"}],description:'Definition for fields to be repeated.  One of:\n1) An array of fields to be repeated.  If `"repeat"` is an array, the field can be referred using `{"repeat": "repeat"}`\n2) An object that mapped `"row"` and/or `"column"` to the listed of fields to be repeated along the particular orientations. The objects `{"repeat": "row"}` and `{"repeat": "column"}` can be used to refer to the repeated field respectively.'},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{anyOf:[{type:"number"},{$ref:"#/definitions/RowCol<number>"}],description:'The spacing in pixels between sub-views of the composition operator.\nAn object of the form `{"row": number, "column": number}` can be used to set\ndifferent spacing values for rows and columns.\n\n__Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)'},spec:{$ref:"#/definitions/Spec",description:"A specification of the view that gets repeated."},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},usermeta:{description:"Optional metadata that will be passed to Vega.\nThis object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",type:"object"}},required:["repeat","spec"],type:"object"},TopLevelVConcatSpec:{additionalProperties:!1,properties:{$schema:{description:"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v3.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.",format:"uri",type:"string"},autosize:{anyOf:[{$ref:"#/definitions/AutosizeType"},{$ref:"#/definitions/AutoSizeParams"}],description:'Sets how the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`.\nObject values can additionally specify parameters for content sizing and automatic resizing.\n`"fit"` is only supported for single and layered views that don\'t use `rangeStep`.\n\n__Default value__: `pad`'},background:{description:"CSS color property to use as the background of the entire view.\n\n__Default value:__ none (transparent)",type:"string"},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{description:"Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\n__Default value:__ `false`",type:"boolean"},config:{$ref:"#/definitions/Config",description:"Vega-Lite configuration object.  This property can only be defined at the top-level of a specification."},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},datasets:{$ref:"#/definitions/Datasets",description:"A global data store for named datasets. This is a mapping from names to inline datasets.\nThis can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},description:{description:"Description of this mark for commenting purpose.",type:"string"},name:{description:"Name of the visualization for later reference.",type:"string"},padding:{$ref:"#/definitions/Padding",description:'The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\nIf an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.\n\n__Default value__: `5`'},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{description:"The spacing in pixels between sub-views of the concat operator.\n\n__Default value__: `10`",type:"number"},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},usermeta:{description:"Optional metadata that will be passed to Vega.\nThis object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",type:"object"},vconcat:{description:"A list of views to be concatenated and put into a column.",items:{$ref:"#/definitions/Spec"},type:"array"}},required:["vconcat"],type:"object"},TopLevelLayerSpec:{additionalProperties:!1,properties:{$schema:{description:"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v3.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.",format:"uri",type:"string"},autosize:{anyOf:[{$ref:"#/definitions/AutosizeType"},{$ref:"#/definitions/AutoSizeParams"}],description:'Sets how the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`.\nObject values can additionally specify parameters for content sizing and automatic resizing.\n`"fit"` is only supported for single and layered views that don\'t use `rangeStep`.\n\n__Default value__: `pad`'},background:{description:"CSS color property to use as the background of the entire view.\n\n__Default value:__ none (transparent)",type:"string"},config:{$ref:"#/definitions/Config",description:"Vega-Lite configuration object.  This property can only be defined at the top-level of a specification."},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},datasets:{$ref:"#/definitions/Datasets",description:"A global data store for named datasets. This is a mapping from names to inline datasets.\nThis can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},description:{description:"Description of this mark for commenting purpose.",type:"string"},encoding:{$ref:"#/definitions/Encoding",description:"A shared key-value mapping between encoding channels and definition of fields in the underlying layers."},height:{description:'The height of a visualization.\n\n__Default value:__\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.\n\n__Note__: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"},layer:{description:"Layer or single view specifications to be layered.\n\n__Note__: Specifications inside `layer` cannot use `row` and `column` channels as layering facet specifications is not allowed. Instead, use the [facet operator](https://vega.github.io/vega-lite/docs/facet.html) and place a layer inside a facet.",items:{anyOf:[{$ref:"#/definitions/LayerSpec"},{$ref:"#/definitions/UnitSpec"}]},type:"array"},name:{description:"Name of the visualization for later reference.",type:"string"},padding:{$ref:"#/definitions/Padding",description:'The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\nIf an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.\n\n__Default value__: `5`'},projection:{$ref:"#/definitions/Projection",description:"An object defining properties of the geographic projection shared by underlying layers."},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},usermeta:{description:"Optional metadata that will be passed to Vega.\nThis object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",type:"object"},view:{$ref:"#/definitions/ViewBackground",description:"An object defining the view background's fill and stroke.\n\n__Default value:__ none (transparent)"},width:{description:'The width of a visualization.\n\n__Default value:__ This will be determined by the following rules:\n\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.\n\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"}},required:["layer"],type:"object"},TopLevelFacetSpec:{additionalProperties:!1,properties:{$schema:{description:"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v3.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.",format:"uri",type:"string"},align:{anyOf:[{$ref:"#/definitions/LayoutAlign"},{$ref:"#/definitions/RowCol<LayoutAlign>"}],description:'The alignment to apply to grid rows and columns.\nThe supported string values are `"all"`, `"each"`, and `"none"`.\n\n- For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n- For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n- For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n\nAlternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.\n\n__Default value:__ `"all"`.'},autosize:{anyOf:[{$ref:"#/definitions/AutosizeType"},{$ref:"#/definitions/AutoSizeParams"}],description:'Sets how the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`.\nObject values can additionally specify parameters for content sizing and automatic resizing.\n`"fit"` is only supported for single and layered views that don\'t use `rangeStep`.\n\n__Default value__: `pad`'},background:{description:"CSS color property to use as the background of the entire view.\n\n__Default value:__ none (transparent)",type:"string"},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/RowCol<boolean>"}],description:'Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\nAn object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.\n\n__Default value:__ `false`'},columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},config:{$ref:"#/definitions/Config",description:"Vega-Lite configuration object.  This property can only be defined at the top-level of a specification."},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},datasets:{$ref:"#/definitions/Datasets",description:"A global data store for named datasets. This is a mapping from names to inline datasets.\nThis can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},description:{description:"Description of this mark for commenting purpose.",type:"string"},facet:{anyOf:[{$ref:"#/definitions/FacetFieldDef"},{$ref:"#/definitions/FacetMapping"}],description:"Definition for how to facet the data.  One of:\n1) [a field definition for faceting the plot by one field](https://vega.github.io/vega-lite/docs/facet.html#field-def)\n2) [An object that maps `row` and `column` channels to their field definitions](https://vega.github.io/vega-lite/docs/facet.html#mapping)"},name:{description:"Name of the visualization for later reference.",type:"string"},padding:{$ref:"#/definitions/Padding",description:'The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\nIf an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.\n\n__Default value__: `5`'},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},spacing:{anyOf:[{type:"number"},{$ref:"#/definitions/RowCol<number>"}],description:'The spacing in pixels between sub-views of the composition operator.\nAn object of the form `{"row": number, "column": number}` can be used to set\ndifferent spacing values for rows and columns.\n\n__Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)'},spec:{anyOf:[{$ref:"#/definitions/LayerSpec"},{$ref:"#/definitions/FacetedUnitSpec"}],description:"A specification of the view that gets faceted."},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},usermeta:{description:"Optional metadata that will be passed to Vega.\nThis object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",type:"object"}},required:["data","facet","spec"],type:"object"},TopLevelSpec:{anyOf:[{$ref:"#/definitions/TopLevelUnitSpec"},{$ref:"#/definitions/TopLevelFacetSpec"},{$ref:"#/definitions/TopLevelLayerSpec"},{$ref:"#/definitions/TopLevelRepeatSpec"},{$ref:"#/definitions/TopLevelConcatSpec"},{$ref:"#/definitions/TopLevelVConcatSpec"},{$ref:"#/definitions/TopLevelHConcatSpec"}],description:"A Vega-Lite top-level specification.\nThis is the root class for all Vega-Lite specifications.\n(The json schema is generated from this type.)"},TopLevelUnitSpec:{additionalProperties:!1,properties:{$schema:{description:"URL to [JSON schema](http://json-schema.org/) for a Vega-Lite specification. Unless you have a reason to change this, use `https://vega.github.io/schema/vega-lite/v3.json`. Setting the `$schema` property allows automatic validation and autocomplete in editors that support JSON schema.",format:"uri",type:"string"},align:{anyOf:[{$ref:"#/definitions/LayoutAlign"},{$ref:"#/definitions/RowCol<LayoutAlign>"}],description:'The alignment to apply to grid rows and columns.\nThe supported string values are `"all"`, `"each"`, and `"none"`.\n\n- For `"none"`, a flow layout will be used, in which adjacent subviews are simply placed one after the other.\n- For `"each"`, subviews will be aligned into a clean grid structure, but each row or column may be of variable size.\n- For `"all"`, subviews will be aligned and each row or column will be sized identically based on the maximum observed size. String values for this property will be applied to both grid rows and columns.\n\nAlternatively, an object value of the form `{"row": string, "column": string}` can be used to supply different alignments for rows and columns.\n\n__Default value:__ `"all"`.'},autosize:{anyOf:[{$ref:"#/definitions/AutosizeType"},{$ref:"#/definitions/AutoSizeParams"}],description:'Sets how the visualization size should be determined. If a string, should be one of `"pad"`, `"fit"` or `"none"`.\nObject values can additionally specify parameters for content sizing and automatic resizing.\n`"fit"` is only supported for single and layered views that don\'t use `rangeStep`.\n\n__Default value__: `pad`'},background:{description:"CSS color property to use as the background of the entire view.\n\n__Default value:__ none (transparent)",type:"string"},bounds:{description:'The bounds calculation method to use for determining the extent of a sub-plot. One of `full` (the default) or `flush`.\n\n- If set to `full`, the entire calculated bounds (including axes, title, and legend) will be used.\n- If set to `flush`, only the specified width and height values for the sub-view will be used. The `flush` setting can be useful when attempting to place sub-plots without axes or legends into a uniform grid structure.\n\n__Default value:__ `"full"`',enum:["full","flush"],type:"string"},center:{anyOf:[{type:"boolean"},{$ref:"#/definitions/RowCol<boolean>"}],description:'Boolean flag indicating if subviews should be centered relative to their respective rows or columns.\n\nAn object value of the form `{"row": boolean, "column": boolean}` can be used to supply different centering values for rows and columns.\n\n__Default value:__ `false`'},columns:{description:"The number of columns to include in the view composition layout.\n\n__Default value__: `undefined` -- An infinite number of columns (a single row) will be assumed. This is equivalent to\n`hconcat` (for `concat`) and to using the `column` channel (for `facet` and `repeat`).\n\n__Note__:\n\n1) This property is only for:\n- the general (wrappable) `concat` operator (not `hconcat`/`vconcat`)\n- the `facet` and `repeat` operator with one field/repetition definition (without row/column nesting)\n\n2) Setting the `columns` to `1` is equivalent to `vconcat` (for `concat`) and to using the `row` channel (for `facet` and `repeat`).",type:"number"},config:{$ref:"#/definitions/Config",description:"Vega-Lite configuration object.  This property can only be defined at the top-level of a specification."},data:{$ref:"#/definitions/Data",description:"An object describing the data source"},datasets:{$ref:"#/definitions/Datasets",description:"A global data store for named datasets. This is a mapping from names to inline datasets.\nThis can be an array of objects or primitive values or a string. Arrays of primitive values are ingested as objects with a `data` property."},description:{description:"Description of this mark for commenting purpose.",type:"string"},encoding:{$ref:"#/definitions/FacetedEncoding",description:"A key-value mapping between encoding channels and definition of fields."},height:{description:'The height of a visualization.\n\n__Default value:__\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its y-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For y-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the height is [determined by the range step, paddings, and the cardinality of the field mapped to y-channel](https://vega.github.io/vega-lite/docs/scale.html#band). Otherwise, if the `rangeStep` is `null`, the height will be the value of [`config.view.height`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `y` channel, the `height` will be the value of `rangeStep`.\n\n__Note__: For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the height of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"},mark:{$ref:"#/definitions/AnyMark",description:'A string describing the mark type (one of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,\n`"area"`, `"point"`, `"rule"`, `"geoshape"`, and `"text"`) or a [mark definition object](https://vega.github.io/vega-lite/docs/mark.html#mark-def).'},name:{description:"Name of the visualization for later reference.",type:"string"},padding:{$ref:"#/definitions/Padding",description:'The default visualization padding, in pixels, from the edge of the visualization canvas to the data rectangle.  If a number, specifies padding for all sides.\nIf an object, the value should have the format `{"left": 5, "top": 5, "right": 5, "bottom": 5}` to specify padding for each side of the visualization.\n\n__Default value__: `5`'},projection:{$ref:"#/definitions/Projection",description:'An object defining properties of geographic projection, which will be applied to `shape` path for `"geoshape"` marks\nand to `latitude` and `"longitude"` channels for other marks.'},resolve:{$ref:"#/definitions/Resolve",description:"Scale, axis, and legend resolutions for view composition specifications."},selection:{additionalProperties:{$ref:"#/definitions/SelectionDef"},description:"A key-value mapping between selection names and definitions.",type:"object"},spacing:{anyOf:[{type:"number"},{$ref:"#/definitions/RowCol<number>"}],description:'The spacing in pixels between sub-views of the composition operator.\nAn object of the form `{"row": number, "column": number}` can be used to set\ndifferent spacing values for rows and columns.\n\n__Default value__: Depends on `"spacing"` property of [the view composition configuration](https://vega.github.io/vega-lite/docs/config.html#view-config) (`20` by default)'},title:{anyOf:[{type:"string"},{$ref:"#/definitions/TitleParams"}],description:"Title for the plot."},transform:{description:"An array of data transformations such as filter and new field calculation.",items:{$ref:"#/definitions/Transform"},type:"array"},usermeta:{description:"Optional metadata that will be passed to Vega.\nThis object is completely ignored by Vega and Vega-Lite and can be used for custom metadata.",type:"object"},view:{$ref:"#/definitions/ViewBackground",description:"An object defining the view background's fill and stroke.\n\n__Default value:__ none (transparent)"},width:{description:'The width of a visualization.\n\n__Default value:__ This will be determined by the following rules:\n\n- If a view\'s [`autosize`](https://vega.github.io/vega-lite/docs/size.html#autosize) type is `"fit"` or its x-channel has a [continuous scale](https://vega.github.io/vega-lite/docs/scale.html#continuous), the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- For x-axis with a band or point scale: if [`rangeStep`](https://vega.github.io/vega-lite/docs/scale.html#band) is a numeric value or unspecified, the width is [determined by the range step, paddings, and the cardinality of the field mapped to x-channel](https://vega.github.io/vega-lite/docs/scale.html#band).   Otherwise, if the `rangeStep` is `null`, the width will be the value of [`config.view.width`](https://vega.github.io/vega-lite/docs/spec.html#config).\n- If no field is mapped to `x` channel, the `width` will be the value of [`config.scale.textXRangeStep`](https://vega.github.io/vega-lite/docs/size.html#default-width-and-height) for `text` mark and the value of `rangeStep` for other marks.\n\n__Note:__ For plots with [`row` and `column` channels](https://vega.github.io/vega-lite/docs/encoding.html#facet), this represents the width of a single view.\n\n__See also:__ The documentation for [width and height](https://vega.github.io/vega-lite/docs/size.html) contains more examples.',type:"number"}},required:["data","mark"],type:"object"},TopoDataFormat:{additionalProperties:!1,properties:{feature:{description:'The name of the TopoJSON object set to convert to a GeoJSON feature collection.\nFor example, in a map of the world, there may be an object set named `"countries"`.\nUsing the feature property, we can extract this set and generate a GeoJSON feature object for each country.',type:"string"},mesh:{description:"The name of the TopoJSON object set to convert to mesh.\nSimilar to the `feature` option, `mesh` extracts a named TopoJSON object set.\n  Unlike the `feature` option, the corresponding geo data is returned as a single, unified mesh instance, not as individual GeoJSON features.\nExtracting a mesh is useful for more efficiently drawing borders or other geographic elements that you do not need to associate with specific regions such as individual countries, states or counties.",type:"string"},parse:{anyOf:[{$ref:"#/definitions/Parse"},{type:"null"}],description:'If set to `null`, disable type inference based on the spec and only use type inference based on the data.\nAlternatively, a parsing directive object can be provided for explicit data types. Each property of the object corresponds to a field name, and the value to the desired data type (one of `"number"`, `"boolean"`, `"date"`, or null (do not parse the field)).\nFor example, `"parse": {"modified_on": "date"}` parses the `modified_on` field in each input record a Date value.\n\nFor `"date"`, we parse data based using Javascript\'s [`Date.parse()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).\nFor Specific date formats can be provided (e.g., `{foo: "date:\'%m%d%Y\'"}`), using the [d3-time-format syntax](https://github.com/d3/d3-time-format#locale_format). UTC date format parsing is supported similarly (e.g., `{foo: "utc:\'%m%d%Y\'"}`). See more about [UTC time](https://vega.github.io/vega-lite/docs/timeunit.html#utc)'},type:{description:'Type of input data: `"json"`, `"csv"`, `"tsv"`, `"dsv"`.\nThe default format type is determined by the extension of the file URL.\nIf no extension is detected, `"json"` will be used by default.',enum:["topojson"],type:"string"}},type:"object"},Transform:{anyOf:[{$ref:"#/definitions/FilterTransform"},{$ref:"#/definitions/CalculateTransform"},{$ref:"#/definitions/LookupTransform"},{$ref:"#/definitions/BinTransform"},{$ref:"#/definitions/TimeUnitTransform"},{$ref:"#/definitions/ImputeTransform"},{$ref:"#/definitions/AggregateTransform"},{$ref:"#/definitions/WindowTransform"},{$ref:"#/definitions/JoinAggregateTransform"},{$ref:"#/definitions/StackTransform"},{$ref:"#/definitions/FlattenTransform"},{$ref:"#/definitions/FoldTransform"},{$ref:"#/definitions/SampleTransform"}]},Type:{anyOf:[{$ref:"#/definitions/StandardType"},{enum:["geojson"],type:"string"}]},TypeForShape:{enum:["nominal","ordinal","geojson"],type:"string"},UnitSpec:{$ref:"#/definitions/GenericUnitSpec<Encoding,AnyMark>",description:"A unit specification, which can contain either [primitive marks or composite marks](https://vega.github.io/vega-lite/docs/mark.html#types)."},UrlData:{additionalProperties:!1,properties:{format:{$ref:"#/definitions/DataFormat",description:"An object that specifies the format for parsing the data."},name:{description:"Provide a placeholder name and bind data at runtime.",type:"string"},url:{description:"An URL from which to load the data set. Use the `format.type` property\nto ensure the loaded data is correctly parsed.",type:"string"}},required:["url"],type:"object"},UtcMultiTimeUnit:{enum:["utcyearquarter","utcyearquartermonth","utcyearmonth","utcyearmonthdate","utcyearmonthdatehours","utcyearmonthdatehoursminutes","utcyearmonthdatehoursminutesseconds","utcquartermonth","utcmonthdate","utcmonthdatehours","utchoursminutes","utchoursminutesseconds","utcminutesseconds","utcsecondsmilliseconds"],type:"string"},UtcSingleTimeUnit:{enum:["utcyear","utcquarter","utcmonth","utcday","utcdate","utchours","utcminutes","utcseconds","utcmilliseconds"],type:"string"},YValueDef:{additionalProperties:!1,description:"Definition object for a constant value of an encoding channel.",properties:{value:{anyOf:[{type:"number"},{enum:["height"],type:"string"}],description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).'}},required:["value"],type:"object"},XValueDef:{additionalProperties:!1,description:"Definition object for a constant value of an encoding channel.",properties:{value:{anyOf:[{type:"number"},{enum:["width"],type:"string"}],description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).'}},required:["value"],type:"object"},NumberValueDef:{additionalProperties:!1,description:"Definition object for a constant value of an encoding channel.",properties:{value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:"number"}},required:["value"],type:"object"},'ValueDefWithCondition<MarkPropFieldDef<"nominal">,string>':{anyOf:[{$ref:'#/definitions/ValueDefWithOptionalCondition<MarkPropFieldDef<"nominal">,string>'},{$ref:'#/definitions/ConditionOnlyDef<MarkPropFieldDef<"nominal">>'}],description:"A ValueDef with Condition<ValueDef | FieldDef> where either the conition or the value are optional.\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}"},"ValueDefWithCondition<MarkPropFieldDef,(string|null)>":{anyOf:[{$ref:"#/definitions/ValueDefWithOptionalCondition<MarkPropFieldDef,(string|null)>"},{$ref:"#/definitions/ConditionOnlyDef<MarkPropFieldDef>"}],description:"A ValueDef with Condition<ValueDef | FieldDef> where either the conition or the value are optional.\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}"},"ValueDefWithCondition<MarkPropFieldDef,number>":{anyOf:[{$ref:"#/definitions/ValueDefWithOptionalCondition<MarkPropFieldDef,number>"},{$ref:"#/definitions/ConditionOnlyDef<MarkPropFieldDef>"}],description:"A ValueDef with Condition<ValueDef | FieldDef> where either the conition or the value are optional.\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}"},"ValueDefWithCondition<MarkPropFieldDef<TypeForShape>,string>":{anyOf:[{$ref:"#/definitions/ValueDefWithOptionalCondition<MarkPropFieldDef<TypeForShape>,string>"},{$ref:"#/definitions/ConditionOnlyDef<MarkPropFieldDef<TypeForShape>>"}],description:"A ValueDef with Condition<ValueDef | FieldDef> where either the conition or the value are optional.\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}"},"ValueDefWithCondition<TextFieldDef,(string|number|boolean)>":{anyOf:[{$ref:"#/definitions/ValueDefWithOptionalCondition<TextFieldDef,(string|number|boolean)>"},{$ref:"#/definitions/ConditionOnlyDef<TextFieldDef>"}],description:"A ValueDef with Condition<ValueDef | FieldDef> where either the conition or the value are optional.\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}"},'ValueDefWithOptionalCondition<MarkPropFieldDef<"nominal">,string>':{additionalProperties:!1,description:"A ValueDef with optional Condition<ValueDef | FieldDef>\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}",properties:{condition:{anyOf:[{$ref:'#/definitions/ConditionalMarkPropFieldDef<"nominal">'},{$ref:"#/definitions/ConditionalStringValueDef"},{items:{$ref:"#/definitions/ConditionalStringValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:"string"}},required:["value"],type:"object"},"ValueDefWithOptionalCondition<MarkPropFieldDef,(string|null)>":{additionalProperties:!1,description:"A ValueDef with optional Condition<ValueDef | FieldDef>\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}",properties:{condition:{anyOf:[{$ref:"#/definitions/ConditionalMarkPropFieldDef"},{$ref:"#/definitions/ConditionalColorValueDef"},{items:{$ref:"#/definitions/ConditionalColorValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:["string","null"]}},required:["value"],type:"object"},"ValueDefWithOptionalCondition<MarkPropFieldDef,number>":{additionalProperties:!1,description:"A ValueDef with optional Condition<ValueDef | FieldDef>\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}",properties:{condition:{anyOf:[{$ref:"#/definitions/ConditionalMarkPropFieldDef"},{$ref:"#/definitions/ConditionalNumberValueDef"},{items:{$ref:"#/definitions/ConditionalNumberValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:"number"}},required:["value"],type:"object"},"ValueDefWithOptionalCondition<MarkPropFieldDef<TypeForShape>,string>":{additionalProperties:!1,description:"A ValueDef with optional Condition<ValueDef | FieldDef>\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}",properties:{condition:{anyOf:[{$ref:"#/definitions/ConditionalMarkPropFieldDef<TypeForShape>"},{$ref:"#/definitions/ConditionalStringValueDef"},{items:{$ref:"#/definitions/ConditionalStringValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:"string"}},required:["value"],type:"object"},"ValueDefWithOptionalCondition<TextFieldDef,(string|number|boolean)>":{additionalProperties:!1,description:"A ValueDef with optional Condition<ValueDef | FieldDef>\n{\n   condition: {field: ...} | {value: ...},\n   value: ...,\n}",properties:{condition:{anyOf:[{$ref:"#/definitions/ConditionalTextFieldDef"},{$ref:"#/definitions/ConditionalTextValueDef"},{items:{$ref:"#/definitions/ConditionalTextValueDef"},type:"array"}],description:"A field definition or one or more value definition(s) with a selection predicate."},value:{description:'A constant value in visual domain (e.g., `"red"` / "#0099ff" for color, values between `0` to `1` for opacity).',type:["string","number","boolean"]}},required:["value"],type:"object"},ViewBackground:{additionalProperties:!1,properties:{cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},fill:{description:"The fill color.\n\n__Default value:__ `undefined`",type:["string","null"]},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},stroke:{description:'The stroke color.\n\n__Default value:__ `"#ddd"`',type:["string","null"]},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},style:{description:'A string or array of strings indicating the name of custom styles to apply to the view background. A style is a named collection of mark property defaults defined within the [style configuration](https://vega.github.io/vega-lite/docs/mark.html#style-config). If style is an array, later styles will override earlier styles.\n\n__Default value:__ `"cell"`\n__Note:__ Any specified view background properties will augment the default style.',type:"string"}},type:"object"},ViewConfig:{additionalProperties:!1,properties:{clip:{description:"Whether the view should be clipped.",type:"boolean"},cornerRadius:{description:"The radius in pixels of rounded rectangle corners.\n\n__Default value:__ `0`",type:"number"},fill:{description:"The fill color.\n\n__Default value:__ `undefined`",type:["string","null"]},fillOpacity:{description:"The fill opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},height:{description:"The default height of the single plot or each plot in a trellis plot when the visualization has a continuous (non-ordinal) y-scale with `rangeStep` = `null`.\n\n__Default value:__ `200`",type:"number"},opacity:{description:"The overall opacity (value between [0,1]).\n\n__Default value:__ `0.7` for non-aggregate plots with `point`, `tick`, `circle`, or `square` marks or layered `bar` charts and `1` otherwise.",maximum:1,minimum:0,type:"number"},stroke:{description:'The stroke color.\n\n__Default value:__ `"#ddd"`',type:["string","null"]},strokeCap:{$ref:"#/definitions/StrokeCap",description:'The stroke cap for line ending style. One of `"butt"`, `"round"`, or `"square"`.\n\n__Default value:__ `"square"`'},strokeDash:{description:"An array of alternating stroke, space lengths for creating dashed or dotted lines.",items:{type:"number"},type:"array"},strokeDashOffset:{description:"The offset (in pixels) into which to begin drawing with the stroke dash array.",type:"number"},strokeJoin:{$ref:"#/definitions/StrokeJoin",description:'The stroke line join method. One of `"miter"`, `"round"` or `"bevel"`.\n\n__Default value:__ `"miter"`'},strokeMiterLimit:{description:"The miter limit at which to bevel a line join.",type:"number"},strokeOpacity:{description:"The stroke opacity (value between [0,1]).\n\n__Default value:__ `1`",maximum:1,minimum:0,type:"number"},strokeWidth:{description:"The stroke width, in pixels.",minimum:0,type:"number"},width:{description:"The default width of the single plot or each plot in a trellis plot when the visualization has a continuous (non-ordinal) x-scale or ordinal x-scale with `rangeStep` = `null`.\n\n__Default value:__ `200`",type:"number"}},type:"object"},WindowFieldDef:{additionalProperties:!1,properties:{as:{description:"The output name for the window operation.",type:"string"},field:{description:"The data field for which to compute the aggregate or window function. This can be omitted for window functions that do not operate over a field such as `count`, `rank`, `dense_rank`.",type:"string"},op:{anyOf:[{$ref:"#/definitions/AggregateOp"},{$ref:"#/definitions/WindowOnlyOp"}],description:"The window or aggregation operation to apply within a window (e.g.,`rank`, `lead`, `sum`, `average` or `count`). See the list of all supported operations [here](https://vega.github.io/vega-lite/docs/window.html#ops)."},param:{description:"Parameter values for the window functions. Parameter values can be omitted for operations that do not accept a parameter.\n\nSee the list of all supported operations and their parameters [here](https://vega.github.io/vega-lite/docs/transforms/window.html).",type:"number"}},required:["op","as"],type:"object"},WindowOnlyOp:{enum:["row_number","rank","dense_rank","percent_rank","cume_dist","ntile","lag","lead","first_value","last_value","nth_value"],type:"string"},WindowTransform:{additionalProperties:!1,properties:{frame:{description:"A frame specification as a two-element array indicating how the sliding window should proceed. The array entries should either be a number indicating the offset from the current data object, or null to indicate unbounded rows preceding or following the current data object. The default value is `[null, 0]`, indicating that the sliding window includes the current object and all preceding objects. The value `[-5, 5]` indicates that the window should include five objects preceding and five objects following the current object. Finally, `[null, null]` indicates that the window frame should always include all data objects. If you this frame and want to assign the same value to add objects, you can use the simpler [join aggregate transform](https://vega.github.io/vega-lite/docs/joinaggregate.html). The only operators affected are the aggregation operations and the `first_value`, `last_value`, and `nth_value` window operations. The other window operations are not affected by this.\n\n__Default value:__:  `[null, 0]` (includes the current object and all preceding objects)",items:{type:["null","number"]},type:"array"},groupby:{description:"The data fields for partitioning the data objects into separate windows. If unspecified, all data points will be in a single window.",items:{type:"string"},type:"array"},ignorePeers:{description:"Indicates if the sliding window frame should ignore peer values (data that are considered identical by the sort criteria). The default is false, causing the window frame to expand to include all peer values. If set to true, the window frame will be defined by offset values only. This setting only affects those operations that depend on the window frame, namely aggregation operations and the first_value, last_value, and nth_value window operations.\n\n__Default value:__ `false`",type:"boolean"},sort:{description:"A sort field definition for sorting data objects within a window. If two data objects are considered equal by the comparator, they are considered “peer” values of equal rank. If sort is not specified, the order is undefined: data objects are processed in the order they are observed and none are considered peers (the ignorePeers parameter is ignored and treated as if set to `true`).",items:{$ref:"#/definitions/SortField"},type:"array"},window:{description:"The definition of the fields in the window, and what calculations to use.",items:{$ref:"#/definitions/WindowFieldDef"},type:"array"}},required:["window"],type:"object"}}}},145:function(e,t,i){"use strict";i.d(t,"b",function(){return f}),i.d(t,"i",function(){return u}),i.d(t,"a",function(){return p}),i.d(t,"f",function(){return h}),i.d(t,"g",function(){return g}),i.d(t,"h",function(){return m}),i.d(t,"c",function(){return b}),i.d(t,"d",function(){return y}),i.d(t,"e",function(){return v});var n=i(306),o=i(1),a=i(76),r=i(284),s=i(18),l=i(5),d=i(61),c=i(527);function f(e,t=o.w){if(Object(o.z)(e)){return`[${e.map(e=>f(e,t)).join(", ")}]`}return Object(r.b)(e)?t(Object(r.a)(e)):t(JSON.stringify(e))}function u(e,t){return Object(a.f)(e,(i,n)=>{const r=i.name;let s=n.modifyExpr(e,i);t.push(...n.signals(e,i)),Object(c.a)(i,n=>{n.signals&&(t=n.signals(e,i,t)),n.modifyExpr&&(s=n.modifyExpr(e,i,s))}),t.push({name:r+a.a,update:`modify(${Object(o.W)(i.name+a.c)}, ${s})`})}),t}function p(e,t){if(e.component.selection&&Object(l.s)(e.component.selection).length){const i=Object(o.W)(e.getName("cell"));t.unshift({name:"facet",value:{},on:[{events:Object(n.a)("mousemove","scope"),update:`isTuple(facet) ? facet : group(${i}).datum`}]})}return t}function h(e,t){let i=!1;if(Object(a.f)(e,(n,r)=>{const s=n.name,l=Object(o.W)(s+a.c);t.filter(e=>e.name===s).length||t.push({name:n.name,update:`${a.e}(${l}`+("global"===n.resolve?")":`, ${Object(o.W)(n.resolve)})`)}),i=!0,r.topLevelSignals&&(t=r.topLevelSignals(e,n,t)),Object(c.a)(n,i=>{i.topLevelSignals&&(t=i.topLevelSignals(e,n,t))})}),i){t.filter(e=>"unit"===e.name).length||t.unshift({name:"unit",value:{},on:[{events:"mousemove",update:"isTuple(group()) ? group() : unit"}]})}return t}function g(e,t){return Object(a.f)(e,e=>{t.filter(t=>t.name===e.name+a.c).length||t.push({name:e.name+a.c})}),t}function m(e,t){return Object(a.f)(e,(i,n)=>{t=n.marks?n.marks(e,i,t):t,Object(c.a)(i,n=>{n.marks&&(t=n.marks(e,i,t))})}),t}function b(e,t){for(const i of e.children)Object(d.g)(i)&&(t=m(i,t));return t}function y(e,t,i){const n=[];const r=Object(l.t)(t,function(t){const r=Object(l.H)(t),s=e.getSelectionComponent(r,t),d=Object(o.W)(r+a.c);if(s.project.timeUnit){const t=i||e.component.data.raw,n=s.project.timeUnit.clone();t.parent?n.insertAsParentOf(t):t.parent=n}return"none"!==s.empty&&n.push(d),`vlSelectionTest(${d}, datum`+("global"===s.resolve?")":`, ${Object(o.W)(s.resolve)})`)});return(n.length?"!("+n.map(e=>`length(data(${e}))`).join(" || ")+") || ":"")+`(${r})`}function v(e,t){const i=JSON.parse(t.signal.replace(a.b,"")),n=Object(l.H)(i.selection),r=i.encoding;let d=i.field,c=e.component.selection&&e.component.selection[n];if(!c){if(c=e.getSelectionComponent(n,i.selection),r||d){if(r&&!d){const e=c.project.filter(e=>e.channel===r);!e.length||e.length>1?(d=c.project[0].field,Object(s.e)((e.length?"Multiple ":"No ")+`matching ${Object(o.W)(r)} encoding found for selection ${Object(o.W)(i.selection)}. `+`Using "field": ${Object(o.W)(d)}.`)):d=e[0].field}}else d=c.project[0].field,c.project.length>1&&Object(s.e)('A "field" or "encoding" must be specified when using a selection as a scale domain. '+`Using "field": ${Object(o.W)(d)}.`);return{signal:Object(l.b)(d,n)}}return Object(s.e)('Use "bind": "scales" to setup a binding for scales and selections within the same view.'),{signal:"null"}}},1451:function(e){e.exports={name:"vega-lite",author:'Dominik Moritz, Kanit "Ham" Wongsuphasawat, Arvind Satyanarayan, Jeffrey Heer',version:"3.0.3",collaborators:["Kanit Wongsuphasawat <kanitw@gmail.com> (http://kanitw.yellowpigz.com)","Dominik Moritz <domoritz@cs.washington.edu> (https://www.domoritz.de)","Arvind Satyanarayan (https://arvindsatya.com/)","Jeffrey Heer (https://jheer.org)"],homepage:"https://vega.github.io/vega-lite/",description:"Vega-Lite is a concise high-level language for interactive visualization.",main:"build/vega-lite.js",unpkg:"build/vega-lite.min.js",jsdelivr:"build/vega-lite.min.js",module:"build/src/index",types:"build/src/index.d.ts",bin:{vl2png:"./bin/vl2png",vl2svg:"./bin/vl2svg",vl2vg:"./bin/vl2vg"},directories:{test:"test"},scripts:{build:"npm run build:only","build:only":"tsc && rollup -c",postbuild:"terser build/vega-lite.js -cm --source-map content=build/vega-lite.js.map,filename=build/vega-lite.min.js.map -o build/vega-lite.min.js && npm run schema","build:examples":"npm run build:only","postbuild:examples":"npm run data && TZ=America/Los_Angeles scripts/build-examples.sh","build:examples-full":"npm run build:only","postbuild:examples-full":"TZ=America/Los_Angeles scripts/build-examples.sh 1","build:example":"TZ=America/Los_Angeles scripts/build-example.sh","build:toc":"npm run data && bundle exec jekyll build -q && scripts/generate-toc","build:site":"tsc -p site && rollup -c site/rollup.config.js","build:versions":"scripts/update-version.sh",clean:"rm -rf build && rm -f examples/compiled/*.png && find site/examples ! -name 'index.md' -type f -delete",data:"rsync -r node_modules/vega-datasets/data/* data",deploy:"scripts/deploy.sh","deploy:gh":"scripts/deploy-gh.sh","deploy:schema":"scripts/deploy-schema.sh",schema:"mkdir -p build && node --stack-size=5000 ./node_modules/.bin/ts-json-schema-generator --no-type-check --path tsconfig.json --type TopLevelSpec > build/vega-lite-schema.json && npm run renameschema && cp build/vega-lite-schema.json _data/",renameschema:"scripts/rename-schema.sh",presite:"npm run data && npm run build:site && npm run build:toc && npm run build:versions && scripts/create-example-pages",site:"bundle exec jekyll serve --incremental",prettierbase:"prettier '{src,test,test-runtime,site,typings}/**/*.{ts,md,css}'",format:"tslint -p . --fix && npm run prettierbase -- --write",lint:"tslint -p . && npm run prettierbase -- --check",test:"jest test/ && npm run lint && npm run schema && jest examples/ && npm run test:runtime","test:inspect":"node --inspect-brk ./node_modules/.bin/jest --runInBand test","test:runtime":"TZ=America/Los_Angeles jest test-runtime/","test:runtime:generate":"rm -Rf test-runtime/resources && VL_GENERATE_TESTS=true npm run test:runtime","watch:build":"npm run build:only && concurrently --kill-others -n Typescript,Rollup 'tsc -w' 'rollup -c -w'","watch:site":"concurrently --kill-others -n Typescript,Rollup 'tsc -p site --watch' 'rollup -c site/rollup.config.js --watch'","watch:test":"jest --watch"},repository:{type:"git",url:"https://github.com/vega/vega-lite.git"},license:"BSD-3-Clause",bugs:{url:"https://github.com/vega/vega-lite/issues"},devDependencies:{"@types/chai":"^4.1.7","@types/d3":"^5.7.1","@types/highlight.js":"^9.12.3","@types/jest":"^24.0.11","@types/jest-environment-puppeteer":"^4.0.0","@types/mkdirp":"^0.5.2","@types/node":"^11.11.6","@types/puppeteer":"^1.12.3",ajv:"^6.10.0",chai:"^4.2.0",cheerio:"^1.0.0-rc.2",codecov:"^3.2.0",concurrently:"^4.1.0",d3:"^5.9.2","highlight.js":"^9.15.6","http-server":"^0.11.1",jest:"^24.5.0","jest-puppeteer":"^4.1.0",mkdirp:"^0.5.1",prettier:"^1.16.4",puppeteer:"^1.13.0",rollup:"^1.7.0","rollup-plugin-commonjs":"^9.2.1","rollup-plugin-json":"^4.0.0","rollup-plugin-node-resolve":"^4.0.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.4","svg2png-many":"^0.0.7",terser:"^3.17.0","ts-jest":"^24.0.0","ts-json-schema-generator":"^0.40.0",tslint:"5.14.0","tslint-config-prettier":"^1.18.0",typescript:"^3.3.4000","vega-cli":"^5.3.2","vega-datasets":"^1.23.0","vega-embed":"^4.0.0-rc1","vega-tooltip":"^0.17.0","yaml-front-matter":"^4.0.0"},dependencies:{"@types/clone":"~0.1.30","@types/fast-json-stable-stringify":"^2.0.0",clone:"~2.1.2","fast-deep-equal":"~2.0.1","fast-json-stable-stringify":"~2.0.0","json-stringify-pretty-compact":"~2.0.0",tslib:"~1.9.3","vega-event-selector":"~2.0.0","vega-expression":"~2.6.0","vega-typings":"0.6.2","vega-util":"~1.10.0",yargs:"~13.2.2"},peerDependencies:{vega:"^5.3.2"},jest:{preset:"jest-puppeteer",transform:{"^.+\\.tsx?$":"ts-jest"},testRegex:"(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",moduleFileExtensions:["ts","tsx","js","jsx","json","node"],testPathIgnorePatterns:["node_modules","<rootDir>/build","_site","src"],coverageDirectory:"./coverage/",collectCoverage:!1}}},1452:function(e,t,i){"use strict";i.d(t,"a",function(){return c});var n=i(5),o=i(377),a=i(524),r=i(525),s=i(392);const l={};function d(e,t,i){const n=new o.a(e,t);l[e]={normalizer:n,parts:i}}function c(){return Object(n.s)(l)}d(a.a,a.d,a.b),d(s.a,s.e,s.b),d(r.a,r.d,r.b)},1454:function(e,t,i){"use strict";i.d(t,"a",function(){return b});var n=i(57),o=i(1),a=i(19),r=i(524),s=i(525),l=i(392),d=i(113),c=i(18),f=i(187),u=i(766),p=i(253),h=i(5),g=i(1455),m=i(1456);class b extends u.a{constructor(){super(...arguments),this.nonFacetUnitNormalizers=[r.c,l.c,s.c,new g.a,new m.a]}map(e,t){if(Object(p.a)(e)){const i=Object(d.a)(e.encoding,a.q),n=Object(d.a)(e.encoding,a.c),o=Object(d.a)(e.encoding,a.d);if(i||n||o)return this.mapFacetedUnit(e,t)}return super.map(e,t)}mapUnit(e,t){const{parentEncoding:i,parentProjection:n}=t;if(i||n)return this.mapUnitWithParentEncodingOrProjection(e,t);const o=this.mapLayerOrUnit.bind(this);for(const i of this.nonFacetUnitNormalizers)if(i.hasMatchingType(e,t.config))return i.run(e,t,o);return e}mapRepeat(e,t){const{repeat:i}=e;return!Object(o.z)(i)&&e.columns&&(e=Object(h.w)(e,["columns"]),c.e(c.b.columnsNotSupportByRowCol("repeat"))),Object.assign({},e,{spec:this.map(e.spec,t)})}mapFacet(e,t){const{facet:i}=e;return Object(f.b)(i)&&e.columns&&(e=Object(h.w)(e,["columns"]),c.e(c.b.columnsNotSupportByRowCol("facet"))),super.mapFacet(e,t)}mapUnitWithParentEncodingOrProjection(e,t){const{encoding:i,projection:n}=e,{parentEncoding:o,parentProjection:a,config:r}=t,s=v({parentProjection:a,projection:n}),l=y({parentEncoding:o,encoding:i});return this.mapUnit(Object.assign({},e,s?{projection:s}:{},l?{encoding:l}:{}),{config:r})}mapFacetedUnit(e,t){const i=e.encoding,{row:o,column:r,facet:s}=i,l=n.b(i,["row","column","facet"]),{mark:d,width:f,projection:u,height:p,selection:h,encoding:g}=e,m=n.b(e,["mark","width","projection","height","selection","encoding"]);return s&&(o||r)&&c.e(c.b.facetChannelDropped([...o?[a.q]:[],...r?[a.c]:[]])),this.mapFacet(Object.assign({},m,{facet:o||r?Object.assign({},o?{row:o}:{},r?{column:r}:{}):s,spec:Object.assign({},u?{projection:u}:{},{mark:d},f?{width:f}:{},p?{height:p}:{},{encoding:l},h?{selection:h}:{})}),t)}mapLayer(e,t){var{parentEncoding:i,parentProjection:o}=t,a=n.b(t,["parentEncoding","parentProjection"]);const{encoding:r,projection:s}=e,l=n.b(e,["encoding","projection"]),d=Object.assign({},a,{parentEncoding:y({parentEncoding:i,encoding:r}),parentProjection:v({parentProjection:o,projection:s})});return super.mapLayer(l,d)}}function y(e){const{parentEncoding:t,encoding:i}=e;if(t&&i){const e=Object(h.s)(t).reduce((e,t)=>(i[t]&&e.push(t),e),[]);e.length>0&&c.e(c.b.encodingOverridden(e))}const n=Object.assign({},t||{},i||{});return Object(h.s)(n).length>0?n:void 0}function v(e){const{parentProjection:t,projection:i}=e;return t&&i&&c.e(c.b.projectionOverridden({parentProjection:t,projection:i})),i||t}},1455:function(e,t,i){"use strict";i.d(t,"a",function(){return p});var n=i(57),o=i(1),a=i(37),r=i(253),s=i(767),l=i(5);function d(e){const{point:t,line:i}=e,o=n.b(e,["point","line"]);return Object(l.s)(o).length>1?o:o.type}function c(e){for(const t of["line","area","rule","trail"])e[t]&&(e=Object.assign({},e,{[t]:Object(l.w)(e[t],["point","line"])}));return e}function f(e,t={},i){return"transparent"===e.point?{opacity:0}:e.point?Object(o.E)(e.point)?e.point:{}:void 0!==e.point?null:t.point||i.shape?Object(o.E)(t.point)?t.point:{}:void 0}function u(e,t={}){return e.line?!0===e.line?{}:e.line:void 0!==e.line?null:t.line?!0===t.line?{}:t.line:void 0}class p{constructor(){this.name="path-overlay"}hasMatchingType(e,t){if(Object(r.a)(e)){const{mark:i,encoding:n}=e,o=Object(a.u)(i)?i:{type:i};switch(o.type){case"line":case"rule":case"trail":return!!f(o,t[o.type],n);case"area":return!!f(o,t[o.type],n)||!!u(o,t[o.type])}}return!1}run(e,t,i){const{config:o}=t,{selection:r,projection:p,encoding:h,mark:g}=e,m=n.b(e,["selection","projection","encoding","mark"]),b=Object(a.u)(g)?g:{type:g},y=f(b,o[b.type],h),v="area"===b.type&&u(b,o[b.type]),_=[Object.assign({},r?{selection:r}:{},{mark:d(Object.assign({},b,"area"===b.type?{opacity:.7}:{})),encoding:Object(l.w)(h,["shape"])})],w=Object(s.a)(b,h,o?o.stack:void 0);let x=h;if(w){const{fieldChannel:e,offset:t}=w;x=Object.assign({},h,{[e]:Object.assign({},h[e],t?{stack:t}:{})})}return v&&_.push(Object.assign({},p?{projection:p}:{},{mark:Object.assign({type:"line"},Object(l.x)(b,["clip","interpolate","tension"]),v),encoding:x})),y&&_.push(Object.assign({},p?{projection:p}:{},{mark:Object.assign({type:"point",opacity:1,filled:!0},Object(l.x)(b,["clip"]),y),encoding:x})),i(Object.assign({},m,{layer:_}),Object.assign({},t,{config:c(o)}))}}},1456:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(18),o=i(253);class a{constructor(){this.name="RuleForRangedLine"}hasMatchingType(e){if(Object(o.a)(e)){const{encoding:t,mark:i}=e;return!("line"!==i||!t.x2&&!t.y2)}return!1}run(e,t,i){const{encoding:o}=e;return n.e(n.b.lineWithRange(!!o.x2,!!o.y2)),i(Object.assign({},e,{mark:"rule"}),t)}}},1457:function(e,t,i){"use strict";i.d(t,"a",function(){return l});var n=i(18),o=i(158),a=i(768),r=i(378),s=i(308);class l extends a.a{constructor(e,t,i,a,s){super(e,"concat",t,i,s,a,e.resolve),e.resolve&&e.resolve.axis&&("shared"===e.resolve.axis.x||"shared"===e.resolve.axis.y)&&n.e(n.b.CONCAT_CANNOT_SHARE_AXIS),this.concatType=Object(o.g)(e)?"vconcat":Object(o.c)(e)?"hconcat":"concat",this.children=this.getChildren(e).map((e,t)=>Object(r.a)(e,this,this.getName("concat_"+t),void 0,a,s,!1))}getChildren(e){return Object(o.g)(e)?e.vconcat:Object(o.c)(e)?e.hconcat:e.concat}parseLayoutSize(){Object(s.b)(this)}parseAxisGroup(){return null}assembleDefaultLayout(){return Object.assign({},"vconcat"===this.concatType?{columns:1}:{},{bounds:"full",align:"each"})}}},1458:function(e,t,i){"use strict";var n=i(76);const o={signals:i(775).b,modifyExpr:(e,t)=>{return t.name+n.d+", "+("global"===t.resolve?"true":`{unit: ${Object(n.i)(e)}}`)}};t.a=o},1459:function(e,t,i){"use strict";var n=i(76),o=i(5),a=i(145),r=i(776),s=i(381);const l={has:e=>"single"===e.type&&"global"===e.resolve&&e.bind&&"scales"!==e.bind,topLevelSignals:(e,t,i)=>{const n=t.name,s=t.project,l=t.bind,d=t.init&&t.init[0],c=r.a.has(t)?"(item().isVoronoi ? datum.datum : datum)":"datum";return s.forEach((e,r)=>{const s=Object(o.H)(`${n}_${e.field}`);i.filter(e=>e.name===s).length||i.unshift(Object.assign({name:s},d?{init:Object(a.b)(d[r])}:{value:null},{on:[{events:t.events,update:`datum && item().mark.marktype !== 'group' ? ${Object(o.b)(e.field,c)} : null`}],bind:l[e.field]||l[e.channel]||l}))}),i},signals:(e,t,i)=>{const a=t.name,r=t.project,l=i.filter(e=>e.name===a+n.d)[0],d=a+s.a,c=r.map(e=>Object(o.H)(`${a}_${e.field}`)),f=c.map(e=>`${e} !== null`).join(" && ");return c.length&&(l.update=`${f} ? {fields: ${d}, values: [${c.join(", ")}]} : null`),delete l.value,delete l.on,i}};t.a=l},1460:function(e,t,i){"use strict";var n=i(76);const o={has:e=>"multi"===e.type&&e.toggle,signals:(e,t,i)=>i.concat({name:t.name+"_toggle",value:!1,on:[{events:t.events,update:t.toggle}]}),modifyExpr:(e,t,i)=>{const o=t.name+n.d,a=t.name+"_toggle";return`${a} ? null : ${o}, `+("global"===t.resolve?`${a} ? null : true, `:`${a} ? null : {unit: ${Object(n.i)(e)}}, `)+`${a} ? ${o} : null`}};t.a=o},1461:function(e,t,i){"use strict";var n=i(306),o=i(19),a=i(501),r=i(190);const s="_translate_anchor",l="_translate_delta",d={has:e=>"interval"===e.type&&e.translate,signals:(e,t,i)=>{const d=t.name,f=r.a.has(t),u=d+s,{x:p,y:h}=t.project.has;let g=Object(n.a)(t.translate,"scope");return f||(g=g.map(e=>(e.between[0].markname=d+a.a,e))),i.push({name:u,value:{},on:[{events:g.map(e=>e.between[0]),update:"{x: x(unit), y: y(unit)"+(void 0!==p?", extent_x: "+(f?Object(r.b)(e,o.x):`slice(${p.signals.visual})`):"")+(void 0!==h?", extent_y: "+(f?Object(r.b)(e,o.z):`slice(${h.signals.visual})`):"")+"}"}]},{name:d+l,value:{},on:[{events:g,update:`{x: ${u}.x - x(unit), y: ${u}.y - y(unit)}`}]}),void 0!==p&&c(e,t,p,"width",i),void 0!==h&&c(e,t,h,"height",i),i}};function c(e,t,i,n,a){const d=t.name,c=d+s,f=d+l,u=i.channel,p=r.a.has(t),h=a.filter(e=>e.name===i.signals[p?"data":"visual"])[0],g=e.getSizeSignalRef(n).signal,m=e.getScaleComponent(u),b=m.get("type"),y=p&&u===o.x?"-":"",v=`${c}.extent_${u}`,_=`${p?"log"===b?"panLog":"pow"===b?"panPow":"panLinear":"panLinear"}(${v}, ${`${y}${f}.${u} / `+(p?`${g}`:`span(${v})`)}`+(p&&"pow"===b?`, ${m.get("exponent")||1}`:"")+")";h.on.push({events:{signal:f},update:p?_:`clampRange(${_}, 0, ${g})`})}t.a=d},1462:function(e,t,i){"use strict";var n=i(306),o=i(1),a=i(19),r=i(501),s=i(190);const l="_zoom_anchor",d="_zoom_delta",c={has:e=>"interval"===e.type&&e.zoom,signals:(e,t,i)=>{const c=t.name,u=s.a.has(t),p=c+d,{x:h,y:g}=t.project.has,m=Object(o.W)(e.scaleName(a.x)),b=Object(o.W)(e.scaleName(a.z));let y=Object(n.a)(t.zoom,"scope");return u||(y=y.map(e=>(e.markname=c+r.a,e))),i.push({name:c+l,on:[{events:y,update:u?"{"+[m?`x: invert(${m}, x(unit))`:"",b?`y: invert(${b}, y(unit))`:""].filter(e=>!!e).join(", ")+"}":"{x: x(unit), y: y(unit)}"}]},{name:p,on:[{events:y,force:!0,update:"pow(1.001, event.deltaY * pow(16, event.deltaMode))"}]}),void 0!==h&&f(e,t,h,"width",i),void 0!==g&&f(e,t,g,"height",i),i}};function f(e,t,i,n,o){const a=t.name,r=i.channel,c=s.a.has(t),f=o.filter(e=>e.name===i.signals[c?"data":"visual"])[0],u=e.getSizeSignalRef(n).signal,p=e.getScaleComponent(r),h=p.get("type"),g=c?Object(s.b)(e,r):f.name,m=a+d,b=`${c?"log"===h?"zoomLog":"pow"===h?"zoomPow":"zoomLinear":"zoomLinear"}(${g}, ${`${a}${l}.${r}`}, ${m}`+(c&&"pow"===h?`, ${p.get("exponent")||1}`:"")+")";f.on.push({events:{signal:m},update:c?b:`clampRange(${b}, 0, ${u})`})}t.a=c},1463:function(e,t,i){"use strict";i.d(t,"a",function(){return o});var n=i(94);class o extends n.a{}},1464:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(57),o=i(5),a=i(83),r=i(61);function s(e){return Object(r.e)(e)||Object(r.c)(e)||Object(r.f)(e)?function(e){return e.children.reduce((e,t)=>e.concat(t.assembleProjections()),l(e))}(e):l(e)}function l(e){const t=e.component.projection;if(!t||t.merged)return[];const i=t.combine(),{name:r}=i,s=n.b(i,["name"]),l={signal:`[${t.size.map(e=>e.signal).join(", ")}]`},d=t.data.reduce((t,i)=>{const n=Object(a.e)(i)?i.signal:`data('${e.lookupDataSource(i)}')`;return Object(o.c)(t,n)||t.push(n),t},[]);if(d.length<=0)throw new Error("Projection's fit didn't find any data sources");return[Object.assign({name:r,size:l,fit:{signal:d.length>1?`[${d.join(", ")}]`:d[0]}},s)]}},1465:function(e,t,i){"use strict";i.d(t,"a",function(){return c});var n=i(19),o=i(99),a=i(1466),r=i(102),s=i(5),l=i(61),d=i(986);function c(e){Object(l.g)(e)?e.component.projection=function(e){const{specifiedProjection:t,config:i,hasProjection:a}=e;if(a){const a=[];return[[n.k,n.i],[n.l,n.j]].forEach(t=>{(e.channelHasField(t[0])||e.channelHasField(t[1]))&&a.push({signal:e.getName(`geojson_${a.length}`)})}),e.channelHasField(n.s)&&e.fieldDef(n.s).type===r.a&&a.push({signal:e.getName(`geojson_${a.length}`)}),0===a.length&&a.push(e.requestDataName(o.a)),new d.a(e.projectionName(!0),Object.assign({},i.projection||{},t||{}),[e.getSizeSignalRef("width"),e.getSizeSignalRef("height")],a)}return}(e):e.component.projection=function(e){if(0===e.children.length)return;let t;const i=Object(s.h)(e.children,e=>{c(e);const i=e.component.projection;if(i){if(t){const e=function(e,t){const i=Object(s.h)(a.a,i=>!e.explicit.hasOwnProperty(i)&&!t.explicit.hasOwnProperty(i)||!(!e.explicit.hasOwnProperty(i)||!t.explicit.hasOwnProperty(i)||Object(s.C)(e.get(i))!==Object(s.C)(t.get(i))));if(Object(s.C)(e.size)===Object(s.C)(t.size)){if(i)return e;if(Object(s.C)(e.explicit)===Object(s.C)({}))return t;if(Object(s.C)(t.explicit)===Object(s.C)({}))return e}return null}(t,i);return e&&(t=e),!!e}return t=i,!0}return!0});if(t&&i){const i=e.projectionName(!0),n=new d.a(i,t.specifiedProjection,t.size,Object(s.f)(t.data));return e.children.forEach(e=>{e.component.projection&&(n.data.push(...e.component.projection.data),e.renameProjection(e.component.projection.get("name"),i),e.component.projection.merged=!0)}),n}return}(e)}},1466:function(e,t,i){"use strict";i.d(t,"a",function(){return n});const n=["type","clipAngle","clipExtent","center","rotate","precision","coefficient","distance","fraction","lobes","parallel","radius","ratio","spacing","tilt"]},1467:function(e,t,i){"use strict";i.d(t,"a",function(){return c});var n=i(57),o=i(5),a=i(83),r=i(61),s=i(76),l=i(145),d=i(243);function c(e){return Object(r.e)(e)||Object(r.c)(e)||Object(r.f)(e)?e.children.reduce((e,t)=>e.concat(c(t)),f(e)):f(e)}function f(e){return Object(o.s)(e.component.scales).reduce((t,i)=>{const o=e.component.scales[i];if(o.merged)return t;const r=o.combine();let{domainRaw:c}=r;const{name:f,type:u,domainRaw:p,range:h}=r,g=n.b(r,["name","type","domainRaw","range"]),m=function(e,t,i){if(("x"===i||"y"===i)&&Object(a.f)(e))return{step:{signal:t+"_step"}};return e}(r.range,f,i);c&&Object(s.g)(c)&&(c=Object(l.e)(e,c));const b=Object(d.a)(e,i);return t.push(Object.assign({name:f,type:u},b?{domain:b}:{},c?{domainRaw:c}:{},{range:m},g)),t},[])}},1468:function(e,t,i){"use strict";i.d(t,"a",function(){return m});var n=i(19),o=i(15),a=i(37),r=i(41),s=i(102),l=i(5),d=i(61),c=i(382),f=i(94),u=i(988),p=i(243),h=i(989),g=i(1470);function m(e){b(e),Object(p.c)(e);for(const t of r.a)Object(h.a)(e,t);Object(h.b)(e)}function b(e){Object(d.g)(e)?e.component.scales=function(e){const{encoding:t,config:i,mark:r}=e;return n.r.reduce((l,d)=>{let c,f;const p=t[d];if(Object(o.l)(p)&&r===a.e&&d===n.s&&p.type===s.a)return l;if(Object(o.l)(p)?(c=p,f=p.scale):Object(o.g)(p)&&(c=p.condition,f=p.condition.scale),c&&null!==f&&!1!==f){f=f||{};const t=Object(g.a)(f,d,c,r,i.scale);l[d]=new u.a(e.scaleName(d+"",!0),{value:t,explicit:f.type===t})}return l},{})}(e):e.component.scales=function(e){const t=e.component.scales={},i={},n=e.component.resolve;for(const t of e.children)b(t),Object(l.s)(t.component.scales).forEach(o=>{if(n.scale[o]=n.scale[o]||Object(c.a)(o,e),"shared"===n.scale[o]){const e=i[o],a=t.component.scales[o].getWithExplicit("type");e?Object(r.l)(e.value,a.value)?i[o]=Object(f.e)(e,a,"type","scale",y):(n.scale[o]="independent",delete i[o]):i[o]=a}});return Object(l.s)(i).forEach(n=>{const o=e.scaleName(n,!0),a=i[n];t[n]=new u.a(o,a);for(const t of e.children){const e=t.component.scales[n];e&&(t.renameScale(e.get("name"),o),e.merged=!0)}}),t}(e)}const y=Object(f.f)((e,t)=>Object(r.m)(e)-Object(r.m)(t))},1469:function(e,t,i){"use strict";i.d(t,"a",function(){return g});var n=i(1),o=i(62),a=i(19),r=i(15),s=i(18),l=i(41),d=i(5),c=i(83),f=i(270),u=i(94);const p=["range","rangeStep","scheme"];function h(e){return"x"===e?"width":"y"===e?"height":void 0}function g(e){const t=e.component.scales;a.r.forEach(i=>{const o=t[i];if(!o)return;const r=e.getScaleComponent(i),g=e.specifiedScales[i],_=e.fieldDef(i),w=h(i);let x=w?!!e.component.layoutSize.get(w):void 0;const O=r.get("type"),j=d.c(["point","band"],O)||!!g.rangeStep;w&&e.fit&&!x&&j&&(s.e(s.b.CANNOT_FIX_RANGE_STEP_WITH_FIT),x=!0);const k=function(e){const t=[];for(const i of a.p){const n=m(e,i);void 0!==n&&t.push(n)}return t}(e),T=function(e,t,i,o,r,h,g,m,_,w,x){const O=_||null===r.rangeStep;for(const t of p)if(void 0!==r[t]){const n=Object(l.o)(i,t),o=Object(l.c)(e,t);if(n)if(o)s.e(o);else switch(t){case"range":return Object(u.c)(r[t]);case"scheme":return Object(u.c)(b(r[t]));case"rangeStep":const i=r[t];if(null!==i){if(!_)return Object(u.c)({step:i});s.e(s.b.rangeStepDropped(e))}}else s.e(s.b.scalePropertyNotWorkWithScaleType(i,t,e))}return Object(u.d)(function(e,t,i,o,r,u,p,h,g,m,b){switch(e){case a.x:case a.z:if(d.c(["point","band"],i)&&!m)if(e===a.x&&"text"===p){if(r.scale.textXRangeStep)return{step:r.scale.textXRangeStep}}else if(r.scale.rangeStep)return{step:r.scale.rangeStep};return e===a.z&&Object(l.f)(i)?[f.a.fromName(t,h),0]:[0,f.a.fromName(t,h)];case a.t:const _=function(e,t,i){if(t)return 0;switch(e){case"bar":case"tick":return i.scale.minBandSize;case"line":case"trail":case"rule":return i.scale.minStrokeWidth;case"text":return i.scale.minFontSize;case"point":case"square":case"circle":return i.scale.minSize}throw new Error(s.b.incompatibleChannel("size",e))}(p,u,r),w=function(e,t,i){const o=i.scale;switch(e){case"bar":case"tick":if(void 0!==i.scale.maxBandSize)return i.scale.maxBandSize;const a=v(t,i.scale);return Object(n.D)(a)?a-1:new f.a(()=>`${a.signal} - 1`);case"line":case"trail":case"rule":return i.scale.maxStrokeWidth;case"text":return i.scale.maxFontSize;case"point":case"square":case"circle":if(i.scale.maxSize)return i.scale.maxSize;const r=v(t,o);return Object(n.D)(r)?Math.pow(y*r,2):new f.a(()=>`pow(${y} * ${r.signal}, 2)`)}throw new Error(s.b.incompatibleChannel("size",e))}(p,g,r);return Object(l.i)(i)?function(e,t,i){const n=()=>{const n=Object(c.e)(t)?t.signal:t,o=`(${n} - ${e}) / (${i} - 1)`;return`sequence(${e}, ${t} + ${o}, ${o})`};return Object(c.e)(t)?new f.a(n):{signal:n()}}(_,w,function(e,t,i,o){switch(e){case"quantile":return t.scale.quantileCount;case"quantize":return t.scale.quantizeCount;case"threshold":return void 0!==i&&Object(n.z)(i)?i.length+1:(s.e(s.b.domainRequiredForThresholdScale(o)),3)}}(i,r,b,e)):[_,w];case a.w:return[r.scale.minStrokeWidth,r.scale.maxStrokeWidth];case a.s:return"symbol";case a.b:case a.f:case a.u:return"ordinal"===i?"nominal"===o?"category":"ordinal":"rect"===p||"geoshape"===p?"heatmap":"ramp";case a.o:case a.g:case a.v:return[r.scale.minOpacity,r.scale.maxOpacity]}throw new Error(`Scale range undefined for channel ${e}`)}(e,t,i,o,h,g,m,w,x,O,r.domain))}(i,e.getSignalName.bind(e),O,_.type,g,e.config,o.get("zero"),e.mark,x,e.getName(w),k);o.setWithExplicit("range",T)})}function m(e,t){const i=e.getScaleComponent(t);if(!i)return;const a=i.get("type"),s=e.fieldDef(t);if(Object(l.g)(a)){const e=i&&i.get("range");if(e&&Object(c.f)(e)&&Object(n.D)(e.step))return e.step}else if(s&&s.bin&&Object(o.e)(s.bin)){const i=e.getName(Object(r.D)(s,{suffix:"bins"})),n=h(t),o=e.getName(n);return new f.a(()=>{const t=e.getSignalName(i),n=`(${t}.stop - ${t}.start) / ${t}.step`;return`${e.getSignalName(o)} / (${n})`})}}function b(e){return Object(l.j)(e)?Object.assign({scheme:e.name},d.w(e,["name"])):{scheme:e}}const y=.95;function v(e,t){if(e.length>0){let t=1/0;for(const i of e)Object(c.e)(i)?t=void 0:void 0!==t&&i<t&&(t=i);return void 0!==t?t:new f.a(()=>{return`min(${e.map(e=>Object(c.e)(e)?e.signal:e).join(", ")})`})}return t.rangeStep?t.rangeStep:21}},1470:function(e,t,i){"use strict";i.d(t,"a",function(){return l});var n=i(62),o=i(19),a=i(18),r=i(41),s=i(5);function l(e,t,i,l,d){const c=function(e,t,i,r,l){switch(t.type){case"nominal":case"ordinal":if(Object(o.E)(e)||"discrete"===Object(o.K)(e))return"shape"===e&&"ordinal"===t.type&&a.e(a.b.discreteChannelCannotEncode(e,"ordinal")),"ordinal";if(s.c(["x","y"],e)){if(s.c(["rect","bar","rule"],i))return"band";if("bar"===i)return"band"}return"point";case"temporal":return Object(o.E)(e)?"time":"discrete"===Object(o.K)(e)?(a.e(a.b.discreteChannelCannotEncode(e,"temporal")),"ordinal"):"time";case"quantitative":return Object(o.E)(e)?Object(n.e)(t.bin)?"bin-ordinal":"linear":"discrete"===Object(o.K)(e)?(a.e(a.b.discreteChannelCannotEncode(e,"quantitative")),"ordinal"):"linear";case"geojson":return}throw new Error(a.b.invalidFieldType(t.type))}(t,i,l),{type:f}=e;return Object(o.H)(t)?void 0!==f?Object(r.d)(t,f)?Object(r.n)(f,i.type)?f:(a.e(a.b.scaleTypeNotWorkWithFieldDef(f,c)),c):(a.e(a.b.scaleTypeNotWorkWithChannel(t,f,c)),c):c:null}},1471:function(e,t,i){"use strict";i.d(t,"a",function(){return o});var n=i(51);const o={vgMark:"area",encodeEntry:e=>Object.assign({},n.b(e,{size:"ignore",orient:"include"}),n.h("x",e,"zeroOrMin"),n.h("y",e,"zeroOrMin"),n.i(e,"zeroOrMin","horizontal"===e.markDef.orient?"x2":"y2"),n.f(e))}},1472:function(e,t,i){"use strict";i.d(t,"a",function(){return p});var n=i(1),o=i(62),a=i(15),r=i(18),s=i(41),l=i(5),d=i(83),c=i(73),f=i(51),u=i(79);const p={vgMark:"rect",encodeEntry:e=>Object.assign({},f.b(e,{size:"ignore",orient:"ignore"}),h(e,"x"),h(e,"y"))};function h(e,t){const{config:i,encoding:p,markDef:h}=e,g=h.orient,m=p.size,b="x"===t?"horizontal"===g:"vertical"===g,y="x"===t?"x2":"y2",v=p[t],_=p[y],w=e.scaleName(t),x=e.getScaleComponent(t),O=Object(l.m)(h.binSpacing,i.bar.binSpacing),j=x?x.get("reverse"):void 0;if(Object(a.l)(v)&&Object(o.d)(v.bin))return f.c({fieldDef:v,fieldDef2:_,channel:t,mark:"bar",scaleName:w,spacing:O,reverse:j});if(b||_)return Object.assign({},f.h(t,e,"zeroOrMin"),f.i(e,"zeroOrMin",y));if(Object(a.l)(v)){const i=x.get("type");if(Object(o.e)(v.bin)&&!m&&!Object(s.g)(i))return f.c({fieldDef:v,channel:t,scaleName:w,mark:"bar",spacing:O,reverse:j});if(i===s.b.BAND)return f.a(v,t,e)}return f.d(t,e,Object.assign({},u.f("x"===t?e.width:e.height)),function(e,t,i,o){if(void 0!==e.size)return{value:e.size};const a=Object(c.d)("size",e,o,{skipGeneralMarkConfig:!0});if(void 0!==a)return{value:a};if(i){const e=i.get("type");if("point"!==e&&"band"!==e)return{value:o.bar.continuousBandSize};if(void 0!==o.bar.discreteBandSize)return{value:o.bar.discreteBandSize};if(e!==s.b.POINT)return u.a(t);{const e=i.get("range");if(Object(d.f)(e)&&Object(n.D)(e.step))return{value:e.step-1};r.e(r.b.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL)}}return{value:Object(l.m)(o.bar.discreteBandSize,o.scale.rangeStep?o.scale.rangeStep-1:void 0,20)}}(h,w,x,i))}},1473:function(e,t,i){"use strict";i.d(t,"a",function(){return r});var n=i(51),o=i(15),a=i(102);const r={vgMark:"shape",encodeEntry:e=>Object.assign({},n.b(e,{size:"ignore",orient:"ignore"})),postEncodingTransform:e=>{const{encoding:t}=e,i=t.shape;return[Object.assign({type:"geoshape",projection:e.projectionName()},i&&Object(o.l)(i)&&i.type===a.a?{field:Object(o.D)(i,{expr:"datum"})}:{})]}}},1474:function(e,t,i){"use strict";i.d(t,"a",function(){return d});var n=i(62),o=i(15),a=i(18),r=i(37),s=i(41),l=i(51);const d={vgMark:"rect",encodeEntry:e=>Object.assign({},l.b(e,{size:"ignore",orient:"ignore"}),c(e,"x"),c(e,"y"))};function c(e,t){const i="x"===t?"x2":"y2",d=e.encoding[t],c=e.encoding[i],f=e.getScaleComponent(t),u=f?f.get("type"):void 0,p=e.scaleName(t);if(Object(o.l)(d)&&(Object(n.e)(d.bin)||Object(n.d)(d.bin)))return l.c({fieldDef:d,fieldDef2:c,channel:t,mark:"rect",scaleName:p,spacing:0,reverse:f.get("reverse")});if(Object(o.l)(d)&&f&&Object(s.g)(u)){if(u===s.b.BAND)return l.a(d,t,e);throw new Error(a.b.scaleTypeNotWorkWithMark(r.i,u))}return Object.assign({},l.h(t,e,"zeroOrMax"),l.i(e,"zeroOrMin",i))}},1475:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(51),o=i(79);const a={vgMark:"rule",encodeEntry:e=>{const{markDef:t,width:i,height:a}=e,r=t.orient;return e.encoding.x||e.encoding.y||e.encoding.latitude||e.encoding.longitude?Object.assign({},n.b(e,{size:"ignore",orient:"ignore"}),n.h("x",e,"horizontal"===r?"zeroOrMin":o.f(i)),n.h("y",e,"vertical"===r?"zeroOrMin":o.f(a)),"vertical"!==r?n.i(e,"zeroOrMax","x2"):{},"horizontal"!==r?n.i(e,"zeroOrMax","y2"):{},n.g("size",e,{vgChannel:"strokeWidth",defaultValue:t.size})):{}}}},1476:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(5),o=i(73),a=i(51),r=i(79);const s={vgMark:"text",encodeEntry:e=>{const{config:t,encoding:i,width:s,height:l,markDef:d}=e,c=Object(n.m)(d.fontSize,d.size,Object(o.e)("fontSize",d,t.style),Object(o.e)("size",d,t.style),t[d.type].fontSize,t[d.type].size);return Object.assign({},a.b(e,{size:"ignore",orient:"ignore"}),a.h("x",e,r.f(s)),a.h("y",e,r.f(l)),a.j(e),a.g("size",e,{defaultValue:c,vgChannel:"fontSize"}),a.l("align",function(e,t,i){if(void 0===(e.align||Object(o.d)("align",e,i)))return"center";return}(e.markDef,0,t)))}}},1477:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(5),o=i(83),a=i(51),r=i(79);const s={vgMark:"rect",encodeEntry:e=>{const{config:t,markDef:i,width:o,height:s}=e,d=i.orient,c="horizontal"===d?"width":"height",f="horizontal"===d?"height":"width";return Object.assign({},a.b(e,{size:"ignore",orient:"ignore"}),a.h("x",e,r.f(o),"xc"),a.h("y",e,r.f(s),"yc"),a.g("size",e,{defaultValue:l(e),vgChannel:c}),{[f]:{value:Object(n.m)(i.thickness,t.tick.thickness)}})}};function l(e){const{config:t,markDef:i}=e,n=i.orient,a=e.getScaleComponent("horizontal"===n?"x":"y");if(void 0!==i.size)return i.size;if(void 0!==t.tick.bandSize)return t.tick.bandSize;{const e=a?a.get("range"):void 0,i=e&&Object(o.f)(e)?e.step:t.scale.rangeStep;if("number"!=typeof i)throw new Error("Function does not handle non-numeric rangeStep");return 3*i/4}}},1478:function(e,t,i){"use strict";i.d(t,"a",function(){return o});var n=i(94);class o extends n.a{constructor(e={},t={},i=!1){super(e,t),this.explicit=e,this.implicit=t,this.parseNothing=i}clone(){const e=super.clone();return e.parseNothing=this.parseNothing,e}}},1479:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(15),o=i(125),a=i(782),r=i(333);function s(e,t){const{row:i,column:s}=t;if(i&&s){let t=null;for(const l of[i,s])if(Object(o.d)(l.sort)){const{field:i,op:s=o.a}=l.sort;e=t=new r.a(e,{joinaggregate:[{op:s,field:i,as:Object(a.b)(l,l.sort,{forAs:!0})}],groupby:[Object(n.D)(l)]})}return t}return null}},1480:function(e,t,i){"use strict";i.d(t,"a",function(){return d});var n=i(19),o=i(15),a=i(5),r=i(379),s=i(382),l=i(197);function d(e){for(const t of n.e)c(e,t);u(e,"x"),u(e,"y")}function c(e,t){if(e.channelHasField(t)){const i=e.facet[t],n=Object(l.c)("title",null,e.config,t);let r=Object(o.z)(i,e.config,{allowDisabling:!0,includeDefault:void 0===n||!!n});e.child.component.layoutHeaders[t].title&&(r+=" / "+e.child.component.layoutHeaders[t].title,e.child.component.layoutHeaders[t].title=null);const s=Object(l.c)("labelOrient",i,e.config,t),d=Object(a.c)(["bottom","right"],s)?"footer":"header";e.component.layoutHeaders[t]={title:r,facetFieldDef:i,[d]:"facet"===t?[]:[f(e,t,!0)]}}}function f(e,t,i){const n="row"===t?"height":"width";return{labels:i,sizeSignal:e.child.component.layoutSize.get(n)?e.child.getSizeSignalRef(n):void 0,axes:[]}}function u(e,t){const{child:i}=e;if(i.component.axes[t]){const{layoutHeaders:o,resolve:a}=e.component;if(a.axis[t]=Object(s.b)(a,t),"shared"===a.axis[t]){const a="x"===t?"column":"row",s=o[a];for(const o of i.component.axes[t]){const t="top"===(n=o.get("orient"))||"left"===n?"header":"footer";s[t]=s[t]||[f(e,a,!1)];const i=Object(r.b)(o,"main",e.config,{header:!0});s[t][0].axes.push(i),o.mainExtracted=!0}}}var n}},1481:function(e,t,i){"use strict";i.d(t,"a",function(){return g});var n=i(18),o=i(158),a=i(5),r=i(379),s=i(787),l=i(307),d=i(380),c=i(308),f=i(771),u=i(61),p=i(145),h=i(788);class g extends u.a{constructor(e,t,i,a,r,s,l){super(e,"layer",t,i,s,r,e.resolve,e.view);const d=Object.assign({},a,e.width?{width:e.width}:{},e.height?{height:e.height}:{});this.initSize(d),this.children=e.layer.map((e,t)=>{if(Object(o.d)(e))return new g(e,this,this.getName("layer_"+t),d,r,s,l);if(Object(o.f)(e))return new h.a(e,this,this.getName("layer_"+t),d,r,s,l);throw new Error(n.b.INVALID_SPEC)})}parseData(){this.component.data=Object(l.b)(this);for(const e of this.children)e.parseData()}parseLayoutSize(){Object(c.c)(this)}parseSelections(){this.component.selection={};for(const e of this.children)e.parseSelections(),Object(a.s)(e.component.selection).forEach(t=>{this.component.selection[t]=e.component.selection[t]})}parseMarkGroup(){for(const e of this.children)e.parseMarkGroup()}parseAxesAndHeaders(){Object(s.a)(this)}assembleSelectionTopLevelSignals(e){return this.children.reduce((e,t)=>t.assembleSelectionTopLevelSignals(e),e)}assembleSignals(){return this.children.reduce((e,t)=>e.concat(t.assembleSignals()),Object(r.c)(this))}assembleLayoutSignals(){return this.children.reduce((e,t)=>e.concat(t.assembleLayoutSignals()),Object(d.a)(this))}assembleSelectionData(e){return this.children.reduce((e,t)=>t.assembleSelectionData(e),e)}assembleTitle(){let e=super.assembleTitle();if(e)return e;for(const t of this.children)if(e=t.assembleTitle())return e}assembleLayout(){return null}assembleMarks(){return Object(p.c)(this,Object(a.l)(this.children.map(e=>e.assembleMarks())))}assembleLegends(){return this.children.reduce((e,t)=>e.concat(t.assembleLegends()),Object(f.a)(this))}}},1482:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(5),o=i(94);class a extends o.a{constructor(e={},t={},i=!1){super(),this.explicit=e,this.implicit=t,this.mainExtracted=i}clone(){return new a(Object(n.f)(this.explicit),Object(n.f)(this.implicit),this.mainExtracted)}hasAxisPart(e){return"axis"===e||("grid"===e||"title"===e?!!this.get(e):!(!1===(t=this.get(e))||null===t));var t}}},1483:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(15),o=i(41),a=i(5),r=i(73);function s(e,t,i,s){const l=e.fieldDef(t)||("x"===t?e.fieldDef("x2"):"y"===t?e.fieldDef("y2"):void 0),d=e.axis(t),c=e.config;let f={};if(Object(n.r)(l)){const i=e.getScaleComponent(t).get("type")===o.b.UTC,n=Object(r.l)("datum.value",l.timeUnit,d.format,c.axis.shortTimeLabels,null,i);n&&(f.text={signal:n})}return f=Object.assign({},f,i),0===Object(a.s)(f).length?void 0:f}},1484:function(e,t,i){"use strict";i.d(t,"a",function(){return f});var n=i(62),o=i(113),a=i(15),r=i(18),s=i(37),l=i(102),d=i(5),c=i(73);function f(e,t,i){const f=Object(s.u)(e)?Object.assign({},e):{type:e},u=f.orient||Object(c.d)("orient",f,i);return f.orient=function(e,t,i){switch(e){case s.g:case s.c:case s.k:case s.l:case s.i:return}const{x:o,y:r,x2:d,y2:c}=t;switch(e){case s.b:if(Object(a.l)(o)&&Object(n.d)(o.bin))return"vertical";if(Object(a.l)(r)&&Object(n.d)(r.bin))return"horizontal";if(c||d){if(i)return i;if(!d&&Object(a.l)(o)&&o.type===l.d&&!Object(n.e)(o.bin))return"horizontal";if(!c&&Object(a.l)(r)&&r.type===l.d&&!Object(n.e)(r.bin))return"vertical"}case s.j:if(d&&c)return;case s.a:if(c)return Object(a.l)(r)&&Object(n.d)(r.bin)?"horizontal":"vertical";if(d)return Object(a.l)(o)&&Object(n.d)(o.bin)?"vertical":"horizontal";if(e===s.j){if(t.x&&!t.y)return"vertical";if(t.y&&!t.x)return"horizontal"}case s.f:case s.m:const f=Object(a.l)(t.x)&&Object(a.k)(t.x),u=Object(a.l)(t.y)&&Object(a.k)(t.y);if(f&&!u)return"tick"!==e?"horizontal":"vertical";if(!f&&u)return"tick"!==e?"vertical":"horizontal";if(f&&u){const n=t.x,o=t.y,a=n.type===l.e,r=o.type===l.e;return a&&!r?"tick"!==e?"vertical":"horizontal":!a&&r?"tick"!==e?"horizontal":"vertical":!n.aggregate&&o.aggregate?"tick"!==e?"vertical":"horizontal":n.aggregate&&!o.aggregate?"tick"!==e?"horizontal":"vertical":i||"vertical"}return i||void 0}return"vertical"}(f.type,t,u),void 0!==u&&u!==f.orient&&r.e(r.b.orientOverridden(f.orient,u)),void 0===Object(d.m)(f.opacity,Object(c.d)("opacity",f,i))&&(f.opacity=function(e,t){if(Object(d.c)([s.g,s.m,s.c,s.k],e)&&!Object(o.e)(t))return.7;return}(f.type,t)),void 0===f.filled&&(f.filled=function(e,t){const i=Object(c.d)("filled",e,t),n=e.type;return Object(d.m)(i,n!==s.g&&n!==s.f&&n!==s.j)}(f,i)),void 0===(f.cursor||Object(c.d)("cursor",f,i))&&(f.cursor=function(e,t,i){if(t.href||e.href||Object(c.d)("href",e,i))return"pointer";return e.cursor}(f,t,i)),f}},1485:function(e,t,i){"use strict";i.d(t,"a",function(){return l});var n=i(57),o=i(306),a=i(1),r=i(5),s=i(527);function l(e,t){const i={},l=e.config.selection;t&&(t=Object(r.f)(t));for(let d in t){if(!t.hasOwnProperty(d))continue;const c=t[d],f=l[c.type],{fields:u,encodings:p}=f,h=n.b(f,["fields","encodings"]);for(const e in h)"encodings"===e&&c.fields||"fields"===e&&c.encodings||("mark"===e&&(c[e]=Object.assign({},h[e],c[e])),void 0!==c[e]&&!0!==c[e]||(c[e]=h[e]||c[e]));const g=i[d=Object(r.H)(d)]=Object.assign({},c,{name:d,events:Object(a.G)(c.on)?Object(o.a)(c.on,"scope"):c.on});Object(s.a)(g,t=>{t.parse&&t.parse(e,c,g)})}return i}},1486:function(e,t,i){"use strict";i.d(t,"a",function(){return l});var n=i(1),o=i(18),a=i(768),r=i(378),s=i(308);class l extends a.a{constructor(e,t,i,n,a){super(e,"repeat",t,i,a,n,e.resolve),e.resolve&&e.resolve.axis&&("shared"===e.resolve.axis.x||"shared"===e.resolve.axis.y)&&o.e(o.b.REPEAT_CANNOT_SHARE_AXIS),this.repeat=e.repeat,this.children=this._initChildren(e,this.repeat,n,a)}_initChildren(e,t,i,o){const a=[],s=!Object(n.z)(t)&&t.row||[i?i.row:null],l=!Object(n.z)(t)&&t.column||[i?i.column:null],d=Object(n.z)(t)&&t||[i?i.repeat:null];for(const t of d)for(const i of s)for(const n of l){const s=(t?`__repeat_repeat_${t}`:"")+(i?`__repeat_row_${i}`:"")+(n?`__repeat_column_${n}`:""),l={repeat:t,row:i,column:n};a.push(Object(r.a)(e.spec,this,this.getName("child"+s),void 0,l,o,!1))}return a}parseLayoutSize(){Object(s.d)(this)}assembleDefaultLayout(){const{repeat:e}=this,t=Object(n.z)(e)?void 0:e.column?e.column.length:1;return Object.assign({},t?{columns:t}:{},{bounds:"full",align:"all"})}}},15:function(e,t,i){"use strict";i.d(t,"j",function(){return h}),i.d(t,"n",function(){return g}),i.d(t,"A",function(){return m}),i.d(t,"p",function(){return b}),i.d(t,"i",function(){return y}),i.d(t,"g",function(){return v}),i.d(t,"h",function(){return _}),i.d(t,"l",function(){return w}),i.d(t,"s",function(){return x}),i.d(t,"q",function(){return O}),i.d(t,"t",function(){return j}),i.d(t,"o",function(){return k}),i.d(t,"D",function(){return T}),i.d(t,"k",function(){return D}),i.d(t,"y",function(){return C}),i.d(t,"x",function(){return z}),i.d(t,"z",function(){return F}),i.d(t,"e",function(){return A}),i.d(t,"b",function(){return P}),i.d(t,"c",function(){return N}),i.d(t,"d",function(){return I}),i.d(t,"f",function(){return q}),i.d(t,"u",function(){return E}),i.d(t,"w",function(){return L}),i.d(t,"v",function(){return W}),i.d(t,"m",function(){return U}),i.d(t,"r",function(){return V}),i.d(t,"C",function(){return R}),i.d(t,"B",function(){return B}),i.d(t,"a",function(){return H});var n=i(57),o=i(1),a=i(199),r=i(62),s=i(19),l=i(284),d=i(18),c=i(187),f=i(205),u=i(102),p=i(5);function h(e){return e.selection}function g(e){return e&&!Object(o.G)(e)&&"repeat"in e}function m(e){const{field:t,timeUnit:i,bin:n,aggregate:o}=e;return Object.assign({},i?{timeUnit:i}:{},n?{bin:n}:{},o?{aggregate:o}:{},{field:t})}function b(e){return x(e)&&!!e.sort}function y(e){return!!e&&!!e.condition}function v(e){return!!e&&!!e.condition&&!Object(o.z)(e.condition)&&w(e.condition)}function _(e){return!!e&&!!e.condition&&(Object(o.z)(e.condition)||j(e.condition))}function w(e){return!(!e||!e.field&&"count"!==e.aggregate)}function x(e){return!!e&&(!!e.field&&!!e.type||"count"===e.aggregate)}function O(e){return w(e)&&Object(o.G)(e.field)}function j(e){return e&&"value"in e&&void 0!==e.value}function k(e){return!(!e||!e.scale&&!e.sort)}function T(e,t={}){let i=e.field;const n=t.prefix;let o=t.suffix;if(function(e){return"count"===e.aggregate}(e))i=Object(p.p)("count");else{let n;t.nofn||(!function(e){return!!e.op}(e)?Object(r.e)(e.bin)?(n=Object(r.b)(e.bin),o=(t.binSuffix||"")+(t.suffix||"")):e.aggregate?n=String(e.aggregate):e.timeUnit&&(n=String(e.timeUnit)):n=e.op),n&&(i=i?`${n}_${i}`:n)}return o&&(i=`${i}_${o}`),n&&(i=`${n}_${i}`),t.forAs?i:t.expr?Object(p.k)(i,t.expr):Object(p.z)(i)}function D(e){return!function(e){switch(e.type){case"nominal":case"ordinal":case"geojson":return!0;case"quantitative":return!!e.bin;case"temporal":return!1}throw new Error(d.b.invalidFieldType(e.type))}(e)}const $=(e,t)=>{switch(t.fieldTitle){case"plain":return e.field;case"functional":return function(e,t){const i=e.aggregate||e.timeUnit||Object(r.e)(e.bin)&&"bin";return i?i.toUpperCase()+"("+e.field+")":e.field}(e);default:return function(e,t){const{field:i,bin:n,timeUnit:o,aggregate:a}=e;if("count"===a)return t.countTitle;if(Object(r.e)(n))return`${i} (binned)`;if(o)return`${i} (${Object(f.e)(o).join("-")})`;return a?`${Object(p.D)(a)} of ${i}`:i}(e,t)}};let S=$;function C(e){S=e}function z(){C($)}function F(e,t,{allowDisabling:i,includeDefault:n=!0}){const o=(A(e)||{}).title,a=n?P(e,t):void 0;return i?Object(p.m)(o,e.title,a):o||e.title||a}function A(e){return(t=e)&&(t.axis||t.stack||t.impute)&&e.axis?e.axis:function(e){return!!e&&!!e.legend}(e)&&e.legend?e.legend:Object(c.a)(e)&&e.header?e.header:void 0;var t}function P(e,t){return S(e,t)}function N(e){if((t=e)&&t.format&&e.format)return e.format;return(A(e)||{}).format;var t}function I(e){return w(e)?e:v(e)?e.condition:void 0}function q(e){return w(e)?e:v(e)?e.condition:void 0}function E(e,t){if(Object(o.G)(e)||Object(o.D)(e)||Object(o.A)(e)){const i=Object(o.G)(e)?"string":Object(o.D)(e)?"number":"boolean";return d.e(d.b.primitiveChannelDef(t,i,e)),{value:e}}return w(e)?L(e,t):v(e)?Object.assign({},e,{condition:L(e.condition,t)}):e}function L(e,t){if(e.aggregate&&!Object(a.c)(e.aggregate)){const{aggregate:t}=e,i=n.b(e,["aggregate"]);d.e(d.b.invalidAggregate(e.aggregate)),e=i}if(e.timeUnit&&(e=Object.assign({},e,{timeUnit:Object(f.h)(e.timeUnit)})),Object(r.e)(e.bin)&&(e=Object.assign({},e,{bin:W(e.bin,t)})),Object(r.d)(e.bin)&&!Object(p.c)(s.p,t)&&d.e(`Channel ${t} should not be used with "binned" bin`),x(e)){const t=Object(u.g)(e.type);e.type!==t&&(e=Object.assign({},e,{type:t})),"quantitative"!==e.type&&Object(a.d)(e.aggregate)&&(d.e(d.b.invalidFieldTypeForCountAggregate(e.type,e.aggregate)),e=Object.assign({},e,{type:"quantitative"}))}else if(!Object(s.I)(t)){const i=function(e,t){if(e.timeUnit)return"temporal";if(Object(r.e)(e.bin))return"quantitative";switch(Object(s.K)(t)){case"continuous":return"quantitative";case"discrete":case"flexible":return"nominal";default:return"quantitative"}}(e,t);d.e(d.b.missingFieldType(t,i)),e=Object.assign({},e,{type:i})}if(x(e)){const{compatible:i,warning:n}=function(e,t){const i=e.type;if("geojson"===i&&"shape"!==t)return{compatible:!1,warning:`Channel ${t} should not be used with a geojson data.`};switch(t){case"row":case"column":case"facet":return D(e)?{compatible:!1,warning:d.b.facetChannelShouldBeDiscrete(t)}:M;case"x":case"y":case"color":case"fill":case"stroke":case"text":case"detail":case"key":case"tooltip":case"href":return M;case"longitude":case"longitude2":case"latitude":case"latitude2":return i!==u.d?{compatible:!1,warning:`Channel ${t} should be used with a quantitative field only, not ${e.type} field.`}:M;case"opacity":case"fillOpacity":case"strokeOpacity":case"strokeWidth":case"size":case"x2":case"y2":return"nominal"!==i||e.sort?M:{compatible:!1,warning:`Channel ${t} should not be used with an unsorted discrete field.`};case"shape":return Object(p.c)(["ordinal","nominal","geojson"],e.type)?M:{compatible:!1,warning:"Shape channel should be used with only either discrete or geojson data."};case"order":return"nominal"!==e.type||"sort"in e?M:{compatible:!1,warning:"Channel order is inappropriate for nominal field, which has no inherent order."}}throw new Error("channelCompatability not implemented for channel "+t)}(e,t);i||d.e(n)}return e}function W(e,t){return Object(o.A)(e)?{maxbins:Object(r.a)(t)}:"binned"===e?{binned:!0}:e.maxbins||e.step?e:Object.assign({},e,{maxbins:Object(r.a)(t)})}const M={compatible:!0};function U(e){return"quantitative"===e.type||Object(r.e)(e.bin)}function V(e){return"temporal"===e.type||!!e.timeUnit}function R(e,{timeUnit:t,type:i,time:n,undefinedIfExprNotRequired:a}){let r;return Object(l.b)(e)?r=Object(l.a)(e,!0):(Object(o.G)(e)||Object(o.D)(e))&&(t||"temporal"===i)&&(r=Object(f.f)(t)?Object(l.a)({[t]:e},!0):Object(f.g)(t)?R(e,{timeUnit:Object(f.d)(t)}):`datetime(${JSON.stringify(e)})`),r?n?`time(${r})`:r:a?void 0:JSON.stringify(e)}function B(e,t){const{timeUnit:i,type:n}=e;return t.map(e=>{const t=R(e,{timeUnit:i,type:n,undefinedIfExprNotRequired:!0});return void 0!==t?{signal:t}:e})}function H(e,t){return Object(r.e)(e.bin)?Object(s.H)(t)&&Object(p.c)(["ordinal","nominal"],e.type):(console.warn("Only use this method with binned field defs"),!1)}},158:function(e,t,i){"use strict";var n=i(304);i.d(t,"a",function(){return n.a}),i.d(t,"c",function(){return n.c}),i.d(t,"g",function(){return n.d});var o=i(187);i.d(t,"b",function(){return o.c});var a=i(718);i.d(t,"d",function(){return a.a});var r=i(486);i.d(t,"e",function(){return r.a});var s=i(253);i.d(t,"f",function(){return s.a})},1695:function(e){e.exports={"Single-View Plots":{"Bar Charts & Histograms":[{name:"bar",title:"Simple Bar Chart",description:"A bar chart encodes quantitative values as the extent of rectangular bars",style:"background-size: auto 105%; background-position: center center !important;"},{name:"histogram",title:"Histogram",style:"background-size: auto 105%; background-position: center center !important;"},{name:"bar_binned_data",title:"Histogram (from Binned Data)",style:"background-size: auto 105%; background-position: center center !important;"},{name:"bar_aggregate",title:"Aggregate Bar Chart"},{name:"bar_grouped",title:"Grouped Bar Chart"},{name:"stacked_bar_weather",title:"Stacked Bar Chart"},{name:"stacked_bar_h",title:"Horizontal Stacked Bar Chart"},{name:"stacked_bar_normalize",title:"Normalized Stacked Bar Chart"},{name:"bar_gantt",title:"Gantt Chart (Ranged Bar Marks)",style:"background-size: auto 75%; background-position-y: center !important;"},{name:"bar_color_disabled_scale",title:"A bar chart encoding color names in the data"},{name:"bar_layered_transparent",title:"Layered Bar Chart"},{name:"bar_diverging_stack_transform",title:"Diverging Stacked Bar Chart"},{name:"layer_bar_labels",title:"Simple Bar Chart with Labels",style:"background-size: auto 70%; background-position-y: center;"},{name:"isotype_bar_chart",title:"Isotype Bar Chart",description:"Inspired by this [Only An Ocean Between, 1943](http://www.thomwhite.co.uk/?p=1303). Population Live Stock, p.13. This example was created by [@jwoLondon](https://github.com/jwoLondon)"},{name:"isotype_bar_chart_emoji",title:"Isotype Bar Chart with Emoji",description:"This example was inspired by [@jakevdp](https://github.com/jakevdp) and Isotype Bar Chart by [@jwoLondon](https://github.com/jwoLondon)"}],"Scatter & Strip Plots":[{name:"point_2d",title:"Scatterplot",style:"background-size: auto 105%; background-position: center center !important;"},{name:"tick_dot",title:"Dot Plot",style:"background-size: auto 50%; background-position-y: center !important;"},{name:"tick_strip",title:"Strip Plot",style:"background-size: auto 85%; background-position-y: center !important;"},{name:"point_color_with_shape",title:"Colored Scatterplot"},{name:"circle_binned",title:"Binned Scatterplot"},{name:"point_bubble",title:"Bubble Plot"},{name:"point_invalid_color",png:!0,title:"Scatterplot with Null Values in Grey"},{name:"circle",title:"Scatterplot with Filled Circles",style:"background-size: auto 105%; background-position: center center !important;"},{name:"circle_bubble_health_income",title:"Bubble Plot (Gapminder)"},{name:"circle_natural_disasters",description:"Visualization of global deaths from natural disasters. Copy of chart from [Our World in Data](https://ourworldindata.org/natural-catastrophes)",title:"Bubble Plot (Natural Disasters)",png:!0},{name:"text_scatterplot_colored",title:"Scatter Plot with Text Marks"}],"Line Charts":[{name:"line",title:"Line Chart",style:"background-size: auto 105%; background-position: center center !important;"},{name:"line_overlay",title:"Line Chart with Point Markers",style:"background-size: auto 105%; background-position: center center !important;",description:'By setting the `point` property of the line mark definition to an object defining a property of the overlaying point marks, we can overlay point markers on top of line. \n\n Notes&#58; (1) This is equivalent to adding another layer of point marks. \n (2) While `"point"` marks are normally semi-transparent, the overlay point marker has `opacity` = 1 by default.'},{name:"line_overlay_stroked",title:"Line Chart with Stroked Point Markers",style:"background-size: auto 105%; background-position: center center !important;",description:'By setting the `point` property of the line mark definition to an object defining a property of the overlaying point marks, we can overlay point markers on top of line. Here we create stroked points by setting their `"filled"` to `false` and their `fill` to `"white"`. \n\n Notes&#58; (1) This is equivalent to adding another layer of point marks. \n (2) While `"point"` marks are normally semi-transparent, the overlay point marker has `opacity` = 1 by default.'},{name:"line_color",title:"Multi Series Line Chart"},{name:"line_slope",title:"Slope Graph",style:"background-size: auto 105%; background-position: center center !important;"},{name:"line_step",title:"Step Chart",style:"background-size: auto 105%; background-position: center center !important;"},{name:"line_monotone",title:"Line Chart with Monotone Interpolation",style:"background-size: auto 105%; background-position: center center !important;"},{name:"connected_scatterplot",title:"Connected Scatterplot (Lines with Custom Paths)",description:"A connected scatterplot can be created by customizing line `order` and adding `point` overlay in the line mark definition.",style:"background-size: auto 105%; background-position: center center !important;"},{name:"trail_color",title:"Line Chart with Varying Size (using the trail mark)"},{name:"line_skip_invalid_mid_overlay",title:"Line Chart with Markers and Invalid Values",style:"background-size: auto 105%; background-position: center center !important;"},{name:"layer_line_co2_concentration",title:"Carbon Dioxide in the Atmosphere",description:"This example was inspired by [Gregor Aisch](https://github.com/gka)'s [Carbon Dioxide Concentration By Decade](https://www.datawrapper.de/_/OHgEm/)"},{name:"window_rank",title:"Line Charts Showing Ranks Over Time"}],"Area Charts & Streamgraphs":[{name:"area",title:"Area Chart"},{name:"area_overlay",title:"Area Chart with Overlaying Lines and Point Markers"},{name:"stacked_area",title:"Stacked Area Chart"},{name:"stacked_area_normalize",title:"Normalized Stacked Area Chart"},{name:"stacked_area_stream",title:"Streamgraph"},{name:"area_horizon",title:"Horizon Graph",style:"background-size: auto 70%; background-position-y: center;"},{name:"rect_mosaic_labelled_with_offset",title:"Mosaic Chart with Labels"}],"Table-based Plots":[{name:"rect_heatmap",title:"Table Heatmap",style:"background-size: auto"},{name:"rect_heatmap_weather",title:"Annual Weather Heatmap"},{name:"rect_binned_heatmap",title:"Table Binned heatmap"},{name:"circle_github_punchcard",title:"Table Bubble Plot (Github Punch Card)"},{name:"layer_text_heatmap",title:"Layering text over heatmap",style:"background-size: auto 55%; background-position-y: center !important;"}],"Advanced Calculations":[{name:"window_percent_of_total",title:"Calculate Percentage of Total"},{name:"joinaggregate_mean_difference",title:"Calculate Difference from Average"},{name:"joinaggregate_mean_difference_by_year",title:"Calculate Difference from Annual Average"},{name:"joinaggregate_residual_graph",title:"Calculate Residuals",style:"background-size: auto 105%; background-position: center center !important;",png:!0},{name:"window_rank",title:"Line Charts Showing Ranks Over Time"},{name:"waterfall_chart",title:"Waterfall Chart of Monthly Profit and Loss"},{name:"window_top_k",title:"Filtering top-K items",description:"Here we use window transform to derive the total number of students along with the rank of the current student to determine the top K students and display their score.",style:"background-size: 110%"},{name:"window_top_k_others",title:"Top-K plot with Others",description:"By [Trevor Manz](github.com/manzt), adapted from https://observablehq.com/@manzt/top-k-plot-with-others-vega-lite-example.",style:"background-size: 110%"},{name:"lookup",title:"Using the lookup transform to combine data",style:"background-size: 75%; background-position-x: center;"},{name:"area_cumulative_freq",title:"Cumulative Frequency Distribution",style:"background-size: auto 105%; background-position: center center !important;",png:!0},{name:"layer_cumulative_histogram",title:"Layered Histogram and Cumulative Histogram",style:"background-size: auto 105%; background-position: center center !important;"},{name:"parallel_coordinate",title:"Parallel Coordinate Plot",style:"background-size: auto 105%; background-position: center center !important;"}]},"Composite Mark":{"Error Bars & Error Bands":[{name:"layer_point_errorbar_ci",title:"Error Bars showing Confidence Interval"},{name:"layer_point_errorbar_stdev",title:"Error Bars showing Standard Deviation"},{name:"layer_line_errorband_ci",title:"Line Chart with Confidence Interval Band"},{name:"layer_scatter_errorband_1D_stdev_global_mean",title:"Scatterplot with Mean and Standard Deviation Overlay"}],"Box Plots":[{name:"boxplot_minmax_2D_vertical",title:"Box Plot with Min/Max Whiskers"},{name:"boxplot_2D_vertical",title:"Tukey Box Plot (1.5 IQR)"}]},"Layered Plots":{"Labeling & Annotation":[{name:"layer_bar_labels",title:"Simple Bar Chart with Labels",style:"background-size: auto 70%; background-position-y: center;"},{name:"layer_text_heatmap",title:"Layering text over heatmap",style:"background-size: auto 55%; background-position-y: center !important;"},{name:"layer_line_co2_concentration",title:"Carbon Dioxide in the Atmosphere",description:"This example was inspired by [Gregor Aisch](https://github.com/gka)'s [Carbon Dioxide Concentration By Decade](https://www.datawrapper.de/_/OHgEm/)"},{name:"layer_bar_annotations",title:"Bar chart that highlights values beyond a threshold",description:"To create a bar chart that highlights values beyond a threshold, we use two `layer`s of `bar` marks. The lower layer shows all the bars while the upper layer shows bar with values above the threshold in red (`#e45755`).  We then `layer` a `rule` mark and a `text` mark over the bars to annotate the threshold value"},{name:"layer_precipitation_mean",title:"Mean overlay over precipitation chart"},{name:"layer_histogram_global_mean",title:"Histogram with a Global Mean Overlay",style:"background-size: auto 105%; background-position: center center !important;"},{name:"layer_falkensee",title:"Line Chart with Highlighted Rectangles",style:"background-size: auto 90%; background-position-y: center !important;"}],"Other Layered Plots":[{name:"layer_candlestick",title:"Candlestick Chart"},{name:"layer_ranged_dot",title:"Ranged Dot Plot",style:"background-size: auto 70%; background-position-y: center;"},{name:"facet_bullet",title:"Bullet Chart"},{name:"layer_dual_axis",title:"Layered Plot with Dual-Axis",style:"background-size: 100% auto; background-position-y: center;"},{name:"area_horizon",title:"Horizon Graph",style:"background-size: auto 70%; background-position-y: center;"},{name:"bar_layered_weather",title:"Weekly Weather Plot",description:"Inspired by <a href='https://vega.github.io/vega-editor/?mode=vega&spec=weather'>this Vega example</a>. Weekly weather data plot representing high/low ranges of record temperatures (light grey), average temperatures (dark grey), and both predicted and observed temperatures (black) for the given week. The first five days have high/low ranges of observed temperatures, and the last five days have ranges of predicted temperatures, where the upper barbell represents the range of high temperature predictions and the lower barbell represents the range of low temperature predictions. Created by @melissatdiamond."},{name:"layer_line_mean_point_raw",title:"Layering mean values over raw values"},{name:"wheat_wages",title:"Wheat and Wages Example",description:"A recreation of William Playfair’s classic chart visualizing the price of wheat, the wages of a mechanic, and the reigning British monarch. Based on a chart by @manzt."}]},"Multi-View Displays":{"Faceting (Trellis Plot / Small Multiples)":[{name:"trellis_bar",title:"Trellis Bar Chart"},{name:"trellis_stacked_bar",title:"Trellis Stacked Bar Chart"},{name:"trellis_scatter",title:"Trellis Scatter Plot",png:!0},{name:"trellis_bar_histogram",title:"Trellis Histograms"},{name:"trellis_anscombe",title:"Trellis Scatter Plot showing Anscombe's Quartet"},{name:"trellis_barley",title:"Becker's Barley Trellis Plot"},{name:"trellis_area",title:"Trellis Area"}],"Repeat & Concatenation":[{name:"repeat_layer",title:"Repeat and layer to show different weather measures"},{name:"vconcat_weather",title:"Vertically concatenated charts that show precipitation in Seattle",description:"Two vertically concatenated charts"},{name:"repeat_histogram",title:"Horizontally repeated charts",description:"Horizontally repeated charts that show the histograms of different parameters of cars in different countries"},{name:"interactive_splom",png:!0,title:"Interactive Scatterplot Matrix"},{name:"concat_marginal_histograms",title:"Marginal Histograms",description:"Marginal histograms show the counts along the x and y dimension."},{name:"concat_bar_scales_discretize",title:"Discretizing scales",description:"Horizontally concatenated charts that show different types of discretizing scales"}]},"Maps (Geographic Displays)":{"":[{name:"geo_choropleth",png:!0,title:"Choropleth of unemployment rate per county"},{name:"geo_circle",png:!0,title:"One dot per zipcode in the U.S"},{name:"geo_layer",png:!0,title:"One dot per airport in the US overlayed on geoshape"},{name:"geo_rule",png:!0,title:"Rules (line segments) connecting SEA to every airport reachable via direct flight"},{name:"geo_repeat",png:!0,title:"Three choropleths representing disjoint data from the same table"},{name:"geo_text",png:!0,title:"U.S. state capitals overlayed on a map of the U.S"},{name:"geo_line",png:!0,title:"Line drawn between airports in the U.S. simulating a flight itinerary"},{name:"geo_trellis",png:!0,title:"Income in the U.S. by state, faceted over income brackets"},{name:"geo_layer_line_london",title:"London Tube Lines",description:"This example was created by Jo Wood",png:!0}]},Interactive:{"Interactive Charts":[{name:"interactive_bar_select_highlight",title:"Bar chart with highlighting on hover and selection on click"},{name:"point_href",title:"Scatterplot with External Links and Tooltips"},{name:"interactive_brush",title:"Rectangular Brush"},{name:"interactive_area_brush",title:"Area Chart with Rectangular Brush",descripton:"In this example, we apply an `interval` selection to select subset of data in an area chart. The selected data is highlighted in gold by the second layer of an area mark that `filter`s its data by the `brush` selection."},{name:"interactive_paintbrush",title:"Paintbrush Highlight",png:!0},{name:"selection_translate_scatterplot_drag",title:"Scatterplot Pan & Zoom"},{name:"interactive_query_widgets",title:"Query Widgets"},{name:"selection_layer_bar_month",title:"Interactive Average",description:"The plot below uses an interval selection, which causes the chart to include an interactive brush (shown in grey). The brush selection parameterizes the red guideline, which visualizes the average value within the selected interval"},{name:"interactive_multi_line_label",title:"Multi Series Line Chart with Labels",description:"The plot displays labels for all stock prices of the hovered time. The example is forked/modified from [@jakevdp's block](https://bl.ocks.org/jakevdp/a414950f61e4b224765f2439dd1f09b9)",png:!0},{name:"interactive_multi_line_tooltip",title:"Multi Series Line Chart with Tooltip",description:"This plot requires the data to have different series in different fields.  See [#1274](https://github.com/vega/vega-lite/issues/1274) and [#1552](https://github.com/vega/vega-lite/issues/1552) for relevant future syntax improvements.",png:!0},{name:"isotype_grid",title:"Isotype Grid",description:"Inspired by this [D3 example by Alan Smith](http://bl.ocks.org/alansmithy/d832fc03f6e6a91e99f4). Drag region to select. This example was created by [@jwoLondon](https://github.com/jwoLondon)",png:!0},{name:"brush_table",title:"Brushing Scatter Plot to show data on a table"}],"Interactive Multi-View Displays":[{name:"interactive_overview_detail",title:"Overview and Detail"},{name:"interactive_layered_crossfilter",title:"Crossfilter"},{name:"interactive_splom",png:!0,title:"Interactive Scatterplot Matrix"},{name:"interactive_concat_layer",title:"Interactive Dashboard with Cross Highlight"},{name:"interactive_seattle_weather",title:"Seattle Weather Exploration",description:"This graph shows an interactive view of Seattle's weather, including maximum temperature, amount of precipitation, and type of weather. By clicking and dragging on the scatter plot, you can see the proportion of days in that range that have sun, rain, fog, snow, etc. Created by @jakevdp.",png:!0}]}}},18:function(e,t,i){"use strict";i.d(t,"d",function(){return s}),i.d(t,"c",function(){return l}),i.d(t,"e",function(){return d}),i.d(t,"a",function(){return c}),i.d(t,"b",function(){return f});var n=i(1),o=i(5);const a=Object(n.J)(n.e);let r=a;function s(e){return r=e}function l(){return r=a}function d(...e){r.warn.apply(r,arguments)}function c(...e){r.debug.apply(r,arguments)}var f;!function(e){e.INVALID_SPEC="Invalid spec",e.FIT_NON_SINGLE='Autosize "fit" only works for single views and layered views.',e.CANNOT_FIX_RANGE_STEP_WITH_FIT='Cannot use a fixed value of "rangeStep" when "autosize" is "fit".',e.cannotProjectOnChannelWithoutField=function(e){return`Cannot project a selection on encoding channel "${e}", which has no field.`},e.nearestNotSupportForContinuous=function(e){return`The "nearest" transform is not supported for ${e} marks.`},e.selectionNotSupported=function(e){return`Selection not supported for ${e} yet`},e.selectionNotFound=function(e){return`Cannot find a selection named "${e}"`},e.SCALE_BINDINGS_CONTINUOUS="Scale bindings are currently only supported for scales with unbinned, continuous domains.",e.NO_INIT_SCALE_BINDINGS="Selections bound to scales cannot be separately initialized.",e.noSuchRepeatedValue=function(e){return`Unknown repeated value "${e}".`},e.columnsNotSupportByRowCol=function(e){return`The "columns" property cannot be used when "${e}" has nested row/column.`},e.CONCAT_CANNOT_SHARE_AXIS="Axes cannot be shared in concatenated views yet (https://github.com/vega/vega-lite/issues/2415).",e.REPEAT_CANNOT_SHARE_AXIS="Axes cannot be shared in repeated views yet (https://github.com/vega/vega-lite/issues/2415).",e.unrecognizedParse=function(e){return`Unrecognized parse "${e}".`},e.differentParse=function(e,t,i){return`An ancestor parsed field "${e}" as ${i} but a child wants to parse the field as ${t}.`},e.invalidTransformIgnored=function(e){return`Ignoring an invalid transform: ${Object(o.C)(e)}.`},e.NO_FIELDS_NEEDS_AS='If "from.fields" is not specified, "as" has to be a string that specifies the key to be used for the data from the secondary source.',e.encodingOverridden=function(e){return`Layer's shared ${e.join(",")} channel ${1===e.length?"is":"are"} overriden`},e.projectionOverridden=function(e){const{parentProjection:t,projection:i}=e;return`Layer's shared projection ${Object(o.C)(t)} is overridden by a child projection ${Object(o.C)(i)}.`},e.primitiveChannelDef=function(e,t,i){return`Channel ${e} is a ${t}. Converted to {value: ${Object(o.C)(i)}}.`},e.invalidFieldType=function(e){return`Invalid field type "${e}"`},e.nonZeroScaleUsedWithLengthMark=function(e,t,i){return`A ${i.scaleType?`${i.scaleType} scale`:i.zeroFalse?"scale with zero=false":"scale with custom domain that excludes zero"} is used to encode ${e}'s ${t}. This can be misleading as the ${"x"===t?"width":"height"} of the ${e} can be arbitrary based on the scale domain. You may want to use point mark instead.`},e.invalidFieldTypeForCountAggregate=function(e,t){return`Invalid field type "${e}" for aggregate: "${t}", using "quantitative" instead.`},e.invalidAggregate=function(e){return`Invalid aggregation operator "${e}"`},e.missingFieldType=function(e,t){return`Missing type for channel "${e}", using "${t}" instead.`},e.droppingColor=function(e,t){const{fill:i,stroke:n}=t;return`Dropping color ${e} as the plot also has `+(i&&n?"fill and stroke":i?"fill":"stroke")},e.emptyFieldDef=function(e,t){return`Dropping ${Object(o.C)(e)} from channel "${t}" since it does not contain data field or value.`},e.latLongDeprecated=function(e,t,i){return`${e}-encoding with type ${t} is deprecated. Replacing with ${i}-encoding.`},e.LINE_WITH_VARYING_SIZE="Line marks cannot encode size with a non-groupby field. You may want to use trail marks instead.",e.incompatibleChannel=function(e,t,i){return`${e} dropped as it is incompatible with "${t}"${i?` when ${i}`:""}.`},e.invalidEncodingChannel=function(e){return`${e}-encoding is dropped as ${e} is not a valid encoding channel.`},e.facetChannelShouldBeDiscrete=function(e){return`${e} encoding should be discrete (ordinal / nominal / binned).`},e.facetChannelDropped=function(e){return`Facet encoding dropped as ${e.join(" and ")} ${e.length>1?"are":"is"} also specified.`},e.discreteChannelCannotEncode=function(e,t){return`Using discrete channel "${e}" to encode "${t}" field can be misleading as it does not encode ${"ordinal"===t?"order":"magnitude"}.`},e.BAR_WITH_POINT_SCALE_AND_RANGESTEP_NULL="Bar mark should not be used with point scale when rangeStep is null. Please use band scale instead.",e.lineWithRange=function(e,t){return`Line mark is for continuous lines and thus cannot be used with ${e&&t?"x2 and y2":e?"x2":"y2"}. We will use the rule mark (line segments) instead.`},e.orientOverridden=function(e,t){return`Specified orient "${e}" overridden with "${t}"`},e.CANNOT_UNION_CUSTOM_DOMAIN_WITH_FIELD_DOMAIN="custom domain scale cannot be unioned with default field-based domain",e.cannotUseScalePropertyWithNonColor=function(e){return`Cannot use the scale property "${e}" with non-color channel.`},e.unaggregateDomainHasNoEffectForRawField=function(e){return`Using unaggregated domain with raw field has no effect (${Object(o.C)(e)}).`},e.unaggregateDomainWithNonSharedDomainOp=function(e){return`Unaggregated domain not applicable for "${e}" since it produces values outside the origin domain of the source data.`},e.unaggregatedDomainWithLogScale=function(e){return`Unaggregated domain is currently unsupported for log scale (${Object(o.C)(e)}).`},e.cannotApplySizeToNonOrientedMark=function(e){return`Cannot apply size to non-oriented mark "${e}".`},e.rangeStepDropped=function(e){return`rangeStep for "${e}" is dropped as top-level ${"x"===e?"width":"height"} is provided.`},e.scaleTypeNotWorkWithChannel=function(e,t,i){return`Channel "${e}" does not work with "${t}" scale. We are using "${i}" scale instead.`},e.scaleTypeNotWorkWithFieldDef=function(e,t){return`FieldDef does not work with "${e}" scale. We are using "${t}" scale instead.`},e.scalePropertyNotWorkWithScaleType=function(e,t,i){return`${i}-scale's "${t}" is dropped as it does not work with ${e} scale.`},e.scaleTypeNotWorkWithMark=function(e,t){return`Scale type "${t}" does not work with mark "${e}".`},e.mergeConflictingProperty=function(e,t,i,n){return`Conflicting ${t.toString()} property "${e.toString()}" (${Object(o.C)(i)} and ${Object(o.C)(n)}).  Using ${Object(o.C)(i)}.`},e.independentScaleMeansIndependentGuide=function(e){return`Setting the scale to be independent for "${e}" means we also have to set the guide (axis or legend) to be independent.`},e.domainSortDropped=function(e){return`Dropping sort property ${Object(o.C)(e)} as unioned domains only support boolean or op 'count'.`},e.UNABLE_TO_MERGE_DOMAINS="Unable to merge domains",e.MORE_THAN_ONE_SORT="Domains that should be unioned has conflicting sort properties. Sort will be set to true.",e.INVALID_CHANNEL_FOR_AXIS="Invalid channel for axis.",e.cannotStackRangedMark=function(e){return`Cannot stack "${e}" if there is already "${e}2"`},e.cannotStackNonLinearScale=function(e){return`Cannot stack non-linear scale (${e})`},e.stackNonSummativeAggregate=function(e){return`Stacking is applied even though the aggregate function is non-summative ("${e}")`},e.invalidTimeUnit=function(e,t){return`Invalid ${e}: ${Object(o.C)(t)}`},e.dayReplacedWithDate=function(e){return`Time unit "${e}" is not supported. We are replacing it with ${e.replace("day","date")}.`},e.droppedDay=function(e){return`Dropping day from datetime ${Object(o.C)(e)} as day cannot be combined with other units.`},e.errorBarCenterAndExtentAreNotNeeded=function(e,t){return`${t?"extent ":""}${t&&e?"and ":""}${e?"center ":""}${t&&e?"are ":"is "}not needed when data are aggregated.`},e.errorBarCenterIsUsedWithWrongExtent=function(e,t,i){return`${e} is not usually used with ${t} for ${i}.`},e.errorBarContinuousAxisHasCustomizedAggregate=function(e,t){return`Continuous axis should not have customized aggregation function ${e}; ${t} already agregates the axis.`},e.errorBarCenterIsNotNeeded=function(e,t){return`Center is not needed to be specified in ${t} when extent is ${e}.`},e.errorBand1DNotSupport=function(e){return`1D error band does not support ${e}`},e.channelRequiredForBinned=function(e){return`Channel ${e} is required for "binned" bin`},e.domainRequiredForThresholdScale=function(e){return`Domain for ${e} is required for threshold scale`}}(f||(f={}))},182:function(e,t,i){"use strict";i.d(t,"d",function(){return a}),i.d(t,"h",function(){return r}),i.d(t,"j",function(){return s}),i.d(t,"k",function(){return l}),i.d(t,"n",function(){return d}),i.d(t,"i",function(){return c}),i.d(t,"e",function(){return f}),i.d(t,"c",function(){return u}),i.d(t,"b",function(){return p}),i.d(t,"g",function(){return h}),i.d(t,"m",function(){return g}),i.d(t,"a",function(){return m}),i.d(t,"l",function(){return b}),i.d(t,"f",function(){return y}),i.d(t,"o",function(){return v});var n=i(391),o=i(267);function a(e){return void 0!==e.filter}function r(e){return e&&void 0!==e.start&&void 0!==e.stop}function s(e){return void 0!==e.lookup}function l(e){return void 0!==e.sample}function d(e){return void 0!==e.window}function c(e){return void 0!==e.joinaggregate}function f(e){return void 0!==e.flatten}function u(e){return void 0!==e.calculate}function p(e){return!!e.bin}function h(e){return void 0!==e.impute}function g(e){return void 0!==e.timeUnit}function m(e){return void 0!==e.aggregate}function b(e){return void 0!==e.stack}function y(e){return void 0!==e.fold}function v(e){return e.map(e=>a(e)?{filter:Object(n.e)(e.filter,o.g)}:e)}},187:function(e,t,i){"use strict";function n(e){return!!e.row||!!e.column}function o(e){return!!e&&!!e.header}function a(e){return void 0!==e.facet}i.d(t,"b",function(){return n}),i.d(t,"a",function(){return o}),i.d(t,"c",function(){return a})},19:function(e,t,i){"use strict";i.d(t,"q",function(){return a}),i.d(t,"c",function(){return r}),i.d(t,"d",function(){return s}),i.d(t,"x",function(){return l}),i.d(t,"z",function(){return d}),i.d(t,"y",function(){return c}),i.d(t,"A",function(){return f}),i.d(t,"i",function(){return u}),i.d(t,"k",function(){return p}),i.d(t,"j",function(){return h}),i.d(t,"l",function(){return g}),i.d(t,"b",function(){return m}),i.d(t,"f",function(){return b}),i.d(t,"u",function(){return y}),i.d(t,"s",function(){return v}),i.d(t,"t",function(){return _}),i.d(t,"o",function(){return w}),i.d(t,"g",function(){return x}),i.d(t,"v",function(){return O}),i.d(t,"w",function(){return j}),i.d(t,"F",function(){return z}),i.d(t,"C",function(){return F}),i.d(t,"h",function(){return P}),i.d(t,"E",function(){return I}),i.d(t,"e",function(){return E}),i.d(t,"a",function(){return W}),i.d(t,"J",function(){return X}),i.d(t,"D",function(){return Q}),i.d(t,"I",function(){return K}),i.d(t,"B",function(){return Z}),i.d(t,"m",function(){return de}),i.d(t,"p",function(){return fe}),i.d(t,"n",function(){return ve}),i.d(t,"G",function(){return _e}),i.d(t,"L",function(){return we}),i.d(t,"r",function(){return Oe}),i.d(t,"H",function(){return je}),i.d(t,"M",function(){return ke}),i.d(t,"K",function(){return Te});var n=i(57),o=i(5);const a="row",r="column",s="facet",l="x",d="y",c="x2",f="y2",u="latitude",p="longitude",h="latitude2",g="longitude2",m="color",b="fill",y="stroke",v="shape",_="size",w="opacity",x="fillOpacity",O="strokeOpacity",j="strokeWidth",k="text",T="order",D="detail",$="key",S="tooltip",C="href";function z(e){switch(e){case u:case h:case p:case g:return!0}return!1}function F(e){switch(e){case u:return"y";case h:return"y2";case p:return"x";case g:return"x2"}}const A={longitude:1,longitude2:1,latitude:1,latitude2:1},P=Object(o.j)(A),N=Object.assign({x:1,y:1,x2:1,y2:1},A,{color:1,fill:1,stroke:1,opacity:1,fillOpacity:1,strokeOpacity:1,strokeWidth:1,size:1,shape:1,order:1,text:1,detail:1,key:1,tooltip:1,href:1});function I(e){return"color"===e||"fill"===e||"stroke"===e}const q={row:1,column:1,facet:1},E=Object(o.j)(q),L=Object.assign({},N,q),W=Object(o.j)(L),{order:M,detail:U}=L,V=n.b(L,["order","detail"]),{order:R,detail:B,row:H,column:G,facet:Y}=L,J=n.b(L,["order","detail","row","column","facet"]);Object(o.j)(V),Object(o.j)(J);function X(e){return!!J[e]}function Q(e){return!!L[e]}function K(e){return Z(e)!==e}function Z(e){switch(e){case"x2":return"x";case"y2":return"y";case"latitude2":return"latitude";case"longitude2":return"longitude"}return e}Object(o.j)(N);const{x:ee,y:te,x2:ie,y2:ne,latitude:oe,longitude:ae,latitude2:re,longitude2:se}=N,le=n.b(N,["x","y","x2","y2","latitude","longitude","latitude2","longitude2"]),de=Object(o.j)(le),ce={x:1,y:1},fe=Object(o.j)(ce),{text:ue,tooltip:pe,href:he,detail:ge,key:me,order:be}=le,ye=n.b(le,["text","tooltip","href","detail","key","order"]),ve=Object(o.j)(ye);function _e(e){return!!le[e]}function we(e){switch(e){case m:case b:case y:case _:case v:case w:return!0;case x:case O:case j:return!1}}const xe=Object.assign({},ce,ye),Oe=Object(o.j)(xe);function je(e){return!!xe[e]}function ke(e,t){return function(e){switch(e){case m:case b:case y:case D:case $:case S:case C:case T:case w:case x:case O:case j:case s:case a:case r:return{point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",rect:"always",line:"always",trail:"always",area:"always",text:"always",geoshape:"always"};case l:case d:case u:case p:return{point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",rect:"always",line:"always",trail:"always",area:"always",text:"always"};case c:case f:case h:case g:return{rule:"always",bar:"always",rect:"always",area:"always",circle:"binned",point:"binned",square:"binned",tick:"binned"};case _:return{point:"always",tick:"always",rule:"always",circle:"always",square:"always",bar:"always",text:"always",line:"always",trail:"always"};case v:return{point:"always",geoshape:"always"};case k:return{text:"always"}}}(e)[t]}function Te(e){switch(e){case l:case d:case _:case j:case w:case x:case O:case c:case f:return;case s:case a:case r:case v:case k:case S:case C:return"discrete";case m:case b:case y:return"flexible";case u:case p:case h:case g:case D:case $:case T:return}throw new Error("rangeType not implemented for "+e)}},190:function(e,t,i){"use strict";i.d(t,"b",function(){return c});var n=i(1),o=i(76),a=i(19),r=i(18),s=i(41),l=i(5);const d={has:e=>"interval"===e.type&&"global"===e.resolve&&e.bind&&"scales"===e.bind,parse:(e,t,i)=>{const n=Object(l.H)(i.name),o=i.scales=[];for(const t of i.project){const i=t.channel;if(!Object(a.H)(i))continue;const d=e.getScaleComponent(i),c=d?d.get("type"):void 0;if(d&&Object(s.f)(c)){if(d.set("domainRaw",{signal:Object(l.b)(t.field,n)},!0),o.push(t),e.repeater&&e.repeater.row===e.repeater.column){e.getScaleComponent(i===a.x?a.z:a.x).set("domainRaw",{signal:Object(l.b)(t.field,n)},!0)}}else r.e(r.b.SCALE_BINDINGS_CONTINUOUS)}},topLevelSignals:(e,t,i)=>{const a=t.scales.filter(e=>!i.filter(t=>t.name===e.signals.data).length);if(!e.parent||!a.length)return i;const r=i.filter(e=>e.name===t.name)[0],s=r.update;if(s.indexOf(o.e)>=0)r.update=`{${a.map(e=>`${Object(n.W)(e.field)}: ${e.signals.data}`).join(", ")}}`;else for(const e of a){const t=`, ${Object(n.W)(e.field)}: ${e.signals.data}`;s.indexOf(t)<0&&(r.update=s.substring(0,s.length-1)+t+"}")}return i.concat(a.map(e=>({name:e.signals.data})))},signals:(e,t,i)=>{if(e.parent)for(const e of t.scales){const t=i.filter(t=>t.name===e.signals.data)[0];t.push="outer",delete t.value,delete t.update}return i}};function c(e,t){return`domain(${Object(n.W)(e.scaleName(t))})`}t.a=d},195:function(e,t,i){"use strict";i.d(t,"a",function(){return r});var n=i(99),o=i(5),a=i(67);class r extends a.a{constructor(e){super(null);const t=(e=e||{name:"source"}).format?Object.assign({},Object(o.w)(e.format,["parse"])):{};if(Object(n.c)(e))this._data={values:e.values};else if(Object(n.e)(e)){if(this._data={url:e.url},!t.type){let i=/(?:\.([^.]+))?$/.exec(e.url)[1];Object(o.c)(["json","csv","tsv","dsv","topojson"],i)||(i="json"),t.type=i}}else Object(n.d)(e)&&(this._data={});e.name&&(this._name=e.name),t&&Object(o.s)(t).length>0&&(this._data.format=t)}get data(){return this._data}hasName(){return!!this._name}get dataName(){return this._name}set dataName(e){this._name=e}set parent(e){throw new Error("Source nodes have to be roots.")}remove(){throw new Error("Source nodes are roots and cannot be removed.")}hash(){throw new Error("Cannot hash sources")}assemble(){return Object.assign({name:this._name},this._data,{transform:[]})}}},197:function(e,t,i){"use strict";i.d(t,"a",function(){return o}),i.d(t,"c",function(){return a}),i.d(t,"b",function(){return r});var n=i(5);function o(e,t){return Object(n.c)(["top","bottom"],t)?"column":Object(n.c)(["left","right"],t)?"row":"row"===e?"row":"column"}function a(e,t,i,o){const a="row"===o?i.headerRow:"column"===o?i.headerColumn:i.headerFacet;return Object(n.m)(t&&t.header?t.header[e]:void 0,a[e],i.header[e])}function r(e,t,i,n){const o={};for(const r of e){const e=a(r,t,i,n);void 0!==e&&(o[r]=e)}return o}},199:function(e,t,i){"use strict";i.d(t,"c",function(){return r}),i.d(t,"d",function(){return l}),i.d(t,"e",function(){return d}),i.d(t,"b",function(){return c}),i.d(t,"a",function(){return f});var n=i(1),o=i(5);const a={argmax:1,argmin:1,average:1,count:1,distinct:1,max:1,mean:1,median:1,min:1,missing:1,q1:1,q3:1,ci0:1,ci1:1,stderr:1,stdev:1,stdevp:1,sum:1,valid:1,values:1,variance:1,variancep:1};Object(o.j)(a);function r(e){return!!a[e]}const s=["count","valid","missing","distinct"];function l(e){return e&&Object(o.c)(s,e)}function d(e){return e&&Object(o.c)(["min","max"],e)}const c=["count","sum","distinct","valid","missing"],f=Object(n.ab)(["mean","average","median","q1","q3","min","max"])},202:function(e,t,i){"use strict";i.d(t,"a",function(){return d}),i.d(t,"b",function(){return c});var n=i(15),o=i(267),a=i(125),r=i(5),s=i(67),l=i(770);class d extends s.a{constructor(e,t){super(e),this.transform=t,this._dependentFields=Object(l.a)(this.transform.calculate)}clone(){return new d(null,Object(r.f)(this.transform))}static parseAllForSortIndex(e,t){return t.forEachFieldDef((t,i)=>{if(Object(n.o)(t)&&Object(a.b)(t.sort)){const{field:n,timeUnit:a}=t,r=t.sort,s=r.map((e,t)=>`${Object(o.a)({field:n,timeUnit:a,equal:e})} ? ${t} : `).join("")+r.length;e=new d(e,{calculate:s,as:c(t,i,{forAs:!0})})}}),e}producedFields(){return new Set([this.transform.as])}dependentFields(){return this._dependentFields}assemble(){return{type:"formula",expr:this.transform.calculate,as:this.transform.as}}hash(){return`Calculate ${Object(r.o)(this.transform)}`}}function c(e,t,i){return Object(n.D)(e,Object.assign({prefix:t,suffix:"sort_index"},i||{}))}},205:function(e,t,i){"use strict";i.d(t,"f",function(){return d}),i.d(t,"g",function(){return f}),i.d(t,"d",function(){return g}),i.d(t,"e",function(){return b}),i.d(t,"a",function(){return v}),i.d(t,"c",function(){return _}),i.d(t,"b",function(){return w}),i.d(t,"h",function(){return x});var n,o=i(284),a=i(18),r=i(5);!function(e){e.YEAR="year",e.MONTH="month",e.DAY="day",e.DATE="date",e.HOURS="hours",e.MINUTES="minutes",e.SECONDS="seconds",e.MILLISECONDS="milliseconds",e.YEARMONTH="yearmonth",e.YEARMONTHDATE="yearmonthdate",e.YEARMONTHDATEHOURS="yearmonthdatehours",e.YEARMONTHDATEHOURSMINUTES="yearmonthdatehoursminutes",e.YEARMONTHDATEHOURSMINUTESSECONDS="yearmonthdatehoursminutesseconds",e.MONTHDATE="monthdate",e.MONTHDATEHOURS="monthdatehours",e.HOURSMINUTES="hoursminutes",e.HOURSMINUTESSECONDS="hoursminutesseconds",e.MINUTESSECONDS="minutesseconds",e.SECONDSMILLISECONDS="secondsmilliseconds",e.QUARTER="quarter",e.YEARQUARTER="yearquarter",e.QUARTERMONTH="quartermonth",e.YEARQUARTERMONTH="yearquartermonth",e.UTCYEAR="utcyear",e.UTCMONTH="utcmonth",e.UTCDAY="utcday",e.UTCDATE="utcdate",e.UTCHOURS="utchours",e.UTCMINUTES="utcminutes",e.UTCSECONDS="utcseconds",e.UTCMILLISECONDS="utcmilliseconds",e.UTCYEARMONTH="utcyearmonth",e.UTCYEARMONTHDATE="utcyearmonthdate",e.UTCYEARMONTHDATEHOURS="utcyearmonthdatehours",e.UTCYEARMONTHDATEHOURSMINUTES="utcyearmonthdatehoursminutes",e.UTCYEARMONTHDATEHOURSMINUTESSECONDS="utcyearmonthdatehoursminutesseconds",e.UTCMONTHDATE="utcmonthdate",e.UTCMONTHDATEHOURS="utcmonthdatehours",e.UTCHOURSMINUTES="utchoursminutes",e.UTCHOURSMINUTESSECONDS="utchoursminutesseconds",e.UTCMINUTESSECONDS="utcminutesseconds",e.UTCSECONDSMILLISECONDS="utcsecondsmilliseconds",e.UTCQUARTER="utcquarter",e.UTCYEARQUARTER="utcyearquarter",e.UTCQUARTERMONTH="utcquartermonth",e.UTCYEARQUARTERMONTH="utcyearquartermonth"}(n||(n={}));const s={year:1,quarter:1,month:1,day:1,date:1,hours:1,minutes:1,seconds:1,milliseconds:1},l=Object(r.j)(s);function d(e){return!!s[e]}const c={utcyear:1,utcquarter:1,utcmonth:1,utcday:1,utcdate:1,utchours:1,utcminutes:1,utcseconds:1,utcmilliseconds:1};function f(e){return!!c[e]}const u={utcyearquarter:1,utcyearquartermonth:1,utcyearmonth:1,utcyearmonthdate:1,utcyearmonthdatehours:1,utcyearmonthdatehoursminutes:1,utcyearmonthdatehoursminutesseconds:1,utcquartermonth:1,utcmonthdate:1,utcmonthdatehours:1,utchoursminutes:1,utchoursminutesseconds:1,utcminutesseconds:1,utcsecondsmilliseconds:1},p=Object.assign({},c,u);function h(e){return!!p[e]}function g(e){return e.substr(3)}const m=Object.assign({},s,c,{yearquarter:1,yearquartermonth:1,yearmonth:1,yearmonthdate:1,yearmonthdatehours:1,yearmonthdatehoursminutes:1,yearmonthdatehoursminutesseconds:1,quartermonth:1,monthdate:1,monthdatehours:1,hoursminutes:1,hoursminutesseconds:1,minutesseconds:1,secondsmilliseconds:1},u);Object(r.j)(m);function b(e){return l.reduce((t,i)=>y(e,i)?[...t,i]:t,[])}function y(e,t){const i=e.indexOf(t);return i>-1&&(t!==n.SECONDS||0===i||"i"!==e.charAt(i-1))}function v(e,t){const i=Object(r.b)(t),a=h(e)?"utc":"";const s=l.reduce((t,o)=>(y(e,o)&&(t[o]=function(e){return e===n.QUARTER?`(${a}quarter(${i})-1)`:`${a}${e}(${i})`}(o)),t),{});return Object(o.a)(s)}function _(e,t){if(!e)return;const i=[],o=y(e,n.YEAR);y(e,n.MONTH)&&i.push(!1!==t?"%b":"%B"),y(e,n.DAY)?i.push(t?"%a":"%A"):y(e,n.DATE)&&i.push("%d"+(o?",":"")),o&&i.push(t?"%y":"%Y");const a=[];y(e,n.HOURS)&&a.push("%H"),y(e,n.MINUTES)&&a.push("%M"),y(e,n.SECONDS)&&a.push("%S"),y(e,n.MILLISECONDS)&&a.push("%L");const r=[];return i.length>0&&r.push(i.join(" ")),a.length>0&&r.push(a.join(":")),r}function w(e,t,i,o){if(!e)return;const a=_(e,i);let r="";return y(e,n.QUARTER)&&(r=`'Q' + quarter(${t})`),a.length>0&&(r&&(r+=" + ' ' + "),r+=o?`utcFormat(${t}, '${a.join(" ")}')`:`timeFormat(${t}, '${a.join(" ")}')`),r||void 0}function x(e){return"day"!==e&&e.indexOf("day")>=0?(a.e(a.b.dayReplacedWithDate(e)),e.replace("day","date")):e}},232:function(e,t,i){"use strict";i.d(t,"c",function(){return d}),i.d(t,"d",function(){return c}),i.d(t,"e",function(){return f}),i.d(t,"a",function(){return u}),i.d(t,"b",function(){return h});var n=i(57),o=i(1),a=i(113),r=i(15),s=i(18),l=i(37);function d(e,t,i,n=!0){return{tooltip:[...e.map(({fieldPrefix:e,titlePrefix:i})=>({field:e+t.field,type:t.type,title:i+(n?" of "+t.field:"")})),...Object(a.c)(i)]}}function c(e,t,i,n,a){const{scale:r,axis:s}=i;return({partName:l,mark:d,positionPrefix:c,endPositionPrefix:u,extraEncoding:p={}})=>{const h=s&&void 0!==s.title?void 0:void 0!==i.title?i.title:i.field;return f(e,l,a,{mark:d,encoding:Object.assign({[t]:Object.assign({field:c+"_"+i.field,type:i.type},h?{title:h}:{},r?{scale:r}:{},s?{axis:s}:{})},Object(o.G)(u)?{[t+"2"]:{field:u+"_"+i.field,type:i.type}}:{},n,p)})}}function f(e,t,i,n){const{clip:a,color:r,opacity:s}=e,d=e.type;return e[t]||void 0===e[t]&&i[t]?[Object.assign({},n,{mark:Object.assign({},i[t],a?{clip:a}:{},r?{color:r}:{},s?{opacity:s}:{},Object(l.u)(n.mark)?n.mark:{type:n.mark},{style:`${d}-${t}`},Object(o.A)(e[t])?{}:e[t])})]:[]}function u(e,t,i){const{encoding:n}=e,o="vertical"===t?"y":"x",a=n[o],r=n[o+"2"],s=n[o+"Error"],l=n[o+"Error2"];return{continuousAxisChannelDef:p(a,i),continuousAxisChannelDef2:p(r,i),continuousAxisChannelDefError:p(s,i),continuousAxisChannelDefError2:p(l,i),continuousAxis:o}}function p(e,t){if(Object(r.l)(e)&&e&&e.aggregate){const{aggregate:i}=e,o=n.b(e,["aggregate"]);return i!==t&&s.e(s.b.errorBarContinuousAxisHasCustomizedAggregate(i,t)),o}return e}function h(e,t){const{mark:i,encoding:n}=e;if(Object(r.l)(n.x)&&Object(r.k)(n.x)){if(Object(r.l)(n.y)&&Object(r.k)(n.y)){if(void 0===n.x.aggregate&&n.y.aggregate===t)return"vertical";if(void 0===n.y.aggregate&&n.x.aggregate===t)return"horizontal";if(n.x.aggregate===t&&n.y.aggregate===t)throw new Error("Both x and y cannot have aggregate");return Object(l.u)(i)&&i.orient?i.orient:"vertical"}return"horizontal"}if(Object(r.l)(n.y)&&Object(r.k)(n.y))return"vertical";throw new Error("Need a valid continuous axis for "+t+"s")}},237:function(e,t,i){"use strict";i.d(t,"a",function(){return f}),i.d(t,"g",function(){return u}),i.d(t,"h",function(){return p}),i.d(t,"c",function(){return h}),i.d(t,"b",function(){return g}),i.d(t,"d",function(){return m}),i.d(t,"e",function(){return b}),i.d(t,"i",function(){return y}),i.d(t,"f",function(){return v}),i.d(t,"j",function(){return _});var n=i(62),o=i(19),a=i(15),r=i(18),s=i(41),l=i(102),d=i(5),c=i(769);function f(e,t){return!Object(s.g)(e)&&!Object(n.e)(t.bin)}function u(e,t){const i="x"===t?"y":"x";if(e.getScaleComponent(i))return e.scaleName(i)}function p(e,t,i,n){if(void 0!==t.labelAngle)return Object(d.v)(t.labelAngle);{const t=Object(c.a)("labelAngle",e.config,i,y(i),e.getScaleComponent(i).get("type"));return void 0!==t?Object(d.v)(t):i===o.x&&Object(d.c)([l.b,l.c],n.type)?270:void 0}}function h(e,t){if(void 0!==e)return e=Object(d.v)(e),"top"===t||"bottom"===t?e<=45||315<=e?"top"===t?"bottom":"top":135<=e&&e<=225?"top"===t?"top":"bottom":"middle":e<=45||315<=e||135<=e&&e<=225?"middle":45<=e&&e<=135?"left"===t?"top":"bottom":"left"===t?"bottom":"top"}function g(e,t){if(void 0!==e)return e=Object(d.v)(e),"top"===t||"bottom"===t?e%180==0?"center":0<e&&e<180?"top"===t?"right":"left":"top"===t?"left":"right":(e+90)%180==0?"center":90<=e&&e<270?"left"===t?"left":"right":"left"===t?"right":"left"}function m(e,t){if("x"===t&&Object(d.c)(["quantitative","temporal"],e.type))return!0}function b(e,t){if("nominal"!==e.type)return"log"!==t||"greedy"}function y(e){switch(e){case o.x:return"bottom";case o.z:return"left"}throw new Error(r.b.INVALID_CHANNEL_FOR_AXIS)}function v({fieldDef:e,scaleType:t,size:i,scaleName:o,specifiedAxis:a={}}){if(!Object(s.g)(t)&&"log"!==t&&!Object(d.c)(["month","hours","day","quarter"],e.timeUnit))return Object(n.e)(e.bin)?{signal:`ceil(${i.signal}/10)`}:{signal:`ceil(${i.signal}/40)`}}function _(e,t,i,n){const o=e.values;if(o)return Object(a.B)(i,o)}},243:function(e,t,i){"use strict";i.d(t,"c",function(){return _}),i.d(t,"b",function(){return j}),i.d(t,"a",function(){return k});var n=i(57),o=i(1),a=i(199),r=i(62),s=i(19),l=i(99),d=i(15),c=i(18),f=i(41),u=i(125),p=i(5),h=i(83),g=i(202),m=i(429),b=i(61),y=i(76),v=i(270);function _(e){Object(b.g)(e)?function(e){const t=e.specifiedScales,i=e.component.scales;p.s(i).forEach(n=>{const o=t[n],a=o?o.domain:void 0,r=function(e,t){const i=e.getScaleComponent(t).get("type"),n=function(e,t,i,n){if("unaggregated"===e){const{valid:e,reason:n}=O(t,i);if(!e)return void c.e(n)}else if(void 0===e&&n.useUnaggregatedDomain){const{valid:e}=O(t,i);if(e)return"unaggregated"}return e}(e.scaleDomain(t),e.fieldDef(t),i,e.config.scale);n!==e.scaleDomain(t)&&(e.specifiedScales[t]=Object.assign({},e.specifiedScales[t],{domain:n}));if("x"===t&&e.channelHasField("x2"))return e.channelHasField("x")?w(i,n,e,"x").concat(w(i,n,e,"x2")):w(i,n,e,"x2");if("y"===t&&e.channelHasField("y2"))return e.channelHasField("y")?w(i,n,e,"y").concat(w(i,n,e,"y2")):w(i,n,e,"y2");return w(i,n,e,t)}(e,n),s=i[n];if(s.domains=r,Object(f.k)(a)&&s.set("domainRaw",{signal:y.b+p.o(a)},!0),e.component.data.isFaceted){let t=e;for(;!Object(b.d)(t)&&t.parent;)t=t.parent;const i=t.component.resolve.scale[n];if("shared"===i)for(const e of r)Object(h.b)(e)&&(e.data=m.a+e.data.replace(m.a,""))}})}(e):function(e){for(const t of e.children)_(t);const t=e.component.scales;p.s(t).forEach(i=>{let n,o=null;for(const t of e.children){const e=t.component.scales[i];if(e){n=void 0===n?e.domains:n.concat(e.domains);const t=e.get("domainRaw");o&&t&&o.signal!==t.signal&&c.e("The same selection must be used to override scale domains in a layered view."),o=t}}t[i].domains=n,o&&t[i].set("domainRaw",o,!0)})}(e)}function w(e,t,i,n){const a=i.fieldDef(n);if(t&&"unaggregated"!==t&&!Object(f.k)(t)){const{type:e,timeUnit:i}=a;return"temporal"===e||i?function(e,t,i){return e.map(e=>({signal:`{data: ${Object(d.C)(e,{timeUnit:i,type:t})}}`}))}(t,e,i):[t]}const c=i.stack;if(c&&n===c.fieldChannel){if("normalize"===c.offset)return[[0,1]];const e=i.requestDataName(l.a);return[{data:e,field:i.vgField(n,{suffix:"start"})},{data:e,field:i.vgField(n,{suffix:"end"})}]}const h=Object(s.H)(n)?function(e,t,i){if(!Object(f.g)(i))return;const n=e.fieldDef(t),o=n.sort;if(Object(u.b)(o))return{op:"min",field:Object(g.b)(n,t),order:"ascending"};const a=null!==e.stack;if(Object(u.d)(o))return x(o,a);if(Object(u.c)(o)){const{encoding:t,order:i}=o,{aggregate:n,field:r}=e.fieldDef(t),s={op:n,field:r,order:i};return x(s,a)}if("descending"===o)return{op:"min",field:e.vgField(t),order:"descending"};if(p.c(["ascending",void 0],o))return!0;return}(i,n,e):void 0;if("unaggregated"===t){const e=i.requestDataName(l.a),{field:t}=a;return[{data:e,field:Object(d.D)({field:t,aggregate:"min"})},{data:e,field:Object(d.D)({field:t,aggregate:"max"})}]}if(Object(r.e)(a.bin)){if(Object(f.g)(e))return"bin-ordinal"===e?[]:[{data:p.q(h)?i.requestDataName(l.a):i.requestDataName(l.b),field:i.vgField(n,Object(d.a)(a,n)?{binSuffix:"range"}:{}),sort:!0!==h&&Object(o.E)(h)?h:{field:i.vgField(n,{}),op:"min"}}];if(Object(r.e)(a.bin)){const e=i.getName(Object(d.D)(a,{suffix:"bins"}));return[new v.a(()=>{const t=i.getSignalName(e);return`[${t}.start, ${t}.stop]`})]}return[{data:i.requestDataName(l.a),field:i.vgField(n,{})}]}return h?[{data:p.q(h)?i.requestDataName(l.a):i.requestDataName(l.b),field:i.vgField(n),sort:h}]:[{data:i.requestDataName(l.a),field:i.vgField(n)}]}function x(e,t){const{op:i,field:n,order:o}=e;return Object.assign({op:i||(t?"sum":u.a)},n?{field:p.z(n)}:{},o?{order:o}:{})}function O(e,t){return e.aggregate?a.a[e.aggregate]?"quantitative"===e.type&&"log"===t?{valid:!1,reason:c.b.unaggregatedDomainWithLogScale(e)}:{valid:!0}:{valid:!1,reason:c.b.unaggregateDomainWithNonSharedDomainOp(e.aggregate)}:{valid:!1,reason:c.b.unaggregateDomainHasNoEffectForRawField(e)}}function j(e){if(Object(h.b)(e)&&Object(o.G)(e.field))return e.field;if(Object(h.c)(e)){let t;for(const i of e.fields)if(Object(h.b)(i)&&Object(o.G)(i.field))if(t){if(t!==i.field)return c.e("Detected faceted independent scales that union domain of multiple fields from different data sources.  We will use the first field.  The result view size may be incorrect."),t}else t=i.field;return c.e("Detected faceted independent scales that union domain of identical fields from different source detected.  We will assume that this is the same field from a different fork of the same data source.  However, if this is not case, the result view size maybe incorrect."),t}if(Object(h.d)(e)){c.e("Detected faceted independent scales that union domain of multiple fields from the same data source.  We will use the first field.  The result view size may be incorrect.");const t=e.fields[0];return Object(o.G)(t)?t:void 0}}function k(e,t){return function(e){const t=p.E(e.map(e=>{if(Object(h.b)(e)){const{sort:t}=e;return n.b(e,["sort"])}return e}),p.o),i=p.E(e.map(e=>{if(Object(h.b)(e)){const t=e.sort;return void 0===t||p.q(t)||("count"===t.op&&delete t.field,"ascending"===t.order&&delete t.order),t}}).filter(e=>void 0!==e),p.o);if(0===t.length)return;if(1===t.length){const t=e[0];if(Object(h.b)(t)&&i.length>0){let e=i[0];return i.length>1&&(c.e(c.b.MORE_THAN_ONE_SORT),e=!0),Object.assign({},t,{sort:e})}return t}const o=p.E(i.map(e=>p.q(e)?e:"count"===e.op?e:(c.e(c.b.domainSortDropped(e)),!0)),p.o);let a;1===o.length?a=o[0]:o.length>1&&(c.e(c.b.MORE_THAN_ONE_SORT),a=!0);const r=p.E(e.map(e=>Object(h.b)(e)?e.data:null),e=>e);if(1===r.length&&null!==r[0])return Object.assign({data:r[0],fields:t.map(e=>e.field)},a?{sort:a}:{});return Object.assign({fields:t},a?{sort:a}:{})}(e.component.scales[t].domains.map(t=>(Object(h.b)(t)&&(t.data=e.lookupDataSource(t.data)),t)))}},246:function(e,t,i){"use strict";i.d(t,"a",function(){return b});var n=i(1),o=i(199),a=i(19),r=i(284),s=i(15),l=i(18),d=i(391),c=i(267),f=i(125),u=i(5),p=i(61),h=i(94),g=i(67);function m(e){return"'"===e[0]&&"'"===e[e.length-1]||'"'===e[0]&&'"'===e[e.length-1]?e.slice(1,-1):e}class b extends g.a{clone(){return new b(null,Object(u.f)(this._parse))}constructor(e,t){super(e),this._parse=t}hash(){return`Parse ${Object(u.o)(this._parse)}`}static makeExplicit(e,t,i){let n={};const o=t.data;return o&&o.format&&o.format.parse&&(n=o.format.parse),this.makeWithAncestors(e,n,{},i)}static makeImplicitFromFilterTransform(e,t,i){const o={};return Object(d.a)(t.filter,e=>{if(Object(c.d)(e)){let t=null;Object(c.b)(e)?t=e.equal:Object(c.e)(e)?t=e.range[0]:Object(c.c)(e)&&(t=(e.oneOf||e.in)[0]),t&&(Object(r.b)(t)?o[e.field]="date":Object(n.D)(t)?o[e.field]="number":Object(n.G)(t)&&(o[e.field]="string")),e.timeUnit&&(o[e.field]="date")}}),0===Object(u.s)(o).length?null:this.makeWithAncestors(e,{},o,i)}static makeImplicitFromEncoding(e,t,i){const n={};function r(e){Object(s.r)(e)?n[e.field]="date":Object(s.m)(e)&&Object(o.e)(e.aggregate)?n[e.field]="number":Object(u.a)(e.field)>1?e.field in n||(n[e.field]="flatten"):Object(s.o)(e)&&Object(f.d)(e.sort)&&Object(u.a)(e.sort.field)>1&&(e.sort.field in n||(n[e.sort.field]="flatten"))}return(Object(p.g)(t)||Object(p.d)(t))&&t.forEachFieldDef((e,i)=>{if(Object(s.s)(e))r(e);else{const n=Object(a.B)(i);if(n===i)throw new Error(`Non-secondary channel ${i} must have type in its field definition ${JSON.stringify(e)}`);{const i=t.fieldDef(n);r(Object.assign({},e,{type:i.type}))}}}),this.makeWithAncestors(e,{},n,i)}static makeWithAncestors(e,t,i,n){for(const e of Object(u.s)(i)){const t=n.getWithExplicit(e);void 0!==t.value&&(t.explicit||t.value===i[e]||"derived"===t.value||"flatten"===i[e]?delete i[e]:l.e(l.b.differentParse(e,i[e],t.value)))}for(const e of Object(u.s)(t)){const i=n.get(e);void 0!==i&&(i===t[e]?delete t[e]:l.e(l.b.differentParse(e,t[e],i)))}const o=new h.a(t,i);n.copyAll(o);const a={};for(const e of Object(u.s)(o.combine())){const t=o.get(e);null!==t&&(a[e]=t)}return 0===Object(u.s)(a).length||n.parseNothing?null:new b(e,a)}get parse(){return this._parse}merge(e){this._parse=Object.assign({},this._parse,e.parse),e.remove()}assembleFormatParse(){const e={};for(const t of Object(u.s)(this._parse)){const i=this._parse[t];1===Object(u.a)(t)&&(e[t]=i)}return e}producedFields(){return new Set(Object(u.s)(this._parse))}dependentFields(){return new Set(Object(u.s)(this._parse))}assembleTransforms(e=!1){return Object(u.s)(this._parse).filter(t=>!e||Object(u.a)(t)>1).map(e=>{const t=function(e,t){const i=Object(u.b)(e);if("number"===t)return`toNumber(${i})`;if("boolean"===t)return`toBoolean(${i})`;if("string"===t)return`toString(${i})`;if("date"===t)return`toDate(${i})`;if("flatten"===t)return i;if(0===t.indexOf("date:"))return`timeParse(${i},'${m(t.slice(5,t.length))}')`;if(0===t.indexOf("utc:"))return`utcParse(${i},'${m(t.slice(4,t.length))}')`;return l.e(l.b.unrecognizedParse(t)),null}(e,this._parse[e]);return t?{type:"formula",expr:t,as:Object(u.y)(e)}:null}).filter(e=>null!==e)}}},253:function(e,t,i){"use strict";function n(e){return!!e.mark}i.d(t,"a",function(){return n})},267:function(e,t,i){"use strict";i.d(t,"f",function(){return r}),i.d(t,"b",function(){return s}),i.d(t,"e",function(){return u}),i.d(t,"c",function(){return p}),i.d(t,"d",function(){return h}),i.d(t,"a",function(){return m}),i.d(t,"g",function(){return b});var n=i(1),o=i(15),a=i(205);function r(e){return e&&e.selection}function s(e){return e&&!!e.field&&void 0!==e.equal}function l(e){return e&&!!e.field&&void 0!==e.lt}function d(e){return e&&!!e.field&&void 0!==e.lte}function c(e){return e&&!!e.field&&void 0!==e.gt}function f(e){return e&&!!e.field&&void 0!==e.gte}function u(e){return!!(e&&e.field&&Object(n.z)(e.range)&&2===e.range.length)}function p(e){return e&&!!e.field&&(Object(n.z)(e.oneOf)||Object(n.z)(e.in))}function h(e){return p(e)||s(e)||u(e)||l(e)||c(e)||d(e)||f(e)}function g(e,t){return Object(o.C)(e,{timeUnit:t,time:!0})}function m(e,t=!0){const{field:i,timeUnit:n}=e,r=n?"time("+Object(a.a)(n,i)+")":Object(o.D)(e,{expr:"datum"});if(s(e))return r+"==="+g(e.equal,n);if(l(e)){return`${r}<${g(e.lt,n)}`}if(c(e)){return`${r}>${g(e.gt,n)}`}if(d(e)){return`${r}<=${g(e.lte,n)}`}if(f(e)){return`${r}>=${g(e.gte,n)}`}if(p(e))return`indexof([${function(e,t){return e.map(e=>g(e,t))}(e.oneOf,n).join(",")}], ${r}) !== -1`;if(function(e){return e&&!!e.field&&void 0!==e.valid}(e))return e.valid?`${r}!==null&&!isNaN(${r})`:`${r}===null||isNaN(${r})`;if(u(e)){const i=e.range[0],o=e.range[1];if(null!==i&&null!==o&&t)return"inrange("+r+", ["+g(i,n)+", "+g(o,n)+"])";const a=[];return null!==i&&a.push(`${r} >= ${g(i,n)}`),null!==o&&a.push(`${r} <= ${g(o,n)}`),a.length>0?a.join(" && "):"true"}throw new Error(`Invalid field predicate: ${JSON.stringify(e)}`)}function b(e){return h(e)&&e.timeUnit?Object.assign({},e,{timeUnit:Object(a.h)(e.timeUnit)}):e}},270:function(e,t,i){"use strict";i.d(t,"a",function(){return n});class n{constructor(e){Object.defineProperty(this,"signal",{enumerable:!0,get:e})}static fromName(e,t){return new n(()=>e(t))}}},284:function(e,t,i){"use strict";i.d(t,"b",function(){return s}),i.d(t,"a",function(){return u});var n=i(1),o=i(18),a=i(5);const r=2006;function s(e){return!!(e&&(e.year||e.quarter||e.month||e.date||e.day||e.hours||e.minutes||e.seconds||e.milliseconds))}const l=["january","february","march","april","may","june","july","august","september","october","november","december"],d=l.map(e=>e.substr(0,3)),c=["sunday","monday","tuesday","wednesday","thursday","friday","saturday"],f=c.map(e=>e.substr(0,3));function u(e,t=!1){const i=[];if(t&&void 0!==e.day&&Object(a.s)(e).length>1&&(o.e(o.b.droppedDay(e)),delete(e=Object(a.f)(e)).day),void 0!==e.year?i.push(e.year):void 0!==e.day?i.push(r):i.push(0),void 0!==e.month){const a=t?function(e){if(Object(n.D)(e))return(e-1).toString();{const t=e.toLowerCase(),i=l.indexOf(t);if(-1!==i)return i+"";const n=t.substr(0,3),a=d.indexOf(n);if(-1!==a)return a+"";throw new Error(o.b.invalidTimeUnit("month",e))}}(e.month):e.month;i.push(a)}else if(void 0!==e.quarter){const a=t?function(e){if(Object(n.D)(e))return e>4&&o.e(o.b.invalidTimeUnit("quarter",e)),(e-1).toString();throw new Error(o.b.invalidTimeUnit("quarter",e))}(e.quarter):e.quarter;i.push(a+"*3")}else i.push(0);if(void 0!==e.date)i.push(e.date);else if(void 0!==e.day){const a=t?function(e){if(Object(n.D)(e))return e%7+"";{const t=e.toLowerCase(),i=c.indexOf(t);if(-1!==i)return i+"";const n=t.substr(0,3),a=f.indexOf(n);if(-1!==a)return a+"";throw new Error(o.b.invalidTimeUnit("day",e))}}(e.day):e.day;i.push(a+"+1")}else i.push(1);for(const t of["hours","minutes","seconds","milliseconds"])void 0!==e[t]?i.push(e[t]):i.push(0);return e.utc?`utc(${i.join(", ")})`:`datetime(${i.join(", ")})`}},292:function(e,t,i){"use strict";i.d(t,"a",function(){return a}),i.d(t,"b",function(){return r});var n=i(195);class o{constructor(){this._mutated=!1}setMutated(){this._mutated=!0}get mutatedFlag(){return this._mutated}}class a extends o{constructor(){super(),this._continue=!1}setContinue(){this._continue=!0}get continueFlag(){return this._continue}get flags(){return{continueFlag:this.continueFlag,mutatedFlag:this.mutatedFlag}}set flags({continueFlag:e,mutatedFlag:t}){e&&this.setContinue(),t&&this.setMutated()}reset(){}optimizeNextFromLeaves(e){if(e instanceof n.a)return!1;const t=e.parent,{continueFlag:i}=this.run(e);return i&&this.optimizeNextFromLeaves(t),this.mutatedFlag}}class r extends o{}},304:function(e,t,i){"use strict";function n(e){return a(e)||r(e)||o(e)}function o(e){return void 0!==e.concat}function a(e){return void 0!==e.vconcat}function r(e){return void 0!==e.hconcat}i.d(t,"a",function(){return n}),i.d(t,"b",function(){return o}),i.d(t,"d",function(){return a}),i.d(t,"c",function(){return r})},307:function(e,t,i){"use strict";i.d(t,"a",function(){return z}),i.d(t,"b",function(){return F});var n=i(99),o=i(18),a=i(182),r=i(5),s=i(61),l=i(76),d=i(338),c=i(339),f=i(202),u=i(67),p=i(340),h=i(502),g=i(777),m=i(778),b=i(246),y=i(779),v=i(780),_=i(528),w=i(580),x=i(1478),O=i(333),j=i(1479),k=i(784),T=i(785),D=i(195),$=i(393),S=i(332),C=i(430);function z(e,t){for(const i of t){const t=i.data;if(Object(n.c)(e)&&Object(n.c)(t)){const n=e.values,o=t.values;if(Object(r.d)(n,o))return i}else if(Object(n.e)(e)&&Object(n.e)(t)){if(e.url===t.url)return i}else if(Object(n.d)(e)&&e.name===i.dataName)return i}return null}function F(e){let t=function(e,t){if(e.data||!e.parent){const i=z(e.data,t);if(i)return i.data.format=Object(r.u)({},e.data.format,i.data.format),i;{const i=new D.a(e.data);return t.push(i),i}}return e.parent.component.data.facetRoot?e.parent.component.data.facetRoot:e.parent.component.data.main}(e,e.component.data.sources);const{outputNodes:i,outputNodeRefCounts:F}=e.component.data,A=e.parent?e.parent.component.data.ancestorParse.clone():new x.a;e.data&&e.data.format&&null===e.data.format.parse&&(A.parseNothing=!0),t=b.a.makeExplicit(t,e,A)||t,Object(l.h)(e)&&(Object(s.g)(e)||Object(s.e)(e))&&(t=new _.a(t));const P=e.parent&&Object(s.e)(e.parent);(Object(s.g)(e)||Object(s.d)(e))&&P&&(t=c.a.makeFromEncoding(t,e)||t),e.transforms.length>0&&(t=function(e,t,i){let n=0;for(const r of t.transforms){let s,u=void 0;if(Object(a.c)(r))s=e=new f.a(e,r),u="derived";else if(Object(a.d)(r))s=e=b.a.makeImplicitFromFilterTransform(e,r,i)||e,e=new h.a(e,t,r.filter);else if(Object(a.b)(r))s=e=c.a.makeFromTransform(e,r,t),u="number";else if(Object(a.m)(r))s=e=S.a.makeFromTransform(e,r),u="date",void 0===i.getWithExplicit(r.field).value&&(e=new b.a(e,{[r.field]:u}),i.set(r.field,u,!1));else if(Object(a.a)(r))s=e=d.a.makeFromTransform(e,r),u="number",Object(l.h)(t)&&(e=new _.a(e));else if(Object(a.j)(r))s=e=k.a.make(e,t,r,n++),u="derived";else if(Object(a.n)(r))s=e=new C.a(e,r),u="number";else if(Object(a.i)(r))s=e=new O.a(e,r),u="number";else if(Object(a.l)(r))s=e=$.a.makeFromTransform(e,r),u="derived";else if(Object(a.f)(r))s=e=new m.a(e,r),u="derived";else if(Object(a.e)(r))s=e=new g.a(e,r),u="derived";else if(Object(a.k)(r))e=new T.a(e,r);else{if(!Object(a.g)(r)){o.e(o.b.invalidTransformIgnored(r));continue}s=e=w.a.makeFromTransform(e,r),u="derived"}if(s&&void 0!==u)for(const e of s.producedFields())i.set(e,u,!1)}return e}(t,e,A)),t=b.a.makeImplicitFromEncoding(t,e,A)||t,Object(s.g)(e)&&(t=y.a.parseAll(t,e),t=v.a.parseAll(t,e)),(Object(s.g)(e)||Object(s.d)(e))&&(P||(t=c.a.makeFromEncoding(t,e)||t),t=S.a.makeFromEncoding(t,e)||t,t=f.a.parseAllForSortIndex(t,e));const N=e.getName(n.b),I=new u.b(t,N,n.b,F);if(i[N]=I,t=I,Object(s.g)(e)){const i=d.a.makeFromEncoding(t,e);i&&(t=i,Object(l.h)(e)&&(t=new _.a(t))),t=w.a.makeFromEncoding(t,e)||t,t=$.a.makeFromEncoding(t,e)||t}const q=e.getName(n.a),E=new u.b(t,q,n.a,F);i[q]=E,t=E;let L=null;if(Object(s.d)(e)){const n=e.getName("facet");t=f.a.parseAllForSortIndex(t,e),t=Object(j.a)(t,e.facet)||t,L=new p.a(t,e,n,E.getSource()),i[n]=L,t=L}return Object.assign({},e.component.data,{outputNodes:i,outputNodeRefCounts:F,raw:I,main:E,facetRoot:L,ancestorParse:A})}},308:function(e,t,i){"use strict";i.d(t,"c",function(){return r}),i.d(t,"d",function(){return s}),i.d(t,"b",function(){return d}),i.d(t,"a",function(){return c}),i.d(t,"e",function(){return u});var n=i(41),o=i(83),a=i(94);function r(e){c(e);const t=e.component.layoutSize;t.setWithExplicit("width",f(e,"width")),t.setWithExplicit("height",f(e,"height"))}const s=r,l={vconcat:"width",hconcat:"height"};function d(e){c(e);const t=e.component.layoutSize,i=l[e.concatType];i&&t.setWithExplicit(i,f(e,i))}function c(e){for(const t of e.children)t.parseLayoutSize()}function f(e,t){const i="width"===t?"x":"y",n=e.component.resolve;let o;for(const r of e.children){const e=r.component.layoutSize.getWithExplicit(t),s=n.scale[i];if("independent"===s&&"range-step"===e.value){o=void 0;break}if(o){if("independent"===s&&o.value!==e.value){o=void 0;break}o=Object(a.e)(o,e,t,"")}else o=e}if(o){for(const i of e.children)e.renameSignal(i.getName(t),e.getName(t)),i.component.layoutSize.set(t,"merged",!1);return o}return{explicit:!1,value:void 0}}function u(e){const t=e.component.layoutSize;if(!t.explicit.width){const i=p(e,"width");t.set("width",i,!1)}if(!t.explicit.height){const i=p(e,"height");t.set("height",i,!1)}}function p(e,t){const i="width"===t?"x":"y",a=e.config,r=e.getScaleComponent(i);if(r){const e=r.get("type"),i=r.get("range");return Object(n.g)(e)&&Object(o.f)(i)?"range-step":a.view[t]}return e.hasProjection?a.view[t]:"width"===t&&"text"===e.mark?a.scale.textXRangeStep:a.scale.rangeStep||n.e.rangeStep}},314:function(e,t,i){"use strict";i.d(t,"a",function(){return n}),i.d(t,"c",function(){return o}),i.d(t,"b",function(){return a});const n="_vgsid_";function o(e){return"interval"===e.type}const a={single:{on:"click",fields:[n],resolve:"global",empty:"all"},multi:{on:"click",fields:[n],toggle:"event.shiftKey",resolve:"global",empty:"all"},interval:{on:"[mousedown, window:mouseup] > window:mousemove!",encodings:["x","y"],translate:"[mousedown, window:mouseup] > window:mousemove!",zoom:"wheel!",mark:{fill:"#333",fillOpacity:.125,stroke:"white"},resolve:"global"}}},315:function(e,t,i){"use strict";i.d(t,"a",function(){return n}),i.d(t,"b",function(){return o});const n=["row","column"],o=["header","footer"]},319:function(e,t,i){"use strict";i.d(t,"g",function(){return s}),i.d(t,"c",function(){return l}),i.d(t,"f",function(){return d}),i.d(t,"d",function(){return c}),i.d(t,"e",function(){return f}),i.d(t,"a",function(){return u}),i.d(t,"b",function(){return h});var n=i(19),o=i(15),a=i(41),r=i(5);function s(e,t){const i=e.values;if(i)return Object(o.B)(t,i)}function l(e){return"line"===e?"stroke":"circle"}function d(e){const{legend:t}=e;return Object(r.m)(t.type,c(e))}function c({channel:e,timeUnit:t,scaleType:i,alwaysReturn:o}){if(Object(n.E)(e)){if(Object(r.c)(["quarter","month","day"],t))return"symbol";if(Object(a.h)(i))return o?"gradient":void 0}return o?"symbol":void 0}function f({legend:e,legendConfig:t,timeUnit:i,channel:n,scaleType:o}){const a=Object(r.m)(e.orient,t.orient,"right"),s=d({legend:e,channel:n,timeUnit:i,scaleType:o,alwaysReturn:!0});return Object(r.m)(e.direction,t[s?"gradientDirection":"symbolDirection"],function(e,t){switch(e){case"top":case"bottom":return"horizontal";case"left":case"right":case"none":case void 0:return;default:return"gradient"===t?"horizontal":void 0}}(a,s))}function u({legend:e,legendConfig:t,model:i,channel:n,scaleType:o}){const{gradientHorizontalMaxLength:a,gradientHorizontalMinLength:s,gradientVerticalMaxLength:l,gradientVerticalMinLength:d}=t;if("horizontal"===f({legend:e,legendConfig:t,channel:n,scaleType:o})){const n=Object(r.m)(e.orient,t.orient);return"top"===n||"bottom"===n?p(i,"width",s,a):s}return p(i,"height",d,l)}function p(e,t,i,n){return{signal:`clamp(${e.getSizeSignalRef(t).signal}, ${i}, ${n})`}}function h(e){if(Object(r.c)(["quantile","threshold","log"],e))return"greedy"}},322:function(e,t,i){"use strict";i.d(t,"e",function(){return y}),i.d(t,"c",function(){return v}),i.d(t,"h",function(){return _}),i.d(t,"f",function(){return w}),i.d(t,"i",function(){return x}),i.d(t,"g",function(){return O}),i.d(t,"d",function(){return j}),i.d(t,"a",function(){return k}),i.d(t,"b",function(){return T});var n=i(99),o=i(5),a=i(338),r=i(339),s=i(67),l=i(340),d=i(502),c=i(246),f=i(333),u=i(429),p=i(292),h=i(195),g=i(393),m=i(332),b=i(430);class y extends p.a{run(e){const t=e.parent;if(e instanceof c.a){if(t instanceof h.a)return this.flags;if(t.numChildren()>1)return this.setContinue(),this.flags;if(t instanceof c.a)this.setMutated(),t.merge(e);else{if(Object(o.i)(t.producedFields(),e.dependentFields()))return this.setContinue(),this.flags;this.setMutated(),e.swapWithParent()}}return this.setContinue(),this.flags}}class v extends p.b{mergeNodes(e,t){const i=t.shift();for(const n of t)e.removeChild(n),n.parent=i,n.remove()}run(e){const t=e.children.map(e=>e.hash()),i={};for(let n=0;n<t.length;n++)void 0===i[t[n]]?i[t[n]]=[e.children[n]]:i[t[n]].push(e.children[n]);for(const t of Object(o.s)(i))i[t].length>1&&(this.setMutated(),this.mergeNodes(e,i[t]));for(const t of e.children)this.run(t);return this.mutatedFlag}}class _ extends p.a{run(e){return e instanceof s.b||e.numChildren()>0||e instanceof l.a?this.flags:(this.setMutated(),e.remove(),this.flags)}}class w extends p.a{constructor(){super(...arguments),this.fields=new Set}run(e){if(this.setContinue(),e instanceof m.a){const t=e.producedFields();Object(o.n)(t,this.fields)?(this.setMutated(),e.remove()):this.fields=new Set([...this.fields,...t])}return this.flags}reset(){this.fields.clear()}}function x(e){if(e instanceof l.a)if(1!==e.numChildren()||e.children[0]instanceof s.b){const i=e.model.component.data.main;!function e(t){if(t instanceof s.b&&t.type===n.a&&1===t.numChildren()){const i=t.children[0];i instanceof l.a||(i.swapWithParent(),e(t))}}(i);const r=(t=e,function e(i){if(!(i instanceof l.a)){const n=i.clone();if(n instanceof s.b){const e=u.a+n.getSource();n.setSource(e),t.model.component.data.outputNodes[e]=n}else(n instanceof a.a||n instanceof g.a||n instanceof b.a||n instanceof f.a)&&n.addDimensions(t.fields);return Object(o.l)(i.children.map(e)).forEach(e=>e.parent=n),[n]}return Object(o.l)(i.children.map(e))}),d=Object(o.l)(e.children.map(r));for(const e of d)e.parent=i}else{const t=e.children[0];(t instanceof a.a||t instanceof g.a||t instanceof b.a||t instanceof f.a)&&t.addDimensions(e.fields),t.swapWithParent(),x(e)}else e.children.map(x);var t}class O extends p.b{run(e){e instanceof s.b&&!e.isRequired()&&(this.setMutated(),e.remove());for(const t of e.children)this.run(t);return this.mutatedFlag}}class j extends p.a{run(e){const t=e.parent,i=t.children.filter(e=>e instanceof c.a);if(i.length>1){const e={};for(const t of i){const i=t.parse;for(const t of Object(o.s)(i))void 0===e[t]?e[t]=i[t]:e[t]!==i[t]&&delete e[t]}if(0!==Object(o.s)(e).length){this.setMutated();const n=new c.a(t,e);for(const a of i){for(const t of Object(o.s)(e))delete a.parse[t];t.removeChild(a),a.parent=n,0===Object(o.s)(a.parse).length&&a.remove()}}}return this.setContinue(),this.flags}}class k extends p.a{run(e){const t=e.parent,i=t.children.filter(e=>e instanceof a.a),n={};for(const e of i){const t=Object(o.o)(Object(o.s)(e.groupBy).sort());t in n||(n[t]=[]),n[t].push(e)}for(const e of Object(o.s)(n)){const i=n[e];if(i.length>1){const e=i.pop();for(const n of i)e.merge(n)&&(t.removeChild(n),n.parent=e,n.remove(),this.setMutated())}}return this.setContinue(),this.flags}}class T extends p.a{constructor(e){super(),this.model=e}run(e){const t=e.parent,i=!(t instanceof h.a||t instanceof d.a||t instanceof c.a),n=[],a=[];for(const e of t.children)e instanceof r.a&&(i&&!Object(o.i)(t.producedFields(),e.dependentFields())?n.push(e):a.push(e));if(n.length>0){const e=n.pop();for(const t of n)e.merge(t,this.model);this.setMutated(),t instanceof r.a?t.merge(e,this.model):e.swapWithParent()}if(a.length>1){const e=a.pop();for(const t of a)e.merge(t,this.model);this.setMutated()}return this.setContinue(),this.flags}}},331:function(e,t,i){"use strict";i.r(t),i.d(t,"version",function(){return s});var n=i(1451),o=i(717);i.d(t,"normalize",function(){return o.a});var a=i(1258);i.d(t,"compile",function(){return a.a});var r=i(1259);i.d(t,"extractTransforms",function(){return r.a});const s=n.version},332:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(15),o=i(205),a=i(5),r=i(67);class s extends r.a{constructor(e,t){super(e),this.formula=t}clone(){return new s(null,Object(a.f)(this.formula))}static makeFromEncoding(e,t){const i=t.reduceFieldDef((e,t)=>{if(t.timeUnit){const i=Object(n.D)(t,{forAs:!0});e[i]={as:i,timeUnit:t.timeUnit,field:t.field}}return e},{});return 0===Object(a.s)(i).length?null:new s(e,i)}static makeFromTransform(e,t){return new s(e,{[t.field]:{as:t.as,timeUnit:t.timeUnit,field:t.field}})}merge(e){this.formula=Object.assign({},this.formula,e.formula),e.remove()}producedFields(){return new Set(Object(a.G)(this.formula).map(e=>e.as))}dependentFields(){return new Set(Object(a.G)(this.formula).map(e=>e.field))}hash(){return`TimeUnit ${Object(a.o)(this.formula)}`}assemble(){return Object(a.G)(this.formula).map(e=>({type:"formula",as:e.as,expr:Object(o.a)(e.timeUnit,e.field)}))}}},333:function(e,t,i){"use strict";i.d(t,"a",function(){return r});var n=i(15),o=i(5),a=i(67);class r extends a.a{constructor(e,t){super(e),this.transform=t}clone(){return new r(null,Object(o.f)(this.transform))}addDimensions(e){this.transform.groupby=Object(o.E)(this.transform.groupby.concat(e),e=>e)}dependentFields(){const e=new Set;return this.transform.groupby.forEach(t=>e.add(t)),this.transform.joinaggregate.map(e=>e.field).filter(e=>void 0!==e).forEach(t=>e.add(t)),e}producedFields(){return new Set(this.transform.joinaggregate.map(this.getDefaultName))}getDefaultName(e){return e.as||Object(n.D)(e)}hash(){return`JoinAggregateTransform ${Object(o.o)(this.transform)}`}assemble(){const e=[],t=[],i=[];for(const n of this.transform.joinaggregate)t.push(n.op),i.push(this.getDefaultName(n)),e.push(void 0===n.field?null:n.field);const n=this.transform.groupby;return Object.assign({type:"joinaggregate",as:i,ops:t,fields:e},void 0!==n?{groupby:n}:{})}}},338:function(e,t,i){"use strict";i.d(t,"a",function(){return d});var n=i(62),o=i(19),a=i(15),r=i(18),s=i(5),l=i(67);class d extends l.a{constructor(e,t,i){super(e),this.dimensions=t,this.measures=i}clone(){return new d(null,new Set(this.dimensions),Object(s.f)(this.measures))}get groupBy(){return this.dimensions}static makeFromEncoding(e,t){let i=!1;t.forEachFieldDef(e=>{e.aggregate&&(i=!0)});const r={},l=new Set;return i?(t.forEachFieldDef((e,i)=>{const{aggregate:s,field:d}=e;s?"count"===s?(r["*"]=r["*"]||{},r["*"].count=new Set([Object(a.D)(e,{forAs:!0})])):(r[d]=r[d]||{},r[d][s]=new Set([Object(a.D)(e,{forAs:!0})]),Object(o.H)(i)&&"unaggregated"===t.scaleDomain(i)&&(r[d].min=new Set([Object(a.D)({field:d,aggregate:"min"},{forAs:!0})]),r[d].max=new Set([Object(a.D)({field:d,aggregate:"max"},{forAs:!0})]))):function(e,t,i,r){if(Object(a.s)(i)&&Object(n.e)(i.bin))e.add(Object(a.D)(i,{})),e.add(Object(a.D)(i,{binSuffix:"end"})),Object(a.a)(i,t)&&e.add(Object(a.D)(i,{binSuffix:"range"}));else if(Object(o.F)(t)){const i=Object(o.C)(t);e.add(r.getName(i))}else e.add(Object(a.D)(i))}(l,i,e,t)}),l.size+Object(s.s)(r).length===0?null:new d(e,l,r)):null}static makeFromTransform(e,t){const i=new Set,n={};for(const e of t.aggregate){const{op:t,field:i,as:o}=e;t&&("count"===t?(n["*"]=n["*"]||{},n["*"].count=new Set([o||Object(a.D)(e,{forAs:!0})])):(n[i]=n[i]||{},n[i][t]=new Set([o||Object(a.D)(e,{forAs:!0})])))}for(const e of t.groupby||[])i.add(e);return i.size+Object(s.s)(n).length===0?null:new d(e,i,n)}merge(e){return Object(s.A)(this.dimensions,e.dimensions)?(function(e,t){for(const i of Object(s.s)(t)){const n=t[i];for(const t of Object(s.s)(n))i in e?e[i][t]=new Set([...e[i][t]||[],...n[t]]):e[i]={[t]:n[t]}}}(this.measures,e.measures),!0):(r.a("different dimensions, cannot merge"),!1)}addDimensions(e){e.forEach(this.dimensions.add,this.dimensions)}dependentFields(){return new Set([...this.dimensions,...Object(s.s)(this.measures)])}producedFields(){const e=new Set;for(const t of Object(s.s)(this.measures))for(const i of Object(s.s)(this.measures[t])){const n=this.measures[t][i];0===n.size?e.add(`${i}_${t}`):n.forEach(e.add,e)}return e}hash(){return`Aggregate ${Object(s.o)({dimensions:this.dimensions,measures:this.measures})}`}assemble(){const e=[],t=[],i=[];for(const n of Object(s.s)(this.measures))for(const o of Object(s.s)(this.measures[n]))for(const a of this.measures[n][o])i.push(a),e.push(o),t.push("*"===n?null:Object(s.z)(n));return{type:"aggregate",groupby:[...this.dimensions],ops:e,fields:t,as:i}}}},339:function(e,t,i){"use strict";i.d(t,"a",function(){return f});var n=i(1),o=i(62),a=i(15),r=i(5),s=i(73),l=i(61),d=i(67);function c(e,t,i){let r;r=function(e){return"as"in e}(e)?Object(n.G)(e.as)?[e.as,`${e.as}_end`]:[e.as[0],e.as[1]]:[Object(a.D)(e,{forAs:!0}),Object(a.D)(e,{binSuffix:"end",forAs:!0})];const s=Object(a.v)(t,void 0)||{},l=function(e,t){return`${Object(o.b)(e)}_${t}`}(s,e.field),{signal:d,extentSignal:c}=function(e,t){return{signal:e.getName(`${t}_bins`),extentSignal:e.getName(`${t}_extent`)}}(i,l);return{key:l,binComponent:Object.assign({bin:s,field:e.field,as:r},d?{signal:d}:{},c?{extentSignal:c}:{})}}class f extends d.a{constructor(e,t){super(e),this.bins=t}clone(){return new f(null,Object(r.f)(this.bins))}static makeFromEncoding(e,t){const i=t.reduceFieldDef((e,i,n)=>{if(Object(a.s)(i)&&Object(o.e)(i.bin)){const{key:o,binComponent:r}=c(i,i.bin,t);e[o]=Object.assign({},r,e[o],function(e,t,i,n){if(Object(a.a)(t,i)){const o=Object(l.g)(e)&&(e.axis(i)||e.legend(i))||{},r=Object(a.D)(t,{expr:"datum"}),d=Object(a.D)(t,{expr:"datum",binSuffix:"end"});return{formulaAs:Object(a.D)(t,{binSuffix:"range",forAs:!0}),formula:Object(s.b)(r,d,o.format,n)}}return{}}(t,i,n,t.config))}return e},{});return 0===Object(r.s)(i).length?null:new f(e,i)}static makeFromTransform(e,t,i){const{key:n,binComponent:o}=c(t,t.bin,i);return new f(e,{[n]:o})}merge(e,t){for(const i of Object(r.s)(e.bins))i in this.bins?t.renameSignal(e.bins[i].signal,this.bins[i].signal):this.bins[i]=e.bins[i];for(const t of e.children)e.removeChild(t),t.parent=this;e.remove()}producedFields(){return new Set(Object(r.l)(Object(r.G)(this.bins).map(e=>e.as)))}dependentFields(){return new Set(Object(r.G)(this.bins).map(e=>e.field))}hash(){return`Bin ${Object(r.o)(this.bins)}`}assemble(){return Object(r.l)(Object(r.G)(this.bins).map(e=>{const t=[],i=Object.assign({type:"bin",field:e.field,as:e.as,signal:e.signal},e.bin);return!e.bin.extent&&e.extentSignal&&(t.push({type:"extent",field:e.field,signal:e.extentSignal}),i.extent={signal:e.extentSignal}),t.push(i),e.formula&&t.push({type:"formula",expr:e.formula,as:e.formulaAs}),t}))}}},340:function(e,t,i){"use strict";i.d(t,"a",function(){return m});var n=i(1),o=i(62),a=i(19),r=i(15),s=i(18),l=i(41),d=i(125),c=i(5),f=i(83),u=i(315),p=i(243),h=i(202),g=i(67);class m extends g.a{constructor(e,t,i,s){super(e),this.model=t,this.name=i,this.data=s;for(const e of a.e){const i=t.facet[e];if(i){const{bin:a,sort:s}=i;this[e]=Object.assign({name:t.getName(`${e}_domain`),fields:[Object(r.D)(i),...Object(o.e)(a)?[Object(r.D)(i,{binSuffix:"end"})]:[]]},Object(d.d)(s)?{sortField:s}:Object(n.z)(s)?{sortIndexField:Object(h.b)(i,e)}:{})}}this.childModel=t.child}hash(){let e="Facet";for(const t of a.e)this[t]&&(e+=` ${t.charAt(0)}:${Object(c.o)(this[t])}`);return e}get fields(){const e=[];for(const t of a.e)this[t]&&this[t].fields&&e.push(...this[t].fields);return e}getSource(){return this.name}getChildIndependentFieldsWithStep(){const e={};for(const t of["x","y"]){const i=this.childModel.component.scales[t];if(i&&!i.merged){const n=i.get("type"),o=i.get("range");if(Object(l.g)(n)&&Object(f.f)(o)){const i=Object(p.a)(this.childModel,t),n=Object(p.b)(i);n?e[t]=n:s.e("Unknown field for ${channel}.  Cannot calculate view size.")}}}return e}assembleRowColumnHeaderData(e,t,i){const n={row:"y",column:"x"}[e],o=[],a=[],s=[];i&&i[n]&&(t?(o.push(`distinct_${i[n]}`),a.push("max")):(o.push(i[n]),a.push("distinct")),s.push(`distinct_${i[n]}`));const{sortField:l,sortIndexField:c}=this[e];if(l){const{op:e=d.a,field:t}=l;o.push(t),a.push(e),s.push(Object(r.D)(l,{forAs:!0}))}else c&&(o.push(c),a.push("max"),s.push(c));return{name:this[e].name,source:t||this.data,transform:[Object.assign({type:"aggregate",groupby:this[e].fields},o.length?{fields:o,ops:a,as:s}:{})]}}assembleFacetHeaderData(e){const{columns:t}=this.model.layout,{layoutHeaders:i}=this.model.component,n=[],o={};for(const e of u.a){for(const t of u.b){const n=i[e]&&i[e][t]||[];for(const t of n)if(t.axes&&t.axes.length>0){o[e]=!0;break}}if(o[e]){const i=`length(data("${this.facet.name}"))`,o="row"===e?t?{signal:`ceil(${i} / ${t})`}:1:t?{signal:`min(${i}, ${t})`}:{signal:i};n.push({name:`${this.facet.name}_${e}`,transform:[{type:"sequence",start:0,stop:o}]})}}const{row:a,column:r}=o;return(a||r)&&n.unshift(this.assembleRowColumnHeaderData("facet",null,e)),n}assemble(){const e=[];let t=null;const i=this.getChildIndependentFieldsWithStep(),{column:n,row:o,facet:r}=this;if(n&&o&&(i.x||i.y)){t=`cross_${this.column.name}_${this.row.name}`;const n=[].concat(i.x||[],i.y||[]),o=n.map(()=>"distinct");e.push({name:t,source:this.data,transform:[{type:"aggregate",groupby:this.fields,fields:n,ops:o}]})}for(const n of[a.c,a.q])this[n]&&e.push(this.assembleRowColumnHeaderData(n,t,i));if(r){const t=this.assembleFacetHeaderData(i);t&&e.push(...t)}return e}}},37:function(e,t,i){"use strict";i.d(t,"a",function(){return a}),i.d(t,"b",function(){return r}),i.d(t,"f",function(){return s}),i.d(t,"g",function(){return l}),i.d(t,"i",function(){return d}),i.d(t,"j",function(){return c}),i.d(t,"l",function(){return f}),i.d(t,"m",function(){return u}),i.d(t,"n",function(){return p}),i.d(t,"c",function(){return h}),i.d(t,"k",function(){return g}),i.d(t,"e",function(){return m}),i.d(t,"v",function(){return y}),i.d(t,"h",function(){return v}),i.d(t,"u",function(){return _}),i.d(t,"d",function(){return w}),i.d(t,"o",function(){return x}),i.d(t,"p",function(){return O}),i.d(t,"r",function(){return j}),i.d(t,"q",function(){return k}),i.d(t,"s",function(){return T}),i.d(t,"t",function(){return D});var n=i(1),o=i(5);const a="area",r="bar",s="line",l="point",d="rect",c="rule",f="text",u="tick",p="trail",h="circle",g="square",m="geoshape",b={area:1,bar:1,line:1,point:1,text:1,tick:1,trail:1,rect:1,geoshape:1,rule:1,circle:1,square:1};function y(e){return Object(o.c)(["line","area","trail"],e)}const v=Object(o.j)(b);function _(e){return e.type}Object(n.ab)(v);const w=[].concat(["stroke","strokeWidth","strokeDash","strokeDashOffset","strokeOpacity","strokeJoin","strokeMiterLimit"],["fill","fillOpacity"]),x=["filled","color","tooltip"],O={area:["line","point"],bar:["binSpacing","continuousBandSize","discreteBandSize"],line:["point"],text:["shortTimeLabels"],tick:["bandSize","thickness"]},j={color:"#4c78a8",tooltip:{content:"encoding"}},k={binSpacing:1,continuousBandSize:5},T={thickness:1};function D(e){return _(e)?e.type:e}},377:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(37),o=i(253);class a{constructor(e,t){this.name=e,this.run=t}hasMatchingType(e,t){return!!Object(o.a)(e)&&Object(n.t)(e.mark)===this.name}}},378:function(e,t,i){"use strict";i.d(t,"a",function(){return c});var n=i(18),o=i(158),a=i(1457),r=i(782),s=i(1481),l=i(1486),d=i(788);function c(e,t,i,c,f,u,p){if(Object(o.b)(e))return new r.a(e,t,i,f,u);if(Object(o.d)(e))return new s.a(e,t,i,c,f,u,p);if(Object(o.f)(e))return new d.a(e,t,i,c,f,u,p);if(Object(o.e)(e))return new l.a(e,t,i,f,u);if(Object(o.a)(e))return new a.a(e,t,i,f,u);throw new Error(n.b.INVALID_SPEC)}},379:function(e,t,i){"use strict";i.d(t,"b",function(){return d}),i.d(t,"c",function(){return c}),i.d(t,"a",function(){return f});var n=i(57),o=i(1),a=i(403),r=i(19),s=i(15),l=i(5);function d(e,t,i,r={header:!1}){const d=e.combine(),{orient:c,scale:f,title:u,zindex:p}=d,h=n.b(d,["orient","scale","title","zindex"]);if(Object(l.s)(h).forEach(e=>{const i=a.b[e];i&&i!==t&&"both"!==i&&delete h[e]}),"grid"===t){if(!h.grid)return;if(h.encode){const{grid:e}=h.encode;h.encode=Object.assign({},e?{grid:e}:{}),0===Object(l.s)(h.encode).length&&delete h.encode}return Object.assign({scale:f,orient:c},h,{domain:!1,labels:!1,maxExtent:0,minExtent:0,ticks:!1,zindex:Object(l.m)(p,0)})}{if(!r.header&&e.mainExtracted)return;if(h.encode){for(const t of a.a)e.hasAxisPart(t)||delete h.encode[t];0===Object(l.s)(h.encode).length&&delete h.encode}const t=function(e,t){return Object(o.z)(e)?e.map(e=>Object(s.b)(e,t)).join(", "):e}(u,i);return Object.assign({scale:f,orient:c,grid:!1},t?{title:t}:{},h,{zindex:Object(l.m)(p,1)})}}function c(e){const{axes:t}=e.component;for(const i of r.p)if(t[i])for(const n of t[i])if(!n.get("gridScale")){const t="x"===i?"height":"width";return[{name:t,update:e.getSizeSignalRef(t).signal}]}return[]}function f(e,t){const{x:i=[],y:n=[]}=e;return[...i.map(e=>d(e,"main",t)),...i.map(e=>d(e,"grid",t)),...n.map(e=>d(e,"main",t)),...n.map(e=>d(e,"grid",t))].filter(e=>e)}},380:function(e,t,i){"use strict";i.d(t,"a",function(){return s}),i.d(t,"b",function(){return c});var n=i(41),o=i(5),a=i(83),r=i(61);function s(e){return[...l(e,"width"),...l(e,"height")]}function l(e,t){const i="width"===t?"x":"y",o=e.component.layoutSize.get(t);if(!o||"merged"===o)return[];const s=e.getSizeSignalRef(t).signal;if("range-step"===o){const t=e.getScaleComponent(i);if(t){const o=t.get("type"),l=t.get("range");if(Object(n.g)(o)&&Object(a.f)(l)){const n=e.scaleName(i);if(Object(r.d)(e.parent)){if("independent"===e.parent.component.resolve.scale[i])return[d(n,l)]}return[d(n,l),{name:s,update:c(n,t,`domain('${n}').length`)}]}}throw new Error("layout size is range step although there is no rangeStep.")}return[{name:s,value:o}]}function d(e,t){return{name:e+"_step",value:t.step}}function c(e,t,i){const n=t.get("type"),a=t.get("padding"),r=Object(o.m)(t.get("paddingOuter"),a);let s=t.get("paddingInner");return`bandspace(${i}, ${s="band"===n?void 0!==s?s:a:1}, ${r}) * ${e}_step`}},381:function(e,t,i){"use strict";i.d(t,"a",function(){return u});var n=i(57),o=i(1),a=i(19),r=i(18),s=i(41),l=i(314),d=i(5),c=i(332),f=i(190);const u="_tuple_fields";class p extends Array{constructor(...e){super(...e),this.__proto__=p.prototype,this.has={}}}const h={has:e=>!0,parse:(e,t,i)=>{const n=i.name,u=i.project||(i.project=new p),h={},g={},m={},b=(e,t)=>{const i="visual"===t?e.channel:e.field;let o=Object(d.H)(`${n}_${i}`);for(let e=1;m[o];e++)o=Object(d.H)(`${n}_${i}_${e}`);return{[t]:m[o]=o}};if(!t.fields&&!t.encodings){const i=e.config.selection[t.type];if(t.init)for(const e of Object(o.i)(t.init))for(const n of Object(d.s)(e))Object(a.J)(n)?(t.encodings||(t.encodings=[])).push(n):Object(l.c)(t)?(r.e('Interval selections should be initialized using "x" and/or "y" keys.'),t.encodings=i.encodings):(t.fields||(t.fields=[])).push(n);else t.encodings=i.encodings,t.fields=i.fields}for(const e of t.fields||[]){const t={type:"E",field:e};t.signals=Object.assign({},b(t,"data")),u.push(t)}for(const n of t.encodings||[]){const t=e.fieldDef(n);if(t){let o=t.field;if(t.timeUnit&&(g[o=e.vgField(n)]={as:o,field:t.field,timeUnit:t.timeUnit}),!h[o]){let a="E";if("interval"===i.type){const t=e.getScaleComponent(n).get("type");Object(s.f)(t)&&(a="R")}else t.bin&&(a="R-RE");const r={field:o,channel:n,type:a};r.signals=Object.assign({},b(r,"data"),b(r,"visual")),u.push(h[o]=r),u.has[n]=h[o]}}else r.e(r.b.cannotProjectOnChannelWithoutField(n))}if(t.init)if(f.a.has(i))r.e(r.b.NO_INIT_SCALE_BINDINGS);else{function y(e){return u.map(t=>void 0!==e[t.channel]?e[t.channel]:e[t.field])}if(Object(l.c)(t))i.init=y(t.init);else{const e=Object(o.z)(t.init)?t.init:[t.init];i.init=e.map(y)}}Object(d.s)(g).length&&(u.timeUnit=new c.a(null,g))},signals:(e,t,i)=>{const o=t.name+u;return i.filter(e=>e.name===o).length?i:i.concat({name:o,value:t.project.map(e=>{const{signals:t}=e;return n.b(e,["signals"])})})}};t.b=h},382:function(e,t,i){"use strict";i.d(t,"a",function(){return s}),i.d(t,"b",function(){return l});var n=i(19),o=i(18),a=i(5),r=i(61);function s(e,t){if(Object(r.e)(t)||Object(r.d)(t))return"shared";if(Object(r.c)(t)||Object(r.f)(t))return Object(a.c)(n.p,e)?"independent":"shared";throw new Error("invalid model type for resolve")}function l(e,t){const i=e.scale[t],r=Object(a.c)(n.p,t)?"axis":"legend";return"independent"===i?("shared"===e[r][t]&&o.e(o.b.independentScaleMeansIndependentGuide(t)),"independent"):e[r][t]||"shared"}},391:function(e,t,i){"use strict";function n(e){return!!e.or}function o(e){return!!e.and}function a(e){return!!e.not}function r(e,t){if(a(e))r(e.not,t);else if(o(e))for(const i of e.and)r(i,t);else if(n(e))for(const i of e.or)r(i,t);else t(e)}function s(e,t){return a(e)?{not:s(e.not,t)}:o(e)?{and:e.and.map(e=>s(e,t))}:n(e)?{or:e.or.map(e=>s(e,t))}:t(e)}i.d(t,"d",function(){return n}),i.d(t,"b",function(){return o}),i.d(t,"c",function(){return a}),i.d(t,"a",function(){return r}),i.d(t,"e",function(){return s})},392:function(e,t,i){"use strict";i.d(t,"a",function(){return f}),i.d(t,"b",function(){return u}),i.d(t,"c",function(){return p}),i.d(t,"e",function(){return h}),i.d(t,"d",function(){return m});var n=i(57),o=i(113),a=i(15),r=i(18),s=i(37),l=i(5),d=i(377),c=i(232);const f="errorbar",u=Object(l.s)({ticks:1,rule:1}),p=new d.a(f,h);function h(e,{config:t}){const{transform:i,continuousAxisChannelDef:n,continuousAxis:o,encodingWithoutContinuousAxis:a,ticksOrient:r,markDef:s,outerSpec:l,tooltipEncoding:d}=m(e,f,t),u=Object(c.d)(s,o,n,a,t.errorbar),p={type:"tick",orient:r};return Object.assign({},l,{transform:i,layer:[...u({partName:"ticks",mark:p,positionPrefix:"lower",extraEncoding:d}),...u({partName:"ticks",mark:p,positionPrefix:"upper",extraEncoding:d}),...u({partName:"rule",mark:"rule",positionPrefix:"lower",endPositionPrefix:"upper",extraEncoding:d})]})}function g(e,t){const{encoding:i}=e;if(function(e){return(Object(a.l)(e.x)||Object(a.l)(e.y))&&!Object(a.l)(e.x2)&&!Object(a.l)(e.y2)&&!Object(a.l)(e.xError)&&!Object(a.l)(e.xError2)&&!Object(a.l)(e.yError)&&!Object(a.l)(e.yError2)}(i))return{orient:Object(c.b)(e,t),inputType:"raw"};const n=function(e){return Object(a.l)(e.x2)||Object(a.l)(e.y2)}(i),o=function(e){return Object(a.l)(e.xError)||Object(a.l)(e.xError2)||Object(a.l)(e.yError)||Object(a.l)(e.yError2)}(i),r=i.x,s=i.y;if(n){if(o)throw new Error(t+" cannot be both type aggregated-upper-lower and aggregated-error");const e=i.x2,n=i.y2;if(Object(a.l)(e)&&Object(a.l)(n))throw new Error(t+" cannot have both x2 and y2");if(Object(a.l)(e)){if(Object(a.l)(r)&&Object(a.k)(r))return{orient:"horizontal",inputType:"aggregated-upper-lower"};throw new Error("Both x and x2 have to be quantitative in "+t)}if(Object(a.l)(n)){if(Object(a.l)(s)&&Object(a.k)(s))return{orient:"vertical",inputType:"aggregated-upper-lower"};throw new Error("Both y and y2 have to be quantitative in "+t)}throw new Error("No ranged axis")}{const e=i.xError,n=i.xError2,o=i.yError,l=i.yError2;if(Object(a.l)(n)&&!Object(a.l)(e))throw new Error(t+" cannot have xError2 without xError");if(Object(a.l)(l)&&!Object(a.l)(o))throw new Error(t+" cannot have yError2 without yError");if(Object(a.l)(e)&&Object(a.l)(o))throw new Error(t+" cannot have both xError and yError with both are quantiative");if(Object(a.l)(e)){if(Object(a.l)(r)&&Object(a.k)(r))return{orient:"horizontal",inputType:"aggregated-error"};throw new Error("All x, xError, and xError2 (if exist) have to be quantitative")}if(Object(a.l)(o)){if(Object(a.l)(s)&&Object(a.k)(s))return{orient:"vertical",inputType:"aggregated-error"};throw new Error("All y, yError, and yError2 (if exist) have to be quantitative")}throw new Error("No ranged axis")}}function m(e,t,i){const{mark:d,encoding:f,selection:u,projection:p}=e,h=n.b(e,["mark","encoding","selection","projection"]),m=Object(s.u)(d)?d:{type:d};u&&r.e(r.b.selectionNotSupported(t));const{orient:y,inputType:v}=g(e,t),{continuousAxisChannelDef:_,continuousAxisChannelDef2:w,continuousAxisChannelDefError:x,continuousAxisChannelDefError2:O,continuousAxis:j}=Object(c.a)(e,y,t),{errorBarSpecificAggregate:k,postAggregateCalculates:T,tooltipSummary:D,tooltipTitleWithFieldName:$}=function(e,t,i,n,o,s,d,c){let f=[],u=[];const p=t.field;let h,g=!1;if("raw"===s){const t=e.center?e.center:e.extent?"iqr"===e.extent?"median":"mean":c.errorbar.center,i=e.extent?e.extent:"mean"===t?"stderr":"iqr";if("median"===t!=("iqr"===i)&&r.e(r.b.errorBarCenterIsUsedWithWrongExtent(t,i,d)),"stderr"===i||"stdev"===i)f=[{op:i,field:p,as:"extent_"+p},{op:t,field:p,as:"center_"+p}],u=[{calculate:`datum["center_${p}"] + datum["extent_${p}"]`,as:"upper_"+p},{calculate:`datum["center_${p}"] - datum["extent_${p}"]`,as:"lower_"+p}],h=[{fieldPrefix:"center_",titlePrefix:Object(l.D)(t)},{fieldPrefix:"upper_",titlePrefix:b(t,i,"+")},{fieldPrefix:"lower_",titlePrefix:b(t,i,"-")}],g=!0;else{let t,n,o;e.center&&e.extent&&r.e(r.b.errorBarCenterIsNotNeeded(e.extent,d)),"ci"===i?(t="mean",n="ci0",o="ci1"):(t="median",n="q1",o="q3"),f=[{op:n,field:p,as:"lower_"+p},{op:o,field:p,as:"upper_"+p},{op:t,field:p,as:"center_"+p}],h=[{fieldPrefix:"upper_",titlePrefix:Object(a.z)({field:p,aggregate:o,type:"quantitative"},c,{allowDisabling:!1})},{fieldPrefix:"lower_",titlePrefix:Object(a.z)({field:p,aggregate:n,type:"quantitative"},c,{allowDisabling:!1})},{fieldPrefix:"center_",titlePrefix:Object(a.z)({field:p,aggregate:t,type:"quantitative"},c,{allowDisabling:!1})}]}}else{(e.center||e.extent)&&r.e(r.b.errorBarCenterAndExtentAreNotNeeded(e.center,e.extent)),"aggregated-upper-lower"===s?(h=[],u=[{calculate:`datum["${i.field}"]`,as:"upper_"+p},{calculate:`datum["${p}"]`,as:"lower_"+p}]):"aggregated-error"===s&&(h=[{fieldPrefix:"",titlePrefix:p}],u=[{calculate:`datum["${p}"] + datum["${n.field}"]`,as:"upper_"+p}],o?u.push({calculate:`datum["${p}"] + datum["${o.field}"]`,as:"lower_"+p}):u.push({calculate:`datum["${p}"] - datum["${n.field}"]`,as:"lower_"+p}));for(const e of u)h.push({fieldPrefix:e.as.substring(0,6),titlePrefix:e.calculate.replace(new RegExp('datum\\[\\"',"g"),"").replace(new RegExp('\\"\\]',"g"),"")})}return{postAggregateCalculates:u,errorBarSpecificAggregate:f,tooltipSummary:h,tooltipTitleWithFieldName:g}}(m,_,w,x,O,v,t,i),S=j,C=(f[S],"x"===j?"x2":"y2"),z=(f[C],"x"===j?"xError":"yError"),F=(f[z],"x"===j?"xError2":"yError2"),A=(f[F],n.b(f,["symbol"==typeof S?S:S+"","symbol"==typeof C?C:C+"","symbol"==typeof z?z:z+"","symbol"==typeof F?F:F+""])),{bins:P,timeUnits:N,aggregate:I,groupby:q,encoding:E}=Object(o.b)(A,i),L=[...I,...k],W="raw"!==v?[]:q,M=Object(c.c)(D,_,E,$);return{transform:[...h.transform||[],...P,...N,...L.length?[{aggregate:L,groupby:W}]:[],...T],groupby:W,continuousAxisChannelDef:_,continuousAxis:j,encodingWithoutContinuousAxis:E,ticksOrient:"vertical"===y?"horizontal":"vertical",markDef:m,outerSpec:h,tooltipEncoding:M}}function b(e,t,i){return Object(l.D)(e)+" "+i+" "+t}},393:function(e,t,i){"use strict";i.d(t,"a",function(){return l});var n=i(1),o=i(15),a=i(5),r=i(73),s=i(67);class l extends s.a{clone(){return new l(null,Object(a.f)(this._stack))}constructor(e,t){super(e),this._stack=t}static makeFromTransform(e,t){const{stack:i,groupby:o,as:r,offset:s="zero"}=t,d=[],c=[];if(void 0!==t.sort)for(const e of t.sort)d.push(e.field),c.push(Object(a.m)(e.order,"ascending"));const f={field:d,order:c};let u;return u=function(e){return Object(n.z)(e)&&e.every(e=>Object(n.G)(e))&&e.length>1}(r)?r:Object(n.G)(r)?[r,r+"_end"]:[t.stack+"_start",t.stack+"_end"],new l(e,{stackField:i,groupby:o,offset:s,sort:f,facetby:[],as:u})}static makeFromEncoding(e,t){const i=t.stack,{encoding:a}=t;if(!i)return null;let s;if(i.groupbyChannel){const e=a[i.groupbyChannel];s=Object(o.f)(e)}const d=function(e){return e.stack.stackBy.reduce((e,t)=>{const i=t.fieldDef,n=Object(o.D)(i);return n&&e.push(n),e},[])}(t),c=t.encoding.order;let f;return f=Object(n.z)(c)||Object(o.l)(c)?Object(r.k)(c):d.reduce((e,t)=>(e.field.push(t),e.order.push("descending"),e),{field:[],order:[]}),new l(e,{dimensionFieldDef:s,stackField:t.vgField(i.fieldChannel),facetby:[],stackby:d,sort:f,offset:i.offset,impute:i.impute,as:[t.vgField(i.fieldChannel,{suffix:"start",forAs:!0}),t.vgField(i.fieldChannel,{suffix:"end",forAs:!0})]})}get stack(){return this._stack}addDimensions(e){this._stack.facetby.push(...e)}dependentFields(){const e=new Set;e.add(this._stack.stackField),this.getGroupbyFields().forEach(e.add),this._stack.facetby.forEach(e.add);const t=this._stack.sort.field;return Object(n.z)(t)?t.forEach(e.add):e.add(t),e}producedFields(){return new Set(this._stack.as)}hash(){return`Stack ${Object(a.o)(this._stack)}`}getGroupbyFields(){const{dimensionFieldDef:e,impute:t,groupby:i}=this._stack;return e?e.bin?t?[Object(o.D)(e,{binSuffix:"mid"})]:[Object(o.D)(e,{}),Object(o.D)(e,{binSuffix:"end"})]:[Object(o.D)(e)]:i||[]}assemble(){const e=[],{facetby:t,dimensionFieldDef:i,stackField:n,stackby:a,sort:r,offset:s,impute:l,as:d}=this._stack;return l&&i&&(i.bin&&e.push({type:"formula",expr:"("+Object(o.D)(i,{expr:"datum"})+"+"+Object(o.D)(i,{expr:"datum",binSuffix:"end"})+")/2",as:Object(o.D)(i,{binSuffix:"mid",forAs:!0})}),e.push({type:"impute",field:n,groupby:[...a,...t],key:Object(o.D)(i,{binSuffix:"mid"}),method:"value",value:0})),e.push({type:"stack",groupby:[...this.getGroupbyFields(),...t],field:n,sort:r,as:d,offset:s}),e}}},403:function(e,t,i){"use strict";i.d(t,"a",function(){return o}),i.d(t,"b",function(){return a}),i.d(t,"d",function(){return d}),i.d(t,"c",function(){return c});var n=i(5);const o=["domain","grid","labels","ticks","title"],a={grid:"grid",gridColor:"grid",gridDash:"grid",gridOpacity:"grid",gridScale:"grid",gridWidth:"grid",orient:"main",bandPosition:"both",domain:"main",domainColor:"main",domainOpacity:"main",domainWidth:"main",format:"main",formatType:"main",labelAlign:"main",labelAngle:"main",labelBaseline:"main",labelBound:"main",labelColor:"main",labelFlush:"main",labelFlushOffset:"main",labelFont:"main",labelFontSize:"main",labelFontWeight:"main",labelLimit:"main",labelOpacity:"main",labelOverlap:"main",labelPadding:"main",labels:"main",maxExtent:"main",minExtent:"main",offset:"main",position:"main",tickColor:"main",tickExtra:"main",tickOffset:"both",tickOpacity:"main",tickRound:"main",ticks:"main",tickSize:"main",title:"main",titleAlign:"main",titleAngle:"main",titleBaseline:"main",titleColor:"main",titleFont:"main",titleFontSize:"main",titleFontWeight:"main",titleLimit:"main",titleOpacity:"main",titlePadding:"main",titleX:"main",titleY:"main",tickWidth:"both",tickCount:"both",values:"both",scale:"both",zindex:"both"},r={orient:1,bandPosition:1,domain:1,domainColor:1,domainDash:1,domainDashOffset:1,domainOpacity:1,domainWidth:1,format:1,formatType:1,grid:1,gridColor:1,gridDash:1,gridDashOffset:1,gridOpacity:1,gridWidth:1,labelAlign:1,labelAngle:1,labelBaseline:1,labelBound:1,labelColor:1,labelFlush:1,labelFlushOffset:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labels:1,labelSeparation:1,maxExtent:1,minExtent:1,offset:1,position:1,tickColor:1,tickCount:1,tickDash:1,tickDashOffset:1,tickExtra:1,tickMinStep:1,tickOffset:1,tickOpacity:1,tickRound:1,ticks:1,tickSize:1,tickWidth:1,title:1,titleAlign:1,titleAnchor:1,titleAngle:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleOpacity:1,titlePadding:1,titleX:1,titleY:1,values:1,zindex:1},s=Object.assign({},r,{encoding:1}),l=Object.assign({gridScale:1,scale:1},r,{encode:1});function d(e){return!!s[e]}const c=Object(n.j)(l);Object(n.j)(s)},41:function(e,t,i){"use strict";i.d(t,"b",function(){return n}),i.d(t,"l",function(){return u}),i.d(t,"m",function(){return h}),i.d(t,"g",function(){return w}),i.d(t,"f",function(){return x}),i.d(t,"h",function(){return O}),i.d(t,"i",function(){return j}),i.d(t,"e",function(){return k}),i.d(t,"j",function(){return T}),i.d(t,"k",function(){return D}),i.d(t,"a",function(){return N}),i.d(t,"o",function(){return I}),i.d(t,"c",function(){return q}),i.d(t,"n",function(){return E}),i.d(t,"d",function(){return L});var n,o=i(57),a=i(1),r=i(19),s=i(18),l=i(102),d=i(5);!function(e){e.LINEAR="linear",e.LOG="log",e.POW="pow",e.SQRT="sqrt",e.SYMLOG="symlog",e.TIME="time",e.UTC="utc",e.QUANTILE="quantile",e.QUANTIZE="quantize",e.THRESHOLD="threshold",e.BIN_ORDINAL="bin-ordinal",e.ORDINAL="ordinal",e.POINT="point",e.BAND="band"}(n||(n={}));const c={linear:"numeric",log:"numeric",pow:"numeric",sqrt:"numeric",symlog:"numeric",time:"time",utc:"time",ordinal:"ordinal","bin-ordinal":"bin-ordinal",point:"ordinal-position",band:"ordinal-position",quantile:"discretizing",quantize:"discretizing",threshold:"discretizing"},f=Object(d.s)(c);function u(e,t){const i=c[e],n=c[t];return i===n||"ordinal-position"===i&&"time"===n||"ordinal-position"===n&&"time"===i}const p={linear:0,log:1,pow:1,sqrt:1,symlog:1,time:0,utc:0,point:10,band:11,ordinal:0,"bin-ordinal":0,quantile:0,quantize:0,threshold:0};function h(e){return p[e]}const g=["linear","log","pow","sqrt","symlog","time","utc"],m=Object(a.ab)(g),b=Object(a.ab)(["quantile","quantize","threshold"]),y=g.concat(["quantile","quantize","threshold"]),v=Object(a.ab)(y),_=Object(a.ab)(["ordinal","bin-ordinal","point","band"]);function w(e){return e in _}function x(e){return e in v}function O(e){return e in m}function j(e){return e in b}const k={textXRangeStep:90,rangeStep:20,pointPadding:.5,barBandPaddingInner:.1,rectBandPaddingInner:0,minBandSize:2,minFontSize:8,maxFontSize:40,minOpacity:.3,maxOpacity:.8,minSize:9,minStrokeWidth:1,maxStrokeWidth:4,quantileCount:4,quantizeCount:4};function T(e){return e&&!!e.name}function D(e){return e&&e.selection}const $={type:1,domain:1,range:1,rangeStep:1,scheme:1,bins:1,reverse:1,round:1,clamp:1,nice:1,base:1,exponent:1,constant:1,interpolate:1,zero:1,padding:1,paddingInner:1,paddingOuter:1},{type:S,domain:C,range:z,rangeStep:F,scheme:A}=(Object(d.j)($),$),P=o.b($,["type","domain","range","rangeStep","scheme"]),N=Object(d.j)(P);!function(){const e={};for(const t of r.a)for(const i of Object(d.s)(l.f))for(const n of f){const o=W(t,i);L(t,n)&&E(n,i)&&(e[o]=e[o]||[],e[o].push(n))}}();function I(e,t){switch(t){case"type":case"domain":case"reverse":case"range":return!0;case"scheme":case"interpolate":return!Object(d.c)(["point","band","identity"],e);case"bins":return!Object(d.c)(["point","band","identity","ordinal"],e);case"round":return O(e)||"band"===e||"point"===e;case"padding":return O(e)||Object(d.c)(["point","band"],e);case"paddingOuter":case"rangeStep":return Object(d.c)(["point","band"],e);case"paddingInner":return"band"===e;case"clamp":return O(e);case"nice":return O(e)||"quantize"===e||"threshold"===e;case"exponent":return"pow"===e;case"base":return"log"===e;case"constant":return"symlog"===e;case"zero":return x(e)&&!Object(d.c)(["log","time","utc","threshold","quantile"],e)}throw new Error(`Invalid scale property ${t}.`)}function q(e,t){switch(t){case"interpolate":case"scheme":return Object(r.E)(e)?void 0:s.b.cannotUseScalePropertyWithNonColor(e);case"type":case"bins":case"domain":case"range":case"base":case"exponent":case"constant":case"nice":case"padding":case"paddingInner":case"paddingOuter":case"rangeStep":case"reverse":case"round":case"clamp":case"zero":return}throw new Error(`Invalid scale property "${t}".`)}function E(e,t){return Object(d.c)([l.c,l.b],t)?void 0===e||w(e):t===l.e?Object(d.c)([n.TIME,n.UTC,void 0],e):t!==l.d||Object(d.c)([n.LOG,n.POW,n.SQRT,n.SYMLOG,n.QUANTILE,n.QUANTIZE,n.THRESHOLD,n.LINEAR,void 0],e)}function L(e,t){switch(e){case r.x:case r.z:return O(t)||Object(d.c)(["band","point"],t);case r.t:case r.w:case r.o:case r.g:case r.v:return O(t)||j(t)||Object(d.c)(["band","point"],t);case r.b:case r.f:case r.u:return"band"!==t;case r.s:return"ordinal"===t}return!1}function W(e,t){return e+"_"+t}},429:function(e,t,i){"use strict";i.d(t,"a",function(){return s}),i.d(t,"b",function(){return p});var n=i(18),o=i(987),a=i(292),r=i(322);const s="scale_",l=5;function d(e){const t=[];return e.forEach(function e(i){0===i.numChildren()?t.push(i):i.children.forEach(e)}),t}function c(e){return e}function f(e,t,i){return t.map(t=>{if(e instanceof a.a){const i=e.optimizeNextFromLeaves(t);return e.reset(),i}return e.run(t)}).some(c)||i}function u(e,t){let i=e.sources,n=!1;return n=f(new r.g,i,n),i=i.filter(e=>e.numChildren()>0),n=f(new r.h,d(i),n),i=i.filter(e=>e.numChildren()>0),n=f(new r.e,d(i),n),n=f(new r.b(t),d(i),n),n=f(new r.f,d(i),n),n=f(new r.d,d(i),n),n=f(new r.a,d(i),n),n=f(new r.c,i,n),e.sources=i,n}function p(e,t){Object(o.a)(e.sources);let i=0,a=0;for(let n=0;n<l&&u(e,t);n++)i++;e.sources.map(r.i);for(let i=0;i<l&&u(e,t);i++)a++;Object(o.a)(e.sources),Math.max(i,a)===l&&n.e(`Maximum optimization runs(${l}) reached.`)}},430:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(199),o=i(15),a=i(5),r=i(67);class s extends r.a{constructor(e,t){super(e),this.transform=t}clone(){return new s(null,Object(a.f)(this.transform))}addDimensions(e){this.transform.groupby=Object(a.E)(this.transform.groupby.concat(e),e=>e)}dependentFields(){const e=new Set;return this.transform.groupby.forEach(t=>e.add(t)),this.transform.sort.forEach(t=>e.add(t.field)),this.transform.window.map(e=>e.field).filter(e=>void 0!==e).forEach(t=>e.add(t)),e}producedFields(){return new Set(this.transform.window.map(this.getDefaultName))}getDefaultName(e){return e.as||Object(o.D)(e)}hash(){return`WindowTransform ${Object(a.o)(this.transform)}`}assemble(){const e=[],t=[],i=[],o=[];for(const n of this.transform.window)t.push(n.op),i.push(this.getDefaultName(n)),o.push(void 0===n.param?null:n.param),e.push(void 0===n.field?null:n.field);const a=this.transform.frame,r=this.transform.groupby;if(a&&null===a[0]&&null===a[1]&&t.every(e=>Object(n.c)(e)))return Object.assign({type:"joinaggregate",as:i,ops:t,fields:e},void 0!==r?{groupby:r}:{});const s=[],l=[];if(void 0!==this.transform.sort)for(const e of this.transform.sort)s.push(e.field),l.push(e.order||"ascending");const d={field:s,order:l},c=this.transform.ignorePeers;return Object.assign({type:"window",params:o,as:i,ops:t,fields:e,sort:d},void 0!==c?{ignorePeers:c}:{},void 0!==r?{groupby:r}:{},void 0!==a?{frame:a}:{})}}},443:function(e,t,i){"use strict";i.d(t,"d",function(){return m}),i.d(t,"a",function(){return v}),i.d(t,"b",function(){return w}),i.d(t,"c",function(){return k});var n=i(1),o=i(19),a=i(15),r=i(604),s=i(125),l=i(187),d=i(5),c=i(237),f=i(73),u=i(202),p=i(61),h=i(197),g=i(315);function m(e,t){const i=e.component.layoutHeaders[t].title,n=e.config?e.config:void 0,o=e.component.layoutHeaders[t].facetFieldDef?e.component.layoutHeaders[t].facetFieldDef:void 0,{titleAnchor:a,titleAngle:s,titleOrient:l}=Object(h.b)(["titleAnchor","titleAngle","titleOrient"],o,n,t),d=Object(h.a)(t,l);return{name:`${t}-title`,type:"group",role:`${d}-title`,title:Object.assign({text:i},"row"===t?{orient:"left"}:{},{style:"guide-title"},y(s,d),b(d,s,a),T(n,o,t,r.c,r.d))}}function b(e,t,i="middle"){switch(i){case"start":return{align:"left"};case"end":return{align:"right"}}const n=Object(c.b)(t,"row"===e?"left":"top");return n?{align:n}:{}}function y(e,t){const i=Object(c.c)(e,"row"===t?"left":"top");return i?{baseline:i}:{}}function v(e,t){const i=e.component.layoutHeaders[t],n=[];for(const o of g.b)if(i[o])for(const a of i[o])n.push(x(e,t,o,i,a));return n}function _(e,t){const{sort:i}=e;return Object(s.d)(i)?{field:Object(a.D)(i,{expr:"datum"}),order:i.order||"ascending"}:Object(n.z)(i)?{field:Object(u.b)(e,t,{expr:"datum"}),order:"ascending"}:{field:Object(a.D)(e,{expr:"datum"}),order:i||"ascending"}}function w(e,t,i){const{format:n,labelAngle:o,labelAnchor:a,labelOrient:s}=Object(h.b)(["format","labelAngle","labelAnchor","labelOrient"],e,i,t),l=Object(h.a)(t,s);return Object.assign({text:Object(f.c)(e,n,"parent",i)},"row"===t?{orient:"left"}:{},{style:"guide-label",frame:"group"},y(o,l),b(l,o,a),T(i,e,t,r.a,r.b))}function x(e,t,i,n,o){if(o){let a=null;const{facetFieldDef:r}=n,s=e.config?e.config:void 0;if(r&&o.labels){const{labelOrient:e}=Object(h.b)(["labelOrient"],r,s,t);("row"===t&&!Object(d.c)(["top","bottom"],e)||"column"===t&&!Object(d.c)(["left","right"],e))&&(a=w(r,t,s))}const c=Object(p.d)(e)&&!Object(l.b)(e.facet),f=o.axes,u=f&&f.length>0;if(a||u){const s="row"===t?"height":"width";return Object.assign({name:e.getName(`${t}_${i}`),type:"group",role:`${t}-${i}`},n.facetFieldDef?{from:{data:e.getName(t+"_domain")},sort:_(r,t)}:{},u&&c?{from:{data:e.getName(`facet_domain_${t}`)}}:{},a?{title:a}:{},o.sizeSignal?{encode:{update:{[s]:o.sizeSignal}}}:{},u?{axes:f}:{})}}return null}const O={column:{start:0,end:1},row:{start:1,end:0}};function j(e,t){return O[t][e]}function k(e,t){const i={};for(const n of o.e){const o=e[n];if(o&&o.facetFieldDef){const{titleAnchor:e,titleOrient:a}=Object(h.b)(["titleAnchor","titleOrient"],o.facetFieldDef,t,n),r=Object(h.a)(n,a),s=j(e,r);void 0!==s&&(i[r]=s)}}return Object(d.s)(i).length>0?i:void 0}function T(e,t,i,n,o){const a={};for(const r of n){if(!o[r])continue;const n=Object(h.c)(r,t,e,i);void 0!==n&&(a[o[r]]=n)}return a}},486:function(e,t,i){"use strict";function n(e){return void 0!==e.repeat}i.d(t,"a",function(){return n})},5:function(e,t,i){"use strict";i.d(t,"d",function(){return f}),i.d(t,"f",function(){return u}),i.d(t,"x",function(){return p}),i.d(t,"w",function(){return h}),i.d(t,"C",function(){return g}),i.d(t,"o",function(){return m}),i.d(t,"r",function(){return b}),i.d(t,"c",function(){return y}),i.d(t,"B",function(){return v}),i.d(t,"h",function(){return _}),i.d(t,"l",function(){return w}),i.d(t,"u",function(){return x}),i.d(t,"E",function(){return j}),i.d(t,"A",function(){return k}),i.d(t,"n",function(){return T}),i.d(t,"i",function(){return $}),i.d(t,"s",function(){return S}),i.d(t,"G",function(){return C}),i.d(t,"g",function(){return z}),i.d(t,"j",function(){return F}),i.d(t,"q",function(){return A}),i.d(t,"H",function(){return P}),i.d(t,"t",function(){return N}),i.d(t,"e",function(){return I}),i.d(t,"D",function(){return q}),i.d(t,"b",function(){return E}),i.d(t,"k",function(){return L}),i.d(t,"z",function(){return W}),i.d(t,"y",function(){return M}),i.d(t,"a",function(){return U}),i.d(t,"m",function(){return V}),i.d(t,"F",function(){return B}),i.d(t,"p",function(){return H}),i.d(t,"v",function(){return G});var n=i(1453),o=i.n(n),a=i(546),r=i.n(a),s=i(500),l=i.n(s),d=i(1),c=i(391);const f=r.a,u=o.a;function p(e,t){const i={};for(const n of t)e.hasOwnProperty(n)&&(i[n]=e[n]);return i}function h(e,t){const i=Object.assign({},e);for(const e of t)delete i[e];return i}Set.prototype.toJSON=function(){return`Set(${[...this].map(e=>l()(e)).join(",")})`};const g=l.a;function m(e){if(Object(d.D)(e))return e;const t=Object(d.G)(e)?e:l()(e);if(t.length<250)return t;let i=0;for(let e=0;e<t.length;e++){i=(i<<5)-i+t.charCodeAt(e),i&=i}return i}function b(e){return!1===e||null===e}function y(e,t){return e.indexOf(t)>-1}function v(e,t){let i=0;for(let n=0;n<e.length;n++)if(t(e[n],n,i++))return!0;return!1}function _(e,t){let i=0;for(let n=0;n<e.length;n++)if(!t(e[n],n,i++))return!1;return!0}function w(e){return[].concat(...e)}function x(e,...t){for(const i of t)e=O(e,i);return e}function O(e,t){if("object"!=typeof t||null===t)return e;for(const i in t)t.hasOwnProperty(i)&&void 0!==t[i]&&("object"!=typeof t[i]||Object(d.z)(t[i])||null===t[i]?e[i]=t[i]:"object"!=typeof e[i]||null===e[i]?e[i]=x(Object(d.z)(t[i].constructor)?[]:{},t[i]):x(e[i],t[i]));return e}function j(e,t){const i=[],n={};let o;for(const a of e)(o=t(a))in n||(n[o]=1,i.push(a));return i}function k(e,t){if(e.size!==t.size)return!1;for(const i of e)if(!t.has(i))return!1;return!0}function T(e,t){for(const i of e)if(t.has(i))return!0;return!1}function D(e){const t=new Set;for(const i of e){const e=Object(d.V)(i).map((e,t)=>0===t?e:`[${e}]`);e.map((t,i)=>e.slice(0,i+1).join("")).forEach(e=>t.add(e))}return t}function $(e,t){return T(D(e),D(t))}const S=Object.keys;function C(e){const t=[];for(const i in e)e.hasOwnProperty(i)&&t.push(e[i]);return t}function z(e){const t=[];for(const i in e)e.hasOwnProperty(i)&&t.push({key:i,value:e[i]});return t}function F(e){return S(e)}function A(e){return!0===e||!1===e}function P(e){const t=e.replace(/\W/g,"_");return(e.match(/^\d+/)?"_":"")+t}function N(e,t){return Object(c.c)(e)?"!("+N(e.not,t)+")":Object(c.b)(e)?"("+e.and.map(e=>N(e,t)).join(") && (")+")":Object(c.d)(e)?"("+e.or.map(e=>N(e,t)).join(") || (")+")":t(e)}function I(e,t){if(0===t.length)return!0;const i=t.shift();return I(e[i],t)&&delete e[i],0===S(e).length}function q(e){return e.charAt(0).toUpperCase()+e.substr(1)}function E(e,t="datum"){const i=Object(d.V)(e),n=[];for(let e=1;e<=i.length;e++){const o=`[${i.slice(0,e).map(d.W).join("][")}]`;n.push(`${t}${o}`)}return n.join(" && ")}function L(e,t="datum"){return`${t}[${Object(d.W)(Object(d.V)(e).join("."))}]`}function W(e){return`${Object(d.V)(e).map(e=>e.replace(".","\\.")).join("\\.")}`}function M(e){return`${Object(d.V)(e).join(".")}`}function U(e){return e?Object(d.V)(e).length:0}function V(...e){for(const t of e)if(void 0!==t)return t}let R=42;function B(e){const t=++R;return e?String(e)+t:t}function H(e){return function(e){return 0===e.indexOf("__")}(e)?e:`__${e}`}function G(e){return(e%360+360)%360}},501:function(e,t,i){"use strict";i.d(t,"a",function(){return p});var n=i(57),o=i(1),a=i(76),r=i(19),s=i(18),l=i(41),d=i(5),c=i(145),f=i(381),u=i(190);const p="_brush",h="_scale_trigger",g={signals:(e,t)=>{const i=t.name,n=i+f.a,d=u.a.has(t),g=[],b=[],y=[];if(t.translate&&!d){const e=`!event.item || event.item.mark.name !== ${Object(o.W)(i+p)}`;m(t,(t,i)=>{const n=i.between[0].filter||(i.between[0].filter=[]);n.indexOf(e)<0&&n.push(e)})}t.project.forEach((i,n)=>{const a=i.channel;if(a!==r.x&&a!==r.z)return void Object(s.e)("Interval selections only support x and y encoding channels.");const d=t.init?t.init[n]:null,f=function(e,t,i,n){const a=i.channel,s=i.signals.visual,d=i.signals.data,f=u.a.has(t),p=Object(o.W)(e.scaleName(a)),g=e.getScaleComponent(a),b=g?g.get("type"):void 0,y=e=>`scale(${p}, ${e})`,v=e.getSizeSignalRef(a===r.x?"width":"height").signal,_=`${a}(unit)`,w=m(t,(e,t)=>[...e,{events:t.between[0],update:`[${_}, ${_}]`},{events:t,update:`[${s}[0], clamp(${_}, 0, ${v})]`}]);return w.push({events:{signal:t.name+h},update:Object(l.f)(b)?`[${y(`${d}[0]`)}, ${y(`${d}[1]`)}]`:"[0, 0]"}),f?[{name:d,on:[]}]:[Object.assign({name:s},n?{init:Object(c.b)(n,y)}:{value:[]},{on:w}),Object.assign({name:d},n?{init:Object(c.b)(n)}:{},{on:[{events:{signal:s},update:`${s}[0] === ${s}[1] ? null : invert(${p}, ${s})`}]})]}(e,t,i,d),p=i.signals.data,v=i.signals.visual,_=Object(o.W)(e.scaleName(a)),w=e.getScaleComponent(a).get("type"),x=Object(l.f)(w)?"+":"";g.push(...f),b.push(p),y.push({scaleName:e.scaleName(a),expr:`(!isArray(${p}) || `+`(${x}invert(${_}, ${v})[0] === ${x}${p}[0] && `+`${x}invert(${_}, ${v})[1] === ${x}${p}[1]))`})}),d||g.push({name:i+h,value:{},on:[{events:y.map(e=>({scale:e.scaleName})),update:y.map(e=>e.expr).join(" && ")+` ? ${i+h} : {}`}]});const v=t.init,_=`unit: ${Object(a.i)(e)}, fields: ${n}, values`;return g.concat(Object.assign({name:i+a.d},v?{init:`{${_}: ${Object(c.b)(v)}}`}:{},{on:[{events:[{signal:b.join(" || ")}],update:b.join(" && ")+` ? {${_}: [${b}]} : null`}]}))},modifyExpr:(e,t)=>{return t.name+a.d+", "+("global"===t.resolve?"true":`{unit: ${Object(a.i)(e)}}`)},marks:(e,t,i)=>{const r=t.name,{x:s,y:l}=t.project.has,c=`data(${Object(o.W)(t.name+a.c)})`;if(u.a.has(t))return i;const f={x:void 0!==s?{signal:`${r}_x[0]`}:{value:0},y:void 0!==l?{signal:`${r}_y[0]`}:{value:0},x2:void 0!==s?{signal:`${r}_x[1]`}:{field:{group:"width"}},y2:void 0!==l?{signal:`${r}_y[1]`}:{field:{group:"height"}}};if("global"===t.resolve)for(const t of Object(d.s)(f))f[t]=[Object.assign({test:`${c}.length && ${c}[0].unit === ${Object(a.i)(e)}`},f[t]),{value:0}];const h=t.mark,{fill:g,fillOpacity:m}=h,b=n.b(h,["fill","fillOpacity"]),y=Object(d.s)(b).reduce((e,t)=>(e[t]=[{test:[void 0!==s&&`${r}_x[0] !== ${r}_x[1]`,void 0!==l&&`${r}_y[0] !== ${r}_y[1]`].filter(e=>e).join(" && "),value:b[t]},{value:null}],e),{});return[{name:r+p+"_bg",type:"rect",clip:!0,encode:{enter:{fill:{value:g},fillOpacity:{value:m}},update:f}},...i,{name:r+p,type:"rect",clip:!0,encode:{enter:{fill:{value:"transparent"}},update:Object.assign({},f,y)}}]}};function m(e,t){return e.events.reduce((e,i)=>i.between?t(e,i):(Object(s.e)(`${i} is not an ordered event stream for interval selections`),e),[])}t.b=g},502:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(5),o=i(774),a=i(67),r=i(770);class s extends a.a{constructor(e,t,i){super(e),this.model=t,this.filter=i,this.expr=Object(o.a)(this.model,this.filter,this),this._dependentFields=Object(r.a)(this.expr)}clone(){return new s(null,this.model,Object(n.f)(this.filter))}dependentFields(){return this._dependentFields}assemble(){return{type:"filter",expr:this.expr}}hash(){return`Filter ${this.expr}`}}},51:function(e,t,i){"use strict";i.d(t,"e",function(){return b}),i.d(t,"b",function(){return y}),i.d(t,"l",function(){return _}),i.d(t,"f",function(){return x}),i.d(t,"g",function(){return O}),i.d(t,"m",function(){return j}),i.d(t,"k",function(){return k}),i.d(t,"j",function(){return T}),i.d(t,"a",function(){return D}),i.d(t,"d",function(){return $}),i.d(t,"c",function(){return S}),i.d(t,"h",function(){return C}),i.d(t,"i",function(){return z});var n=i(1),o=i(62),a=i(19),r=i(15),s=i(18),l=i(37),d=i(41),c=i(5),f=i(83),u=i(73),p=i(774),h=i(145),g=i(79);function m(e){return"transparent"!==e&&null!=e}function b(e){const{markDef:t,encoding:i,config:n}=e,{filled:o,type:a}=t,r={fill:Object(u.d)("fill",t,n),stroke:Object(u.d)("stroke",t,n),color:Object(u.d)("color",t,n)},l=Object(c.c)(["bar","point","circle","square","geoshape"],a)?"transparent":void 0,d=Object(c.m)(t.fill,r.fill,l),f=Object(c.m)(t.stroke,r.stroke),p=o?"fill":"stroke",h=Object.assign({},d?{fill:{value:d}}:{},f?{stroke:{value:f}}:{});return i.fill||i.stroke?(t.color&&s.e(s.b.droppingColor("property",{fill:"fill"in i,stroke:"stroke"in i})),Object.assign({},O("fill",e,{defaultValue:Object(c.m)(d,l)}),O("stroke",e,{defaultValue:f}))):i.color?Object.assign({},h,O("color",e,{vgChannel:p,defaultValue:Object(c.m)(t[p],t.color,r[p],r.color,o?l:void 0)})):m(t.fill)||m(t.stroke)?(t.color&&s.e(s.b.droppingColor("property",{fill:"fill"in t,stroke:"stroke"in t})),h):t.color?Object.assign({},h,{[p]:{value:t.color}}):m(r.fill)||m(r.stroke)?h:r.color?Object.assign({},l?{fill:{value:"transparent"}}:{},{[p]:{value:r.color}}):{}}function y(e,t){const{fill:i,stroke:n}=b(e);return Object.assign({},function(e,t){return f.a.reduce((i,n)=>(void 0!==e[n]&&"ignore"!==t[n]&&(i[n]={value:e[n]}),i),{})}(e.markDef,t),v(e,"fill",i),v(e,"stroke",n),O("opacity",e),O("fillOpacity",e),O("strokeOpacity",e),O("strokeWidth",e),k(e),T(e,"href"))}function v(e,t,i){const{config:o,mark:r}=e;if(o.invalidValues&&i&&!Object(l.v)(r)){const o=w(e,{invalid:!0,channels:a.r});if(o)return{[t]:[{test:o,value:null},...Object(n.i)(i)]}}return i?{[t]:i}:{}}function _(e,t){if(void 0!==t)return{[e]:{value:t}}}function w(e,{invalid:t=!1,channels:i}){const n=i.reduce((t,i)=>{const n=e.getScaleComponent(i);if(n){const o=n.get("type"),a=e.vgField(i,{expr:"datum"});a&&Object(d.f)(o)&&(t[a]=!0)}return t},{}),o=Object(c.s)(n);if(o.length>0){const e=t?"||":"&&";return o.map(e=>Object(g.c)(e,t)).join(` ${e} `)}}function x(e){if("filter"===e.config.invalidValues){const t=w(e,{channels:["x","y"]});if(t)return{defined:{signal:t}}}return{}}function O(e,t,i={}){const{markDef:n,encoding:o}=t,{vgChannel:a=e}=i,{defaultValue:r=n[a]}=i,s=i.defaultRef||(void 0!==r?{value:r}:void 0),l=o[e];return j(t,l,a,i=>g.g({channel:e,channelDef:i,scaleName:t.scaleName(e),scale:t.getScaleComponent(e),stack:null,defaultRef:s}))}function j(e,t,i,o){const a=t&&t.condition,s=o(t);if(a){return{[i]:[...(Object(n.z)(a)?a:[a]).map(t=>{const i=o(t),n=Object(r.j)(t)?Object(h.d)(e,t.selection):Object(p.a)(e,t.test);return Object.assign({test:n},i)}),...void 0!==s?[s]:[]]}}return void 0!==s?{[i]:s}:{}}function k(e,t={}){const{encoding:i,markDef:o,config:a}=e,r=i.tooltip;return Object(n.z)(r)?{tooltip:g.l({tooltip:r},a,t)}:j(e,r,"tooltip",r=>{const s=g.k(r,e.config);if(s)return s;if(null===r)return;const l=Object(c.m)(o.tooltip,Object(u.d)("tooltip",o,a));return Object(n.G)(l)?{value:l}:Object(n.E)(l)?"encoding"===l.content?g.l(i,a,t):{signal:"datum"}:void 0})}function T(e,t="text"){const i=e.encoding[t];return j(e,i,t,t=>g.k(t,e.config))}function D(e,t,i){const n=i.scaleName(t),o="x"===t?"width":"height";if(i.encoding.size||void 0!==i.markDef.size){if(i.markDef.orient){const a={[t+"c"]:g.d(e,n,{},{band:.5})};if(Object(r.f)(i.encoding.size))return Object.assign({},a,O("size",i,{vgChannel:o}));if(Object(r.t)(i.encoding.size))return Object.assign({},a,O("size",i,{vgChannel:o}));if(void 0!==i.markDef.size)return Object.assign({},a,{[o]:{value:i.markDef.size}})}else s.e(s.b.cannotApplySizeToNonOrientedMark(i.markDef.type))}return{[t]:g.d(e,n,{binSuffix:"range"},{}),[o]:g.a(n)}}function $(e,t,i,n){const o="x"===e?"xc":"yc",a="x"===e?"width":"height";return Object.assign({},C(e,t,i,o),O("size",t,{defaultRef:n,vgChannel:a}))}function S({fieldDef:e,fieldDef2:t,channel:i,scaleName:n,mark:l,spacing:d=0,reverse:c}){const f={x:c?d:0,x2:c?0:d,y:c?0:d,y2:c?d:0},u=i===a.x?a.y:a.A;return Object(o.e)(e.bin)?{[u]:g.b({channel:i,fieldDef:e,scaleName:n,mark:l,side:"start",offset:f[`${i}2`]}),[i]:g.b({channel:i,fieldDef:e,scaleName:n,mark:l,side:"end",offset:f[i]})}:Object(o.d)(e.bin)&&Object(r.l)(t)?{[u]:g.d(e,n,{},{offset:f[`${i}2`]}),[i]:g.d(t,n,{},{offset:f[i]})}:void s.e(s.b.channelRequiredForBinned(u))}function C(e,t,i,n){const{encoding:o,mark:r,markDef:s,config:l,stack:d}=t,c=o[e],f=o[e===a.x?a.y:a.A],u=t.scaleName(e),p=t.getScaleComponent(e),h=g.e(e,t.markDef);return{[n||e]:c||!o.latitude&&!o.longitude?g.h({channel:e,channelDef:c,channel2Def:f,scaleName:u,scale:p,stack:d,mark:r,offset:h,defaultRef:g.j({markDef:s,config:l,defaultRef:i,channel:e,scaleName:u,scale:p,mark:r,checkBarAreaWithoutZero:!f})}):{field:t.getName(e)}}}function z(e,t,i){const{encoding:n,mark:o,markDef:a,stack:r,config:s}=e,l="x2"===i?"x":"y",d=n[l],c=e.scaleName(l),f=e.getScaleComponent(l),u=g.e(i,e.markDef);return{[i]:d||!n.latitude&&!n.longitude?g.i({channel:i,channelDef:d,channel2Def:n[i],scaleName:c,scale:f,stack:r,mark:o,offset:u,defaultRef:g.j({markDef:a,config:s,defaultRef:t,channel:i,scaleName:c,scale:f,mark:o,checkBarAreaWithoutZero:!n[i]})}):{field:e.getName(i)}}}},524:function(e,t,i){"use strict";i.d(t,"a",function(){return f}),i.d(t,"b",function(){return u}),i.d(t,"c",function(){return p}),i.d(t,"d",function(){return g});var n=i(57),o=i(1),a=i(113),r=i(18),s=i(37),l=i(5),d=i(377),c=i(232);const f="boxplot",u=Object(l.s)({box:1,median:1,outliers:1,rule:1,ticks:1}),p=new d.a(f,g);function h(e){return Object(o.D)(e)?"tukey":e}function g(e,{config:t}){const{mark:i,encoding:d,selection:u,projection:p}=e,g=n.b(e,["mark","encoding","selection","projection"]),b=Object(s.u)(i)?i:{type:i};u&&r.e(r.b.selectionNotSupported("boxplot"));const y=b.extent||t.boxplot.extent,v=Object(l.m)(b.size,t.boxplot.size),_=h(y),{transform:w,continuousAxisChannelDef:x,continuousAxis:O,groupby:j,encodingWithoutContinuousAxis:k,ticksOrient:T}=function(e,t,i){const o=Object(c.b)(e,f),{continuousAxisChannelDef:r,continuousAxis:s}=Object(c.a)(e,o,f),l=r.field,d=h(t),u=[...m(l),{op:"median",field:l,as:"mid_box_"+l},{op:"min",field:l,as:("min-max"===d?"lower_whisker_":"min_")+l},{op:"max",field:l,as:("min-max"===d?"upper_whisker_":"max_")+l}],p="min-max"===d||"tukey"===d?[]:[{calculate:`datum["upper_box_${l}"] - datum["lower_box_${l}"]`,as:"iqr_"+l},{calculate:`min(datum["upper_box_${l}"] + datum["iqr_${l}"] * ${t}, datum["max_${l}"])`,as:"upper_whisker_"+l},{calculate:`max(datum["lower_box_${l}"] - datum["iqr_${l}"] * ${t}, datum["min_${l}"])`,as:"lower_whisker_"+l}],g=e.encoding,b=s,y=(g[b],n.b(g,["symbol"==typeof b?b:b+""])),{bins:v,timeUnits:_,aggregate:w,groupby:x,encoding:O}=Object(a.b)(y,i);return{transform:[...v,..._,{aggregate:[...w,...u],groupby:x},...p],groupby:x,continuousAxisChannelDef:r,continuousAxis:s,encodingWithoutContinuousAxis:O,ticksOrient:"vertical"===o?"horizontal":"vertical"}}(e,y,t),{color:D,size:$}=k,S=n.b(k,["color","size"]),C=e=>Object(c.d)(b,O,x,e,t.boxplot),z=C(S),F=C(k),A=C(Object.assign({},S,$?{size:$}:{})),P=Object(c.c)([{fieldPrefix:"min-max"===_?"upper_whisker_":"max_",titlePrefix:"Max"},{fieldPrefix:"upper_box_",titlePrefix:"Q3"},{fieldPrefix:"mid_box_",titlePrefix:"Median"},{fieldPrefix:"lower_box_",titlePrefix:"Q1"},{fieldPrefix:"min-max"===_?"lower_whisker_":"min_",titlePrefix:"Min"}],x,k),N={type:"tick",color:"black",opacity:1,orient:T},I="min-max"===_?P:Object(c.c)([{fieldPrefix:"upper_whisker_",titlePrefix:"Upper Whisker"},{fieldPrefix:"lower_whisker_",titlePrefix:"Lower Whisker"}],x,k),q=[...z({partName:"rule",mark:"rule",positionPrefix:"lower_whisker",endPositionPrefix:"lower_box",extraEncoding:I}),...z({partName:"rule",mark:"rule",positionPrefix:"upper_box",endPositionPrefix:"upper_whisker",extraEncoding:I}),...z({partName:"ticks",mark:N,positionPrefix:"lower_whisker",extraEncoding:I}),...z({partName:"ticks",mark:N,positionPrefix:"upper_whisker",extraEncoding:I})],E=[..."tukey"!==_?q:[],...F({partName:"box",mark:Object.assign({type:"bar"},v?{size:v}:{}),positionPrefix:"lower_box",endPositionPrefix:"upper_box",extraEncoding:P}),...A({partName:"median",mark:Object.assign({type:"tick"},Object(o.E)(t.boxplot.median)&&t.boxplot.median.color?{color:t.boxplot.median.color}:{},v?{size:v}:{},{orient:T}),positionPrefix:"mid_box",extraEncoding:P})];let L;if("min-max"!==_){const e=`datum["lower_box_${x.field}"]`,i=`datum["upper_box_${x.field}"]`,n=`(${i} - ${e})`,o=`${e} - ${y} * ${n}`,a=`${i} + ${y} * ${n}`,r=`datum["${x.field}"]`,s={joinaggregate:m(x.field),groupby:j};let l=void 0;"tukey"===_&&(l={transform:[{filter:`(${o} <= ${r}) && (${r} <= ${a})`},{aggregate:[{op:"min",field:x.field,as:"lower_whisker_"+x.field},{op:"max",field:x.field,as:"upper_whisker_"+x.field},{op:"min",field:"lower_box_"+x.field,as:"lower_box_"+x.field},{op:"max",field:"upper_box_"+x.field,as:"upper_box_"+x.field}],groupby:j}],layer:q});const d=Object(c.e)(b,"outliers",t.boxplot,{transform:[{filter:`(${r} < ${o}) || (${r} > ${a})`}],mark:"point",encoding:Object.assign({[O]:{field:x.field,type:x.type}},S)})[0];d&&l?L={transform:[s],layer:[d,l]}:d?(L=d).transform.unshift(s):l&&(L=l).transform.unshift(s)}return L?Object.assign({},g,{layer:[...L?[L]:[],{transform:w,layer:E}]}):Object.assign({},g,{transform:(g.transform||[]).concat(w),layer:E})}function m(e){return[{op:"q1",field:e,as:"lower_box_"+e},{op:"q3",field:e,as:"upper_box_"+e}]}},525:function(e,t,i){"use strict";i.d(t,"a",function(){return l}),i.d(t,"b",function(){return d}),i.d(t,"c",function(){return c}),i.d(t,"d",function(){return f});var n=i(18),o=i(5),a=i(377),r=i(232),s=i(392);const l="errorband",d=Object(o.s)({band:1,borders:1}),c=new a.a(l,f);function f(e,{config:t}){const{transform:i,continuousAxisChannelDef:o,continuousAxis:a,encodingWithoutContinuousAxis:d,markDef:c,outerSpec:f,tooltipEncoding:u}=Object(s.d)(e,l,t),p=Object(r.d)(c,a,o,d,t.errorband),h=void 0!==e.encoding.x&&void 0!==e.encoding.y;let g={type:h?"area":"rect"},m={type:h?"line":"rule"};const b=Object.assign({},c.interpolate?{interpolate:c.interpolate}:{},c.tension&&c.interpolate?{interpolate:c.tension}:{});return h?(g=Object.assign({},g,b),m=Object.assign({},m,b)):c.interpolate?n.e(n.b.errorBand1DNotSupport("interpolate")):c.tension&&n.e(n.b.errorBand1DNotSupport("tension")),Object.assign({},f,{transform:i,layer:[...p({partName:"band",mark:g,positionPrefix:"lower",endPositionPrefix:"upper",extraEncoding:u}),...p({partName:"borders",mark:m,positionPrefix:"lower",extraEncoding:u}),...p({partName:"borders",mark:m,positionPrefix:"upper",extraEncoding:u})]})}},526:function(e,t,i){"use strict";i.d(t,"a",function(){return l}),i.d(t,"b",function(){return c});var n=i(1),o=i(5),a=i(304),r=i(187),s=i(486);const l=20,d=Object(o.j)({align:1,bounds:1,center:1,columns:1,spacing:1});function c(e,t,i){const o=i[t],l={},{spacing:c,columns:f}=o;void 0!==c&&(l.spacing=c),void 0!==f&&(Object(r.c)(e)&&!Object(r.b)(e.facet)||Object(s.a)(e)&&Object(n.z)(e.repeat)||Object(a.b)(e))&&(l.columns=f);for(const t of d)if(void 0!==e[t])if("spacing"===t){const i=e[t];l[t]=Object(n.D)(i)?i:{row:i.row||c,column:i.column||c}}else l[t]=e[t];return l}},527:function(e,t,i){"use strict";i.d(t,"a",function(){return f});var n=i(1459),o=i(776),a=i(381),r=i(190),s=i(1460),l=i(1461),d=i(1462);const c={project:a.b,toggle:s.a,scales:r.a,translate:l.a,zoom:d.a,inputs:n.a,nearest:o.a};function f(e,t){for(const i in c)c[i].has(e)&&t(c[i])}},528:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(314),o=i(67);class a extends o.a{clone(){return new a(null)}constructor(e){super(e)}producedFields(){return new Set([n.a])}assemble(){return{type:"identifier",as:n.a}}}},578:function(e,t,i){"use strict";i.d(t,"a",function(){return h}),i.d(t,"b",function(){return y});var n=i(1),o=i(1452),a=i(830),r=i(579),s=i(37),l=i(41),d=i(314),c=i(526),f=i(765),u=i(5);const p={padding:5,timeFormat:"%b %d, %Y",countTitle:"Count of Records",invalidValues:"filter",view:{width:200,height:200},mark:s.r,area:{},bar:s.q,circle:{},geoshape:{},line:{},point:{},rect:{},rule:{color:"black"},square:{},text:{color:"black"},tick:s.s,trail:{},boxplot:{size:14,extent:1.5,box:{},median:{color:"white"},outliers:{},rule:{},ticks:null},errorbar:{center:"mean",rule:!0,ticks:!1},errorband:{band:{opacity:.3},borders:!1},scale:l.e,projection:{},axis:{},axisX:{},axisY:{},axisLeft:{},axisRight:{},axisTop:{},axisBottom:{},axisBand:{},legend:r.c,header:{titlePadding:10,labelPadding:10},headerColumn:{},headerRow:{},headerFacet:{},selection:d.b,style:{},title:{},facet:{spacing:c.a},repeat:{spacing:c.a},concat:{spacing:c.a}};function h(e){return Object(u.u)(Object(u.f)(p),e)}const g=["view",...s.h],m=["padding","facet","concat","repeat","numberFormat","timeFormat","countTitle","header","stack","scale","selection","invalidValues","overlay"],b=Object.assign({view:["width","height"]},s.p);function y(e){e=Object(u.f)(e);for(const t of m)delete e[t];if(e.axis)for(const t of a.a)delete e.axis[t];if(e.legend){for(const t of a.a)delete e.legend[t];for(const t of a.b)delete e.legend[t]}if(e.mark)for(const t of s.o)delete e.mark[t];for(const t of g){for(const i of s.o)delete e[t][i];const i=b[t];if(i)for(const n of i)delete e[t][n];v(e,t)}for(const t of Object(o.a)())delete e[t];v(e,"title","group-title");for(const t in e)Object(n.E)(e[t])&&0===Object(u.s)(e[t]).length&&delete e[t];return Object(u.s)(e).length>0?e:void 0}function v(e,t,i,n){const o="title"===t?Object(f.a)(e.title).mark:n?e[t][n]:e[t];"view"===t&&(i="cell");const a=Object.assign({},o,e.style[t]);Object(u.s)(a).length>0&&(e.style[i||t]=a),n||delete e[t]}},579:function(e,t,i){"use strict";i.d(t,"c",function(){return o}),i.d(t,"a",function(){return s}),i.d(t,"b",function(){return l});var n=i(5);const o={gradientHorizontalMaxLength:200,gradientHorizontalMinLength:100,gradientVerticalMaxLength:200,gradientVerticalMinLength:64},a={clipHeight:1,columnPadding:1,columns:1,cornerRadius:1,direction:1,fillColor:1,format:1,formatType:1,gradientLength:1,gradientOpacity:1,gradientStrokeColor:1,gradientStrokeWidth:1,gradientThickness:1,gridAlign:1,labelAlign:1,labelBaseline:1,labelColor:1,labelFont:1,labelFontSize:1,labelFontStyle:1,labelFontWeight:1,labelLimit:1,labelOffset:1,labelOpacity:1,labelOverlap:1,labelPadding:1,labelSeparation:1,offset:1,orient:1,padding:1,rowPadding:1,strokeColor:1,symbolDash:1,symbolDashOffset:1,symbolFillColor:1,symbolOffset:1,symbolOpacity:1,symbolSize:1,symbolStrokeColor:1,symbolStrokeWidth:1,symbolType:1,tickCount:1,tickMinStep:1,title:1,titleAlign:1,titleAnchor:1,titleBaseline:1,titleColor:1,titleFont:1,titleFontSize:1,titleFontStyle:1,titleFontWeight:1,titleLimit:1,titleOpacity:1,titleOrient:1,titlePadding:1,type:1,values:1,zindex:1},r=Object.assign({},a,{opacity:1,shape:1,stroke:1,fill:1,size:1,strokeWidth:1,encode:1}),s=Object(n.j)(a),l=Object(n.j)(r)},580:function(e,t,i){"use strict";i.d(t,"a",function(){return l});var n=i(15),o=i(182),a=i(5),r=i(781),s=i(67);class l extends s.a{constructor(e,t){super(e),this.transform=t}clone(){return new l(null,Object(a.f)(this.transform))}producedFields(){return new Set([this.transform.impute])}processSequence(e){const{start:t=0,stop:i,step:n}=e;return{signal:`sequence(${[t,i,...n?[n]:[]].join(",")})`}}static makeFromTransform(e,t){return new l(e,t)}static makeFromEncoding(e,t){const i=t.encoding,o=i.x,a=i.y;if(Object(n.l)(o)&&Object(n.l)(a)){const n=o.impute?o:a.impute?a:void 0;if(void 0===n)return;const s=o.impute?a:a.impute?o:void 0,{method:d,value:c,frame:f,keyvals:u}=n.impute,p=Object(r.b)(t.mark,i);return new l(e,Object.assign({impute:n.field,key:s.field},d?{method:d}:{},void 0!==c?{value:c}:{},f?{frame:f}:{},void 0!==u?{keyvals:u}:{},p.length?{groupby:p}:{}))}return null}hash(){return`Impute ${Object(a.o)(this.transform)}`}assemble(){const{impute:e,key:t,keyvals:i,method:n,groupby:a,value:r,frame:s=[null,null]}=this.transform,l=Object.assign({type:"impute",field:e,key:t},i?{keyvals:Object(o.h)(i)?this.processSequence(i):i}:{},{method:"value"},a?{groupby:a}:{},{value:null});let d;if(n&&"value"!==n){d=[Object.assign({type:"window",as:[`imputed_${e}_value`],ops:[n],fields:[e],frame:s,ignorePeers:!1},a?{groupby:a}:{}),{type:"formula",expr:`datum.${e} === null ? datum.imputed_${e}_value : datum.${e}`,as:e}]}else{d=[{type:"formula",expr:`datum.${e} === null ? ${r} : datum.${e}`,as:e}]}return[l,...d]}}},604:function(e,t,i){"use strict";i.d(t,"d",function(){return o}),i.d(t,"b",function(){return a}),i.d(t,"c",function(){return r}),i.d(t,"a",function(){return s});var n=i(5);const o={titleAlign:"align",titleAnchor:"anchor",titleAngle:"angle",titleBaseline:"baseline",titleColor:"color",titleFont:"font",titleFontSize:"fontSize",titleFontWeight:"fontWeight",titleLimit:"limit",titleOrient:"orient",titlePadding:"offset"},a={labelAlign:"align",labelAnchor:"anchor",labelAngle:"angle",labelColor:"color",labelFont:"font",labelFontSize:"fontSize",labelLimit:"limit",labelOrient:"orient",labelPadding:"offset"},r=Object(n.s)(o),s=Object(n.s)(a)},61:function(e,t,i){"use strict";i.d(t,"g",function(){return S}),i.d(t,"d",function(){return C}),i.d(t,"f",function(){return z}),i.d(t,"c",function(){return F}),i.d(t,"e",function(){return A}),i.d(t,"a",function(){return P}),i.d(t,"b",function(){return N});var n=i(57),o=i(1),a=i(19),r=i(113),s=i(15),l=i(18),d=i(41),c=i(158),f=i(526),u=i(765),p=i(182),h=i(5),g=i(83),m=i(379),b=i(443),y=i(315),v=i(380),_=i(771),w=i(772),x=i(1464),O=i(1465),j=i(1467),k=i(243),T=i(1468),D=i(94);class ${constructor(){this.nameMap={}}rename(e,t){this.nameMap[e]=t}has(e){return void 0!==this.nameMap[e]}get(e){for(;this.nameMap[e]&&e!==this.nameMap[e];)e=this.nameMap[e];return e}}function S(e){return e&&"unit"===e.type}function C(e){return e&&"facet"===e.type}function z(e){return e&&"repeat"===e.type}function F(e){return e&&"concat"===e.type}function A(e){return e&&"layer"===e.type}class P{constructor(e,t,i,n,a,r,s,l){this.type=t,this.parent=i,this.config=a,this.repeater=r,this.view=l,this.children=[],this.correctDataNames=(e=>(e.from&&e.from.data&&(e.from.data=this.lookupDataSource(e.from.data)),e.from&&e.from.facet&&e.from.facet.data&&(e.from.facet.data=this.lookupDataSource(e.from.facet.data)),e)),this.parent=i,this.config=a,this.repeater=r,this.name=e.name||n,this.title=Object(o.G)(e.title)?{text:e.title}:e.title,this.scaleNameMap=i?i.scaleNameMap:new $,this.projectionNameMap=i?i.projectionNameMap:new $,this.signalNameMap=i?i.signalNameMap:new $,this.data=e.data,this.description=e.description,this.transforms=Object(p.o)(e.transform||[]),this.layout=Object(c.f)(e)||Object(c.d)(e)?{}:Object(f.b)(e,t,a),this.component={data:{sources:i?i.component.data.sources:[],outputNodes:i?i.component.data.outputNodes:{},outputNodeRefCounts:i?i.component.data.outputNodeRefCounts:{},isFaceted:Object(c.b)(e)||i&&i.component.data.isFaceted&&!e.data},layoutSize:new D.a,layoutHeaders:{row:{},column:{},facet:{}},mark:null,resolve:Object.assign({scale:{},axis:{},legend:{}},s?Object(h.f)(s):{}),selection:null,scales:null,projection:null,axes:{},legends:{}}}get width(){return this.getSizeSignalRef("width")}get height(){return this.getSizeSignalRef("height")}initSize(e){const{width:t,height:i}=e;t&&this.component.layoutSize.set("width",t,!0),i&&this.component.layoutSize.set("height",i,!0)}parse(){this.parseScale(),this.parseLayoutSize(),this.renameTopLevelLayoutSizeSignal(),this.parseSelections(),this.parseProjection(),this.parseData(),this.parseAxesAndHeaders(),this.parseLegends(),this.parseMarkGroup()}parseScale(){Object(T.a)(this)}parseProjection(){Object(O.a)(this)}renameTopLevelLayoutSizeSignal(){"width"!==this.getName("width")&&this.renameSignal(this.getName("width"),"width"),"height"!==this.getName("height")&&this.renameSignal(this.getName("height"),"height")}parseLegends(){Object(w.b)(this)}assembleGroupStyle(){if("unit"===this.type||"layer"===this.type)return this.view&&this.view.style||"cell"}assembleEncodeFromView(e){const{style:t}=e,i=n.b(e,["style"]),o={};for(const e in i)if(i.hasOwnProperty(e)){const t=i[e];void 0!==t&&(o[e]={value:t})}return o}assembleGroupEncodeEntry(e){let t=void 0;return this.view&&(t=this.assembleEncodeFromView(this.view)),e||"unit"!==this.type&&"layer"!==this.type?t:Object.assign({width:this.getSizeSignalRef("width"),height:this.getSizeSignalRef("height")},t||{})}assembleLayout(){if(!this.layout)return;const e=this.layout,{spacing:t}=e,i=n.b(e,["spacing"]),{component:o,config:a}=this,r=Object(b.c)(o.layoutHeaders,a);return Object.assign({padding:t},this.assembleDefaultLayout(),i,r?{titleBand:r}:{})}assembleDefaultLayout(){return{}}assembleHeaderMarks(){const{layoutHeaders:e}=this.component;let t=[];for(const i of a.e)e[i].title&&t.push(Object(b.d)(this,i));for(const e of y.a)t=t.concat(Object(b.a)(this,e));return t}assembleAxes(){return Object(m.a)(this.component.axes,this.config)}assembleLegends(){return Object(_.a)(this)}assembleProjections(){return Object(x.a)(this)}assembleTitle(){const e=this.title||{},{encoding:t}=e,i=n.b(e,["encoding"]),o=Object.assign({},Object(u.a)(this.config.title).nonMark,i,t?{encode:{update:t}}:{});if(o.text)return Object(h.c)(["unit","layer"],this.type)?Object(h.c)(["middle",void 0],o.anchor)&&(o.frame=o.frame||"group"):o.anchor=o.anchor||"start",Object(h.s)(o).length>0?o:void 0}assembleGroup(e=[]){const t={};(e=e.concat(this.assembleSignals())).length>0&&(t.signals=e);const i=this.assembleLayout();i&&(t.layout=i),t.marks=[].concat(this.assembleHeaderMarks(),this.assembleMarks());const n=!this.parent||C(this.parent)?Object(j.a)(this):[];n.length>0&&(t.scales=n);const o=this.assembleAxes();o.length>0&&(t.axes=o);const a=this.assembleLegends();return a.length>0&&(t.legends=a),t}hasDescendantWithFieldOnChannel(e){for(const t of this.children)if(S(t)){if(t.channelHasField(e))return!0}else if(t.hasDescendantWithFieldOnChannel(e))return!0;return!1}getName(e){return Object(h.H)((this.name?this.name+"_":"")+e)}requestDataName(e){const t=this.getName(e),i=this.component.data.outputNodeRefCounts;return i[t]=(i[t]||0)+1,t}getSizeSignalRef(e){if(C(this.parent)){const t="width"===e?"x":"y",i=this.component.scales[t];if(i&&!i.merged){const e=i.get("type"),n=i.get("range");if(Object(d.g)(e)&&Object(g.f)(n)){const e=i.get("name"),n=Object(k.a)(this,t),o=Object(k.b)(n);if(o){const t=Object(s.D)({aggregate:"distinct",field:o},{expr:"datum"});return{signal:Object(v.b)(e,i,t)}}return l.e("Unknown field for ${channel}.  Cannot calculate view size."),null}}}return{signal:this.signalNameMap.get(this.getName(e))}}lookupDataSource(e){const t=this.component.data.outputNodes[e];return t?t.getSource():e}getSignalName(e){return this.signalNameMap.get(e)}renameSignal(e,t){this.signalNameMap.rename(e,t)}renameScale(e,t){this.scaleNameMap.rename(e,t)}renameProjection(e,t){this.projectionNameMap.rename(e,t)}scaleName(e,t){return t?this.getName(e):Object(a.D)(e)&&Object(a.H)(e)&&this.component.scales[e]||this.scaleNameMap.has(this.getName(e))?this.scaleNameMap.get(this.getName(e)):void 0}projectionName(e){return e?this.getName("projection"):this.component.projection&&!this.component.projection.merged||this.projectionNameMap.has(this.getName("projection"))?this.projectionNameMap.get(this.getName("projection")):void 0}getScaleComponent(e){if(!this.component.scales)throw new Error("getScaleComponent cannot be called before parseScale().  Make sure you have called parseScale or use parseUnitModelWithScale().");const t=this.component.scales[e];return t&&!t.merged?t:this.parent?this.parent.getScaleComponent(e):void 0}getSelectionComponent(e,t){let i=this.component.selection[e];if(!i&&this.parent&&(i=this.parent.getSelectionComponent(e,t)),!i)throw new Error(l.b.selectionNotFound(t));return i}}class N extends P{vgField(e,t={}){const i=this.fieldDef(e);if(i)return Object(s.D)(i,t)}reduceFieldDef(e,t,i){return Object(r.g)(this.getMapping(),(t,i,n)=>{const o=Object(s.d)(i);return o?e(t,o,n):t},t,i)}forEachFieldDef(e,t){Object(r.d)(this.getMapping(),(t,i)=>{const n=Object(s.d)(t);n&&e(n,i)},t)}}},62:function(e,t,i){"use strict";i.d(t,"b",function(){return s}),i.d(t,"e",function(){return l}),i.d(t,"d",function(){return d}),i.d(t,"c",function(){return c}),i.d(t,"a",function(){return f});var n=i(1),o=i(19),a=i(15),r=i(5);function s(e){return Object(n.A)(e)&&(e=Object(a.v)(e,void 0)),"bin"+Object(r.s)(e).map(t=>Object(r.H)(`_${t}_${e[t]}`)).join("")}function l(e){return!0===e||c(e)&&!e.binned}function d(e){return"binned"===e||c(e)&&e.binned}function c(e){return Object(n.E)(e)}function f(e){switch(e){case o.q:case o.c:case o.t:case o.b:case o.f:case o.u:case o.w:case o.o:case o.g:case o.v:case o.s:return 6;default:return 10}}},67:function(e,t,i){"use strict";i.d(t,"a",function(){return o}),i.d(t,"b",function(){return a});var n=i(5);class o{constructor(e,t){this.debugName=t,this._children=[],this._parent=null,e&&(this.parent=e)}clone(){throw new Error("Cannot clone node")}hash(){return void 0===this._hash&&(this._hash=Object(n.F)()),this._hash}producedFields(){return new Set}dependentFields(){return new Set}get parent(){return this._parent}set parent(e){this._parent=e,e&&e.addChild(this)}get children(){return this._children}numChildren(){return this._children.length}addChild(e,t){this._children.indexOf(e)>-1?console.warn("Attempt to add the same child twice."):void 0!==t?this._children.splice(t,0,e):this._children.push(e)}removeChild(e){const t=this._children.indexOf(e);return this._children.splice(t,1),t}remove(){let e=this._parent.removeChild(this);for(const t of this._children)t._parent=this._parent,this._parent.addChild(t,e++)}insertAsParentOf(e){const t=e.parent;t.removeChild(this),this.parent=t,e.parent=this}swapWithParent(){const e=this._parent,t=e.parent;for(const t of this._children)t.parent=e;this._children=[],e.removeChild(this),e.parent.removeChild(e),this.parent=t,e.parent=this}}class a extends o{constructor(e,t,i,n){super(e,t),this.type=i,this.refCounts=n,this._source=this._name=t,!this.refCounts||this._name in this.refCounts||(this.refCounts[this._name]=0)}clone(){const e=new this.constructor;return e.debugName="clone_"+this.debugName,e._source=this._source,e._name="clone_"+this._name,e.type=this.type,e.refCounts=this.refCounts,e.refCounts[e._name]=0,e}getSource(){return this.refCounts[this._name]++,this._source}isRequired(){return!!this.refCounts[this._name]}setSource(e){this._source=e}}},717:function(e,t,i){"use strict";i.d(t,"a",function(){return o});var n=i(578);function o(e,t){return void 0===t&&(t=Object(n.a)(e.config)),function(e,t={}){return a.map(e,{config:t})}(e,t)}const a=new(i(1454).a)},718:function(e,t,i){"use strict";function n(e){return void 0!==e.layer}i.d(t,"a",function(){return n})},73:function(e,t,i){"use strict";i.d(t,"a",function(){return c}),i.d(t,"f",function(){return f}),i.d(t,"d",function(){return u}),i.d(t,"e",function(){return p}),i.d(t,"c",function(){return h}),i.d(t,"j",function(){return g}),i.d(t,"b",function(){return y}),i.d(t,"l",function(){return v}),i.d(t,"k",function(){return _}),i.d(t,"i",function(){return w}),i.d(t,"g",function(){return x}),i.d(t,"h",function(){return O});var n=i(1),o=i(62),a=i(15),r=i(41),s=i(205),l=i(102),d=i(5);function c(e,t,i){for(const n of i){const i=u(n,t.markDef,t.config);void 0!==i&&(e[n]={value:i})}return e}function f(e){return[].concat(e.type,e.style||[])}function u(e,t,i,{skipGeneralMarkConfig:n=!1}={}){return Object(d.m)(p(e,t,i.style),i[t.type][e],n?void 0:i.mark[e])}function p(e,t,i){const n=f(t);let o;for(const t of n){const n=i[t],a=e;n&&void 0!==n[a]&&(o=n[a])}return o}function h(e,t,i,n){const s=g(e,t,n);if(Object(o.e)(e.bin)){return{signal:y(Object(a.D)(e,{expr:i}),Object(a.D)(e,{expr:i,binSuffix:"end"}),s,n)}}if("quantitative"===e.type)return{signal:`${m(Object(a.D)(e,{expr:i,binSuffix:"range"}),s)}`};if(Object(a.r)(e)){const o=Object(a.o)(e)&&e.scale&&e.scale.type===r.b.UTC;return{signal:v(Object(a.D)(e,{expr:i}),e.timeUnit,t,n.text.shortTimeLabels,n.timeFormat,o,!0)}}return{signal:`''+${Object(a.D)(e,{expr:i})}`}}function g(e,t,i){if(!Object(a.r)(e))return t||(e.type===l.d?i.numberFormat:void 0)}function m(e,t){return`format(${e}, "${t||""}")`}function b(e,t,i){return m(e,t||i.numberFormat)}function y(e,t,i,n){return`${e} === null || isNaN(${e}) ? "null" : ${b(e,i,n)} + " - " + ${b(t,i,n)}`}function v(e,t,i,n,o,a,r=!1){return!t||i?(i=i||o)||r?`${a?"utc":"time"}Format(${e}, '${i}')`:void 0:Object(s.b)(t,e,n,a)}function _(e,t){return(Object(n.z)(e)?e:[e]).reduce((e,i)=>(e.field.push(Object(a.D)(i,t)),e.order.push(i.sort||"ascending"),e),{field:[],order:[]})}function w(e,t){const i=[...e];return t.forEach(e=>{for(const t of i)if(Object(d.C)(t)===Object(d.C)(e))return;i.push(e)}),i}function x(e,t){return e!==t&&t?e?e+", "+t:t:e}function O(e,t){if(Object(n.z)(e.value)&&Object(n.z)(t.value))return{explicit:e.explicit,value:w(e.value,t.value)};if(!Object(n.z)(e.value)&&!Object(n.z)(t.value))return{explicit:e.explicit,value:x(e.value,t.value)};throw new Error("It should never reach here")}},76:function(e,t,i){"use strict";i.d(t,"c",function(){return f}),i.d(t,"d",function(){return u}),i.d(t,"a",function(){return p}),i.d(t,"b",function(){return h}),i.d(t,"e",function(){return g}),i.d(t,"f",function(){return b}),i.d(t,"i",function(){return y}),i.d(t,"h",function(){return v}),i.d(t,"g",function(){return _});var n=i(1),o=i(19),a=i(314),r=i(5),s=i(61),l=i(501),d=i(775),c=i(1458);const f="_store",u="_tuple",p="_modify",h="_selection_domain_",g="vlSelectionResolve",m={single:c.a,multi:d.a,interval:l.b};function b(e,t){const i=e.component.selection;for(const e in i)if(i.hasOwnProperty(e)){const n=i[e];t(n,m[n.type])}}function y(e){let t=Object(n.W)(e.name);const i=function(e){let t=e.parent;for(;t&&!Object(s.d)(t);)t=t.parent;return t}(e);if(i){const{facet:e}=i;for(const n of o.e)e[n]&&(t+=` + '__facet_${n}_' + (${Object(r.b)(i.vgField(n),"facet")})`)}return t}function v(e){let t=!1;return b(e,e=>{t=t||e.project.some(e=>e.field===a.a)}),t}function _(e){return e.signal.indexOf(h)>=0}},765:function(e,t,i){"use strict";i.d(t,"a",function(){return o});var n=i(57);function o(e){const{anchor:t,frame:i,offset:o,orient:a,color:r}=e,s=n.b(e,["anchor","frame","offset","orient","color"]);return{mark:Object.assign({},s,r?{fill:r}:{}),nonMark:Object.assign({},t?{anchor:t}:{},i?{frame:i}:{},o?{offset:o}:{},a?{orient:a}:{})}}},766:function(e,t,i){"use strict";i.d(t,"a",function(){return c});var n=i(57),o=i(18),a=i(304),r=i(187),s=i(718),l=i(486),d=i(253);class c{map(e,t){return Object(r.c)(e)?this.mapFacet(e,t):Object(l.a)(e)?this.mapRepeat(e,t):Object(a.c)(e)?this.mapHConcat(e,t):Object(a.d)(e)?this.mapVConcat(e,t):Object(a.b)(e)?this.mapConcat(e,t):this.mapLayerOrUnit(e,t)}mapLayerOrUnit(e,t){if(Object(s.a)(e))return this.mapLayer(e,t);if(Object(d.a)(e))return this.mapUnit(e,t);throw new Error(o.b.INVALID_SPEC)}mapLayer(e,t){return Object.assign({},e,{layer:e.layer.map(e=>this.mapLayerOrUnit(e,t))})}mapHConcat(e,t){return Object.assign({},e,{hconcat:e.hconcat.map(e=>this.map(e,t))})}mapVConcat(e,t){return Object.assign({},e,{vconcat:e.vconcat.map(e=>this.map(e,t))})}mapConcat(e,t){const{concat:i}=e,o=n.b(e,["concat"]);return Object.assign({},o,{concat:i.map(e=>this.map(e,t))})}mapFacet(e,t){return Object.assign({},e,{spec:this.map(e.spec,t)})}mapRepeat(e,t){return Object.assign({},e,{spec:this.map(e.spec,t)})}}},767:function(e,t,i){"use strict";i.d(t,"a",function(){return g});var n=i(1),o=i(199),a=i(19),r=i(113),s=i(15),l=i(18),d=i(37),c=i(41),f=i(5);const u={zero:1,center:1,normalize:1};const p=[d.b,d.a,d.j,d.g,d.c,d.k,d.f,d.l,d.m],h=[d.b,d.a];function g(e,t,i){const g=Object(d.u)(e)?e.type:e;if(!Object(f.c)(p,g))return null;const m=function(e){const t=e.x,i=e.y;if(Object(s.l)(t)&&Object(s.l)(i))if("quantitative"===t.type&&"quantitative"===i.type){if(t.stack)return"x";if(i.stack)return"y";if(!!t.aggregate!=!!i.aggregate)return t.aggregate?"x":"y"}else{if("quantitative"===t.type)return"x";if("quantitative"===i.type)return"y"}else{if(Object(s.l)(t)&&"quantitative"===t.type)return"x";if(Object(s.l)(i)&&"quantitative"===i.type)return"y"}}(t);if(!m)return null;const b=t[m],y=Object(s.q)(b)?Object(s.D)(b,{}):void 0,v="x"===m?"y":"x",_=t[v],w=Object(s.q)(_)?Object(s.D)(_,{}):void 0,x=a.m.reduce((e,i)=>{if("tooltip"!==i&&Object(r.a)(t,i)){const o=t[i];(Object(n.z)(o)?o:[o]).forEach(t=>{const n=Object(s.f)(t);if(n.aggregate)return;const o=Object(s.q)(n)?Object(s.D)(n,{}):void 0;(!o||o!==w&&o!==y)&&e.push({channel:i,fieldDef:n})})}return e},[]);if(0===x.length)return null;let O;return(O=void 0!==b.stack?b.stack:Object(f.c)(h,g)?Object(f.m)(i,"zero"):i)&&u[O]?(b.scale&&b.scale.type&&b.scale.type!==c.b.LINEAR&&l.e(l.b.cannotStackNonLinearScale(b.scale.type)),Object(r.a)(t,m===a.x?a.y:a.A)?(void 0!==b.stack&&l.e(l.b.cannotStackRangedMark(m)),null):(b.aggregate&&!Object(f.c)(o.b,b.aggregate)&&l.e(l.b.stackNonSummativeAggregate(b.aggregate)),{groupbyChannel:_?v:void 0,fieldChannel:m,impute:Object(d.v)(g),stackBy:x,offset:O})):null}},768:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(5),o=i(307),a=i(380),r=i(61);class s extends r.a{constructor(e,t,i,n,o,a,r){super(e,t,i,n,o,a,r)}parseData(){this.component.data=Object(o.b)(this),this.children.forEach(e=>{e.parseData()})}parseSelections(){this.component.selection={};for(const e of this.children)e.parseSelections(),Object(n.s)(e.component.selection).forEach(t=>{this.component.selection[t]=e.component.selection[t]})}parseMarkGroup(){for(const e of this.children)e.parseMarkGroup()}parseAxesAndHeaders(){for(const e of this.children)e.parseAxesAndHeaders()}assembleSelectionTopLevelSignals(e){return this.children.reduce((e,t)=>t.assembleSelectionTopLevelSignals(e),e)}assembleSignals(){return this.children.forEach(e=>e.assembleSignals()),[]}assembleLayoutSignals(){return this.children.reduce((e,t)=>[...e,...t.assembleLayoutSignals()],Object(a.a)(this))}assembleSelectionData(e){return this.children.reduce((e,t)=>t.assembleSelectionData(e),e)}assembleMarks(){return this.children.map(e=>{const t=e.assembleTitle(),i=e.assembleGroupStyle(),n=e.assembleGroupEncodeEntry(!1);return Object.assign({type:"group",name:e.getName("group")},t?{title:t}:{},i?{style:i}:{},n?{encode:{update:n}}:{},e.assembleGroup())})}}},769:function(e,t,i){"use strict";function n(e,t,i,n,o){const a=[..."band"===o?["axisBand"]:[],"x"===i?"axisX":"axisY",...n?["axis"+n.substr(0,1).toUpperCase()+n.substr(1)]:[],"axis"];for(const i of a)if(t[i]&&void 0!==t[i][e])return t[i][e]}i.d(t,"a",function(){return n})},770:function(e,t,i){"use strict";i.d(t,"a",function(){return o});var n=i(189);function o(e){const t=Object(n.g)(e),i=new Set;return t.visit(e=>{"MemberExpression"===e.type&&function e(t){return"MemberExpression"===t.object.type?e(t.object):"datum"===t.object.name}(e)&&i.add(function e(t){const i=[];return"Identifier"===t.type?[t.name]:"Literal"===t.type?[t.value]:("MemberExpression"===t.type&&(i.push(...e(t.object)),i.push(...e(t.property))),i)}(e).slice(1).join("."))}),i}},771:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(5),o=i(772);function a(e){const t=e.component.legends,i={};for(const a of Object(n.s)(t)){const r=e.getScaleComponent(a),s=Object(n.C)(r.domains);if(i[s])for(const e of i[s]){Object(o.a)(e,t[a])||i[s].push(t[a])}else i[s]=[t[a].clone()]}return Object(n.l)(Object(n.G)(i)).map(e=>{const t=e.combine();if(t.encode&&t.encode.symbols){const e=t.encode.symbols.update;!e.fill||"transparent"===e.fill.value||e.stroke||t.stroke||(e.stroke={value:"transparent"}),t.fill&&delete e.fill}return t})}},772:function(e,t,i){"use strict";i.d(t,"b",function(){return m}),i.d(t,"a",function(){return v});var n=i(19),o=i(15),a=i(579),r=i(102),s=i(5),l=i(73),d=i(773),c=i(61),f=i(382),u=i(94),p=i(1463),h=i(985),g=i(319);function m(e){Object(c.g)(e)?e.component.legends=function(e){const{encoding:t}=e;return[n.b,n.f,n.u,n.w,n.t,n.s,n.o,n.g,n.v].reduce((i,l)=>{const c=t[l];return!e.legend(l)||!e.getScaleComponent(l)||Object(o.l)(c)&&l===n.s&&c.type===r.a||(i[l]=function(e,t){const i=e.fieldDef(t),o=e.legend(t),r=new p.a({},function(e,t){const i=e.scaleName(n.b);if("color"===t)return e.markDef.filled?{fill:i}:{stroke:i};return{[t]:e.scaleName(t)}}(e,t));for(const n of a.a){const a=y(n,o,t,e);if(void 0!==a){const t=b(a,n,o,i);(t||void 0===e.config.legend[n])&&r.set(n,a,t)}}const l=o.encoding||{},c=["labels","legend","title","symbols","gradient"].reduce((n,o)=>{const a=Object(d.a)(l[o]||{},e),c=h[o]?h[o](i,a,e,t,r):a;return void 0!==c&&Object(s.s)(c).length>0&&(n[o]={update:c}),n},{});Object(s.s)(c).length>0&&r.set("encode",c,!!o.encoding);return r}(e,l)),i},{})}(e):e.component.legends=function(e){const{legends:t,resolve:i}=e.component;for(const n of e.children)m(n),Object(s.s)(n.component.legends).forEach(o=>{i.legend[o]=Object(f.b)(e.component.resolve,o),"shared"===i.legend[o]&&(t[o]=v(t[o],n.component.legends[o]),t[o]||(i.legend[o]="independent",delete t[o]))});return Object(s.s)(t).forEach(t=>{for(const n of e.children)n.component.legends[t]&&"shared"===i.legend[t]&&delete n.component.legends[t]}),t}(e)}function b(e,t,i,n){switch(t){case"values":return!!i.values;case"title":if("title"===t&&e===n.title)return!0}return e===i[t]}function y(e,t,i,n){const{encoding:a,mark:r}=n,d=Object(o.f)(a[i]),c=n.config.legend,{timeUnit:f}=d,u=n.getScaleComponent(i).get("type");switch(e){case"format":return Object(l.j)(d,t.format,n.config);case"title":return Object(o.z)(d,n.config,{allowDisabling:!0})||void 0;case"type":return Object(g.f)({legend:t,channel:i,timeUnit:f,scaleType:u,alwaysReturn:!1});case"direction":return Object(g.e)({legend:t,legendConfig:c,timeUnit:f,channel:i,scaleType:u});case"labelOverlap":return Object(s.m)(t.labelOverlap,g.b(u));case"gradientLength":return Object(s.m)(t.gradientLength,c.gradientLength,g.a({model:n,legend:t,legendConfig:c,channel:i,scaleType:u}));case"symbolType":return Object(s.m)(t.symbolType,g.c(r));case"values":return g.g(t,d)}return t[e]}function v(e,t){if(!e)return t.clone();const i=e.getWithExplicit("orient"),n=t.getWithExplicit("orient");if(i.explicit&&n.explicit&&i.value!==n.value)return;let o=!1;for(const i of a.b){const n=Object(u.e)(e.getWithExplicit(i),t.getWithExplicit(i),i,"legend",(e,t)=>{switch(i){case"symbolType":return _(e,t);case"title":return Object(l.h)(e,t);case"type":return o=!0,Object(u.d)("symbol")}return Object(u.b)(e,t,i,"legend")});e.setWithExplicit(i,n)}return o&&(((e.implicit||{}).encode||{}).gradient&&Object(s.e)(e.implicit,["encode","gradient"]),((e.explicit||{}).encode||{}).gradient&&Object(s.e)(e.explicit,["encode","gradient"])),e}function _(e,t){return"circle"===t.value?t:e}},773:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(5),o=i(51);function a(e,t){return Object(n.s)(e).reduce((i,n)=>{const a=e[n];return Object.assign({},i,Object(o.m)(t,a,n,e=>({value:e.value})))},{})}},774:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(1),o=i(267),a=i(5),r=i(145);function s(e,t,i){return Object(a.t)(t,t=>Object(n.G)(t)?t:Object(o.f)(t)?Object(r.d)(e,t.selection,i):Object(o.a)(t))}},775:function(e,t,i){"use strict";i.d(t,"b",function(){return l});var n=i(1),o=i(76),a=i(5),r=i(145),s=i(381);function l(e,t){const i=t.name,l=i+s.a,d=t.project,c="(item().isVoronoi ? datum.datum : datum)",f=d.map(t=>{const i=e.fieldDef(t.channel);return i&&i.bin?`[${Object(a.b)(e.vgField(t.channel,{}),c)}, `+`${Object(a.b)(e.vgField(t.channel,{binSuffix:"end"}),c)}]`:`${Object(a.b)(t.field,c)}`}).join(", "),u=`unit: ${Object(o.i)(e)}, fields: ${l}, values`,p=[{name:i+o.d,on:[{events:t.events,update:`datum && item().mark.marktype !== 'group' ? {${u}: [${f}]} : null`,force:!0}]}];if(t.init){const e=t.init.map(e=>{const t=Object(r.b)(e);return`{${u}: ${t}}`});p.push({name:`${i}_init`,init:`modify(${Object(n.W)(t.name+o.c)}, [${e}])`})}return p}const d={signals:l,modifyExpr:(e,t)=>{return t.name+o.d+", "+("global"===t.resolve?"null":`{unit: ${Object(o.i)(e)}}`)}};t.a=d},776:function(e,t,i){"use strict";var n=i(18),o=i(37),a=i(51);const r={has:e=>"interval"!==e.type&&e.nearest,marks:(e,t,i)=>{const{x:r,y:s}=t.project.has,l=e.mark;if(Object(o.v)(l))return n.e(n.b.nearestNotSupportForContinuous(l)),i;const d={name:e.getName("voronoi"),type:"path",from:{data:e.getName("marks")},encode:{update:Object.assign({fill:{value:"transparent"},strokeWidth:{value:.35},stroke:{value:"transparent"},isVoronoi:{value:!0}},Object(a.k)(e,{reactiveGeom:!0}))},transform:[{type:"voronoi",x:{expr:r||!r&&!s?"datum.datum.x || 0":"0"},y:{expr:s||!r&&!s?"datum.datum.y || 0":"0"},size:[e.getSizeSignalRef("width"),e.getSizeSignalRef("height")]}]};let c=0,f=!1;return i.forEach((t,i)=>{const n=t.name||"";n===e.component.mark[0].name?c=i:n.indexOf("voronoi")>=0&&(f=!0)}),f||i.splice(c+1,0,d),i}};t.a=r},777:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(5),o=i(67);class a extends o.a{constructor(e,t){super(e),this.transform=t,this.transform=Object(n.f)(t);const{flatten:i,as:o=[]}=this.transform;this.transform.as=i.map((e,t)=>o[t]||e)}clone(){return new a(this.parent,Object(n.f)(this.transform))}producedFields(){return new Set(this.transform.as)}hash(){return`FlattenTransform ${Object(n.o)(this.transform)}`}assemble(){const{flatten:e,as:t}=this.transform;return{type:"flatten",fields:e,as:t}}}},778:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(5),o=i(67);class a extends o.a{constructor(e,t){super(e),this.transform=t,this.transform=Object(n.f)(t);const i=this.transform.as||[void 0,void 0];this.transform.as=[i[0]||"key",i[1]||"value"]}clone(){return new a(null,Object(n.f)(this.transform))}producedFields(){return new Set(this.transform.as)}hash(){return`FoldTransform ${Object(n.o)(this.transform)}`}assemble(){const{fold:e,as:t}=this.transform;return{type:"fold",fields:e,as:t}}}},779:function(e,t,i){"use strict";i.d(t,"a",function(){return s});var n=i(19),o=i(102),a=i(5),r=i(67);class s extends r.a{constructor(e,t,i,n){super(e),this.fields=t,this.geojson=i,this.signal=n}clone(){return new s(null,Object(a.f)(this.fields),this.geojson,this.signal)}static parseAll(e,t){let i=0;if([[n.k,n.i],[n.l,n.j]].forEach(n=>{const o=n.map(e=>t.channelHasField(e)?t.fieldDef(e).field:void 0);(o[0]||o[1])&&(e=new s(e,o,null,t.getName(`geojson_${i++}`)))}),t.channelHasField(n.s)){const a=t.fieldDef(n.s);a.type===o.a&&(e=new s(e,null,a.field,t.getName(`geojson_${i++}`)))}return e}assemble(){return Object.assign({type:"geojson"},this.fields?{fields:this.fields}:{},this.geojson?{geojson:this.geojson}:{},{signal:this.signal})}}},780:function(e,t,i){"use strict";i.d(t,"a",function(){return r});var n=i(19),o=i(5),a=i(67);class r extends a.a{constructor(e,t,i,n){super(e),this.projection=t,this.fields=i,this.as=n}clone(){return new r(null,this.projection,Object(o.f)(this.fields),Object(o.f)(this.as))}static parseAll(e,t){return t.projectionName()?([[n.k,n.i],[n.l,n.j]].forEach(i=>{const o=i.map(e=>t.channelHasField(e)?t.fieldDef(e).field:void 0),a=i[0]===n.l?"2":"";(o[0]||o[1])&&(e=new r(e,t.projectionName(),o,[t.getName("x"+a),t.getName("y"+a)]))}),e):e}assemble(){return{type:"geopoint",projection:this.projection,fields:this.fields,as:this.as}}}},781:function(e,t,i){"use strict";i.d(t,"a",function(){return w}),i.d(t,"b",function(){return j});var n=i(1),o=i(99),a=i(113),r=i(15),s=i(37),l=i(125),d=i(5),c=i(73),f=i(1471),u=i(1472),p=i(1473),h=i(990),g=i(832),m=i(1474),b=i(1475),y=i(1476),v=i(1477);const _={area:f.a,bar:u.a,circle:g.a,geoshape:p.a,line:h.a,point:g.b,rect:m.a,rule:b.a,square:g.c,text:y.a,tick:v.a,trail:h.b};function w(e){return Object(d.c)([s.f,s.a,s.n],e.mark)?function(e){const t=j(e.mark,e.encoding),i=O(e,{fromPrefix:t.length>0?x:""});return t.length>0?[{name:e.getName("pathgroup"),type:"group",from:{facet:{name:x+e.requestDataName(o.a),data:e.requestDataName(o.a),groupby:t}},encode:{update:{width:{field:{group:"width"}},height:{field:{group:"height"}}}},marks:i}]:i}(e):O(e)}const x="faceted_path_";function O(e,t={fromPrefix:""}){const i=e.mark,f=Object(d.m)(e.markDef.clip,function(e){const t=e.getScaleComponent("x"),i=e.getScaleComponent("y");return!!(t&&t.get("domainRaw")||i&&i.get("domainRaw"))}(e)),u=Object(c.f)(e.markDef),p=e.encoding.key,h=function(e){const{encoding:t,stack:i,mark:o,markDef:f,config:u}=e,p=t.order;if(!(!Object(n.z)(p)&&Object(r.t)(p)&&Object(d.r)(p.value)||!p&&Object(d.r)(f.order)||Object(d.r)(Object(c.d)("order",f,u)))){if((Object(n.z)(p)||Object(r.l)(p))&&!i)return Object(c.k)(p,{expr:"datum"});if(Object(s.v)(o)){const i=t["horizontal"===f.orient?"y":"x"];if(Object(r.l)(i)){const t=i.sort;return{field:Object(l.d)(t)?Object(r.D)({aggregate:Object(a.e)(e.encoding)?t.op:void 0,field:t.field},{expr:"datum"}):Object(r.D)(i,{binSuffix:e.stack&&e.stack.impute?"mid":void 0,expr:"datum"}),order:"descending"}}}}}(e),g=_[i].postEncodingTransform?_[i].postEncodingTransform(e):null;return[Object.assign({name:e.getName("marks"),type:_[i].vgMark},f?{clip:!0}:{},u?{style:u}:{},p?{key:{field:p.field}}:{},h?{sort:h}:{},{from:{data:t.fromPrefix+e.requestDataName(o.a)},encode:{update:_[i].encodeEntry(e)}},g?{transform:g}:{})]}function j(e,t){return Object(d.s)(t).reduce((i,o)=>{switch(o){case"x":case"y":case"order":case"href":case"x2":case"y2":case"latitude":case"longitude":case"latitude2":case"longitude2":case"text":case"shape":case"tooltip":return i;case"detail":case"key":const a=t[o];return(Object(n.z)(a)||Object(r.l)(a))&&(Object(n.z)(a)?a:[a]).forEach(e=>{e.aggregate||i.push(Object(r.D)(e,{}))}),i;case"size":if("trail"===e)return i;case"color":case"fill":case"stroke":case"opacity":case"fillOpacity":case"strokeOpacity":case"strokeWidth":const s=Object(r.f)(t[o]);return s&&!s.aggregate&&i.push(Object(r.D)(s,{})),i;default:throw new Error(`Bug: Channel ${o} unimplemented for line mark`)}},[])}},782:function(e,t,i){"use strict";i.d(t,"b",function(){return T}),i.d(t,"a",function(){return D});var n=i(1),o=i(19),a=i(113),r=i(15),s=i(18),l=i(41),d=i(125),c=i(187),f=i(5),u=i(83),p=i(378),h=i(783),g=i(202),m=i(307),b=i(443),y=i(197),v=i(315),_=i(1480),w=i(308),x=i(61),O=i(786),j=i(243),k=i(145);function T(e,t,i){return Object(r.D)(t,Object.assign({suffix:`by_${Object(r.D)(e)}`},i||{}))}class D extends x.b{constructor(e,t,i,n,o){super(e,"facet",t,i,o,n,e.resolve),this.child=Object(p.a)(e.spec,this,this.getName("child"),void 0,n,o,!1),this.children=[this.child];const a=Object(O.b)(e.facet,n);this.facet=this.initFacet(a)}initFacet(e){return Object(c.b)(e)?Object(a.g)(e,(e,t,i)=>Object(f.c)([o.q,o.c],i)?void 0===t.field?(s.e(s.b.emptyFieldDef(t,i)),e):(e[i]=Object(r.u)(t,i),e):(s.e(s.b.incompatibleChannel(i,"facet")),e),{}):{facet:Object(r.u)(e,"facet")}}channelHasField(e){return!!this.facet[e]}fieldDef(e){return this.facet[e]}parseData(){this.component.data=Object(m.b)(this),this.child.parseData()}parseLayoutSize(){Object(w.a)(this)}parseSelections(){this.child.parseSelections(),this.component.selection=this.child.component.selection}parseMarkGroup(){this.child.parseMarkGroup()}parseAxesAndHeaders(){this.child.parseAxesAndHeaders(),Object(_.a)(this)}assembleSelectionTopLevelSignals(e){return this.child.assembleSelectionTopLevelSignals(e)}assembleSignals(){return this.child.assembleSignals(),[]}assembleSelectionData(e){return this.child.assembleSelectionData(e)}getHeaderLayoutMixins(){const e={};for(const t of o.e)for(const i of v.b){const n=this.component.layoutHeaders[t],o=n[i],{facetFieldDef:a}=n;if(a){const i=Object(y.c)("titleOrient",a,this.config,t);if(Object(f.c)(["right","bottom"],i)){const n=Object(y.a)(t,i);e.titleAnchor=e.titleAnchor||{},e.titleAnchor[n]="end"}}if(o&&o[0]){const o="row"===t?"height":"width",a="header"===i?"headerBand":"footerBand";"facet"===t||this.child.component.layoutSize.get(o)||(e[a]=e[a]||{},e[a][t]=.5),n.title&&(e.offset=e.offset||{},e.offset["row"===t?"rowTitle":"columnTitle"]=10)}}return e}assembleDefaultLayout(){const{column:e,row:t}=this.facet,i=e?this.columnDistinctSignal():t?1:void 0;let n="all";return(t||"independent"!==this.component.resolve.scale.x)&&(e||"independent"!==this.component.resolve.scale.y)||(n="none"),Object.assign({},this.getHeaderLayoutMixins(),i?{columns:i}:{},{bounds:"full",align:n})}assembleLayoutSignals(){return this.child.assembleLayoutSignals()}columnDistinctSignal(){if(!(this.parent&&this.parent instanceof D)){return{signal:`length(data('${this.getName("column_domain")}'))`}}}assembleGroup(e){return this.parent&&this.parent instanceof D?Object.assign({},this.channelHasField("column")?{encode:{update:{columns:{field:Object(r.D)(this.facet.column,{prefix:"distinct"})}}}}:{},super.assembleGroup(e)):super.assembleGroup(e)}getCardinalityAggregateForChild(){const e=[],t=[],i=[];if(this.child instanceof D){if(this.child.channelHasField("column")){const n=Object(r.D)(this.child.facet.column);e.push(n),t.push("distinct"),i.push(`distinct_${n}`)}}else for(const n of["x","y"]){const o=this.child.component.scales[n];if(o&&!o.merged){const a=o.get("type"),r=o.get("range");if(Object(l.g)(a)&&Object(u.f)(r)){const o=Object(j.a)(this.child,n),a=Object(j.b)(o);a?(e.push(a),t.push("distinct"),i.push(`distinct_${a}`)):s.e("Unknown field for ${channel}.  Cannot calculate view size.")}}}return{fields:e,ops:t,as:i}}assembleFacet(){const{name:e,data:t}=this.component.data.facetRoot,{row:i,column:a}=this.facet,{fields:s,ops:l,as:c}=this.getCardinalityAggregateForChild(),f=[];for(const e of o.e){const t=this.facet[e];if(t){f.push(Object(r.D)(t));const{sort:o}=t;if(Object(d.d)(o)){const{field:e,op:n=d.a}=o,r=T(t,o);i&&a?(s.push(r),l.push("max"),c.push(r)):(s.push(e),l.push(n),c.push(r))}else if(Object(n.z)(o)){const i=Object(g.b)(t,e);s.push(i),l.push("max"),c.push(i)}}}const u=!!i&&!!a;return Object.assign({name:e,data:t,groupby:f},u||s.length?{aggregate:Object.assign({},u?{cross:u}:{},s.length?{fields:s,ops:l,as:c}:{})}:{})}facetSortFields(e){const{facet:t}=this,i=t[e];return i?Object(d.d)(i.sort)?[T(i,i.sort,{expr:"datum"})]:Object(n.z)(i.sort)?[Object(g.b)(i,e,{expr:"datum"})]:[Object(r.D)(i,{expr:"datum"})]:[]}facetSortOrder(e){const{facet:t}=this,i=t[e];if(i){const{sort:e}=i;return[(Object(d.d)(e)?e.order:!Object(n.z)(e)&&e)||"ascending"]}return[]}assembleLabelTitle(){const{facet:e,config:t}=this;if(e.facet)return Object(b.b)(e.facet,"facet",t);const i={row:["top","bottom"],column:["left","right"]};for(const n of v.a)if(e[n]){const o=Object(y.c)("labelOrient",e[n],t,n);if(Object(f.c)(i[n],o))return Object(b.b)(e[n],n,t)}}assembleMarks(){const{child:e}=this,t=this.component.data.facetRoot,i=Object(h.a)(t),n=e.assembleGroupEncodeEntry(!1),a=this.assembleLabelTitle()||e.assembleTitle(),r=e.assembleGroupStyle();return[Object.assign({name:this.getName("cell"),type:"group"},a?{title:a}:{},r?{style:r}:{},{from:{facet:this.assembleFacet()},sort:{field:Object(f.l)(o.e.map(e=>this.facetSortFields(e))),order:Object(f.l)(o.e.map(e=>this.facetSortOrder(e)))}},i.length>0?{data:i}:{},n?{encode:{update:n}}:{},e.assembleGroup(Object(k.a)(this,[])))]}getMapping(){return this.facet}}},783:function(e,t,i){"use strict";i.d(t,"a",function(){return k}),i.d(t,"b",function(){return T});var n=i(99),o=i(338),a=i(339),r=i(202),s=i(67),l=i(340),d=i(502),c=i(777),f=i(778),u=i(246),p=i(779),h=i(780),g=i(528),m=i(580),b=i(333),y=i(784),v=i(785),_=i(195),w=i(393),x=i(332),O=i(430);function j(e){let t=0;return function i(j,k){j instanceof _.a&&!Object(n.e)(j.data)&&(e.push(k),k={name:null,source:k.name,transform:[]});if(j instanceof u.a&&(j.parent instanceof _.a&&!k.source?(k.format=Object.assign({},k.format||{},{parse:j.assembleFormatParse()}),k.transform.push(...j.assembleTransforms(!0))):k.transform.push(...j.assembleTransforms())),j instanceof l.a)return k.name||(k.name=`data_${t++}`),!k.source||k.transform.length>0?(e.push(k),j.data=k.name):j.data=k.source,void j.assemble().forEach(t=>e.push(t));(j instanceof d.a||j instanceof r.a||j instanceof h.a||j instanceof p.a||j instanceof o.a||j instanceof y.a||j instanceof O.a||j instanceof b.a||j instanceof f.a||j instanceof c.a||j instanceof g.a||j instanceof v.a)&&k.transform.push(j.assemble()),(j instanceof a.a||j instanceof x.a||j instanceof m.a||j instanceof w.a)&&(k.transform=k.transform.concat(j.assemble())),j instanceof s.b&&(k.source&&0===k.transform.length?j.setSource(k.source):j.parent instanceof s.b?j.setSource(k.name):(k.name||(k.name=`data_${t++}`),j.setSource(k.name),1===j.numChildren()&&(e.push(k),k={name:null,source:k.name,transform:[]})));switch(j.numChildren()){case 0:j instanceof s.b&&(!k.source||k.transform.length>0)&&e.push(k);break;case 1:i(j.children[0],k);break;default:k.name||(k.name=`data_${t++}`);let n=k.name;!k.source||k.transform.length>0?e.push(k):n=k.source,j.children.forEach(e=>{i(e,{name:null,source:n,transform:[]})})}}}function k(e){const t=[],i=j(t);return e.children.forEach(t=>i(t,{source:e.name,name:null,transform:[]})),t}function T(e,t){const i=[],n=j(i);let o=0;e.sources.forEach(e=>{e.hasName()||(e.dataName=`source_${o++}`);const t=e.assemble();n(e,t)}),i.forEach(e=>{0===e.transform.length&&delete e.transform});let a=0;for(let e=0;e<i.length;e++){const t=i[e];0!==(t.transform||[]).length||t.source||i.splice(a++,0,i.splice(e,1)[0])}for(const t of i)for(const i of t.transform||[])"lookup"===i.type&&(i.from=e.outputNodes[i.from].getSource());for(const e of i)e.name in t&&(e.values=t[e.name]);return i}},784:function(e,t,i){"use strict";i.d(t,"a",function(){return d});var n=i(1),o=i(18),a=i(5),r=i(67),s=i(307),l=i(195);class d extends r.a{constructor(e,t,i){super(e),this.transform=t,this.secondary=i}clone(){return new d(null,Object(a.f)(this.transform),this.secondary)}static make(e,t,i,n){const o=t.component.data.sources;let a=Object(s.a)(i.from.data,o);a||(a=new l.a(i.from.data),o.push(a));const c=t.getName(`lookup_${n}`),f=new r.b(a,c,"lookup",t.component.data.outputNodeRefCounts);return t.component.data.outputNodes[c]=f,new d(e,i,f.getSource())}producedFields(){return new Set(this.transform.from.fields||(this.transform.as instanceof Array?this.transform.as:[this.transform.as]))}hash(){return`Lookup ${Object(a.o)({transform:this.transform,secondary:this.secondary})}`}assemble(){let e;if(this.transform.from.fields)e=Object.assign({values:this.transform.from.fields},this.transform.as?{as:this.transform.as instanceof Array?this.transform.as:[this.transform.as]}:{});else{let t=this.transform.as;Object(n.G)(t)||(o.e(o.b.NO_FIELDS_NEEDS_AS),t="_lookup"),e={as:[t]}}return Object.assign({type:"lookup",from:this.secondary,key:this.transform.from.key,fields:[this.transform.lookup]},e,this.transform.default?{default:this.transform.default}:{})}}},785:function(e,t,i){"use strict";i.d(t,"a",function(){return a});var n=i(5),o=i(67);class a extends o.a{constructor(e,t){super(e),this.transform=t}clone(){return new a(null,Object(n.f)(this.transform))}hash(){return`SampleTransform ${Object(n.o)(this.transform)}`}assemble(){return{type:"sample",size:this.transform.sample}}}},786:function(e,t,i){"use strict";i.d(t,"b",function(){return d}),i.d(t,"a",function(){return c});var n=i(57),o=i(1),a=i(15),r=i(18),s=i(125),l=i(187);function d(e,t){return Object(l.b)(e)?h(e,t):u(e,t)}function c(e,t){return h(e,t)}function f(e,t){return Object(a.n)(e.field)?e.field.repeat in t?Object.assign({},e,{field:t[e.field.repeat]}):void r.e(r.b.noSuchRepeatedValue(e.field.repeat)):e}function u(e,t){if(void 0!==(e=f(e,t))){if(null===e)return null;if(Object(a.p)(e)&&Object(s.d)(e.sort)){const i=f(e.sort,t);e=Object.assign({},e,i?{sort:i}:{})}return e}}function p(e,t){if(!Object(a.l)(e)){if(Object(a.g)(e)){const i=u(e.condition,t);if(i)return Object.assign({},e,{condition:i});{const{condition:t}=e;return n.b(e,["condition"])}}return e}{const i=u(e,t);if(i)return i;if(Object(a.i)(e))return{condition:e.condition}}}function h(e,t){const i={};for(const n in e)if(e.hasOwnProperty(n)){const a=e[n];if(Object(o.z)(a))i[n]=a.map(e=>p(e,t)).filter(e=>e);else{const e=p(a,t);void 0!==e&&(i[n]=e)}}return i}},787:function(e,t,i){"use strict";i.d(t,"b",function(){return m}),i.d(t,"a",function(){return y});var n=i(403),o=i(62),a=i(19),r=i(15),s=i(5),l=i(73),d=i(773),c=i(382),f=i(94),u=i(1482),p=i(769),h=i(1483),g=i(237);function m(e){return a.p.reduce((t,i)=>(e.component.scales[i]&&e.axis(i)&&(t[i]=[x(i,e)]),t),{})}const b={bottom:"top",top:"bottom",left:"right",right:"left"};function y(e){const{axes:t,resolve:i}=e.component,n={top:0,bottom:0,right:0,left:0};for(const n of e.children){n.parseAxesAndHeaders();for(const o of Object(s.s)(n.component.axes))i.axis[o]=Object(c.b)(e.component.resolve,o),"shared"===i.axis[o]&&(t[o]=v(t[o],n.component.axes[o]),t[o]||(i.axis[o]="independent",delete t[o]))}for(const o of[a.x,a.z]){for(const a of e.children)if(a.component.axes[o]){if("independent"===i.axis[o]){t[o]=(t[o]||[]).concat(a.component.axes[o]);for(const e of a.component.axes[o]){const{value:t,explicit:i}=e.getWithExplicit("orient");if(n[t]>0&&!i){const i=b[t];n[t]>n[i]&&e.set("orient",i,!1)}n[t]++}}delete a.component.axes[o]}if("independent"===i.axis[o]&&t[o]&&t[o].length>1)for(const e of t[o])e.get("grid")&&!e.explicit.grid&&(e.implicit.grid=!1)}}function v(e,t){if(!e)return t.map(e=>e.clone());{if(e.length!==t.length)return;const i=e.length;for(let n=0;n<i;n++){const i=e[n],o=t[n];if(!!i!=!!o)return;if(i&&o){const t=i.getWithExplicit("orient"),a=o.getWithExplicit("orient");if(t.explicit&&a.explicit&&t.value!==a.value)return;e[n]=_(i,o)}}}return e}function _(e,t){for(const i of n.c){const n=Object(f.e)(e.getWithExplicit(i),t.getWithExplicit(i),i,"axis",(e,t)=>{switch(i){case"title":return Object(l.h)(e,t);case"gridScale":return{explicit:e.explicit,value:Object(s.m)(e.value,t.value)}}return Object(f.b)(e,t,i,"axis")});e.setWithExplicit(i,n)}return e}function w(e,t){const i="x"===t?"x2":"y2",n=e.fieldDef(t),o=e.fieldDef(i),a=n?n.title:void 0,r=o?o.title:void 0;return a&&r?Object(l.g)(a,r):a||(r||(void 0!==a?a:void 0!==r?r:void 0))}function x(e,t){const i=t.axis(e),a=new u.a;n.c.forEach(d=>{const c=function(e,t,i,a){const d=a.fieldDef(i),c=g.h(a,t,i,d),f=Object(s.m)(t.orient,g.i(i));switch(e){case"scale":return a.scaleName(i);case"gridScale":return g.g(a,i);case"format":return Object(l.j)(d,t.format,a.config);case"grid":if(Object(o.d)(a.fieldDef(i).bin))return!1;{const e=a.getScaleComponent(i).get("type");return Object(s.m)(t.grid,g.a(e,d))}case"labelAlign":return Object(s.m)(t.labelAlign,g.b(c,f));case"labelAngle":return c;case"labelBaseline":return Object(s.m)(t.labelBaseline,g.c(c,f));case"labelFlush":return Object(s.m)(t.labelFlush,g.d(d,i));case"labelOverlap":{const e=a.getScaleComponent(i).get("type");return Object(s.m)(t.labelOverlap,g.e(d,e))}case"orient":return f;case"tickCount":{const e=a.getScaleComponent(i).get("type"),n=a.scaleName(i),o="x"===i?"width":"y"===i?"height":void 0,r=o?a.getSizeSignalRef(o):void 0;return Object(s.m)(t.tickCount,g.f({fieldDef:d,scaleType:e,size:r,scaleName:n,specifiedAxis:t}))}case"title":const n="x"===i?"x2":"y2",u=a.fieldDef(n);return Object(s.m)(t.title,w(a,i),Object(l.i)([Object(r.A)(d)],u?[Object(r.A)(u)]:[]));case"values":return g.j(t,a,d,i)}return Object(n.d)(e)?t[e]:void 0}(d,i,e,t);if(void 0!==c){const n=function(e,t,i,n,o){switch(t){case"titleAngle":case"labelAngle":return e===Object(s.v)(i[t]);case"values":return!!i.values;case"encode":return!!i.encoding||!!i.labelAngle;case"title":if(e===w(n,o))return!0}return e===i[t]}(c,d,i,t,e),o=Object(p.a)(d,t.config,e,a.get("orient"),t.getScaleComponent(e).get("type"));n||void 0===o?a.set(d,c,n):Object(s.c)(["grid","orient"],d)&&o&&a.set(d,o,!1)}});const c=i.encoding||{},f=n.a.reduce((i,n)=>{if(!a.hasAxisPart(n))return i;const o=Object(d.a)(c[n]||{},t),r="labels"===n?h.a(t,e,o,a.get("orient")):o;return void 0!==r&&Object(s.s)(r).length>0&&(i[n]={update:r}),i},{});return Object(s.s)(f).length>0&&a.set("encode",f,!!i.encoding||void 0!==i.labelAngle),a}},788:function(e,t,i){"use strict";i.d(t,"a",function(){return _});var n=i(19),o=i(113),a=i(15),r=i(37),s=i(767),l=i(5),d=i(379),c=i(787),f=i(307),u=i(380),p=i(308),h=i(1484),g=i(781),m=i(61),b=i(786),y=i(145),v=i(1485);class _ extends m.b{constructor(e,t,i,n={},a,l,d){super(e,"unit",t,i,l,a,void 0,e.view),this.fit=d,this.specifiedScales={},this.specifiedAxes={},this.specifiedLegends={},this.specifiedProjection={},this.selection={},this.children=[],this.initSize(Object.assign({},n,e.width?{width:e.width}:{},e.height?{height:e.height}:{}));const c=Object(r.u)(e.mark)?e.mark.type:e.mark,f=this.encoding=Object(o.f)(Object(b.a)(e.encoding||{},a),c);this.markDef=Object(h.a)(e.mark,f,l),this.stack=Object(s.a)(c,f,this.config.stack),this.specifiedScales=this.initScales(c,f),this.specifiedAxes=this.initAxes(f),this.specifiedLegends=this.initLegend(f),this.specifiedProjection=e.projection,this.selection=e.selection}get hasProjection(){const{encoding:e}=this,t=this.mark===r.e,i=e&&n.h.some(t=>Object(a.l)(e[t]));return t||i}scaleDomain(e){const t=this.specifiedScales[e];return t?t.domain:void 0}axis(e){return this.specifiedAxes[e]}legend(e){return this.specifiedLegends[e]}initScales(e,t){return n.r.reduce((e,i)=>{let n,o;const r=t[i];return Object(a.l)(r)?(n=r,o=r.scale):Object(a.g)(r)&&(n=r.condition,o=r.condition.scale),n&&(e[i]=o||{}),e},{})}initAxes(e){return[n.x,n.z].reduce((t,i)=>{const o=e[i];if(Object(a.l)(o)||i===n.x&&Object(a.l)(e.x2)||i===n.z&&Object(a.l)(e.y2)){const e=Object(a.l)(o)?o.axis:null;null!==e&&(t[i]=Object.assign({},e))}return t},{})}initLegend(e){return n.n.reduce((t,i)=>{const o=e[i];if(o){const e=Object(a.l)(o)?o.legend:Object(a.g)(o)?o.condition.legend:null;null!==e&&!1!==e&&Object(n.L)(i)&&(t[i]=Object.assign({},e))}return t},{})}parseData(){this.component.data=Object(f.b)(this)}parseLayoutSize(){Object(p.e)(this)}parseSelections(){this.component.selection=Object(v.a)(this,this.selection)}parseMarkGroup(){this.component.mark=Object(g.a)(this)}parseAxesAndHeaders(){this.component.axes=Object(c.b)(this)}assembleSelectionTopLevelSignals(e){return Object(y.f)(this,e)}assembleSignals(){return[...Object(d.c)(this),...Object(y.i)(this,[])]}assembleSelectionData(e){return Object(y.g)(this,e)}assembleLayout(){return null}assembleLayoutSignals(){return Object(u.a)(this)}assembleMarks(){let e=this.component.mark||[];return this.parent&&Object(m.e)(this.parent)||(e=Object(y.h)(this,e)),e.map(this.correctDataNames)}getMapping(){return this.encoding}toSpec(e,t){const i=Object(l.f)(this.encoding);let n;return n={mark:this.markDef,encoding:i},e||(n.config=Object(l.f)(this.config)),t||(n.data=Object(l.f)(this.data)),n}get mark(){return this.markDef.type}channelHasField(e){return o.a(this.encoding,e)}fieldDef(e){const t=this.encoding[e];return Object(a.f)(t)}}},79:function(e,t,i){"use strict";i.d(t,"c",function(){return y}),i.d(t,"h",function(){return v}),i.d(t,"i",function(){return _}),i.d(t,"e",function(){return w}),i.d(t,"b",function(){return x}),i.d(t,"d",function(){return O}),i.d(t,"a",function(){return j}),i.d(t,"g",function(){return T}),i.d(t,"l",function(){return D}),i.d(t,"k",function(){return $}),i.d(t,"f",function(){return S}),i.d(t,"j",function(){return C});var n=i(1),o=i(199),a=i(62),r=i(19),s=i(113),l=i(15),d=i(18),c=i(37),f=i(41),u=i(102),p=i(5),h=i(73);function g(e){const{channel:t,channelDef:i,mark:n,scale:a}=e,r=T(e);return Object(l.l)(i)&&!Object(o.d)(i.aggregate)&&a&&Object(f.h)(a.get("type"))&&!1===a.get("zero")?m({fieldDef:i,channel:t,mark:n,ref:r}):r}function m({fieldDef:e,channel:t,mark:i,ref:n}){return Object(c.v)(i)?n:[b(e,t),n]}function b(e,t){const i=y(e,!0),n="x"===Object(r.B)(t)?{value:0}:{field:{group:"height"}};return Object.assign({test:i},n)}function y(e,t=!0){return`${e=Object(n.G)(e)?e:Object(l.D)(e,{expr:"datum"})} ${t?"===":"!=="} null ${t?"||":"&&"} ${t?"":"!"}isNaN(${e})`}function v(e){const{channel:t,channelDef:i,scaleName:n,stack:o,offset:a}=e;return Object(l.l)(i)&&o&&t===o.fieldChannel?O(i,n,{suffix:"end"},{offset:a}):g(e)}function _({channel:e,channelDef:t,channel2Def:i,scaleName:n,scale:o,stack:a,mark:r,offset:s,defaultRef:d}){return Object(l.l)(t)&&a&&e.charAt(0)===a.fieldChannel.charAt(0)?O(t,n,{suffix:"start"},{offset:s}):g({channel:e,channelDef:i,scaleName:n,scale:o,stack:a,mark:r,offset:s,defaultRef:d})}function w(e,t){const i=t[e+"Offset"];if(i)return i}function x({channel:e,fieldDef:t,scaleName:i,mark:n,side:o,offset:a}){return m({fieldDef:t,channel:e,mark:n,ref:O(t,i,{binSuffix:"start"===o?void 0:"end"},a?{offset:a}:{})})}function O(e,t,i,n){const o=Object.assign({},t?{scale:t}:{},{field:Object(l.D)(e,i)});if(n){const{offset:e,band:t}=n;return Object.assign({},o,e?{offset:e}:{},t?{band:t}:{})}return o}function j(e,t=!0){return{scale:e,band:t}}function k({scaleName:e,fieldDef:t,fieldDef2:i,offset:n}){const o=Object(l.D)(t,{expr:"datum"}),a=void 0!==i?Object(l.D)(i,{expr:"datum"}):Object(l.D)(t,{binSuffix:"end",expr:"datum"});return Object.assign({signal:`scale("${e}", (${o} + ${a}) / 2)`},n?{offset:n}:{})}function T({channel:e,channelDef:t,channel2Def:i,scaleName:o,scale:s,stack:c,offset:h,defaultRef:g}){if(t){if(Object(l.l)(t)){if(Object(l.s)(t)){if(Object(a.e)(t.bin))return Object(p.c)([r.x,r.z],e)&&t.type===u.d?c&&c.impute?O(t,o,{binSuffix:"mid"},{offset:h}):k({scaleName:o,fieldDef:t,offset:h}):O(t,o,Object(l.a)(t,e)?{binSuffix:"range"}:{},{offset:h});if(Object(a.d)(t.bin)){if(Object(l.l)(i))return k({scaleName:o,fieldDef:t,fieldDef2:i,offset:h});{const t=e===r.x?r.y:r.A;d.e(d.b.channelRequiredForBinned(t))}}}if(s){const e=s.get("type");if(Object(f.g)(e))return O(t,o,{binSuffix:"range"},"band"===e?{band:.5,offset:h}:{offset:h})}return O(t,o,{},{offset:h})}if(Object(l.t)(t)){const i=t.value,n=h?{offset:h}:{};return Object(p.c)(["x","x2"],e)&&"width"===i?Object.assign({field:{group:"width"}},n):Object(p.c)(["y","y2"],e)&&"height"===i?Object.assign({field:{group:"height"}},n):Object.assign({value:i},n)}}return Object(n.C)(g)?g():g}function D(e,t,{reactiveGeom:i}){const o=[],a={};function d(s,d){const c=Object(r.B)(d);d!==c&&(s=Object.assign({},s,{type:e[c].type}));const f=Object(l.z)(s,t,{allowDisabling:!1}),u=$(s,t,i?"datum.datum":"datum").signal;a[f]||o.push(`${Object(n.W)(f)}: ${u}`),a[f]=!0}return Object(s.d)(e,(e,t)=>{Object(l.l)(e)?d(e,t):Object(l.g)(e)&&d(e.condition,t)}),o.length?{signal:`{${o.join(", ")}}`}:void 0}function $(e,t,i="datum"){if(e){if(Object(l.t)(e))return{value:e.value};if(Object(l.s)(e))return Object(h.c)(e,Object(l.c)(e),i,t)}}function S(e){return Object.assign({},e,{mult:.5})}function C({markDef:e,config:t,defaultRef:i,channel:o,scaleName:a,scale:s,mark:l,checkBarAreaWithoutZero:c}){return()=>{const u=Object(r.B)(o),g=Object(p.m)(e[o],Object(h.d)(o,e,t));if(void 0!==g)return{value:g};if(Object(n.G)(i)){if(a){const e=s.get("type");if(Object(p.c)([f.b.LOG,f.b.TIME,f.b.UTC],e))!c||"bar"!==l&&"area"!==l||d.e(d.b.nonZeroScaleUsedWithLengthMark(l,u,{scaleType:e}));else{if(s.domainDefinitelyIncludesZero)return{scale:a,value:0};!c||"bar"!==l&&"area"!==l||d.e(d.b.nonZeroScaleUsedWithLengthMark(l,u,{zeroFalse:!1===s.explicit.zero}))}}return"zeroOrMin"===i?"x"===u?{value:0}:{field:{group:"height"}}:"x"===u?{field:{group:"width"}}:{value:0}}return i}}},83:function(e,t,i){"use strict";i.d(t,"e",function(){return a}),i.d(t,"f",function(){return r}),i.d(t,"c",function(){return s}),i.d(t,"d",function(){return l}),i.d(t,"b",function(){return d}),i.d(t,"a",function(){return c});var n=i(1),o=i(5);function a(e){return!!e.signal}function r(e){return!!e.step}function s(e){return!Object(n.z)(e)&&("fields"in e&&!("data"in e))}function l(e){return!Object(n.z)(e)&&("fields"in e&&"data"in e)}function d(e){return!Object(n.z)(e)&&("field"in e&&"data"in e)}const c=Object(o.j)({opacity:1,fill:1,fillOpacity:1,stroke:1,strokeCap:1,strokeWidth:1,strokeOpacity:1,strokeDash:1,strokeDashOffset:1,strokeJoin:1,strokeMiterLimit:1,size:1,shape:1,interpolate:1,tension:1,orient:1,align:1,baseline:1,text:1,dir:1,dx:1,dy:1,ellipsis:1,limit:1,radius:1,theta:1,angle:1,font:1,fontSize:1,fontWeight:1,fontStyle:1,cursor:1,href:1,tooltip:1,cornerRadius:1,x:1,y:1,x2:1,y2:1})},830:function(e,t,i){"use strict";i.d(t,"a",function(){return n}),i.d(t,"b",function(){return o});const n=["shortTimeLabels"],o=["gradientHorizontalMaxLength","gradientHorizontalMinLength","gradientVerticalMaxLength","gradientVerticalMinLength"]},831:function(e,t,i){"use strict";i.d(t,"b",function(){return r}),i.d(t,"a",function(){return l});var n=i(1),o=i(18);function a(e){return Object(n.G)(e)?{type:e}:e||{}}function r(e,t,i=!0){const n=Object.assign({type:"pad"},a(t),a(e));return"fit"===n.type&&(i||(o.e(o.b.FIT_NON_SINGLE),n.type="pad")),n}const s=["background","padding"];function l(e){return s.reduce((t,i)=>(e&&void 0!==e[i]&&(t[i]=e[i]),t),{})}},832:function(e,t,i){"use strict";i.d(t,"b",function(){return s}),i.d(t,"a",function(){return l}),i.d(t,"c",function(){return d});var n=i(73),o=i(51),a=i(79);function r(e,t){const{config:i,markDef:r,width:s,height:l}=e;return Object.assign({},o.b(e,{size:"include",orient:"ignore"}),o.h("x",e,a.f(s)),o.h("y",e,a.f(l)),o.g("size",e,{defaultValue:Object(n.d)("size",r,i)}),function(e,t,i){if(i)return{shape:{value:i}};return o.g("shape",e,{defaultValue:Object(n.d)("shape",e.markDef,t)})}(e,i,t))}const s={vgMark:"symbol",encodeEntry:e=>r(e)},l={vgMark:"symbol",encodeEntry:e=>r(e,"circle")},d={vgMark:"symbol",encodeEntry:e=>r(e,"square")}},94:function(e,t,i){"use strict";i.d(t,"a",function(){return a}),i.d(t,"c",function(){return r}),i.d(t,"d",function(){return s}),i.d(t,"f",function(){return l}),i.d(t,"b",function(){return d}),i.d(t,"e",function(){return c});var n=i(18),o=i(5);class a{constructor(e={},t={}){this.explicit=e,this.implicit=t}clone(){return new a(Object(o.f)(this.explicit),Object(o.f)(this.implicit))}combine(){return Object.assign({},this.explicit,this.implicit)}get(e){return Object(o.m)(this.explicit[e],this.implicit[e])}getWithExplicit(e){return void 0!==this.explicit[e]?{explicit:!0,value:this.explicit[e]}:void 0!==this.implicit[e]?{explicit:!1,value:this.implicit[e]}:{explicit:!1,value:void 0}}setWithExplicit(e,t){void 0!==t.value&&this.set(e,t.value,t.explicit)}set(e,t,i){return delete this[i?"implicit":"explicit"][e],this[i?"explicit":"implicit"][e]=t,this}copyKeyFromSplit(e,t){void 0!==t.explicit[e]?this.set(e,t.explicit[e],!0):void 0!==t.implicit[e]&&this.set(e,t.implicit[e],!1)}copyKeyFromObject(e,t){void 0!==t[e]&&this.set(e,t[e],!0)}copyAll(e){for(const t of Object(o.s)(e.combine())){const i=e.getWithExplicit(t);this.setWithExplicit(t,i)}}}function r(e){return{explicit:!0,value:e}}function s(e){return{explicit:!1,value:e}}function l(e){return(t,i,n,o)=>{const a=e(t.value,i.value);return a>0?t:a<0?i:d(t,i,n,o)}}function d(e,t,i,o){return e.explicit&&t.explicit&&n.e(n.b.mergeConflictingProperty(i,o,e.value,t.value)),e}function c(e,t,i,n,a=d){return void 0===e||void 0===e.value?t:e.explicit&&!t.explicit?e:t.explicit&&!e.explicit?t:Object(o.C)(e.value)===Object(o.C)(t.value)?e:a(e,t,i,n)}},985:function(e,t,i){"use strict";i.r(t),i.d(t,"symbols",function(){return p}),i.d(t,"gradient",function(){return h}),i.d(t,"labels",function(){return g});var n=i(1),o=i(19),a=i(15),r=i(37),s=i(41),l=i(5),d=i(73),c=i(51),f=i(319);function u(e,t,i){const n=t.getScaleComponent(i).get("type");return Object(l.m)(e.get("type"),Object(f.d)({channel:i,scaleType:n,alwaysReturn:!0}))}function p(e,t,i,a,s){if("symbol"!==u(s,i,a))return;let f=Object.assign({},Object(d.a)({},i,r.d),c.e(i));switch(i.mark){case r.b:case r.m:case r.l:f.shape={value:"square"};break;case r.c:case r.k:f.shape={value:i.mark};break;case r.g:case r.f:case r.e:case r.a:}const{markDef:p,encoding:h,config:g}=i,y=p.filled,v=m(h.opacity)||p.opacity;if(f.fill)if("fill"===a||y&&a===o.b)delete f.fill;else if(f.fill.field)s.get("symbolFillColor")?delete f.fill:(f.fill={value:g.legend.symbolBaseFillColor||"black"},f.fillOpacity={value:v||1});else if(Object(n.z)(f.fill)){const e=b(h.fill||h.color)||p.fill||y&&p.color;e&&(f.fill={value:e})}if(f.stroke)if("stroke"===a||!y&&a===o.b)delete f.stroke;else if(f.stroke.field)delete f.stroke;else if(Object(n.z)(f.stroke)){const e=Object(l.m)(b(h.stroke||h.color),p.stroke,y?p.color:void 0);e&&(f.stroke={value:e})}if(a!==o.s){const e=b(h.shape)||p.shape;e&&(f.shape={value:e})}return a!==o.o&&v&&(f.opacity={value:v}),f=Object.assign({},f,t),Object(l.s)(f).length>0?f:void 0}function h(e,t,i,n,o){if("gradient"!==u(o,i,n))return;let a={};const r=m(i.encoding.opacity)||i.markDef.opacity;return r&&(a.opacity={value:r}),a=Object.assign({},a,t),Object(l.s)(a).length>0?a:void 0}function g(e,t,i,n,o){const r=i.legend(n),c=i.config;let f={};if(Object(a.r)(e)){const o=i.getScaleComponent(n).get("type")===s.b.UTC,a=Object(d.l)("datum.value",e.timeUnit,r.format,c.legend.shortTimeLabels,c.timeFormat,o);t=Object.assign({},a?{text:{signal:a}}:{},t)}return f=Object.assign({},f,t),Object(l.s)(f).length>0?f:void 0}function m(e){return y(e,(e,t)=>Math.max(e,t.value))}function b(e){return y(e,(e,t)=>Object(l.m)(e,t.value))}function y(e,t){return Object(a.h)(e)?(Object(n.z)(e.condition)?e.condition:[e.condition]).reduce(t,e.value):Object(a.t)(e)?e.value:void 0}},986:function(e,t,i){"use strict";i.d(t,"a",function(){return o});var n=i(94);class o extends n.a{constructor(e,t,i,n){super(Object.assign({},t),{name:e}),this.specifiedProjection=t,this.size=i,this.data=n,this.merged=!1}}},987:function(e,t,i){"use strict";i.d(t,"a",function(){return n});i(5),i(195);function n(e){for(const t of e){for(const e of t.children)if(e.parent!==t)return console.error("Dataflow graph is inconsistent.",t,e),!1;if(!n(t.children))return!1}return!0}},988:function(e,t,i){"use strict";i.d(t,"a",function(){return r});var n=i(1),o=i(5),a=i(94);class r extends a.a{constructor(e,t){super({},{name:e}),this.merged=!1,this.domains=[],this.setWithExplicit("type",t)}get domainDefinitelyIncludesZero(){if(!1!==this.get("zero"))return!0;const e=this.domains;return!!Object(n.z)(e)&&Object(o.B)(e,e=>Object(n.z)(e)&&2===e.length&&e[0]<=0&&e[1]>=0)}}},989:function(e,t,i){"use strict";i.d(t,"a",function(){return h}),i.d(t,"b",function(){return g});var n=i(1),o=i(62),a=i(19),r=i(15),s=i(18),l=i(41),d=i(5),c=i(61),f=i(94),u=i(270),p=i(1469);function h(e,t){Object(c.g)(e)?function(e,t){const i=e.component.scales;Object(d.s)(i).forEach(c=>{const f=e.specifiedScales[c],p=i[c],h=e.getScaleComponent(c),g=e.fieldDef(c),m=e.config,b=f[t],y=h.get("type"),v=Object(l.o)(y,t),_=Object(l.c)(c,t);if(void 0!==b&&(v?_&&s.e(_):s.e(s.b.scalePropertyNotWorkWithScaleType(y,t,c))),v&&void 0===_)if(void 0!==b)p.copyKeyFromObject(t,f);else{const i=function(e,t,i,s,c,f,p,h,g,m){const b=m.scale;switch(e){case"bins":return function(e,t,i){const n=t.bin;if(Object(o.e)(n)){const i=e.getName(Object(r.D)(t,{suffix:"bins"}));return new u.a(()=>e.getSignalName(i))}if(Object(o.d)(n)&&Object(o.c)(n)&&void 0!==n.step)return{step:n.step};return}(t,s);case"interpolate":return function(e){if(Object(d.c)([a.b,a.f,a.u],e))return"hcl";return}(i);case"nice":return function(e,t,i){if(i.bin||d.c([l.b.TIME,l.b.UTC],e))return;return!!d.c([a.x,a.z],t)||void 0}(c,i,s);case"padding":return function(e,t,i,n,o,r){if(d.c([a.x,a.z],e)){if(Object(l.h)(t)){if(void 0!==i.continuousPadding)return i.continuousPadding;const{type:t,orient:a}=o;if("bar"===t&&!n.bin&&("vertical"===a&&"x"===e||"horizontal"===a&&"y"===e))return r.continuousBandSize}if(t===l.b.POINT)return i.pointPadding}return}(i,c,b,s,g,m.bar);case"paddingInner":return function(e,t,i,n){if(void 0!==e)return;if(d.c([a.x,a.z],t)){const{bandPaddingInner:e,barBandPaddingInner:t,rectBandPaddingInner:o}=n;return Object(d.m)(e,"bar"===i?t:o)}return}(f,i,g.type,b);case"paddingOuter":return function(e,t,i,n,o,r){if(void 0!==e)return;if(d.c([a.x,a.z],t)&&i===l.b.BAND){const{bandPaddingOuter:e,barBandPaddingOuter:t,rectBandPaddingOuter:i}=r;return Object(d.m)(e,"bar"===n?t:i,o/2)}return}(f,i,c,g.type,p,b);case"reverse":return function(e,t){if(Object(l.f)(e)&&"descending"===t)return!0;return}(c,s.sort);case"zero":return function(e,t,i,o,r){if(i&&"unaggregated"!==i&&Object(l.f)(r)){if(Object(n.z)(i)){const e=i[0],t=i[i.length-1];if(e<=0&&t>=0)return!0}return!1}if("size"===e&&"quantitative"===t.type&&!Object(l.i)(r))return!0;if(!t.bin&&d.c([a.x,a.z],e)){const{orient:t,type:i}=o;return!Object(d.c)(["bar","area","line","trail"],i)||!("horizontal"===t&&"y"===e||"vertical"===t&&"x"===e)}return!1}(i,s,h,g,c)}return b[e]}(t,e,c,g,h.get("type"),h.get("padding"),h.get("paddingInner"),f.domain,e.markDef,m);void 0!==i&&p.set(t,i,!1)}})}(e,t):m(e,t)}function g(e){Object(c.g)(e)?Object(p.a)(e):m(e,"range")}function m(e,t){const i=e.component.scales;for(const i of e.children)"range"===t?g(i):h(i,t);Object(d.s)(i).forEach(n=>{let o;for(const i of e.children){const e=i.component.scales[n];if(e){const i=e.getWithExplicit(t);o=Object(f.e)(o,i,t,"scale",Object(f.f)((e,i)=>{switch(t){case"range":return e.step&&i.step?e.step-i.step:0}return 0}))}}i[n].setWithExplicit(t,o)})}},99:function(e,t,i){"use strict";function n(e){return!!e.url}function o(e){return!!e.values}function a(e){return!!e.name&&!n(e)&&!o(e)}i.d(t,"e",function(){return n}),i.d(t,"c",function(){return o}),i.d(t,"d",function(){return a}),i.d(t,"a",function(){return r}),i.d(t,"b",function(){return s});const r="main",s="raw"},990:function(e,t,i){"use strict";i.d(t,"a",function(){return a}),i.d(t,"b",function(){return r});var n=i(51),o=i(79);const a={vgMark:"line",encodeEntry:e=>{const{width:t,height:i}=e;return Object.assign({},n.b(e,{size:"ignore",orient:"ignore"}),n.h("x",e,o.f(t)),n.h("y",e,o.f(i)),n.g("size",e,{vgChannel:"strokeWidth"}),n.f(e))}},r={vgMark:"trail",encodeEntry:e=>{const{width:t,height:i}=e;return Object.assign({},n.b(e,{size:"include",orient:"ignore"}),n.h("x",e,o.f(t)),n.h("y",e,o.f(i)),n.g("size",e),n.f(e))}}}}]);
//# sourceMappingURL=vega-lite.js.map